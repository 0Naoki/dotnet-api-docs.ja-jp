<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="230ccdaa372490a255772449e9c71e08f0f2b63e" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52207551" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClientScriptManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ClientScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClientScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientScriptManager sealed" />
  <TypeSignature Language="F#" Value="type ClientScriptManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eb889-101">Web アプリケーションのクライアント スクリプトを管理するためのメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="eb889-101">Defines methods for managing client scripts in Web applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-102"><xref:System.Web.UI.ClientScriptManager>クラスは、Web アプリケーションに追加のクライアント スクリプトの管理に使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-102">The <xref:System.Web.UI.ClientScriptManager> class is used to manage client scripts and add them to Web applications.</span></span> <span data-ttu-id="eb889-103">参照を取得することができます、<xref:System.Web.UI.ClientScriptManager>クラスから、<xref:System.Web.UI.Page.ClientScript%2A>のプロパティ、<xref:System.Web.UI.Page>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eb889-103">You can get a reference to the <xref:System.Web.UI.ClientScriptManager> class from the <xref:System.Web.UI.Page.ClientScript%2A> property of the <xref:System.Web.UI.Page> object.</span></span>  
  
 <span data-ttu-id="eb889-104">できるスクリプトを追加するクライアント Web ページに宣言によってページの HTML マークアップにスクリプトを含めることで。</span><span class="sxs-lookup"><span data-stu-id="eb889-104">You can add a client script to a Web page declaratively by including the script in the HTML markup of the page.</span></span> <span data-ttu-id="eb889-105">ただし、クライアント スクリプトを動的に追加することが必要な場合があります。</span><span class="sxs-lookup"><span data-stu-id="eb889-105">However, there are situations when adding client script dynamically is needed.</span></span> <span data-ttu-id="eb889-106">スクリプトを動的に追加するには、使用、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッド、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド、または<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>メソッドは、スクリプトを追加するタイミングと方法に応じて。</span><span class="sxs-lookup"><span data-stu-id="eb889-106">To add a script dynamically, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, or the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method, depending on when and how you want to add the script.</span></span> <span data-ttu-id="eb889-107">詳細については、次を参照してください。[方法: 追加クライアント スクリプトに動的に ASP.NET Web Pages を](https://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)します。</span><span class="sxs-lookup"><span data-stu-id="eb889-107">For more information, see [How to: Add Client Script Dynamically to ASP.NET Web Pages](https://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666).</span></span>  
  
 <span data-ttu-id="eb889-108"><xref:System.Web.UI.ClientScriptManager>キーによって一意に識別するスクリプト クラス<xref:System.String>と<xref:System.Type>します。</span><span class="sxs-lookup"><span data-stu-id="eb889-108">The <xref:System.Web.UI.ClientScriptManager> class uniquely identifies scripts by a key <xref:System.String> and a <xref:System.Type>.</span></span> <span data-ttu-id="eb889-109">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-109">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-110">スクリプトの種類を使用して、ページ上で使用可能性のある別のユーザー コントロールからのようなスクリプトの混乱を回避するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="eb889-110">Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.</span></span>  
  
 <span data-ttu-id="eb889-111"><xref:System.Web.UI.ClientScriptManager>ポストバックを実行せず、クライアントからサーバー コードを実行する必要がある場合の状況でのクライアント コールバックを呼び出すクラスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-111">The <xref:System.Web.UI.ClientScriptManager> class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback.</span></span> <span data-ttu-id="eb889-112">これは、サーバーに、帯域外のコールバックの実行と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="eb889-112">This is referred to as performing an out-of-band callback to the server.</span></span> <span data-ttu-id="eb889-113">クライアントのコールバックでは、クライアント スクリプト関数は、ASP.NET Web ページに非同期要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="eb889-113">In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page.</span></span> <span data-ttu-id="eb889-114">Web ページは、コールバックを処理する通常のライフ サイクルの修正バージョンを実行します。</span><span class="sxs-lookup"><span data-stu-id="eb889-114">The Web page runs a modified version of its normal life cycle to process the callback.</span></span> <span data-ttu-id="eb889-115">使用して、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが呼び出されると、クライアント関数への参照を取得するサーバー イベントに対するクライアント コールバックを開始します。</span><span class="sxs-lookup"><span data-stu-id="eb889-115">Use the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event.</span></span> <span data-ttu-id="eb889-116">詳細については、次を参照してください。[ポストバックなしクライアント コールバックの実装](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)します。</span><span class="sxs-lookup"><span data-stu-id="eb889-116">For more information, see [Implementing Client Callbacks Without Postbacks](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb889-117">ECMAScript がクライアントで有効にする必要があるとドキュメント オブジェクト モデル (DOM) をサポートしない古いブラウザーでスクリプト コールバックが動作しません。</span><span class="sxs-lookup"><span data-stu-id="eb889-117">Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client.</span></span> <span data-ttu-id="eb889-118">ブラウザーがコールバックをサポートしているかを確認するには、使用、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>プロパティからアクセスできる、 <xref:System.Web.HttpRequest.Browser%2A> ASP.NET 組み込みのプロパティ<xref:System.Web.HttpContext.Request%2A>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eb889-118">To check if the browser supports callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property, which is accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the ASP.NET intrinsic <xref:System.Web.HttpContext.Request%2A> object.</span></span>  
  
 <span data-ttu-id="eb889-119">使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドと<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>クライアント ポストバック イベントを定義するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-119">Use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method and the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method to define a client postback event.</span></span> <span data-ttu-id="eb889-120">これらのメソッドは、呼び出されるとすると、ページにポストバックするサーバー、クライアント スクリプトの機能を有効にします。</span><span class="sxs-lookup"><span data-stu-id="eb889-120">These methods enable client script functions, when invoked, to cause the server to post back to the page.</span></span> <span data-ttu-id="eb889-121">クライアント ポストバック イベントは、Web ページがクライアント ポストバック イベントを処理する通常のライフ サイクルを完了することで、クライアントのコールバックと異なります。</span><span class="sxs-lookup"><span data-stu-id="eb889-121">A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb889-122">使用する場合、<xref:System.Web.UI.WebControls.Button>コントロールと<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティに設定されて`false`を使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドをクライアントに返すポストバック イベントを<xref:System.Web.UI.WebControls.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="eb889-122">If you are using a <xref:System.Web.UI.WebControls.Button> control and the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is set to `false`, then you can use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method to return the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="eb889-123"><xref:System.Web.UI.WebControls.Button.OnClientClick%2A>のプロパティ、<xref:System.Web.UI.WebControls.Button>コントロール、<xref:System.Web.UI.WebControls.ImageButton>コントロール、および<xref:System.Web.UI.WebControls.LinkButton>コントロールは、クライアント スクリプトを実行するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-123">The <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control, <xref:System.Web.UI.WebControls.ImageButton> control, and <xref:System.Web.UI.WebControls.LinkButton> control can be used to run client script.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-124">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>のメソッド、<xref:System.Web.UI.ClientScriptManager>クラス。</span><span class="sxs-lookup"><span data-stu-id="eb889-124">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class.</span></span> <span data-ttu-id="eb889-125">2 つのクライアント スクリプトは、ページで定義されている: `PopupScript`、ページが読み込まれるときに警告メッセージが表示されますおよび`ButtonClickScript`、HTML ボタンのクライアントのハンドラーを定義する`onClick`イベント。</span><span class="sxs-lookup"><span data-stu-id="eb889-125">Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" />
    <related type="Article" href="https://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa"><span data-ttu-id="eb889-126">ASP.NET Web Pages でクライアント スクリプト</span><span class="sxs-lookup"><span data-stu-id="eb889-126">Client Script in ASP.NET Web Pages</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-127">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-127">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCallbackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-128">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-128">Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eb889-129">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-129">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="eb889-130">このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb889-130">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-131">クライアント スクリプトからサーバーに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="eb889-131">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="eb889-132"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</span><span class="sxs-lookup"><span data-stu-id="eb889-132"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="eb889-133">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-133">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="eb889-134">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</span><span class="sxs-lookup"><span data-stu-id="eb889-134">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="eb889-135">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-135">The result of the script is passed back to the client event handler.</span></span></param>
        <summary><span data-ttu-id="eb889-136">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-136">Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</span></span> <span data-ttu-id="eb889-137">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、およびコンテキストが含まれます。</span><span class="sxs-lookup"><span data-stu-id="eb889-137">The client function for this overloaded method includes a specified control, argument, client script, and context.</span></span></summary>
        <returns><span data-ttu-id="eb889-138">クライアント コールバックを呼び出すクライアント関数の名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-138">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-139"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>メソッドは、ページの通常のライフ サイクルの修正バージョンであるサーバーに、帯域外のコールバックを実行します。</span><span class="sxs-lookup"><span data-stu-id="eb889-139">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle.</span></span> <span data-ttu-id="eb889-140">詳細については、次を参照してください。[ポストバックなしクライアント コールバックの実装](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)します。</span><span class="sxs-lookup"><span data-stu-id="eb889-140">For more information, see [Implementing Client Callbacks Without Postbacks](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb889-141">ブラウザーが Microsoft Internet Explorer (バージョン 5.0 以降) の場合は、スクリプト コールバック機構はよう COM オブジェクトを通じて実装され、ブラウザーで ActiveX コントロールの実行を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb889-141">When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls.</span></span> <span data-ttu-id="eb889-142">その他のブラウザーでは、ブラウザーのローカル ドキュメント オブジェクト モデル (DOM) を使用して、XMLHttpRequest が使用されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-142">For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used.</span></span> <span data-ttu-id="eb889-143">ブラウザーがクライアントのコールバックをサポートしているかどうかを確認するには、使用、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="eb889-143">To check whether a browser supports client callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property.</span></span> <span data-ttu-id="eb889-144">ブラウザーが HTTP 経由での XML をサポートしているかどうかを確認するには、使用、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="eb889-144">To check whether a browser supports XML over HTTP, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> property.</span></span> <span data-ttu-id="eb889-145">両方のプロパティを使用してアクセスできますが、<xref:System.Web.HttpRequest.Browser%2A>組み込みの ASP.NET のプロパティ<xref:System.Web.HttpContext.Request%2A>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eb889-145">Both properties are accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the intrinsic ASP.NET <xref:System.Web.HttpContext.Request%2A> object.</span></span>  
  
 <span data-ttu-id="eb889-146"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>のオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドは同期的に HTTP 経由で XML を使用してコールバックを実行します。</span><span class="sxs-lookup"><span data-stu-id="eb889-146">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method performs a callback synchronously using XML over HTTP.</span></span> <span data-ttu-id="eb889-147">コールバック シナリオでは同期的にデータを送信するときに、同期のコールバックはすぐに返すし、ブラウザーはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="eb889-147">When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser.</span></span> <span data-ttu-id="eb889-148">ブラウザーで同時にない 2 つの同期コールバックを実行できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-148">No two synchronous callbacks callback can execute at the same time in the browser.</span></span> <span data-ttu-id="eb889-149">1 つは現在保留中に 2 つ目の同期コールバックが発生した場合は、2 つ目の同期のコールバックが最初をキャンセルし、2 番目のコールバックのみが返されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-149">If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.</span></span>  
  
 <span data-ttu-id="eb889-150">データを非同期的に送信するを取るオーバー ロードのいずれかの操作を使用して、`useAsync`パラメーターで、ブール値は、この動作を制御する値。</span><span class="sxs-lookup"><span data-stu-id="eb889-150">To send data asynchronously, use one of the overloads that takes the `useAsync` parameter, which is a Boolean value controlling this behavior.</span></span> <span data-ttu-id="eb889-151">非同期のシナリオでは、複数の保留中のコールバック; を設定することがただし、返される順序は、開始された順序と一致しては保証されません。</span><span class="sxs-lookup"><span data-stu-id="eb889-151">In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.</span></span>  
  
 <span data-ttu-id="eb889-152">このオーバー ロードさらに、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドには、クライアントによって生成されたエラーの状態のケースを処理する関数には指定しません、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-152">Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method specifies no client function to handle the case of an error condition generated by the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method.</span></span> <span data-ttu-id="eb889-153">クライアント エラーのコールバック ハンドラーを指定するを取るオーバー ロードのいずれかの操作を使用して、`clientErrorCallback`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-153">To specify a client error callback handler, use one of the overloads that takes the `clientErrorCallback` parameter.</span></span>  
  
 <span data-ttu-id="eb889-154"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>メソッドは、省略可能な文字列を受け取ります`argument`パラメーター文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-154">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> method takes an optional string `argument` parameter and returns a string.</span></span> <span data-ttu-id="eb889-155">渡す、または複数の値を受信するには、入力内の値を連結またはそれぞれの文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-155">To pass in or to receive multiple values, concatenate values in the input or return string, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb889-156">スクリプト コールバック操作中に更新する必要があるページまたはコントロールのプロパティの実装での表示状態を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="eb889-156">Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations.</span></span> <span data-ttu-id="eb889-157">プロパティは、ページ要求からの復旧は、セッション状態を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="eb889-157">If the properties are to survive page requests, you can use session state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-158">次のコード例の 2 つのオーバー ロードを使用する方法を示します、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>整数値が増加するクライアント コールバック シナリオでのメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-158">The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.</span></span>  
  
 <span data-ttu-id="eb889-159">2 つのコールバック メカニズムが表示されます。これらの相違点は、使用、`context`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-159">Two callback mechanisms are shown; the difference between them is the use of the `context` parameter.</span></span> <span data-ttu-id="eb889-160">A`ReceiveServerData1`を使用してクライアントのコールバック関数を提供、`context`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-160">A `ReceiveServerData1` client callback function is provided using the `context` parameter.</span></span> <span data-ttu-id="eb889-161">これに対し、`ReceiveServerData2`でクライアントのコールバック関数が定義されている、`<script>`ページ上のブロック。</span><span class="sxs-lookup"><span data-stu-id="eb889-161">In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page.</span></span> <span data-ttu-id="eb889-162">A<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドは、サーバー ハンドラーに渡される値をインクリメントして、<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>メソッドは文字列としてインクリメントされた値を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-162">A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string.</span></span> <span data-ttu-id="eb889-163">場合、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドには、エラーが返されます、`ProcessCallBackError`クライアント関数が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-163">If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-164">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-164">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eb889-165">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="eb889-165">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-166">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-166">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eb889-167">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-167">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="eb889-168">このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb889-168">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-169">クライアント スクリプトからサーバーに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="eb889-169">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="eb889-170"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</span><span class="sxs-lookup"><span data-stu-id="eb889-170"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="eb889-171">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-171">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="eb889-172">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</span><span class="sxs-lookup"><span data-stu-id="eb889-172">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="eb889-173">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-173">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="eb889-174">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-174"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="eb889-175">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-175">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="eb889-176">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、およびブール値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="eb889-176">The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="eb889-177">クライアント コールバックを呼び出すクライアント関数の名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-177">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-178">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要です、`useAsync`パラメーター値を設定して、クライアント コールバックを非同期的に実行することができます、`true`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-178">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` parameter, which allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="eb889-179">このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定。</span><span class="sxs-lookup"><span data-stu-id="eb889-179">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span>  
  
 <span data-ttu-id="eb889-180">このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-180">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-181">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-181">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eb889-182">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="eb889-182">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-183">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-183">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (target As String, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::String ^ target, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : string * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (target, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="eb889-184">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-184">The name of a server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="eb889-185">このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb889-185">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-186">クライアント スクリプトからサーバーに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="eb889-186">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="eb889-187"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</span><span class="sxs-lookup"><span data-stu-id="eb889-187"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="eb889-188">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-188">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="eb889-189">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</span><span class="sxs-lookup"><span data-stu-id="eb889-189">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="eb889-190">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-190">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="clientErrorCallback"><span data-ttu-id="eb889-191">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-191">The name of the client event handler that receives the result when an error occurs in the server event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="eb889-192">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-192"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="eb889-193">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-193">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="eb889-194">このオーバーロードされたメソッドに対するクライアント関数には、指定されたターゲット、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="eb889-194">The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="eb889-195">クライアント コールバックを呼び出すクライアント関数の名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-195">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-196">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドは、`target`文字列パラメーターの代わりに、<xref:System.Web.UI.Control>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-196">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method takes a `target` string parameter instead of a <xref:System.Web.UI.Control> parameter.</span></span> <span data-ttu-id="eb889-197">格納している文字列以外に戻るにコールバックする場合、このオーバー ロードを使用して、<xref:System.Web.UI.Control.UniqueID%2A>のコントロール。</span><span class="sxs-lookup"><span data-stu-id="eb889-197">Use this overload when you want the callback to go back to something other than a string containing the <xref:System.Web.UI.Control.UniqueID%2A> of the control.</span></span>  
  
 <span data-ttu-id="eb889-198">このオーバー ロードさらに、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要です、`useAsync`と`clientErrorCallback`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-198">Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter.</span></span> <span data-ttu-id="eb889-199">`useAsync`パラメーター値を設定して、クライアント コールバックを非同期的に実行できます。`true`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-199">The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="eb889-200">このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定。</span><span class="sxs-lookup"><span data-stu-id="eb889-200">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span> <span data-ttu-id="eb889-201">`clientErrorCallback`パラメーターを使用する場合に呼び出されるクライアント関数の名前を定義する、サーバー ハンドラー、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドでは、エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-201">The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method, returns an error.</span></span> <span data-ttu-id="eb889-202">このメソッドのオーバー ロード バージョンを必要としない、`clientErrorCallback`パラメーターは、値を null に設定します。</span><span class="sxs-lookup"><span data-stu-id="eb889-202">The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.</span></span>  
  
 <span data-ttu-id="eb889-203">このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-203">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-204">次のコード例の 2 つのオーバー ロードを使用する方法を示します、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>整数値が増加するクライアント コールバック シナリオでのメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-204">The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.</span></span>  
  
 <span data-ttu-id="eb889-205">2 つのコールバック メカニズムが表示されます。これらの相違点は、使用、`context`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-205">Two callback mechanisms are shown; the difference between them is the use of the `context` parameter.</span></span> <span data-ttu-id="eb889-206">A`ReceiveServerData1`を使用してクライアントのコールバック関数を提供、`context`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-206">A `ReceiveServerData1` client callback function is provided using the `context` parameter.</span></span> <span data-ttu-id="eb889-207">これに対し、`ReceiveServerData2`でクライアントのコールバック関数が定義されている、`<script>`ページ上のブロック。</span><span class="sxs-lookup"><span data-stu-id="eb889-207">In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page.</span></span> <span data-ttu-id="eb889-208">A<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドは、サーバー ハンドラーに渡される値をインクリメントして、<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>メソッドは文字列としてインクリメントされた値を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-208">A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string.</span></span> <span data-ttu-id="eb889-209">場合、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドはエラーが発生し、クライアント関数を返します`ProcessCallBackError`が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-209">If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <altmember cref="P:System.Web.UI.Control.UniqueID" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-210">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-210">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eb889-211">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-211">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="eb889-212">このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb889-212">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-213">クライアント スクリプトからサーバーの <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="eb889-213">An argument passed from the client script to the server <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="eb889-214">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-214">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="eb889-215">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</span><span class="sxs-lookup"><span data-stu-id="eb889-215">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="eb889-216">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-216">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="clientErrorCallback"><span data-ttu-id="eb889-217">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-217">The name of the client event handler that receives the result when an error occurs in the server event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="eb889-218">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-218"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="eb889-219">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-219">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="eb889-220">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="eb889-220">The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="eb889-221">クライアント コールバックを呼び出すクライアント関数の名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-221">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-222">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要です、`useAsync`と`clientErrorCallback`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-222">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter.</span></span> <span data-ttu-id="eb889-223">`useAsync`パラメーター値を設定して、クライアント コールバックを非同期的に実行できます。`true`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-223">The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="eb889-224">このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定。</span><span class="sxs-lookup"><span data-stu-id="eb889-224">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span> <span data-ttu-id="eb889-225">`clientErrorCallback`パラメーターを使用する場合に呼び出されるクライアント関数の名前を定義するサーバーのハンドラー (、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッド) エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-225">The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler (the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method) returns an error.</span></span> <span data-ttu-id="eb889-226">このメソッドのオーバー ロード バージョンを必要としない、`clientErrorCallback`パラメーターは、値を null に設定します。</span><span class="sxs-lookup"><span data-stu-id="eb889-226">The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.</span></span>  
  
 <span data-ttu-id="eb889-227">このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-227">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-228">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-228">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eb889-229">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="eb889-229">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-230">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-230">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackClientHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-231"><see langword="javascript:" /> を参照の先頭に付加した上で参照を取得します。この参照をクライアント イベントで使用して、サーバーにポストバックできます。</span><span class="sxs-lookup"><span data-stu-id="eb889-231">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eb889-232">ポストバックを処理するサーバー コントロール。</span><span class="sxs-lookup"><span data-stu-id="eb889-232">The server control to process the postback.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-233">サーバー コントロールに渡されたパラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-233">The parameter passed to the server control.</span></span></param>
        <summary><span data-ttu-id="eb889-234"><see langword="javascript:" /> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数を使用してサーバーにポストバックできます。</span><span class="sxs-lookup"><span data-stu-id="eb889-234">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</span></span></summary>
        <returns><span data-ttu-id="eb889-235">対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="eb889-235">A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-236">使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを実装するポストバックを処理するコントロールが必要です、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="eb889-236">Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="eb889-237">実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-237">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-238">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-238">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method.</span></span> <span data-ttu-id="eb889-239">カスタム コントロール、 `MyControl`、実装、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="eb889-239">The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="eb889-240">ページの HTML アンカー要素がクリックされたときに、<xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A>カスタム コントロールのメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-240">When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 <span data-ttu-id="eb889-241">次のコード例は、カスタム コントロールでは、代わりに、前のものと同じ機能を持つ、<xref:System.Web.UI.Page>クラスが実装する、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="eb889-241">The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eb889-242">ポストバックを処理するサーバー コントロール。</span><span class="sxs-lookup"><span data-stu-id="eb889-242">The server control to process the postback.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-243">サーバー コントロールに渡されたパラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-243">The parameter passed to the server control.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="eb889-244">検証用にポストバック イベントを登録する場合は <see langword="true" />。検証用にポストバック イベントを登録しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-244"><see langword="true" /> to register the postback event for validation; <see langword="false" /> to not register the post back event for validation.</span></span></param>
        <summary><span data-ttu-id="eb889-245"><see langword="javascript:" /> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数と、イベント検証用にポストバックを登録するかどうかを示すブール値を使用してサーバーにポストバックできます。</span><span class="sxs-lookup"><span data-stu-id="eb889-245">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</span></span></summary>
        <returns><span data-ttu-id="eb889-246">対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="eb889-246">A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-247">使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを実装するポストバックを処理するコントロールが必要です、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="eb889-247">Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="eb889-248">実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-248">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-249">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-249">Returns a string that can be used in a client event to cause postback to the server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions -&gt; string" Usage="clientScriptManager.GetPostBackEventReference options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="eb889-250">ポストバックを定義する <see cref="T:System.Web.UI.PostBackOptions" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-250">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</span></span></param>
        <summary><span data-ttu-id="eb889-251">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-251">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="eb889-252">この参照文字列は、指定された <see cref="T:System.Web.UI.PostBackOptions" /> インスタンスによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-252">The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> instance.</span></span></summary>
        <returns><span data-ttu-id="eb889-253">クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</span><span class="sxs-lookup"><span data-stu-id="eb889-253">A string that, when treated as script on the client, initiates the client postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-254">実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-254">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
 <span data-ttu-id="eb889-255"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-255">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="eb889-256">このシナリオで、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアント ポストバックのイベントを返します、<xref:System.Web.UI.WebControls.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="eb889-256">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-257"><see cref="T:System.Web.UI.PostBackOptions" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-257">The <see cref="T:System.Web.UI.PostBackOptions" /> parameter is <see langword="null" /></span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-258">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-258">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eb889-259">サーバー上でポストバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-259">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-260">ポストバックを処理するコントロールに渡されるオプション引数の文字列。</span><span class="sxs-lookup"><span data-stu-id="eb889-260">A string of optional arguments to pass to the control that processes the postback.</span></span></param>
        <summary><span data-ttu-id="eb889-261">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-261">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="eb889-262">この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-262">The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</span></span></summary>
        <returns><span data-ttu-id="eb889-263">クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</span><span class="sxs-lookup"><span data-stu-id="eb889-263">A string that, when treated as script on the client, initiates the postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-264">実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-264">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
 <span data-ttu-id="eb889-265"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-265">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="eb889-266">このシナリオで、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアント ポストバックのイベントを返します、<xref:System.Web.UI.WebControls.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="eb889-266">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-267">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-267">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method.</span></span> <span data-ttu-id="eb889-268">カスタム コントロール、 `MyControl`、実装、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="eb889-268">The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="eb889-269">ページ上のボタンがクリックされたときに、<xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A>カスタム コントロールのメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-269">When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 <span data-ttu-id="eb889-270">次のコード例は、カスタム コントロールでは、代わりに、前のものと同じ機能を持つ、<xref:System.Web.UI.Page>クラスが実装する、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="eb889-270">The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-271">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-271">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-272">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-272">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (options, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="eb889-273">ポストバックを定義する <see cref="T:System.Web.UI.PostBackOptions" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-273">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="eb889-274">検証用にイベント参照を登録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-274"><see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="eb889-275">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-275">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="eb889-276">この参照文字列は、指定した <see cref="T:System.Web.UI.PostBackOptions" /> オブジェクトによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-276">The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> object.</span></span> <span data-ttu-id="eb889-277">オプションで、検証用にこのイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-277">Optionally, registers the event reference for validation.</span></span></summary>
        <returns><span data-ttu-id="eb889-278">クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</span><span class="sxs-lookup"><span data-stu-id="eb889-278">A string that, when treated as script on the client, initiates the client postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-279">実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>オブジェクト、ディレクティブを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-279">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page> object, use the  directive.</span></span>  
  
 <span data-ttu-id="eb889-280"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-280">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="eb889-281">このシナリオで、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアント ポストバックのイベントを返します、<xref:System.Web.UI.WebControls.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="eb889-281">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="eb889-282">場合`registerForEventValidation`は`true`、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>メソッドの呼び出し、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>イベントを生成するクライアントのコントロールを表す一意のコントロール ID を検証用にイベント参照を登録するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-282">If `registerForEventValidation` is `true`, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-283"><see cref="T:System.Web.UI.PostBackOptions" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-283">The <see cref="T:System.Web.UI.PostBackOptions" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-284">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-284">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eb889-285">サーバー上でポストバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-285">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-286"><paramref name="control" /> に渡すオプション引数の文字列。</span><span class="sxs-lookup"><span data-stu-id="eb889-286">A string of optional arguments to pass to <paramref name="control" />.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="eb889-287">検証用にイベント参照を登録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-287"><see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="eb889-288">クライアント イベントで使用する、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-288">Returns a string to use in a client event to cause postback to the server.</span></span> <span data-ttu-id="eb889-289">この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-289">The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</span></span> <span data-ttu-id="eb889-290">オプションで、検証用にこのイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-290">Optionally, registers the event reference for validation.</span></span></summary>
        <returns><span data-ttu-id="eb889-291">クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</span><span class="sxs-lookup"><span data-stu-id="eb889-291">A string that, when treated as script on the client, initiates the postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-292">実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-292">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.</span></span>  
  
 <span data-ttu-id="eb889-293"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-293">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="eb889-294">このシナリオで、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアント ポストバックのイベントを返します、<xref:System.Web.UI.WebControls.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="eb889-294">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="eb889-295">場合`registerForEventValidation`が true の場合、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>メソッドの呼び出し、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>イベントを生成するクライアントのコントロールを表す一意のコントロール ID を検証用にイベント参照を登録するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-295">If `registerForEventValidation` is true, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-296">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-296">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="eb889-297">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</span><span class="sxs-lookup"><span data-stu-id="eb889-297">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetWebResourceUrl(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetWebResourceUrl(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.GetWebResourceUrl : Type * string -&gt; string" Usage="clientScriptManager.GetWebResourceUrl (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-298">リソースの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-298">The type of the resource.</span></span></param>
        <param name="resourceName"><span data-ttu-id="eb889-299">アセンブリ内のリソースの完全修飾名。</span><span class="sxs-lookup"><span data-stu-id="eb889-299">The fully qualified name of the resource in the assembly.</span></span></param>
        <summary><span data-ttu-id="eb889-300">アセンブリ内のリソースへの URL 参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="eb889-300">Gets a URL reference to a resource in an assembly.</span></span></summary>
        <returns><span data-ttu-id="eb889-301">リソースへの URL 参照。</span><span class="sxs-lookup"><span data-stu-id="eb889-301">The URL reference to the resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-302"><xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>メソッドは、アセンブリに埋め込まれているリソースへの URL 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="eb889-302">The <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method returns a URL reference to a resource embedded in an assembly.</span></span> <span data-ttu-id="eb889-303">返される参照は、エンコードされた URL ではありません。</span><span class="sxs-lookup"><span data-stu-id="eb889-303">The returned reference is not URL encoded.</span></span> <span data-ttu-id="eb889-304">リソースは、スクリプト ファイル、画像、または任意の静的ファイルを使用できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-304">Resources can be script files, images, or any static file.</span></span> <span data-ttu-id="eb889-305">リソースにアクセスしてオブジェクトに基づき型を指定します。</span><span class="sxs-lookup"><span data-stu-id="eb889-305">You specify the type based on the object that will be accessing the resource.</span></span>  
  
 <span data-ttu-id="eb889-306">ページに登録されている Web リソースは、その型と名前によって一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="eb889-306">A Web resource registered with the page is uniquely identified by its type and name.</span></span> <span data-ttu-id="eb889-307">指定された型と名前のペアを持つ 1 つだけのリソースは、ページに登録できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-307">Only one resource with a given type and name pair can be registered with the page.</span></span> <span data-ttu-id="eb889-308">既に登録されているリソースを登録しようとして、登録済みのリソースの複製が作成されることはできません。</span><span class="sxs-lookup"><span data-stu-id="eb889-308">Attempting to register a resource that is already registered does not create a duplicate of the registered resource.</span></span>  
  
 <span data-ttu-id="eb889-309"><xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>メソッドの使用と組み合わせて、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>アセンブリに埋め込まれているリソースにアクセスするためのメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-309">The <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method is used in conjunction with the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method for accessing resources embedded in assemblies.</span></span> <span data-ttu-id="eb889-310">アプリケーションでリソースの使用の詳細については、次を参照してください。 [ASP.NET Web Page Resources Overview](https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)します。</span><span class="sxs-lookup"><span data-stu-id="eb889-310">For more information on using resources in applications, see [ASP.NET Web Page Resources Overview](https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-311">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-311">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method.</span></span> <span data-ttu-id="eb889-312">*型*この例ではパラメーターは、リソースを含むアセンブリ内のクラスの型に設定されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-312">The *type* parameter in this example is set to the type of class in the assembly containing the resource.</span></span> <span data-ttu-id="eb889-313">`resourceName`パラメーターが、既定の名前空間を含むリソースへの完全修飾パスで指定されています。</span><span class="sxs-lookup"><span data-stu-id="eb889-313">The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 <span data-ttu-id="eb889-314">次のコード例は、プログラムで適用する方法を示します、<xref:System.Web.UI.WebResourceAttribute>提供されるリソースのアセンブリをマークするメタデータ属性。</span><span class="sxs-lookup"><span data-stu-id="eb889-314">The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.</span></span> <span data-ttu-id="eb889-315">既定の名前空間に設定して、クラス ライブラリでは、次のクラスをコンパイル`Samples.AspNet.CS.Controls`または`Samples.AspNet.VB.Controls`、お使いの言語によって異なります。</span><span class="sxs-lookup"><span data-stu-id="eb889-315">Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.</span></span>  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 <span data-ttu-id="eb889-316">この例には、という名前の JavaScript ファイルが必要です。`Script_include.js`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-316">This example requires a JavaScript file named `Script_include.js`.</span></span> <span data-ttu-id="eb889-317">.Js ファイルを格納するアセンブリに埋め込みリソースである、`ClientScriptResourceLabel`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eb889-317">The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object.</span></span> <span data-ttu-id="eb889-318">クラス ライブラリ プロジェクトのプロパティ ウィンドウで、Visual Studio を使用する場合は、設定**ビルド アクション**に**埋め込まれたリソース**スクリプト ファイルを選択するとします。</span><span class="sxs-lookup"><span data-stu-id="eb889-318">If you are using Visual Studio, in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected.</span></span> <span data-ttu-id="eb889-319">コマンドラインでライブラリをコンパイルする場合は、リソースを埋め込むには、スイッチを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-319">If you are compiling the library at the command line, use the  switch to embed the resource.</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-320">Web リソース名が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-320">The web resource name is <see langword="null" />.</span></span>  
  
<span data-ttu-id="eb889-321">\- または</span><span class="sxs-lookup"><span data-stu-id="eb889-321">\- or -</span></span> 
<span data-ttu-id="eb889-322">Web リソース名の長さがゼロです。</span><span class="sxs-lookup"><span data-stu-id="eb889-322">The web resource name has a length of zero.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <related type="Article" href="https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd"><span data-ttu-id="eb889-323">ASP.NET Web ページのリソースの概要</span><span class="sxs-lookup"><span data-stu-id="eb889-323">ASP.NET Web Page Resources Overview</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5212666e-98ab-47e4-a497-b5545ab15c7f"><span data-ttu-id="eb889-324">/resource (埋め込みリソース ファイルを出力) (c# コンパイラ オプション)</span><span class="sxs-lookup"><span data-stu-id="eb889-324">/resource (Embed Resource File to Output) (C# Compiler Options)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/eee2f227-91f2-4f2b-a9d6-1c51c5320858"><span data-ttu-id="eb889-325">/resource (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="eb889-325">/resource (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptBlockRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-326">クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-326">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="eb889-327">検索対象のクライアント スクリプト ブロックのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-327">The key of the client script block to search for.</span></span></param>
        <summary><span data-ttu-id="eb889-328">指定されたキーを使用して、クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-328">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="eb889-329">クライアント スクリプト ブロックが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-329"><see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-330">このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>重複するスクリプトの登録を回避するためです。</span><span class="sxs-lookup"><span data-stu-id="eb889-330">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="eb889-331">これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-331">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="eb889-332">クライアント スクリプトは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-332">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-333">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-333">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="eb889-334">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出す、`key`と`type`として型パラメーターの設定、<xref:System.Web.UI.Page>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="eb889-334">This overload of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-335">検索対象のクライアント スクリプト ブロックの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-335">The type of the client script block to search for.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-336">検索対象のクライアント スクリプト ブロックのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-336">The key of the client script block to search for.</span></span></param>
        <summary><span data-ttu-id="eb889-337">キーと型を使用して、クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-337">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</span></span></summary>
        <returns><span data-ttu-id="eb889-338">クライアント スクリプト ブロックが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-338"><see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-339">このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>重複するスクリプトの登録を回避するためです。</span><span class="sxs-lookup"><span data-stu-id="eb889-339">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="eb889-340">これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-340">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="eb889-341">クライアント スクリプトは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-341">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-342">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-342">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-343">リソースにアクセスしてオブジェクトに基づき型を指定します。</span><span class="sxs-lookup"><span data-stu-id="eb889-343">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="eb889-344">たとえばを使用する場合、`Page`インスタンスを指定する、リソースにアクセスする、`Page`型。</span><span class="sxs-lookup"><span data-stu-id="eb889-344">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-345">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-345">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method.</span></span> <span data-ttu-id="eb889-346">既存のクライアント スクリプト ブロックをチェックするロジックが削除された場合がない 2 つの重複したクライアント スクリプト、レンダリングされるページの HTML ソース コードのために注意してください、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、重複をチェックします。</span><span class="sxs-lookup"><span data-stu-id="eb889-346">Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates.</span></span> <span data-ttu-id="eb889-347">チェックの利点は、不要な計算処理です。</span><span class="sxs-lookup"><span data-stu-id="eb889-347">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-348">クライアント スクリプトの型が <see langword="null" />. です。</span><span class="sxs-lookup"><span data-stu-id="eb889-348">The client script type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptIncludeRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-349">クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-349">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="eb889-350">検索対象のクライアント スクリプト インクルードのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-350">The key of the client script include to search for.</span></span></param>
        <summary><span data-ttu-id="eb889-351">指定されたキーを使用して、クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-351">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="eb889-352">クライアント スクリプト インクルードが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-352"><see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-353">このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>重複するスクリプトの登録を回避するためです。</span><span class="sxs-lookup"><span data-stu-id="eb889-353">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="eb889-354">これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-354">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="eb889-355">クライアント スクリプト インクルードのキーと型では一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="eb889-355">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-356">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-356">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="eb889-357">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出す、`key`と`type`として型パラメーターの設定、<xref:System.Web.UI.Page>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eb889-357">This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-358">検索対象のクライアント スクリプト インクルードの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-358">The type of the client script include to search for.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-359">検索対象のクライアント スクリプト インクルードのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-359">The key of the client script include to search for.</span></span></param>
        <summary><span data-ttu-id="eb889-360">キーと型を使用して、クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-360">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</span></span></summary>
        <returns><span data-ttu-id="eb889-361">クライアント スクリプト インクルードが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-361"><see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-362">このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>重複したクライアント スクリプトの登録を回避するためにメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="eb889-362">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate client script includes.</span></span> <span data-ttu-id="eb889-363">これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-363">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="eb889-364">クライアント スクリプト インクルードのキーと型では一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="eb889-364">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-365">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-365">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-366">リソースにアクセスしてオブジェクトに基づき型を指定します。</span><span class="sxs-lookup"><span data-stu-id="eb889-366">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="eb889-367">たとえば、リソースへのアクセスをページのインスタンスを使用する場合を指定する、`Page`型。</span><span class="sxs-lookup"><span data-stu-id="eb889-367">For instance, when using a Page instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-368">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-368">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method.</span></span> <span data-ttu-id="eb889-369">既存のクライアント スクリプト インクルードを確認するロジックが削除された場合がない 2 つの重複したクライアント スクリプト レンダリングされたページの HTML ソース コードのために注意してください、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドは、重複をチェックします。</span><span class="sxs-lookup"><span data-stu-id="eb889-369">Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates.</span></span> <span data-ttu-id="eb889-370">チェックの利点は、不要な計算処理です。</span><span class="sxs-lookup"><span data-stu-id="eb889-370">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 <span data-ttu-id="eb889-371">この例には、という名前の JavaScript ファイルが必要です。 `Script_include.js`、次の内容。</span><span class="sxs-lookup"><span data-stu-id="eb889-371">This example requires a JavaScript file named `Script_include.js`, with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-372">クライアント スクリプト インクルードの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-372">The client script include type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOnSubmitStatementRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-373">OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-373">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="eb889-374">検索対象の OnSubmit ステートメントのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-374">The key of the OnSubmit statement to search for.</span></span></param>
        <summary><span data-ttu-id="eb889-375">指定されたキーを使用して OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-375">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="eb889-376">OnSubmit ステートメントが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-376"><see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-377">このメソッドを呼び出す前に、 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> OnSubmit ステートメントが重複する登録を回避するためです。</span><span class="sxs-lookup"><span data-stu-id="eb889-377">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate OnSubmit statements.</span></span> <span data-ttu-id="eb889-378">これは、ステートメントが大量のサーバー リソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-378">This is particularly important if the statement requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="eb889-379">ステートメントは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-379">A statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-380">同じキーおよび種類とステートメントは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-380">Statements with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="eb889-381">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出す、`key`と`type`として型パラメーターの設定、<xref:System.Web.UI.Page>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="eb889-381">This overload of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-382">検索対象の OnSubmit ステートメントの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-382">The type of the OnSubmit statement to search for.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-383">検索対象の OnSubmit ステートメントのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-383">The key of the OnSubmit statement to search for.</span></span></param>
        <summary><span data-ttu-id="eb889-384">指定されたキーと型を使用して OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-384">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</span></span></summary>
        <returns><span data-ttu-id="eb889-385">OnSubmit ステートメントが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-385"><see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-386">このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>ステートメントが重複する登録を回避するためです。</span><span class="sxs-lookup"><span data-stu-id="eb889-386">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate statements.</span></span> <span data-ttu-id="eb889-387">これは、ステートメントが大量のサーバー リソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-387">This is particularly important if the statement requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="eb889-388">ステートメントは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-388">A statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-389">同じキーおよび種類とステートメントは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-389">Statements with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-390">リソースにアクセスしてオブジェクトに基づき型を指定します。</span><span class="sxs-lookup"><span data-stu-id="eb889-390">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="eb889-391">たとえばを使用する場合、`Page`インスタンスを指定する、リソースにアクセスする、`Page`型。</span><span class="sxs-lookup"><span data-stu-id="eb889-391">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-392">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-392">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method.</span></span> <span data-ttu-id="eb889-393">という名前のスクリプト`OnSubmitScript`に登録されて、<xref:System.Web.UI.Page>ページのフォームが送信されると、スクリプトが呼び出されるようにします。</span><span class="sxs-lookup"><span data-stu-id="eb889-393">A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-394">OnSubmit ステートメントの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-394">The OnSubmit statement type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartupScriptRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-395">起動スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-395">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="eb889-396">検索対象のスタートアップ スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-396">The key of the startup script to search for.</span></span></param>
        <summary><span data-ttu-id="eb889-397">指定されたキーを使用して、スタートアップ スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-397">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="eb889-398">スタートアップ スクリプトが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-398"><see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-399">このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>重複するスクリプトの登録を回避するためです。</span><span class="sxs-lookup"><span data-stu-id="eb889-399">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="eb889-400">これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-400">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="eb889-401">スタートアップ スクリプトは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-401">A startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-402">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-402">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="eb889-403">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドが、両方の文字列を受け取るオーバー ロードを呼び出す`key`と`type`として型パラメーターの設定、<xref:System.Web.UI.Page>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="eb889-403">This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a string `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-404">検索対象のスタートアップ スクリプトの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-404">The type of the startup script to search for.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-405">検索対象のスタートアップ スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-405">The key of the startup script to search for.</span></span></param>
        <summary><span data-ttu-id="eb889-406">指定されたキーと型を使用して、スタートアップ スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-406">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</span></span></summary>
        <returns><span data-ttu-id="eb889-407">スタートアップ スクリプトが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-407"><see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-408">このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>重複するスクリプトの登録を回避するためです。</span><span class="sxs-lookup"><span data-stu-id="eb889-408">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="eb889-409">これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-409">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="eb889-410">クライアントのスタートアップ スクリプトは、そのキーとその型で一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="eb889-410">A client startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-411">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-411">Scripts with the same key and type are considered duplicates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-412">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-412">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method.</span></span> <span data-ttu-id="eb889-413">既存のスタートアップ スクリプト ブロックをチェックするロジックが削除された場合がない 2 つの重複するスタートアップ スクリプト表示するページの HTML ソース コードのために注意してください、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドは、重複をチェックします。</span><span class="sxs-lookup"><span data-stu-id="eb889-413">Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates.</span></span> <span data-ttu-id="eb889-414">チェックの利点は、不要な計算処理です。</span><span class="sxs-lookup"><span data-stu-id="eb889-414">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-415">スタートアップ スクリプトの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-415">The startup script type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterArrayDeclaration : string * string -&gt; unit" Usage="clientScriptManager.RegisterArrayDeclaration (arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName"><span data-ttu-id="eb889-416">登録する配列名。</span><span class="sxs-lookup"><span data-stu-id="eb889-416">The array name to register.</span></span></param>
        <param name="arrayValue"><span data-ttu-id="eb889-417">登録する配列値。</span><span class="sxs-lookup"><span data-stu-id="eb889-417">The array value or values to register.</span></span></param>
        <summary><span data-ttu-id="eb889-418">配列名と配列値を使用して、JavaScript 配列宣言を <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-418">Registers a JavaScript array declaration with the <see cref="T:System.Web.UI.Page" /> object using an array name and array value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-419"><xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>で指定された名前と同じ名前で登録されている配列が存在するかどうかを確認するためのチェック、`arrayName`パラメーターで指定された値を追加し、`arrayValue`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-419">The <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter.</span></span> <span data-ttu-id="eb889-420">基になるストレージ メカニズムが基づいているため、<xref:System.Collections.ArrayList>重複は許可されています。</span><span class="sxs-lookup"><span data-stu-id="eb889-420">Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed.</span></span> <span data-ttu-id="eb889-421">場合と同じ名前で登録されている配列、`arrayName`パラメーターが存在しないか、作成と、値、`arrayValue`パラメーターを追加します。</span><span class="sxs-lookup"><span data-stu-id="eb889-421">If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.</span></span>  
  
 <span data-ttu-id="eb889-422">結果として得られる JavaScript 配列の文字列リテラルにする場合は、単一引用符 (') を含めるか、二重引用符をエスケープ (\\") で、`arrayValue`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-422">If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\") in the `arrayValue` parameter.</span></span> <span data-ttu-id="eb889-423">値、`arrayValue`パラメーターが 1 つの要素にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb889-423">The value of the `arrayValue` parameter should be a single element.</span></span> <span data-ttu-id="eb889-424">を 1 つ以上の値が配列に追加する必要がある場合は、を使用して複数の呼び出しを行う、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-424">If more than one value needs to be added to the array, make multiple calls using the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-425">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>と<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-425">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods.</span></span> <span data-ttu-id="eb889-426">例では、配列と非表示の値を登録および定義、`OnClick`のイベント、`<input>`配列の 2 つの値と非表示の値の合計を計算するボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="eb889-426">The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-427"><paramref name="arrayName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-427"><paramref name="arrayName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.String.Split" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-428">クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-428">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-429">登録するクライアント スクリプトの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-429">The type of the client script to register.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-430">登録するクライアント スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-430">The key of the client script to register.</span></span></param>
        <param name="script"><span data-ttu-id="eb889-431">登録するクライアント スクリプト リテラル。</span><span class="sxs-lookup"><span data-stu-id="eb889-431">The client script literal to register.</span></span></param>
        <summary><span data-ttu-id="eb889-432">型、キー、およびスクリプト リテラルを使用して、<see cref="T:System.Web.UI.Page" /> オブジェクトにクライアント スクリプトを登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-432">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, and script literal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-433">クライアント スクリプトは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-433">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-434">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-434">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-435">ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-435">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="eb889-436">既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。</span><span class="sxs-lookup"><span data-stu-id="eb889-436">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="eb889-437">呼び出す、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドを指定したキーおよび種類のペアでクライアント スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとして不必要を回避します。</span><span class="sxs-lookup"><span data-stu-id="eb889-437">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="eb889-438">このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド、行う必要があります、スクリプトで提供されていることを確認して、`script`にパラメーターがラップされて、`<script>`要素ブロックします。</span><span class="sxs-lookup"><span data-stu-id="eb889-438">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you must make sure that the script provided in the `script` parameter is wrapped in a `<script>` element block.</span></span>  
  
 <span data-ttu-id="eb889-439"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、レンダリングされたページの上部にスクリプト ブロックを追加します。</span><span class="sxs-lookup"><span data-stu-id="eb889-439">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page.</span></span> <span data-ttu-id="eb889-440">スクリプト ブロックは、登録されている順序で出力されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="eb889-440">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="eb889-441">スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを 1 つの文字列で、スクリプトをまとめるし、すべて 1 つのクライアント スクリプト ブロック内に登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-441">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-442">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-442">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-443">登録するクライアント スクリプトの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-443">The type of the client script to register.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-444">登録するクライアント スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-444">The key of the client script to register.</span></span></param>
        <param name="script"><span data-ttu-id="eb889-445">登録するクライアント スクリプト リテラル。</span><span class="sxs-lookup"><span data-stu-id="eb889-445">The client script literal to register.</span></span></param>
        <param name="addScriptTags"><span data-ttu-id="eb889-446">スクリプト タグを追加するかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="eb889-446">A Boolean value indicating whether to add script tags.</span></span></param>
        <summary><span data-ttu-id="eb889-447">型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-447">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-448">クライアント スクリプトは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-448">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-449">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-449">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-450">ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-450">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="eb889-451">既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。</span><span class="sxs-lookup"><span data-stu-id="eb889-451">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="eb889-452">呼び出す、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドを指定したキーおよび種類のペアでクライアント スクリプトは既に登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb889-452">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered.</span></span> <span data-ttu-id="eb889-453">これにより、スクリプトを追加しようとして不必要に回避できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-453">This lets you avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="eb889-454">このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドで、スクリプトが提供されるかどうか示すことができます、`script`でパラメーターがラップされて、`<script>`要素のブロックを使用して、`addScriptTags`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-454">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter.</span></span> <span data-ttu-id="eb889-455">設定`addScriptTags`に`true`スクリプト タグが自動的に追加されることを示します。</span><span class="sxs-lookup"><span data-stu-id="eb889-455">Setting `addScriptTags` to `true` indicates that script tags will be added automatically.</span></span>  
  
 <span data-ttu-id="eb889-456"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、レンダリングされたページの上部にスクリプト ブロックを追加します。</span><span class="sxs-lookup"><span data-stu-id="eb889-456">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page.</span></span> <span data-ttu-id="eb889-457">スクリプト ブロックは、登録されている順序で出力されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="eb889-457">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="eb889-458">スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを 1 つの文字列で、スクリプトをまとめるし、すべて 1 つのクライアント スクリプト ブロック内に登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-458">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-459">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-459">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method.</span></span> <span data-ttu-id="eb889-460">なお、`addScriptTags`にパラメーターが設定されている`true`開始と終了タグのスクリプトが付属していないため、`script`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-460">Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-461">クライアント スクリプト ブロックの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-461">The client script block type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-462">クライアント スクリプト インクルードを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-462">Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="eb889-463">登録するクライアント スクリプト インクルードのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-463">The key of the client script include to register.</span></span></param>
        <param name="url"><span data-ttu-id="eb889-464">登録するクライアント スクリプト インクルードの URL。</span><span class="sxs-lookup"><span data-stu-id="eb889-464">The URL of the client script include to register.</span></span></param>
        <summary><span data-ttu-id="eb889-465">キーと URL を使用して、クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。これにより、スクリプトをクライアントから呼び出せるようになります。</span><span class="sxs-lookup"><span data-stu-id="eb889-465">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a key and a URL, which enables the script to be called from the client.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-466">クライアント スクリプト インクルードのキーと型では一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="eb889-466">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-467">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-467">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-468">ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-468">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="eb889-469">既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。</span><span class="sxs-lookup"><span data-stu-id="eb889-469">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="eb889-470">呼び出す、<xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>する指定されたキーとクライアント スクリプトを含めるし、型のペアは既に登録されてでスクリプトを追加しようとして不必要に回避いるかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-470">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb889-471">クライアントの URL を解決するには、使用、<xref:System.Web.UI.Control.ResolveClientUrl%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-471">To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method.</span></span> <span data-ttu-id="eb889-472">このメソッドでは、パスを解決するのには呼び出されたを URL のコンテキストを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-472">This method uses the context of the URL on which it is called to resolve the path.</span></span>  
  
 <span data-ttu-id="eb889-473">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドの呼び出しを受け取るオーバー ロードを`key`、 `URL`、および`type`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-473">This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method calls the overload that takes a `key`, a `URL`, and a `type` parameter.</span></span>  
  
 <span data-ttu-id="eb889-474">メソッドは、レンダリングされたページの上部にあるスクリプト ブロックを追加します。</span><span class="sxs-lookup"><span data-stu-id="eb889-474">The method adds a script block at the top of the rendered page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-475">関連情報については、構文、使用状況、および例についてなどを参照してください。<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>します。</span><span class="sxs-lookup"><span data-stu-id="eb889-475">For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-476">登録するクライアント スクリプト インクルードの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-476">The type of the client script include to register.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-477">登録するクライアント スクリプト インクルードのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-477">The key of the client script include to register.</span></span></param>
        <param name="url"><span data-ttu-id="eb889-478">登録するクライアント スクリプト インクルードの URL。</span><span class="sxs-lookup"><span data-stu-id="eb889-478">The URL of the client script include to register.</span></span></param>
        <summary><span data-ttu-id="eb889-479">型、キー、および URL を使用して、クライアント スクリプト インクルードを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-479">Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-480">このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドは*キー*と*url* 、スクリプトを識別するパラメーターと同様に、`type`クライアント スクリプトの id を指定するパラメーターが含まれます。</span><span class="sxs-lookup"><span data-stu-id="eb889-480">This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method takes *key* and *url* parameters to identify the script, as well as a `type` parameter to specify the identification of the client script include.</span></span> <span data-ttu-id="eb889-481">リソースにアクセスしてオブジェクトに基づき型を指定します。</span><span class="sxs-lookup"><span data-stu-id="eb889-481">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="eb889-482">たとえばを使用する場合、`Page`インスタンスを指定する、リソースにアクセスする、`Page`型。</span><span class="sxs-lookup"><span data-stu-id="eb889-482">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb889-483">クライアントの URL を解決するには、使用、<xref:System.Web.UI.Control.ResolveClientUrl%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-483">To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method.</span></span> <span data-ttu-id="eb889-484">このメソッドでは、パスを解決するのには呼び出されたを URL のコンテキストを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-484">This method uses the context of the URL on which it is called to resolve the path.</span></span>  
  
 <span data-ttu-id="eb889-485">このメソッドは、レンダリングされたページの上部にあるスクリプト ブロックを追加します。</span><span class="sxs-lookup"><span data-stu-id="eb889-485">This method adds a script block at the top of the rendered page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-486">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-486">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method.</span></span> <span data-ttu-id="eb889-487">される既存のクライアント スクリプト インクルードを確認するロジックが削除された場合がありますがまだされません重複したクライアント スクリプト、レンダリングされるページでため、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドは、重複をチェックします。</span><span class="sxs-lookup"><span data-stu-id="eb889-487">Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates.</span></span> <span data-ttu-id="eb889-488">チェックの利点は、不要な計算処理です。</span><span class="sxs-lookup"><span data-stu-id="eb889-488">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 <span data-ttu-id="eb889-489">この例では、次の内容のようなをという名前の JavaScript ファイルが必要です。</span><span class="sxs-lookup"><span data-stu-id="eb889-489">This example requires a JavaScript file named Script_include.js with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-490">クライアント スクリプト インクルードの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-490">The client script include type is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eb889-491">URL が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-491">The URL is <see langword="null" />.</span></span>  
  
<span data-ttu-id="eb889-492">\- または</span><span class="sxs-lookup"><span data-stu-id="eb889-492">\- or -</span></span> 
<span data-ttu-id="eb889-493">URL が空です。</span><span class="sxs-lookup"><span data-stu-id="eb889-493">The URL is empty.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptResource(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptResource(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptResource : Type * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptResource (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-494">登録するクライアント スクリプト リソースの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-494">The type of the client script resource to register.</span></span></param>
        <param name="resourceName"><span data-ttu-id="eb889-495">登録するクライアント スクリプト リソースの名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-495">The name of the client script resource to register.</span></span></param>
        <summary><span data-ttu-id="eb889-496">型とリソース名を使用して、クライアント スクリプト リソースを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-496">Registers the client script resource with the <see cref="T:System.Web.UI.Page" /> object using a type and a resource name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-497"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> WebResource.axd HTTP ハンドラーのアセンブリのコンパイル時のリソースにアクセスするときにメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb889-497">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler.</span></span> <span data-ttu-id="eb889-498"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>メソッドでスクリプトの登録、<xref:System.Web.UI.Page>オブジェクトができず、重複するスクリプト。</span><span class="sxs-lookup"><span data-stu-id="eb889-498">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method registers the script with the <xref:System.Web.UI.Page> object and prevents duplicate scripts.</span></span> <span data-ttu-id="eb889-499">このメソッドは、リソース URL の内容をラップする`<script>`要素ブロックします。</span><span class="sxs-lookup"><span data-stu-id="eb889-499">This method wraps the contents of the resource URL with a `<script>` element block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-500">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-500">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 <span data-ttu-id="eb889-501">次のコード例は、プログラムで適用する方法を示します、<xref:System.Web.UI.WebResourceAttribute>提供されるリソースのアセンブリをマークするメタデータ属性。</span><span class="sxs-lookup"><span data-stu-id="eb889-501">The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.</span></span>  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 <span data-ttu-id="eb889-502">この例には、という名前の JavaScript ファイルが必要です。 `Script_include.js`、次の内容。</span><span class="sxs-lookup"><span data-stu-id="eb889-502">This example requires a JavaScript file named `Script_include.js`, with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 <span data-ttu-id="eb889-503">コンパイル、`Script_include.js`ファイル内のリソースとして、`Samples.AspNet.CS.Controls`アセンブリを含む、`ClientScriptResourceLabel`クラス。</span><span class="sxs-lookup"><span data-stu-id="eb889-503">Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-504">クライアント リソースの名前が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-504">The client resource name is <see langword="null" />.</span></span>  
  
<span data-ttu-id="eb889-505">\- または</span><span class="sxs-lookup"><span data-stu-id="eb889-505">\- or -</span></span> 
<span data-ttu-id="eb889-506">クライアント リソースの名前の長さがゼロです。</span><span class="sxs-lookup"><span data-stu-id="eb889-506">The client resource name has a length of zero.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterExpandoAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-507">指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-507">Registers a name/value pair as a custom (expando) attribute of the specified control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId"><span data-ttu-id="eb889-508">カスタム属性を含む、ページ上の <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-508">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</span></span></param>
        <param name="attributeName"><span data-ttu-id="eb889-509">登録するカスタム属性の名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-509">The name of the custom attribute to register.</span></span></param>
        <param name="attributeValue"><span data-ttu-id="eb889-510">カスタム属性の値。</span><span class="sxs-lookup"><span data-stu-id="eb889-510">The value of the custom attribute.</span></span></param>
        <summary><span data-ttu-id="eb889-511">コントロール ID、属性名、および属性値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-511">Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-512"><xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>メソッドは、指定したカスタム (expando) 属性として名前/値ペアを登録<xref:System.Web.UI.Control>します。</span><span class="sxs-lookup"><span data-stu-id="eb889-512">The <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>.</span></span> <span data-ttu-id="eb889-513">Expando 属性が、レンダリングされたコントロールのマークアップの XHTML の互換性を保持するために JavaScript から動的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-513">The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</span></span> <span data-ttu-id="eb889-514">引用符とカスタム (expando) 属性の値の円記号がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-514">Quotes and backslashes in the custom (expando) attribute's values are escaped.</span></span> <span data-ttu-id="eb889-515">引用符とバック スラッシュをエスケープしない場合、<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>メソッドをオーバー ロードし、設定、`encode`パラメーターを`false`します。</span><span class="sxs-lookup"><span data-stu-id="eb889-515">If you do not want to escape quotes and backslashes, call the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> overload method and set the `encode` parameter to `false`.</span></span>  
  
 <span data-ttu-id="eb889-516">Expando 属性が見つからない、または expando 属性を追加するコントロールが見つからない場合は、クライアント スクリプトが生成されますが、コントロールには影響しません。</span><span class="sxs-lookup"><span data-stu-id="eb889-516">If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="controlId"><span data-ttu-id="eb889-517">カスタム属性を含む、ページ上の <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="eb889-517">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</span></span></param>
        <param name="attributeName"><span data-ttu-id="eb889-518">登録するカスタム属性の名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-518">The name of the custom attribute to register.</span></span></param>
        <param name="attributeValue"><span data-ttu-id="eb889-519">カスタム属性の値。</span><span class="sxs-lookup"><span data-stu-id="eb889-519">The value of the custom attribute.</span></span></param>
        <param name="encode"><span data-ttu-id="eb889-520">登録するカスタム属性をエンコードするかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="eb889-520">A Boolean value indicating whether to encode the custom attribute to register.</span></span></param>
        <summary><span data-ttu-id="eb889-521">コントロール ID、属性名、属性値、および属性値をエンコードするかどうかを示すブール値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-521">Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-522"><xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>メソッドは、指定したカスタム (expando) 属性として名前/値ペアを登録<xref:System.Web.UI.Control>します。</span><span class="sxs-lookup"><span data-stu-id="eb889-522">The <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>.</span></span> <span data-ttu-id="eb889-523">Expando 属性が、レンダリングされたコントロールのマークアップの XHTML の互換性を保持するために JavaScript から動的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-523">The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</span></span> <span data-ttu-id="eb889-524">設定、`encode`パラメーターを`true`とバック スラッシュ expando 属性の値は引用符をエスケープする必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="eb889-524">Set the `encode` parameter to `true` if you need to escape quotes and backslashes in your expando attribute's value.</span></span>  
  
 <span data-ttu-id="eb889-525">Expando 属性が見つからない、または expando 属性を追加するコントロールが見つからない場合は、クライアント スクリプトが生成されますが、コントロールには影響しません。</span><span class="sxs-lookup"><span data-stu-id="eb889-525">If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-526">次のコード例は、使用する方法を示します、<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>のメソッド、<xref:System.Web.UI.ClientScriptManager>クラス。</span><span class="sxs-lookup"><span data-stu-id="eb889-526">The following code example demonstrates how to use the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method of the <xref:System.Web.UI.ClientScriptManager> class.</span></span> <span data-ttu-id="eb889-527">レンダリングされたページのセットでクライアント スクリプト、`title`の属性を`<span>`要素。</span><span class="sxs-lookup"><span data-stu-id="eb889-527">The client script in the rendered page sets the `title` attribute of a `<span>` element.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/cs/clientscriptexpando.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/vb/clientscriptexpando.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForEventValidation">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-528">検証用にイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-528">Registers an event reference for validation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="eb889-529">イベントを生成するクライアント コントロールを表す一意の ID。</span><span class="sxs-lookup"><span data-stu-id="eb889-529">A unique ID representing the client control generating the event.</span></span></param>
        <summary><span data-ttu-id="eb889-530">イベントを生成するクライアント コントロールを表す一意のコントロール ID を使用して、検証用にイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-530">Registers an event reference for validation with a unique control ID representing the client control generating the event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-531">詳細と例については、次を参照してください。、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-531">For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-532">次の例は、使用する方法を示します、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドと<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>検証、およびページからコールバックが発生したことを検証する方法のコールバックを登録するためのメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-532">The following example shows how to use the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/eventvalidation2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/eventvalidation2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (options As PostBackOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : System.Web.UI.PostBackOptions -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="eb889-533">ポストバック イベントを開始するためにクライアントの JavaScript を生成する方法を指定する <see cref="T:System.Web.UI.PostBackOptions" />ブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eb889-533">A <see cref="T:System.Web.UI.PostBackOptions" /> object that specifies how client JavaScript is generated to initiate a postback event.</span></span></param>
        <summary><span data-ttu-id="eb889-534"><see cref="T:System.Web.UI.PostBackOptions" /> を使用して、検証用にイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-534">Registers an event reference for validation with <see cref="T:System.Web.UI.PostBackOptions" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-535">詳細と例については、次を参照してください。、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-535">For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.ValidateEvent" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string * string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="eb889-536">イベントを生成するクライアント コントロールを表す一意の ID。</span><span class="sxs-lookup"><span data-stu-id="eb889-536">A unique ID representing the client control generating the event.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-537">クライアント イベントで渡されるイベント引数。</span><span class="sxs-lookup"><span data-stu-id="eb889-537">Event arguments passed with the client event.</span></span></param>
        <summary><span data-ttu-id="eb889-538">イベントを生成するクライアント コントロールを表す一意のコントロール ID とイベント引数を使用して、検証用にイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-538">Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="eb889-539">次のコード例に示しますを使用して、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドと<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>検証コールバックを登録して、ページからコールバックが発生したことを検証するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-539">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page.</span></span> <span data-ttu-id="eb889-540">例に示すように、検証を向上させるために、検証を変更する可能性があります`argument`id やロールなど、ユーザーに固有の情報を格納するパラメーター</span><span class="sxs-lookup"><span data-stu-id="eb889-540">To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 <span data-ttu-id="eb889-541">次のコード例に示しますを使用して、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>検証コールバックを登録するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-541">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method to register a callback for validation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eb889-542">このメソッドが <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> メソッドの前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-542">The method is called prior to the <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> method.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/18fc94c9-56fc-46c3-9f29-7358f18667df"><span data-ttu-id="eb889-543">クライアントのコールバックと検証の実装例</span><span class="sxs-lookup"><span data-stu-id="eb889-543">Client Callback with Validation Implementation Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterHiddenField : string * string -&gt; unit" Usage="clientScriptManager.RegisterHiddenField (hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName"><span data-ttu-id="eb889-544">登録する隠しフィールドの名前。</span><span class="sxs-lookup"><span data-stu-id="eb889-544">The name of the hidden field to register.</span></span></param>
        <param name="hiddenFieldInitialValue"><span data-ttu-id="eb889-545">登録するフィールドの初期値。</span><span class="sxs-lookup"><span data-stu-id="eb889-545">The initial value of the field to register.</span></span></param>
        <summary><span data-ttu-id="eb889-546">隠し値を <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-546">Registers a hidden value with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-547"><xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>メソッドは、非表示を作成`<input>`レンダリングされた HTML ページ上の要素。</span><span class="sxs-lookup"><span data-stu-id="eb889-547">The <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> method creates a hidden `<input>` element on the rendered HTML page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-548">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>と<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-548">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods.</span></span> <span data-ttu-id="eb889-549">例では、配列と非表示の値を登録および定義、`OnClick`のイベント、`<input>`配列の 2 つの値と非表示の値の合計を計算するボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="eb889-549">The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-550"><paramref name="hiddenFieldName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-550"><paramref name="hiddenFieldName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.WebControls.HiddenField" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterOnSubmitStatement : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterOnSubmitStatement (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-551">登録する OnSubmit ステートメントの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-551">The type of the OnSubmit statement to register.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-552">登録する OnSubmit ステートメントのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-552">The key of the OnSubmit statement to register.</span></span></param>
        <param name="script"><span data-ttu-id="eb889-553">登録する OnSubmit ステートメントのスクリプト リテラル。</span><span class="sxs-lookup"><span data-stu-id="eb889-553">The script literal of the OnSubmit statement to register.</span></span></param>
        <summary><span data-ttu-id="eb889-554">型、キー、およびスクリプト リテラルを使用して、OnSubmit ステートメントを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-554">Registers an OnSubmit statement with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</span></span> <span data-ttu-id="eb889-555">ステートメントは、<see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> が送信されると、実行されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-555">The statement executes when the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> is submitted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-556">OnSubmit ステートメントは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-556">An OnSubmit statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-557">同じキーおよび種類とステートメントは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-557">Statements with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-558">指定された型とキーのペアを持つ 1 つだけのステートメントは、ページに登録できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-558">Only one statement with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="eb889-559">既に登録されているステートメントを登録しようとしても、重複したステートメントは作成されません。</span><span class="sxs-lookup"><span data-stu-id="eb889-559">Attempting to register a statement that is already registered will not create a duplicate of the statement.</span></span>  
  
 <span data-ttu-id="eb889-560">呼び出す、<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッドを OnSubmit ステートメントが指定したキーと型のペアに既に登録されているかどうかを判断し、スクリプトを追加しようとして不必要を回避します。</span><span class="sxs-lookup"><span data-stu-id="eb889-560">Call the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="eb889-561">`script`のパラメーター、<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>メソッドは、セミコロン (;) で適切に区切られている限り、複数のスクリプト コマンドに含めることができます。</span><span class="sxs-lookup"><span data-stu-id="eb889-561">The `script` parameter of the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method can contain multiple script commands as long as they are properly delimited with a semicolon (;).</span></span>  
  
 <span data-ttu-id="eb889-562"><xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>ページが送信され、送信をキャンセルする機会を提供する前に実行されるスクリプトを追加します。</span><span class="sxs-lookup"><span data-stu-id="eb889-562">The <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.</span></span>  
  
 <span data-ttu-id="eb889-563">HTML フォームの詳細については、`OnSubmit`属性を参照してください、 [World Wide Web Consortium (W3C) の Web サイト](https://go.microsoft.com/fwlink/?linkid=37125)します。</span><span class="sxs-lookup"><span data-stu-id="eb889-563">For more information on HTML forms and the `OnSubmit` attribute, see the [World Wide Web Consortium (W3C) Web site](https://go.microsoft.com/fwlink/?linkid=37125).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-564">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-564">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-565"><paramref name="type" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-565"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-566">スタートアップ スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-566">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-567">登録するスタートアップ スクリプの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-567">The type of the startup script to register.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-568">登録するスタートアップ スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-568">The key of the startup script to register.</span></span></param>
        <param name="script"><span data-ttu-id="eb889-569">登録するスタートアップ スクリプ リテラル。</span><span class="sxs-lookup"><span data-stu-id="eb889-569">The startup script literal to register.</span></span></param>
        <summary><span data-ttu-id="eb889-570">型、キー、およびスクリプト リテラルを使用して、<see cref="T:System.Web.UI.Page" /> オブジェクトにスタートアップ スクリプを登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-570">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-571">クライアント スクリプトは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-571">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-572">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-572">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-573">ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-573">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="eb889-574">既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。</span><span class="sxs-lookup"><span data-stu-id="eb889-574">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="eb889-575">呼び出す、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドを指定したキーおよび種類のペアでスタートアップ スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとして不必要を回避します。</span><span class="sxs-lookup"><span data-stu-id="eb889-575">Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="eb889-576">このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド、行う必要があります、スクリプトで提供されていることを確認して、`script`でパラメーターがラップされて、`<script>`要素ブロック。</span><span class="sxs-lookup"><span data-stu-id="eb889-576">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you must make sure that the script provided in the `script` parameter is wrapped with a `<script>` element block.</span></span>  
  
 <span data-ttu-id="eb889-577">によって追加されたスクリプト ブロック、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドは、ページ読み込みの終了時に、ページの前に、実行<xref:System.Web.UI.Control.OnLoad%2A>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="eb889-577">The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised.</span></span> <span data-ttu-id="eb889-578">スクリプト ブロックは、登録されている順序で出力されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="eb889-578">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="eb889-579">スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを 1 つの文字列で、スクリプトをまとめるし、すべて 1 つのクライアント スクリプト ブロック内に登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-579">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-580">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-580">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span> <span data-ttu-id="eb889-581">開始タグと終了タグのスクリプトが内に含まれるので注意、`script`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-581">Note that the beginning and closing script tags are included within the `script` parameter.</span></span> <span data-ttu-id="eb889-582">追加されたタグを参照してください、追加のパラメーターの設定に基づいてスクリプトを使用して、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-582">To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eb889-583">登録するスタートアップ スクリプの型。</span><span class="sxs-lookup"><span data-stu-id="eb889-583">The type of the startup script to register.</span></span></param>
        <param name="key"><span data-ttu-id="eb889-584">登録するスタートアップ スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="eb889-584">The key of the startup script to register.</span></span></param>
        <param name="script"><span data-ttu-id="eb889-585">登録するスタートアップ スクリプ リテラル。</span><span class="sxs-lookup"><span data-stu-id="eb889-585">The startup script literal to register.</span></span></param>
        <param name="addScriptTags"><span data-ttu-id="eb889-586">スクリプト タグを追加するかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="eb889-586">A Boolean value indicating whether to add script tags.</span></span></param>
        <summary><span data-ttu-id="eb889-587">型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、スタートアップ スクリプを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-587">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb889-588">スタートアップ スクリプトは、そのキーとその型で一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="eb889-588">A startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="eb889-589">同じキーおよび種類を使用して、スクリプトは、重複と見なされます。</span><span class="sxs-lookup"><span data-stu-id="eb889-589">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="eb889-590">ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。</span><span class="sxs-lookup"><span data-stu-id="eb889-590">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="eb889-591">既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。</span><span class="sxs-lookup"><span data-stu-id="eb889-591">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="eb889-592">呼び出す、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドを指定したキーおよび種類のペアでスタートアップ スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとして不必要を回避します。</span><span class="sxs-lookup"><span data-stu-id="eb889-592">Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="eb889-593">このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドで、スクリプトが提供されるかどうか示すことができます、`script`でパラメーターがラップされて、`<script>`要素のブロックを使用して、`addScriptTags`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-593">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter.</span></span> <span data-ttu-id="eb889-594">設定`addScriptTags`に`true`スクリプト タグが自動的に追加されることを示します。</span><span class="sxs-lookup"><span data-stu-id="eb889-594">Setting `addScriptTags` to `true` indicates that script tags will be added automatically.</span></span>  
  
 <span data-ttu-id="eb889-595">によって追加されたスクリプト ブロック、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドは、ページ読み込みの終了時に、ページの前に、実行<xref:System.Web.UI.Control.OnLoad%2A>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="eb889-595">The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised.</span></span> <span data-ttu-id="eb889-596">スクリプト ブロックは、登録されている順序で出力されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="eb889-596">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="eb889-597">スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを 1 つの文字列で、スクリプトをまとめるし、すべて 1 つのクライアント スクリプト ブロック内に登録します。</span><span class="sxs-lookup"><span data-stu-id="eb889-597">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb889-598">次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-598">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span> <span data-ttu-id="eb889-599">なお、`addScriptTags`にパラメーターが設定されている`false`開始と終了タグのスクリプトに含まれているように、`script`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="eb889-599">Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb889-600"><paramref name="type" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="eb889-600"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
        <altmember cref="F:System.Web.UI.HtmlTextWriterTag.Script" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb889-601">クライアント イベントを検証します。</span><span class="sxs-lookup"><span data-stu-id="eb889-601">Validates a client event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string -&gt; unit" Usage="clientScriptManager.ValidateEvent uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="eb889-602">イベントを生成するクライアント コントロールを表す一意の ID。</span><span class="sxs-lookup"><span data-stu-id="eb889-602">A unique ID representing the client control generating the event.</span></span></param>
        <summary><span data-ttu-id="eb889-603"><see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</span><span class="sxs-lookup"><span data-stu-id="eb889-603">Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string * string -&gt; unit" Usage="clientScriptManager.ValidateEvent (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="eb889-604">イベントを生成するクライアント コントロールを表す一意の ID。</span><span class="sxs-lookup"><span data-stu-id="eb889-604">A unique ID representing the client control generating the event.</span></span></param>
        <param name="argument"><span data-ttu-id="eb889-605">クライアント イベントで渡されるイベント引数。</span><span class="sxs-lookup"><span data-stu-id="eb889-605">The event arguments passed with the client event.</span></span></param>
        <summary><span data-ttu-id="eb889-606"><see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</span><span class="sxs-lookup"><span data-stu-id="eb889-606">Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="eb889-607">次のコード例に示しますを使用して、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドと<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>検証コールバックを登録して、ページからコールバックが発生したことを検証するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eb889-607">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page.</span></span> <span data-ttu-id="eb889-608">ここで示すように、検証を向上させるために、検証を変更する可能性があります`argument`id やロールなど、ユーザーに固有の情報を格納するパラメーター</span><span class="sxs-lookup"><span data-stu-id="eb889-608">To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eb889-609"><paramref name="uniqueId" /> は <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="eb889-609"><paramref name="uniqueId" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>