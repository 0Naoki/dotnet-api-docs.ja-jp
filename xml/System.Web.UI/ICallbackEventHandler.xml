<Type Name="ICallbackEventHandler" FullName="System.Web.UI.ICallbackEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5bdaac1b3c31dacf453c3e165f7357b0a5a0350f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36377221" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICallbackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallbackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ICallbackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallbackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallbackEventHandler" />
  <TypeSignature Language="F#" Value="type ICallbackEventHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>コントロールをサーバー上のコールバック イベントの対象にできることを示すために使用します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装、<xref:System.Web.UI.ICallbackEventHandler>コールバック イベントを受信する必要がある任意のカスタム コントロールのインターフェイスです。 詳細については、次を参照してください。[ポストバックなしクライアント コールバックの実装](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)です。  
  
 実装するコントロールの例については、<xref:System.Web.UI.ICallbackEventHandler>インターフェイスに含まれて、 <xref:System.Web.UI.WebControls.GridView>、 <xref:System.Web.UI.WebControls.DetailsView>、および<xref:System.Web.UI.WebControls.TreeView>コントロール。 コールバック イベントを実装するコントロールを対象とすると、<xref:System.Web.UI.ICallbackEventHandler>インターフェイス、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>イベント引数をパラメーターとして渡すと共に、イベントを処理するメソッドが呼び出されたと<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>メソッドがコールバックの結果を返します。  
  
 同期または非同期では、コールバック中にデータ ソース コントロールからデータを取得するコントロールでこれを実行できます。 ASP.NET コントロールと同様に<xref:System.Web.UI.WebControls.GridView>、 <xref:System.Web.UI.WebControls.DetailsView>、および<xref:System.Web.UI.WebControls.TreeView>同期的に実装されます。 同期コールバックは妨げませんユーザー ブラウザーで作業します。 同期モードで最後のコールバックが優先順位で、一度に 1 つだけのコールバックは実行できます。 Web コントロールが非同期動作をサポートするために実装されている場合は、複数のコールバックを同時に発生することができます。 非同期プログラミングの詳細については、「[イベント ベースの非同期パターン (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)です。  
  
 ユーザー インターフェイスから送信されたコールバック イベントが実装するコントロールによって表示されるかどうかを指定することができます、<xref:System.Web.UI.ICallbackEventHandler>インターフェイスが検証されます。 イベントの検証は、適切なセキュリティ プラクティスです。 ただし、パフォーマンス上の理由は無効にできます。 かどうかを制御するは、イベントの検証はコールバック イベントの実行、設定、`enableEventValidation`の属性、 [@ Page](http://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4)ディレクティブまたは`enableEventValidation`の属性、[要素 (ASP.NET 設定スキーマ)のページ](http://msdn.microsoft.com/library/4123bb66-3fe4-4d62-b70e-33758656b458)の Web.config ファイルです。 設定した場合、<xref:System.Web.UI.Page.EnableEventValidation%2A>でコードでは、プロパティを設定して、`Page_Init`ページ処理の段階です。 分散パフォーマンス コストがそのイベントの検証のセキュリティ上の利点の詳細については、次を参照してください。 [ASP.NET パフォーマンス概要](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b)です。  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
    <altmember cref="M:System.Web.UI.WebControls.DetailsView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="public string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackResult () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackResult();" />
      <MemberSignature Language="F#" Value="abstract member GetCallbackResult : unit -&gt; string" Usage="iCallbackEventHandler.GetCallbackResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールを対象とするコールバック イベントの結果を返します。</summary>
        <returns>コールバックの結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スローされた例外<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>できなくなる<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>呼び出されると、結果を返すからです。 防ぐために<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>結果を返すから例外がスローされたときにフラグを設定<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>から空の文字列を返すと<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.GetCallbackResult" />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="public void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseCallbackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseCallbackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaiseCallbackEvent : string -&gt; unit" Usage="iCallbackEventHandler.RaiseCallbackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">イベント ハンドラーに渡されるイベント引数を表す文字列。</param>
        <summary>コントロールを対象とするコールバック イベントを処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに`null`使用、イベントの引数パラメーターとして文字列がシリアル化される、サーバーに"null"と送信のバックアップを作成します。 区別する手段がないため`null`"null"、および使用を避ける必要があります`null`コールバックの引数のパラメーターです。  
  
 スローされた例外<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>できなくなる<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>呼び出されると、結果を返すからです。 防ぐために<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>結果を返すから例外がスローされたときにフラグを設定<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>から空の文字列を返すと<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      </Docs>
    </Member>
  </Members>
</Type>