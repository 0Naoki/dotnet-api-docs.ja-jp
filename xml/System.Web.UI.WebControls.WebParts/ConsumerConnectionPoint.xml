<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29624fae597644e3fae1c16dd4d9a165a85e3f15" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59349184" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4619f-101">コンシューマーとして動作するサーバー コントロールがプロバイダーとの接続を構成できるようにする、コネクション ポイント オブジェクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="4619f-101">Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4619f-102">すべて Web パーツには、2 つのサーバー コントロール間の接続が、各コントロールがあります (その他の要件) の間で、関連付けられている接続ポイント オブジェクトを他のコントロールへの接続および指定するかどうかに応じて、データを使用することができるコントロールプロバイダーまたは接続のコンシューマーとして指定されます。</span><span class="sxs-lookup"><span data-stu-id="4619f-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="4619f-103">A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトには一般に別のコントロールと共有できるデータの種類にコントロールを接続する方法の詳細が含まれています。</span><span class="sxs-lookup"><span data-stu-id="4619f-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="4619f-104">接続でコンシューマーとして機能するコントロール、その接続ポイントがある必要があります、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4619f-104">For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span> <span data-ttu-id="4619f-105">詳細については、Web パーツの接続と接続ポイントは、「参照」セクションのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4619f-105">For details on Web Parts connections and connection points, read the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="4619f-106">作成する、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト、いくつかの手順が必要です。</span><span class="sxs-lookup"><span data-stu-id="4619f-106">To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="4619f-107">インターフェイス インスタンスを参照するコンシューマー コントロールを有効にします。</span><span class="sxs-lookup"><span data-stu-id="4619f-107">Enable a consumer control to reference an interface instance.</span></span> <span data-ttu-id="4619f-108">A<xref:System.Web.UI.WebControls.WebParts.WebPart>または他のサーバー コントロール (任意の種類を追加するサーバー コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンを使用できます)、特定のインターフェイスのインスタンスからデータを使用できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-108">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance.</span></span> <span data-ttu-id="4619f-109">コントロールはインターフェイスを実装しない必要があります。プロバイダーのみを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-109">The control need not implement the interface; only the provider must implement it.</span></span> <span data-ttu-id="4619f-110">コンシューマーがプロバイダーによって提供される、正確なインターフェイス型に使用するか、その場合は、または、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトは、コンシューマーによって認識される型に、プロバイダーのインターフェイス型からデータを変換するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="4619f-110">The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer.</span></span> <span data-ttu-id="4619f-111">コンシューマーを有効にする一般的な方法として、目的のインターフェイス型への参照を格納するプライベート フィールドを宣言することです。</span><span class="sxs-lookup"><span data-stu-id="4619f-111">A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.</span></span>  
  
2.  <span data-ttu-id="4619f-112">コールバック メソッドを識別します。</span><span class="sxs-lookup"><span data-stu-id="4619f-112">Identify a callback method.</span></span> <span data-ttu-id="4619f-113">コンシューマーのメソッドは、プロバイダーとの接続を確立するためにコールバック メソッドとして識別する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-113">A method in the consumer must be identified as the callback method to establish a connection with the provider.</span></span> <span data-ttu-id="4619f-114">このメソッドは、プロバイダーの実装、および割り当てるプライベート フィールド (たとえば) に作成されたことの最初の手順で、インターフェイスのインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="4619f-114">This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step.</span></span> <span data-ttu-id="4619f-115">コンシューマーのコールバック メソッドを識別するための Web パーツのアプローチは、追加する、`ConnectionConsumer`メタデータ属性 (によって定義された、<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>クラス) をインターフェイスのインスタンスを受け取るメソッドにします。</span><span class="sxs-lookup"><span data-stu-id="4619f-115">The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance.</span></span> <span data-ttu-id="4619f-116">属性が追加されたときに、コンシューマー接続ポイントを使用する表示名が、唯一必須のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="4619f-116">When the attribute is added, the only required parameter is a display name to use for the consumer connection point.</span></span> <span data-ttu-id="4619f-117">ID など、省略可能なパラメーターを追加こともできます。</span><span class="sxs-lookup"><span data-stu-id="4619f-117">Optional parameters can also be added, such as an ID.</span></span>  
  
3.  <span data-ttu-id="4619f-118">プロセスとインターフェイスのインスタンスからデータを出力します。</span><span class="sxs-lookup"><span data-stu-id="4619f-118">Process and output the data from the interface instance.</span></span> <span data-ttu-id="4619f-119">必要に応じて、データでは、内部処理を実行して、コンシューマー コントロールが通常のページにデータにレンダリングされますし。</span><span class="sxs-lookup"><span data-stu-id="4619f-119">Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page.</span></span> <span data-ttu-id="4619f-120">これを行う一般的な方法は、コントロールをオーバーライドする<xref:System.Web.UI.Control.OnPreRender%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4619f-120">A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4619f-121">同期の要求中にコンシューマーをする必要がありますデータを要求プロバイダーから直接中または直後に、<xref:System.Web.UI.Control.PreRender>イベント。</span><span class="sxs-lookup"><span data-stu-id="4619f-121">During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event.</span></span> <span data-ttu-id="4619f-122">非同期の要求中に、レンダリング中に、任意の時点で、プロバイダーのコールバック メソッドが呼び出されない場合、開発者と想定できますコンシューマーにデータが送信されなかったこと。</span><span class="sxs-lookup"><span data-stu-id="4619f-122">During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.</span></span>  
  
 <span data-ttu-id="4619f-123">コントロールは、コンシューマーとして動作するように装備が後、は、コントロールが接続 (とプロバイダー コントロールも装備され使用可能な) に参加できます。</span><span class="sxs-lookup"><span data-stu-id="4619f-123">After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available).</span></span> <span data-ttu-id="4619f-124">Web ページのマークアップで、宣言型の静的な接続を作成する開発者が使用できる、`<asp:webpartconnection>`要素。</span><span class="sxs-lookup"><span data-stu-id="4619f-124">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="4619f-125">場合、`ConnectionConsumer`コールバック メソッドを識別するコンシューマーのソース コード内の属性は、接続ポイントの ID を指定し、その値を割り当てる必要があります、`ConsumerConnectionPointID`属性、`<asp:webpartconnection>`ページの要素。</span><span class="sxs-lookup"><span data-stu-id="4619f-125">If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="4619f-126">開発者がコンシューマー接続ポイントの ID を指定する理由は、コンシューマー コントロールに定義された複数の接続ポイントがあるかどうか。</span><span class="sxs-lookup"><span data-stu-id="4619f-126">A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control.</span></span> <span data-ttu-id="4619f-127">割り当てられる値がない場合は、コンシューマー コントロールのコンシューマー接続ポイントの ID が指定されていない、`ConsumerConnectionPointID`から取得した既定値を使用して、接続が作成するため、ページで、属性、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>フィールド。</span><span class="sxs-lookup"><span data-stu-id="4619f-127">If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="4619f-128">コードで接続を作成するには、開発者を新規に作成する必要があります<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトを呼び出すことによって、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>メソッドと ID または定義済みのインデックスと共に、コンシューマー コントロールの ID を渡す<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>コンシューマー コントロール内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4619f-128">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control.</span></span> <span data-ttu-id="4619f-129">返された<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>、プロバイダー コントロールと対応するへの参照をコンシューマー コントロールへの参照と共にオブジェクト<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトはすべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>新たに作成するメソッド<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4619f-129">The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="4619f-130">開発者は、宣言またはプログラムによって接続の確立の一部として、コンシューマー接続ポイントを使用できますが、ユーザーがユーザー インターフェイス (UI) 経由の接続を確立するために、コンシューマー接続ポイントと対話もできます。</span><span class="sxs-lookup"><span data-stu-id="4619f-130">Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="4619f-131">開発者は、宣言する場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、Web ページで接続を作成するユーザーの実行時の UI を提供します。</span><span class="sxs-lookup"><span data-stu-id="4619f-131">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="4619f-132">ユーザーをクリックして、接続を確立するための開始点として、プロバイダー コントロールを選択する場合は、動詞の接続 (コンシューマーこともできますが、結果として得られる接続に違いはありません) でのドロップダウン リスト コントロールが UI に表示されます、使用可能なコンシューマー接続ポイント (またはポイントが複数の場合) の名前を表示、プロバイダーがデータを送信できます。</span><span class="sxs-lookup"><span data-stu-id="4619f-132">If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to.</span></span> <span data-ttu-id="4619f-133">ユーザーは、接続を確立するコンシューマー接続ポイントを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-133">Users must select a consumer connection point to establish a connection.</span></span>  
  
 <span data-ttu-id="4619f-134">A<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトは、特定のコンシューマー コントロールを直接関連付けます、ベースから継承プロパティで、接続の詳細を格納<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス。</span><span class="sxs-lookup"><span data-stu-id="4619f-134">A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="4619f-135">たとえばで、継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>プロパティを使用してインターフェイスの型を保持するコンシューマー接続ポイント。</span><span class="sxs-lookup"><span data-stu-id="4619f-135">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses.</span></span> <span data-ttu-id="4619f-136">プロバイダーと接続でコンシューマー両方について、インターフェイスの型は場合、コントロールは互換性があり、直接接続を構成できる。</span><span class="sxs-lookup"><span data-stu-id="4619f-136">If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="4619f-137">互換性のないし、使用する必要があります、同じインターフェイス型に、プロバイダーとコンシューマーが機能できない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト プロバイダー コネクション ポイントの変換を<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>コンシューマーが使用できる型にプロパティ。</span><span class="sxs-lookup"><span data-stu-id="4619f-137">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with.</span></span> <span data-ttu-id="4619f-138">もう 1 つの重要な継承されたプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>プロパティは、ユーザーがコンシューマーの接続を選択するための UI に表示するフレンドリ名を提供するポイントの接続を作成するときにします。</span><span class="sxs-lookup"><span data-stu-id="4619f-138">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections.</span></span> <span data-ttu-id="4619f-139">開発者の追加と、表示名は必須のパラメーターを`ConnectionConsumer`コンシューマー コントロールのコールバック メソッドに属性します。</span><span class="sxs-lookup"><span data-stu-id="4619f-139">The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control.</span></span> <span data-ttu-id="4619f-140">継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>プロパティは、上記コンシューマーは、複数の接続ポイントを持つ、コンシューマー接続ポイントの一意識別子を提供するためのようにも、役立ちます。</span><span class="sxs-lookup"><span data-stu-id="4619f-140">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points.</span></span> <span data-ttu-id="4619f-141">コンシューマーは複数<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>とここで定義されている開発者は、追加時にオブジェクト、`ConnectionConsumer`属性、メソッドに各接続ポイントを区別するために ID 値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-141">A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="4619f-142">その他の注目すべき継承されたプロパティは 1 つは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>プロパティで、コンシューマー接続ポイントが複数のプロバイダーに同時に接続できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="4619f-142">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers.</span></span> <span data-ttu-id="4619f-143">このプロパティの値が`false`コンシューマー接続ポイントの既定 (既定値は`true`プロバイダー コネクション ポイント)。</span><span class="sxs-lookup"><span data-stu-id="4619f-143">This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points).</span></span>  
  
 <span data-ttu-id="4619f-144"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラスは、いくつかの固有のメソッドを追加します。 メンバーに、継承元、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス。</span><span class="sxs-lookup"><span data-stu-id="4619f-144">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="4619f-145"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>メソッドが、プロバイダーからインターフェイス インスタンスを取得するコンシューマーの独自定義のコールバック メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4619f-145">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider.</span></span> <span data-ttu-id="4619f-146"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>メソッドは、接続ポイントが、関連付けられたコンシューマー コントロールの現在の状態に基づいて接続を確立できるかどうかを示すブール値を返します。</span><span class="sxs-lookup"><span data-stu-id="4619f-146">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4619f-147">次のコード例では、宣言によって接続を作成、プログラム、または UI の各ケースでは、コンシューマー接続ポイントを使用する簡単な方法を示します。</span><span class="sxs-lookup"><span data-stu-id="4619f-147">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.</span></span>  
  
 <span data-ttu-id="4619f-148">この例では、4 つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-148">The example has four parts:</span></span>  
  
-   <span data-ttu-id="4619f-149">ページのモードを表示するユーザー コントロール Web パーツを変更することができます。</span><span class="sxs-lookup"><span data-stu-id="4619f-149">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="4619f-150">ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="4619f-150">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="4619f-151">すべてのコントロールをホストし、コード例を実行する Web ページ。</span><span class="sxs-lookup"><span data-stu-id="4619f-151">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="4619f-152">ページの例を実行する方法の説明です。</span><span class="sxs-lookup"><span data-stu-id="4619f-152">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="4619f-153">このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。</span><span class="sxs-lookup"><span data-stu-id="4619f-153">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="4619f-154">割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。</span><span class="sxs-lookup"><span data-stu-id="4619f-154">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="4619f-155">詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル。ページのパーツを Web 上の表示モードを変更する](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。</span><span class="sxs-lookup"><span data-stu-id="4619f-155">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="4619f-156">コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。</span><span class="sxs-lookup"><span data-stu-id="4619f-156">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="4619f-157">ソース ファイルには、という名前の単純なインターフェイスが含まれています。`IZipCode`します。</span><span class="sxs-lookup"><span data-stu-id="4619f-157">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="4619f-158"><xref:System.Web.UI.WebControls.WebParts.WebPart>という名前のクラス`ZipCodeWebPart`するインターフェイスを実装し、プロバイダー コントロールとして機能します。</span><span class="sxs-lookup"><span data-stu-id="4619f-158">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="4619f-159">他の<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスの名前が`WeatherWebPart`、および接続のコンシューマーとして機能します。</span><span class="sxs-lookup"><span data-stu-id="4619f-159">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="4619f-160">このクラスは、という名前のメソッドを持つ`GetZipCode`のインスタンスを取得する、`IZipCode`プロバイダー コントロールからのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="4619f-160">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="4619f-161">コンシューマーのコネクション ポイントのメソッドとしてこのメソッドがマークされていることに注意してください、`ConnectionConsumer`そのメタデータ内の属性。</span><span class="sxs-lookup"><span data-stu-id="4619f-161">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="4619f-162">これは、コンシューマー コントロールの接続ポイント メソッドを識別するためのメカニズムです。</span><span class="sxs-lookup"><span data-stu-id="4619f-162">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="4619f-163">実行するコード例は、このソース コードをコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-163">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="4619f-164">明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。</span><span class="sxs-lookup"><span data-stu-id="4619f-164">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="4619f-165">または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。</span><span class="sxs-lookup"><span data-stu-id="4619f-165">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="4619f-166">このコード例では、動的なコンパイルを使用します。</span><span class="sxs-lookup"><span data-stu-id="4619f-166">This code example uses dynamic compilation.</span></span> <span data-ttu-id="4619f-167">コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル。カスタムの開発と Web サーバー コントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。</span><span class="sxs-lookup"><span data-stu-id="4619f-167">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="4619f-168">コード例の 3 番目の部分は、Web ページです。</span><span class="sxs-lookup"><span data-stu-id="4619f-168">The third part of the code example is the Web page.</span></span> <span data-ttu-id="4619f-169">上部にある、 `Register`  ページの表示モードを接続を形成するカスタム コントロールおよび変更できるようにするユーザー コントロールを登録するためのディレクティブ。</span><span class="sxs-lookup"><span data-stu-id="4619f-169">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="4619f-170">宣言内自体の接続が作成された、`<staticconnections>`ページ上の要素。</span><span class="sxs-lookup"><span data-stu-id="4619f-170">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="4619f-171">これは、接続を作成する 1 つの方法-メモ、`ConsumerConnectionPointID`属性、`<asp:webpartconnection>`要素。</span><span class="sxs-lookup"><span data-stu-id="4619f-171">This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="4619f-172">プログラムでは、接続を作成することもできます。これを行うためのコードは、`Button1_Click`メソッド。</span><span class="sxs-lookup"><span data-stu-id="4619f-172">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="4619f-173">ここで、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトを作成し、実際の接続を作成するメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="4619f-173">In this case, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="4619f-174">宣言またはプログラムによって、接続が作成されるかどうか接続ポイントは、プロバイダーとコンシューマーの両方に対して常に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-174">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="4619f-175">`Button2_Click`メソッドへのアクセス、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>プロバイダーとコンシューマーの両方のオブジェクトし、そのプロパティ値の一部のページでは、ラベルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="4619f-175">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="4619f-176">ブラウザーでページを読み込んだ後、**コネクション ポイントの詳細**ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="4619f-176">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="4619f-177">宣言型の接続で確立されているプロバイダーとコンシューマーのコネクション ポイントに関する情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="4619f-177">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="4619f-178">次に、使用、**表示モード**接続モードのドロップダウン コントロールをページに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="4619f-178">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="4619f-179">動詞メニューで、 **ZIP コード プロバイダー** <xref:System.Web.UI.WebControls.WebParts.WebPart> (タイトル バーの下向きの矢印で表される)、コントロールの接続の動詞をクリックします。</span><span class="sxs-lookup"><span data-stu-id="4619f-179">On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="4619f-180">UI が表示されたら、接続はによって自動的に作成された、`<asp:connectionszone>`コントロール、ページで宣言します。</span><span class="sxs-lookup"><span data-stu-id="4619f-180">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="4619f-181">これは、前に説明した宣言とプログラムのメソッドと共に接続 (UI) を作成する別の方法です。</span><span class="sxs-lookup"><span data-stu-id="4619f-181">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="4619f-182">をクリックして、**切断**を既存の静的な接続を終了するボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="4619f-182">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="4619f-183">をクリックして、**コンシューマーへの接続を作成する**リンク。</span><span class="sxs-lookup"><span data-stu-id="4619f-183">Click the **Create a Connection to a Consumer** link.</span></span> <span data-ttu-id="4619f-184">コンシューマー接続ポイントの表示名を一覧表示するドロップダウン コントロールが UI に表示されます。</span><span class="sxs-lookup"><span data-stu-id="4619f-184">The UI now displays a drop-down control that lists the consumer connection point display name.</span></span> <span data-ttu-id="4619f-185">ボックスの一覧で、接続ポイントを選択し、クリックして**Connect**接続を完了します。</span><span class="sxs-lookup"><span data-stu-id="4619f-185">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="4619f-186">次に、クリックして**切断**もう一度です。</span><span class="sxs-lookup"><span data-stu-id="4619f-186">Next, click **Disconnect** again.</span></span> <span data-ttu-id="4619f-187">をクリックして、**動的接続**プログラムで接続を作成するボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="4619f-187">Click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="4619f-188">使用して、**表示モード**コントロールをページをブラウズ モードを返します。</span><span class="sxs-lookup"><span data-stu-id="4619f-188">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="4619f-189">をクリックして、**接続ポイントの詳細**を示すために、ボタンをもう一度、に関する詳細情報、コンシューマー接続ポイント オブジェクト 1 回以上。</span><span class="sxs-lookup"><span data-stu-id="4619f-189">Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.</span></span>  
  
 <span data-ttu-id="4619f-190">接続を確立し、3 つの方法でのコンシューマー接続ポイントの使用例を説明しました Web ページのマークアップで宣言された静的な接続。使用するコードで作成した接続、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト、および接続 UI を介して、ユーザーによって作成された接続。</span><span class="sxs-lookup"><span data-stu-id="4619f-190">The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="4619f-191">ASP.NET Web パーツ コントロール</span><span class="sxs-lookup"><span data-stu-id="4619f-191">ASP.NET Web Parts Controls</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)"><span data-ttu-id="4619f-192">Web パーツ接続の概要</span><span class="sxs-lookup"><span data-stu-id="4619f-192">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="4619f-193">接続を確立するためのインターフェイス インスタンスをコンシューマーに返す、コンシューマー コントロールのメソッド。</span><span class="sxs-lookup"><span data-stu-id="4619f-193">The method in the consumer control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="4619f-194">コンシューマーがプロバイダーから受け取るインターフェイスの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="4619f-194">The <see cref="T:System.Type" /> of the interface that the consumer receives from a provider.</span></span></param>
        <param name="controlType"><span data-ttu-id="4619f-195">コンシューマー接続ポイントが関連付けられたコンシューマー コントロールの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="4619f-195">The <see cref="T:System.Type" /> of the consumer control with which the consumer connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="4619f-196">接続ユーザー インターフェイス (UI) でユーザーに対して表示される、コンシューマー接続ポイントの表示名。</span><span class="sxs-lookup"><span data-stu-id="4619f-196">A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="4619f-197">コンシューマー接続ポイントの一意な識別子。</span><span class="sxs-lookup"><span data-stu-id="4619f-197">A unique identifier for the consumer connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="4619f-198">コンシューマー接続ポイントが、プロバイダーとの間で同時に複数の接続を持つことができるかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="4619f-198">A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.</span></span></param>
        <summary><span data-ttu-id="4619f-199"><see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4619f-199">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4619f-200"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>のコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラスが基本のコンス トラクターのさまざまなパラメーターを渡すと、基本クラスの初期化を呼び出すだけです。</span><span class="sxs-lookup"><span data-stu-id="4619f-200">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="4619f-201">基底クラスのコンス トラクターのパラメーターの接続ポイントの数を確認し、いくつかの例外をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="4619f-201">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="4619f-202">可能性のある例外の一覧は、例外を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4619f-202">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="4619f-203">呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>のインスタンスを作成するコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラス。</span><span class="sxs-lookup"><span data-stu-id="4619f-203">You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="4619f-204">ただし、単に接続を確立し、クラスを拡張しないがいる場合でを呼び出す必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>プロバイダーから、コネクション ポイント オブジェクトを返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="4619f-204">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4619f-205">派生させる方法を次のコード例に示します、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>カスタム プロバイダー接続ポイントを作成するクラス。</span><span class="sxs-lookup"><span data-stu-id="4619f-205">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="4619f-206">コード例では、3 つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-206">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="4619f-207">プロバイダーを含むソース ファイル<xref:System.Web.UI.WebControls.WebParts.WebPart>コンシューマーを制御します。<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4619f-207">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="4619f-208">静的な接続のコントロールをホストする Web ページ。</span><span class="sxs-lookup"><span data-stu-id="4619f-208">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="4619f-209">サンプル コードを実行する方法の説明です。</span><span class="sxs-lookup"><span data-stu-id="4619f-209">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="4619f-210">コード例の最初の部分は、プロバイダーとコンシューマーのソース<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>という名前のクラス`TableConsumerConnectionPoint`します。</span><span class="sxs-lookup"><span data-stu-id="4619f-210">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`.</span></span> <span data-ttu-id="4619f-211">注意のコンス トラクター、`TableConsumerConnectionPoint`クラスは、必須のパラメーターを渡すパラメーター セクションに記載されている、基本コンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4619f-211">Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="4619f-212">いることを確認、`TableConsumer`クラス、`SetConnectionInterface`メソッドは、接続のコールバック メソッドとして指定し、`ConnectionConsumer`属性は、カスタムを宣言`TableConsumerConnectionPoint`をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="4619f-212">Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter.</span></span> <span data-ttu-id="4619f-213">これは、カスタムのコンシューマー接続ポイントを作成し、それをコンシューマー コントロールに関連付ける方法を示します。</span><span class="sxs-lookup"><span data-stu-id="4619f-213">This demonstrates how to create a custom consumer connection point and then associate it with a consumer control.</span></span> <span data-ttu-id="4619f-214">この例では、ソース コードが動的にコンパイル、ため、ソース コード ファイルは、Web アプリケーションの App_Code サブフォルダーに配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-214">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="4619f-215">コード例の 2 番目の部分は、静的な Web パーツ接続でカスタム コントロールをホストする Web ページです。</span><span class="sxs-lookup"><span data-stu-id="4619f-215">The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection.</span></span> <span data-ttu-id="4619f-216">ページの上部には、`Register`ディレクティブをプレフィックスとカスタム コントロールの名前空間を宣言します。</span><span class="sxs-lookup"><span data-stu-id="4619f-216">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="4619f-217">使用して、接続が宣言されている、`<asp:webpartconnection>`要素、およびプロバイダーとコンシューマー コントロールが内で宣言された、`<asp:webpartzone>`要素。</span><span class="sxs-lookup"><span data-stu-id="4619f-217">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="4619f-218">ブラウザーでページを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="4619f-218">Load the page in a browser.</span></span> <span data-ttu-id="4619f-219">既にコントロール間の接続が存在し、接続が、ページ内で静的接続として宣言されているため、コンシューマーは、プロバイダーからデータが表示されます。</span><span class="sxs-lookup"><span data-stu-id="4619f-219">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> <span data-ttu-id="4619f-220">は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="4619f-220">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="4619f-221">または</span><span class="sxs-lookup"><span data-stu-id="4619f-221">-or-</span></span> 
 <paramref name="interfaceType" /> <span data-ttu-id="4619f-222">は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="4619f-222">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="4619f-223">または</span><span class="sxs-lookup"><span data-stu-id="4619f-223">-or-</span></span> 
 <paramref name="controlType" /> <span data-ttu-id="4619f-224">は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="4619f-224">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="4619f-225">または</span><span class="sxs-lookup"><span data-stu-id="4619f-225">-or-</span></span> 
 <paramref name="displayName" /> <span data-ttu-id="4619f-226">が <see langword="null" /> か空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="4619f-226">is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> <span data-ttu-id="4619f-227">が、コンシューマー コントロール (またはそれから派生した有効なクラス) と同じ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="4619f-227">is not the same type as the consumer control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="4619f-228">ASP.NET Web パーツ コントロール</span><span class="sxs-lookup"><span data-stu-id="4619f-228">ASP.NET Web Parts Controls</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="4619f-229">コンシューマー接続ポイントに関連付けられたコンシューマー コントロール。</span><span class="sxs-lookup"><span data-stu-id="4619f-229">The consumer control associated with a consumer connection point.</span></span></param>
        <param name="data"><span data-ttu-id="4619f-230">プロバイダー コントロールから返されたインターフェイス インスタンス。</span><span class="sxs-lookup"><span data-stu-id="4619f-230">The interface instance returned from a provider control.</span></span></param>
        <summary><span data-ttu-id="4619f-231">コンシューマー コントロールのコールバック メソッドを呼び出し、プロバイダー コントロールからインターフェイス インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="4619f-231">Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4619f-232">このメソッドは、コンシューマー コントロールのデータが含まれるプロバイダーからインターフェイス インスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="4619f-232">This method receives an interface instance from a provider that contains data for the consumer control.</span></span>  
  
 <span data-ttu-id="4619f-233"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>メソッドを呼び出して<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>接続がアクティブ化されるオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="4619f-233">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="4619f-234">これは、接続を開始して、データを共有する 2 つのコントロールを有効化の一部である重要なステップです。</span><span class="sxs-lookup"><span data-stu-id="4619f-234">This is a critical step that is part of initiating a connection and enabling two controls to share data.</span></span>  
  
 <span data-ttu-id="4619f-235">接続でコンシューマー コントロールは、プロバイダーと同じ型のインターフェイスを使用できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-235">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="4619f-236">コントロールとの互換性がない場合はそうでないと、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトは、接続を確立するために使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-236">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> <span data-ttu-id="4619f-237">は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="4619f-237">is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="4619f-238"><see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> に関連付けられたコンシューマー コントロール。</span><span class="sxs-lookup"><span data-stu-id="4619f-238">The consumer control associated with the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</span></span></param>
        <param name="secondaryInterfaces"><span data-ttu-id="4619f-239">接続に参加するセカンダリ インターフェイスの <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</span><span class="sxs-lookup"><span data-stu-id="4619f-239">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of any secondary interfaces that participate in a connection.</span></span></param>
        <summary><span data-ttu-id="4619f-240">コンシューマー接続ポイントが現在接続を確立できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="4619f-240">Determines whether a consumer connection point is currently capable of establishing a connection.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="4619f-241">コネクション ポイントが現在接続を確立できる場合は true。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4619f-241">if a connection point can currently establish a connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4619f-242">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="4619f-242">The default is <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4619f-243"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>メソッド実装を返しますでは常に`true`のすべてのケースで、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラス。</span><span class="sxs-lookup"><span data-stu-id="4619f-243">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="4619f-244">状態を確認するこのメソッドの目的は、`control`と`secondaryInterfaces`を決定する特定の重要なポイントでかどうかを<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトが現在の接続を作成できません。</span><span class="sxs-lookup"><span data-stu-id="4619f-244">The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection.</span></span>  
  
 <span data-ttu-id="4619f-245">シナリオがあります、`control`としても、接続、不可能な状態では、場所または`secondaryInterfaces`接続を構成する前に存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4619f-245">There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed.</span></span> <span data-ttu-id="4619f-246">このような場合は、開発者がから継承できます、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラスし、オーバーライド、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>接続ポイントが接続をサポートする準備がある場合を決定するカスタム実装を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="4619f-246">In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>