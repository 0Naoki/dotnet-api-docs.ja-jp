<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="575da1e985d2a34222cb6c445b73da8de19944c0" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59352317" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロバイダーとして動作するサーバー コントロールがコンシューマーとの接続を形成できるようにする、コネクション ポイント オブジェクトを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべて Web パーツには、2 つのサーバー コントロール間の接続が、各コントロールがあります (その他の要件) の間で、関連付けられている接続ポイント オブジェクトを他のコントロールへの接続および指定するかどうかに応じて、データを使用することができるコントロールプロバイダーまたは接続のコンシューマーとして指定されます。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトには一般に別のコントロールと共有できるデータの種類にコントロールを接続する方法の詳細が含まれています。 接続でプロバイダーとして機能するコントロール、その接続ポイントがある必要があります、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。 詳細については、Web パーツの接続と接続ポイントは、「参照」セクションのトピックを参照してください。  
  
 作成する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、いくつかの手順が必要です。  
  
1.  インターフェイスを作成します。 ときに、コンシューマーとプロバイダーの共有データをあるインターフェイスのインスタンスを取得し、コンシューマーにそのインスタンスを返すことでは。  
  
2.  プロバイダーのインターフェイスを実装します。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>または他のサーバー コントロール (任意の種類のサーバー コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンを使用できます)、プロバイダーは、最初の手順で作成したインターフェイスを実装する必要がありますになります。  
  
3.  コールバック メソッドを識別します。 プロバイダーのメソッドは、接続を確立するコールバック メソッドとして識別する必要があります。 このメソッドは、コンシューマーに実装されたインターフェイスのインスタンスを返します。 プロバイダーのコールバック メソッドを識別するための Web パーツのアプローチは、追加する、`ConnectionProvider`メタデータ属性 (によって定義された、<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>クラス) をインターフェイス インスタンスを返すメソッドにします。 属性が追加されたときに、唯一必須のパラメーターは、プロバイダー接続ポイントを使用する表示名になります。 接続ポイントの ID などは、省略可能なパラメーターが追加することもできます。  
  
 コントロールは、プロバイダーとして機能するように装備が後、は、コントロールが接続 (装備され使用可能なコンシューマー コントロールは同様に、ことを想定) に参加できます。 Web ページのマークアップで、宣言型の静的な接続を作成する開発者が使用できる、`<asp:webpartconnection>`要素。 場合、`ConnectionProvider`コールバック メソッドを識別するプロバイダーのソース コード内の属性は、接続ポイントの ID を指定し、その値を割り当てる必要があります、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`ページの要素。 開発者がプロバイダーのコネクション ポイントの ID を指定する 1 つの理由は、プロバイダー コントロールに複数の接続ポイントがあるかどうか。 割り当てられる値がない場合は、プロバイダー コントロール プロバイダー コネクション ポイントの ID が指定されていない、`ProviderConnectionPointID`から取得した既定値を使用して、接続が作成するため、ページで、属性、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>フィールド。  
  
 コードで接続を作成するには、開発者を新規に作成する必要があります<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを呼び出すことによって、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドと ID または定義済みのインデックスと共に、プロバイダー コントロールの ID を渡す<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>プロバイダー コントロール内のオブジェクト。 返された<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>、コンシューマー コントロールと対応するへの参照をプロバイダー コントロールへの参照と共にオブジェクト<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトはすべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>新たに作成するメソッド<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。  
  
 開発者は、宣言またはプログラムによって接続の確立の一部としてプロバイダー コネクション ポイントを使用できますが、ユーザーがユーザー インターフェイス (UI) 経由の接続を確立するために、プロバイダー接続ポイントと対話もできます。 開発者は、宣言する場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、Web ページで接続を作成するユーザーの実行時の UI を提供します。 ユーザーをクリックして、接続を確立するための開始点として、コンシューマー コントロールを選択する場合は、動詞の接続 (プロバイダーを選択することも、結果として得られる接続に違いはありません) でドロップダウン リスト コントロールが UI に表示されます、使用可能なプロバイダー接続ポイント (またはポイントが複数の場合) の名前を表示します。 ユーザーは、接続を作成するプロバイダー接続ポイントを選択する必要があります。  
  
 A<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトは、特定のプロバイダー コントロールを直接関連付けます、ベースから継承プロパティで、接続の詳細を格納<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス。 たとえばで、継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>プロパティ、プロバイダー接続ポイントは、プロバイダーによって返されるインターフェイスの型。 場合は、プロバイダーと同じ操作両方の接続でコンシューマー インターフェイスの型をコントロールは互換性があり、直接接続を構成できますします。 互換性のないし、使用する必要があります、同じインターフェイス型に、プロバイダーとコンシューマーが機能できない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト プロバイダー コネクション ポイントの変換を<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>コンシューマーが使用できる型に値。 もう 1 つの重要な継承されたプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>プロパティは、ユーザーがプロバイダーの接続を選択するための UI に表示するフレンドリ名を提供するポイントの接続を作成するときにします。 開発者の追加と、表示名は必須のパラメーターを`ConnectionProvider`属性をプロバイダー コントロールのコールバック メソッド。 継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>プロパティは、上記プロバイダーが複数の接続ポイントを持つことをプロバイダーのコネクション ポイントの一意識別子を提供するためのようにも、役立ちます。 プロバイダーでは複数<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>とここで定義されている開発者は、追加時にオブジェクト、`ConnectionProvider`属性、メソッドに各接続ポイントを区別するために ID 値を指定する必要があります。 その他の注目すべき継承されたプロパティは 1 つは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>プロパティで、プロバイダーのコネクション ポイントが複数のコンシューマーに同時に接続できるかどうかを示します。 このプロパティの値が`true`プロバイダー コネクション ポイントの既定 (既定値は`false`コンシューマー接続ポイント)。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスは、いくつかの固有のメソッドを追加します。 メンバーに、継承元、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドをコールバック メソッドをコンシューマーに返すインターフェイスのインスタンスを取得します。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドは、既存の接続の一部である追加の消費者のインターフェイスを取得しますが、インターフェイスではない接続を確立するために使用します。  
  
   
  
## Examples  
 次のコード例では、宣言によって接続を作成、プログラム、または UI の各ケースでは、プロバイダーのコネクション ポイントを使用する簡単な方法を示します。  
  
 この例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル。ページのパーツを Web 上の表示モードを変更する](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。 ソース ファイルには、という名前の単純なインターフェイスが含まれています。`IZipCode`します。 <xref:System.Web.UI.WebControls.WebParts.WebPart>という名前のクラス`ZipCodeWebPart`するインターフェイスを実装し、プロバイダー コントロールとして機能します。 その`ProvideIZipCode`メソッドは、インターフェイスの唯一のメンバーを実装するコールバック メソッドです。 メソッドは、単に、インターフェイスのインスタンスを返します。 メソッドが設定されている、`ConnectionProvider`そのメタデータ内の属性。 これは、プロバイダーのコネクション ポイントのコールバック メソッドとしてメソッドを識別するための機構です。 他の<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスの名前が`WeatherWebPart`、および接続のコンシューマーとして機能します。 このクラスは、という名前のメソッドを持つ`GetZipCode`のインスタンスを取得する、`IZipCode`プロバイダー コントロールからのインターフェイス。 コンシューマーのコネクション ポイントのメソッドとしてこのメソッドがマークされていることに注意してください、`ConnectionConsumer`そのメタデータ内の属性。 これは、コンシューマー コントロールの接続ポイント メソッドを識別するためのメカニズムです。  
  
 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル。カスタムの開発と Web サーバー コントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 上部にある、 `Register`  ページの表示モードを接続を形成するカスタム コントロールおよび変更できるようにするユーザー コントロールを登録するためのディレクティブ。 宣言内自体の接続が作成された、`<staticconnections>`ページ上の要素。 これは、接続を作成する 1 つの方法-メモ、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`要素。 プログラムでは、接続を作成することもできます。これを行うためのコードは、`Button1_Click`メソッド。 ここで、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを作成し、実際の接続を作成するメソッドに渡されます。 宣言またはプログラムによって、接続が作成されるかどうか接続ポイントは、プロバイダーとコンシューマーの両方に対して常に指定する必要があります。 `Button2_Click`メソッドへのアクセス、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>プロバイダーとコンシューマーの両方のオブジェクトし、そのプロパティ値の一部のページでは、ラベルに書き込みます。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、**コネクション ポイントの詳細**ボタンをクリックします。 宣言型の接続で確立されているプロバイダーとコンシューマーのコネクション ポイントに関する情報が表示されます。 次に、使用、**表示モード**接続モードのドロップダウン コントロールをページに切り替えます。 動詞メニューで、**郵便番号/ZIP Code コンシューマー** <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール (タイトル バーの下向きの矢印で表される)、connect の動詞をクリックします。 UI が表示されたら、接続はによって自動的に作成された、`<asp:connectionszone>`コントロール、ページで宣言します。 これは、前に説明した宣言とプログラムのメソッドと共に接続 (UI) を作成する別の方法です。 をクリックして、**切断**を既存の静的な接続を終了するボタンをクリックします。 をクリックして、**プロバイダーへの接続を作成する**リンク。 UI では、プロバイダー接続ポイントの表示名を一覧表示するドロップダウン コントロールが表示されます。 ボックスの一覧で、接続ポイントを選択し、クリックして**Connect**接続を完了します。 次に、クリックして**切断**もう一度です。 をクリックし、**動的接続**プログラムで接続を作成するボタンをクリックします。 使用して、**表示モード**コントロールをページをブラウズ モードを返します。 をクリックして、**接続ポイントの詳細**をもう一度プロバイダーのコネクション ポイント オブジェクトの詳細を示すために、もう一度ボタン。  
  
 接続を確立し、3 つの方法でプロバイダーのコネクション ポイントの使用例を説明しました Web ページのマークアップで宣言された静的な接続。使用するコードで作成した接続、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、および接続 UI を介して、ユーザーによって作成された接続。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツ コントロール</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Web パーツ接続の概要</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">インターフェイス インスタンスをコンシューマーに返して接続を確立する、プロバイダー コントロールのメソッド。</param>
        <param name="interfaceType">プロバイダーがコンシューマーに提供するインターフェイスの <see cref="T:System.Type" />。</param>
        <param name="controlType">プロバイダー コネクション ポイントが関連付けられるプロバイダー コントロールの <see cref="T:System.Type" />。</param>
        <param name="displayName">接続ユーザー インターフェイス (UI) でユーザーに表示される、プロバイダー コネクション ポイントの表示名。</param>
        <param name="id">プロバイダー コネクション ポイントの一意の識別子。</param>
        <param name="allowsMultipleConnections">プロバイダー コネクション ポイントがコンシューマーとの間で同時に複数の接続を持つことができるかどうかを示すブール値。</param>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>のコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスが基本のコンス トラクターのさまざまなパラメーターを渡すと、基本クラスの初期化を呼び出すだけです。  
  
 基底クラスのコンス トラクターのパラメーターの接続ポイントの数を確認し、いくつかの例外をスローすることができます。 可能性のある例外の一覧は、例外を参照してください。  
  
 呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>のインスタンスを作成するコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラス。 ただし、単に接続を確立し、クラスを拡張しないがいる場合でを呼び出す必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>プロバイダーの既存の接続ポイント オブジェクトを返します。  
  
   
  
## Examples  
 派生させる方法を次のコード例に示します、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>カスタム プロバイダー接続ポイントを作成するクラス。  
  
 コード例では、3 つの部分があります。  
  
-   プロバイダーを含むソース ファイル<xref:System.Web.UI.WebControls.WebParts.WebPart>コンシューマーを制御します。<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。  
  
-   静的な接続のコントロールをホストする Web ページ。  
  
-   サンプル コードを実行する方法の説明です。  
  
 コード例の最初の部分は、プロバイダーとコンシューマーのソース<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>という名前のクラス`TableProviderConnectionPoint`します。 注意のコンス トラクター、`TableProviderConnectionPoint`クラスは、必須のパラメーターを渡すパラメーター セクションに記載されている、基本コンス トラクターを呼び出します。 いることを確認、`TableProviderWebPart`クラス、`GetConnectionInterface`メソッドは、接続のコールバック メソッドとして指定し、`ConnectionProvider`属性は、カスタムを宣言`TableProviderConnectionPoint`をパラメーターとして。 これは、カスタム プロバイダー接続ポイントを作成し、それをプロバイダー コントロールに関連付ける方法を示します。 この例では、ソース コードが動的にコンパイル、ため、ソース コード ファイルは、Web アプリケーションの App_Code サブフォルダーに配置する必要があります。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 コード例の 2 番目の部分は、静的な Web パーツ接続でカスタム コントロールをホストする Web ページです。 ページの上部には、`Register`ディレクティブをプレフィックスとカスタム コントロールの名前空間を宣言します。 使用して、接続が宣言されている、`<asp:webpartconnection>`要素、およびプロバイダーとコンシューマー コントロールが内で宣言された、`<asp:webpartzone>`要素。  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 ブラウザーでページを読み込みます。 既にコントロール間の接続が存在し、接続が、ページ内で静的接続として宣言されているため、コンシューマーは、プロバイダーからデータが表示されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> は <see langword="null" /> です。  
  
または 
 <paramref name="interfaceType" /> は <see langword="null" /> です。  
  
または 
 <paramref name="controlType" /> は <see langword="null" /> です。  
  
または 
 <paramref name="displayName" /> が <see langword="null" /> か空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> が、プロバイダー コントロール (またはそれから派生した有効なクラス) と同じ型ではありません。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツ コントロール</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Web パーツ接続でプロバイダーとして動作するコントロール。</param>
        <summary>コンシューマーに返すインターフェイス インスタンスを取得する、プロバイダー コントロールのコールバック メソッドを呼び出します。</summary>
        <returns>プロバイダーがコンシューマーに返して接続を確立するインターフェイスのインスタンスである、<see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、接続を確立するために使用されるインターフェイスのインスタンスでは、プロバイダー コントロールからオブジェクトを返します。 オブジェクトの型は、実装されたインターフェイスの型になります。 たとえば、2 つのインターフェイスの接続で Web パーツ コントロール セットには実装されている<xref:System.Web.UI.WebControls.WebParts.IWebPartField>と<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>します。 ときに、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>でメソッドが呼び出される、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを関連付けられたプロバイダーは、これらのインターフェイスを実装する場合、返されたオブジェクトが同じ型になります。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドを呼び出して<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>接続がアクティブ化されるオブジェクトします。 これは、実際には接続を開始して、2 つのコントロールでデータを共有できるようにするプロセスを開始するための重要なステップです。  
  
 接続でコンシューマー コントロールは、プロバイダーと同じ型のインターフェイスを使用できる必要があります。 コントロールとの互換性がない場合はそうでないと、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトは、接続を確立するために使用する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Web パーツ接続でプロバイダーとして動作するコントロール。</param>
        <summary>プロバイダー コネクション ポイントによってサポートされるセカンダリ インターフェイスの、オプションのコレクションを取得します。</summary>
        <returns>プロバイダーとして動作するコントロールによって提供される追加のインターフェイスの <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロバイダー コネクション ポイント オブジェクトは、常にコンシューマーとの接続を確立するために使用される既定のインターフェイスを持ちます。 既定のインターフェイスのインスタンスを呼び出すことによって取得、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。  
  
 ただし、一部のプロバイダー コントロールは、接続の一部として、コンシューマーに提供する複数のインターフェイスを実装します。 既定の接続を確立するために使用されるものではない、これらのインターフェイスは、セカンダリ インターフェイスと呼ばれます。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドと同様にセカンダリのインターフェイスへの参照のコレクションを取得する方法を提供する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドは、既定のインターフェイスへの参照を返します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />メソッドで、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラスに実装が含まれていません。 セカンダリ インターフェイスの空のコレクションを返します。 このメソッドを実装するから継承する必要があります、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラス、およびセカンダリ インターフェイスの特定のセットを返すことから、このメソッドをオーバーライドします。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>