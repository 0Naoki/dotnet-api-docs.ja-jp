<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b0446877e077410dd38d404d92e2614023a53094" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590836" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b5824-101">プロバイダーとして動作するサーバー コントロールがコンシューマーとの接続を形成できるようにする、コネクション ポイント オブジェクトを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b5824-101">Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5824-102">すべての Web パーツには、2 つのサーバー コントロールの間の接続が、各コントロールは、その他のコントロールへの接続および指定するか、コントロールがプロバイダーまたは接続のコンシューマーとして指定されているかどうかに応じて、データを使用することを有効にするに関連付けられた接続ポイント オブジェクト (その他の要件) が必要です。</span><span class="sxs-lookup"><span data-stu-id="b5824-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="b5824-103">A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトには一般に、コントロールが別のコントロールおよびと共有できるデータの種類に接続できる方法の詳細が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b5824-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="b5824-104">接続のプロバイダーとして機能するコントロール、その接続ポイントがある必要があります、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5824-104">For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span> <span data-ttu-id="b5824-105">Web パーツの接続および接続ポイントの詳細については、「参照」セクションのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b5824-105">For details on Web Parts connections and connection points, see the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="b5824-106">作成する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトをいくつかの手順が必要。</span><span class="sxs-lookup"><span data-stu-id="b5824-106">To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="b5824-107">インターフェイスを作成します。</span><span class="sxs-lookup"><span data-stu-id="b5824-107">Create an interface.</span></span> <span data-ttu-id="b5824-108">ときにコンシューマーとプロバイダーの共有データ、それは、インターフェイスのインスタンスを取得し、コンシューマーにそのインスタンスを返すことで。</span><span class="sxs-lookup"><span data-stu-id="b5824-108">When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.</span></span>  
  
2.  <span data-ttu-id="b5824-109">プロバイダーのインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="b5824-109">Implement the interface in a provider.</span></span> <span data-ttu-id="b5824-110">A<xref:System.Web.UI.WebControls.WebParts.WebPart>またはその他のサーバー コントロール (任意の型でのサーバー コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンを使用できます)、プロバイダーは、最初の手順で作成したインターフェイスを実装する必要がありますになります。</span><span class="sxs-lookup"><span data-stu-id="b5824-110">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.</span></span>  
  
3.  <span data-ttu-id="b5824-111">コールバック メソッドを識別します。</span><span class="sxs-lookup"><span data-stu-id="b5824-111">Identify a callback method.</span></span> <span data-ttu-id="b5824-112">プロバイダーのメソッドは、接続を確立するために、コールバック メソッドとして識別される必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-112">A method in the provider must be identified as the callback method to establish a connection.</span></span> <span data-ttu-id="b5824-113">このメソッドは、コンシューマーに実装されたインターフェイスのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b5824-113">This method returns an instance of the implemented interface to a consumer.</span></span> <span data-ttu-id="b5824-114">プロバイダーのコールバック メソッドを識別するための Web パーツ方法は、追加する、`ConnectionProvider`メタデータの属性 (によって定義された、<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>クラス) インターフェイスのインスタンスを返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="b5824-114">The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance.</span></span> <span data-ttu-id="b5824-115">属性が追加されると、唯一必須のパラメーターは、プロバイダー接続ポイントを使用する表示名です。</span><span class="sxs-lookup"><span data-stu-id="b5824-115">When the attribute is added, the only required parameter is a display name to use for the provider connection point.</span></span> <span data-ttu-id="b5824-116">省略可能なパラメーター追加することも、接続ポイントの ID などです。</span><span class="sxs-lookup"><span data-stu-id="b5824-116">Optional parameters can also be added, such as an ID for the connection point.</span></span>  
  
 <span data-ttu-id="b5824-117">プロバイダーとして機能するコントロールを備えたされましたが、後に、コントロールは、(装備され使用可能なコンシューマーのコントロールが同様があると仮定) の接続に参加できます。</span><span class="sxs-lookup"><span data-stu-id="b5824-117">After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available).</span></span> <span data-ttu-id="b5824-118">Web ページのマークアップで、宣言型の静的な接続を作成する開発者が使用して、`<asp:webpartconnection>`要素。</span><span class="sxs-lookup"><span data-stu-id="b5824-118">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="b5824-119">場合、`ConnectionProvider`コールバック メソッドを識別するプロバイダーのソース コード内の属性は、接続ポイントの ID を指定し、その値を割り当てる必要があります、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`ページの要素。</span><span class="sxs-lookup"><span data-stu-id="b5824-119">If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="b5824-120">開発者がプロバイダー接続ポイントの ID を指定する 1 つの理由は、プロバイダーのコントロールに複数の接続ポイントがあるかどうかです。</span><span class="sxs-lookup"><span data-stu-id="b5824-120">One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control.</span></span> <span data-ttu-id="b5824-121">割り当てられる値がない場合は、ID プロバイダーのコントロールでのプロバイダー接続ポイントが指定されていない、`ProviderConnectionPointID`から取得した既定値を使用して、接続が作成するため、ページで、属性、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>フィールドです。</span><span class="sxs-lookup"><span data-stu-id="b5824-121">If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="b5824-122">コードで接続を作成するには、開発者を新規に作成する必要があります<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを呼び出して、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドの ID またはインデックスの定義と共に、プロバイダー コントロールの ID を渡す<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>プロバイダー コントロール内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5824-122">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control.</span></span> <span data-ttu-id="b5824-123">返された<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>コンシューマー コントロールと、対応するへの参照をプロバイダー コントロールへの参照と共にオブジェクト<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトでは、すべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを作成、新しい<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5824-123">The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="b5824-124">開発者は、宣言またはプログラムによって、接続を確立するための一部として、プロバイダー接続ポイントを使用できますが、ユーザーも、ユーザー インターフェイス (UI) 経由の接続を確立するためにプロバイダー接続ポイントと対話できます。</span><span class="sxs-lookup"><span data-stu-id="b5824-124">Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="b5824-125">開発者は、宣言する場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、Web ページ上ユーザー接続を作成するためのランタイムの UI を提供します。</span><span class="sxs-lookup"><span data-stu-id="b5824-125">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="b5824-126">ユーザーをクリックして接続を確立するための出発点として、コンシューマーのコントロールを選択する場合、connect 動詞 (プロバイダーを選択することも以外の場合は、結果として得られる接続に違いはありません)、使用可能なプロバイダー接続ポイント (またはポイントが複数の場合) の表示名のドロップダウン リスト コントロールが UI に表示されます。</span><span class="sxs-lookup"><span data-stu-id="b5824-126">If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones).</span></span> <span data-ttu-id="b5824-127">ユーザーは、接続を作成するプロバイダー接続ポイントを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-127">Users must select a provider connection point to create a connection.</span></span>  
  
 <span data-ttu-id="b5824-128">A<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトは、特定のプロバイダーのコントロールを直接関連付けます、基数、継承元のプロパティでは、接続の詳細を格納<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b5824-128">A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="b5824-129">たとえばでは、継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>プロパティ、プロバイダー接続ポイントは、プロバイダーによって返されるインターフェイスの型を保持します。</span><span class="sxs-lookup"><span data-stu-id="b5824-129">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider.</span></span> <span data-ttu-id="b5824-130">場合は、プロバイダーとの接続を同じ作業両方のコンシューマー インターフェイスの型をコントロールは互換性のあるおよび直接接続を形成することです。</span><span class="sxs-lookup"><span data-stu-id="b5824-130">If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="b5824-131">互換性がありませんし、使用する必要があります、プロバイダーとコンシューマーは、同じインターフェイス型を扱うことはできない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>プロバイダー接続ポイントの翻訳をオブジェクト<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>コンシューマーが使用できる型に値。</span><span class="sxs-lookup"><span data-stu-id="b5824-131">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with.</span></span> <span data-ttu-id="b5824-132">他の重要な継承されたプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>をユーザーが、プロバイダー接続を選択するための UI に表示するフレンドリ名を提供するプロパティが接続を作成するときにポイントします。</span><span class="sxs-lookup"><span data-stu-id="b5824-132">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections.</span></span> <span data-ttu-id="b5824-133">開発者を追加するときに、表示名は必須のパラメーター、`ConnectionProvider`属性をプロバイダーのコントロールのコールバック メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5824-133">The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control.</span></span> <span data-ttu-id="b5824-134">継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>プロパティは上に示されて、プロバイダーが複数の接続ポイントを持つことのプロバイダー接続ポイントの一意識別子を提供するために便利です。</span><span class="sxs-lookup"><span data-stu-id="b5824-134">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points.</span></span> <span data-ttu-id="b5824-135">プロバイダーでは複数<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトとに定義された、この場合は、開発者を追加するときに、`ConnectionProvider`属性、メソッドに各接続ポイントを区別するために ID 値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-135">A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="b5824-136">その他の注目すべき継承されたプロパティは 1 つは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>プロパティで、プロバイダー接続ポイントが複数のコンシューマーに同時に接続できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="b5824-136">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers.</span></span> <span data-ttu-id="b5824-137">このプロパティの値が`true`既定では、プロバイダー接続ポイント (既定値は一方`false`コンシューマー接続ポイントの)。</span><span class="sxs-lookup"><span data-stu-id="b5824-137">This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).</span></span>  
  
 <span data-ttu-id="b5824-138"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>固有のいくつかのメソッドを追加するクラスから継承してメンバーに、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b5824-138">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="b5824-139"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドは、コールバック メソッドをコンシューマーに返すインターフェイスのインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5824-139">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers.</span></span> <span data-ttu-id="b5824-140"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドを既存の接続の一部である追加の消費者のインターフェイスを取得しますが、インターフェイスではない接続を確立するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b5824-140">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5824-141">次のコード例では、宣言によって接続を作成、プログラム、または UI の各ケースでは、プロバイダー接続ポイントを使用する簡単な方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b5824-141">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.</span></span>  
  
 <span data-ttu-id="b5824-142">この例では、4 つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-142">The example has four parts:</span></span>  
  
-   <span data-ttu-id="b5824-143">Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。</span><span class="sxs-lookup"><span data-stu-id="b5824-143">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="b5824-144">ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーとの接続のコンシューマーとしての動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="b5824-144">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="b5824-145">すべてのコントロールをホストし、コード例を実行する Web ページ。</span><span class="sxs-lookup"><span data-stu-id="b5824-145">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="b5824-146">ページの例を実行する方法の説明。</span><span class="sxs-lookup"><span data-stu-id="b5824-146">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="b5824-147">このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。</span><span class="sxs-lookup"><span data-stu-id="b5824-147">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="b5824-148">次のソース コード、ファイルを保存 .ascx、それにに割り当てられているファイルの名前、`Src`の属性、`Register`ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。</span><span class="sxs-lookup"><span data-stu-id="b5824-148">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="b5824-149">詳細については、このコントロールでモードと、ソース コードの説明を表示を参照してください[チュートリアル: Web パーツ ページの表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)です。</span><span class="sxs-lookup"><span data-stu-id="b5824-149">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="b5824-150">コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。</span><span class="sxs-lookup"><span data-stu-id="b5824-150">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="b5824-151">ソース ファイルには、という名前の単純なインターフェイスが含まれています。`IZipCode`です。</span><span class="sxs-lookup"><span data-stu-id="b5824-151">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="b5824-152"><xref:System.Web.UI.WebControls.WebParts.WebPart>という名前のクラス`ZipCodeWebPart`インターフェイスを実装して、プロバイダー コントロールとして機能します。</span><span class="sxs-lookup"><span data-stu-id="b5824-152">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="b5824-153">その`ProvideIZipCode`インターフェイスの唯一のメンバーを実装するコールバック メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b5824-153">Its `ProvideIZipCode` method is the callback method that implements the interface's only member.</span></span> <span data-ttu-id="b5824-154">このメソッドは、単に、インターフェイスのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b5824-154">The method simply returns an instance of the interface.</span></span> <span data-ttu-id="b5824-155">メソッドが付いている、`ConnectionProvider`メタデータ内の属性です。</span><span class="sxs-lookup"><span data-stu-id="b5824-155">Note that the method is marked with a `ConnectionProvider` attribute in its metadata.</span></span> <span data-ttu-id="b5824-156">これは、プロバイダーの接続ポイントのコールバック メソッドとしてメソッドを識別するためのメカニズムです。</span><span class="sxs-lookup"><span data-stu-id="b5824-156">This is the mechanism for identifying the method as the callback method for the provider's connection point.</span></span> <span data-ttu-id="b5824-157">他の<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスの名前は`WeatherWebPart`、し、接続のコンシューマーとして機能します。</span><span class="sxs-lookup"><span data-stu-id="b5824-157">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="b5824-158">このクラスは、という名前のメソッドを持つ`GetZipCode`のインスタンスを取得する、`IZipCode`プロバイダー コントロールからのインターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="b5824-158">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="b5824-159">このメソッドが、コンシューマーの接続ポイント メソッドとしてマークされていることに注意してください、`ConnectionConsumer`メタデータ内の属性です。</span><span class="sxs-lookup"><span data-stu-id="b5824-159">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="b5824-160">これは、コンシューマー コントロールの接続ポイント メソッドを識別するためのメカニズムです。</span><span class="sxs-lookup"><span data-stu-id="b5824-160">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="b5824-161">コード例を実行するには、このソース コードをコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-161">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="b5824-162">コンパイルするには明示的にし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに結果として得られるアセンブリを配置できます。</span><span class="sxs-lookup"><span data-stu-id="b5824-162">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="b5824-163">またはを動的にコンパイルされる実行時に、サイトの App_Code フォルダー内のソース コードを配置することができます。</span><span class="sxs-lookup"><span data-stu-id="b5824-163">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="b5824-164">このコード例では、動的なコンパイルを使用します。</span><span class="sxs-lookup"><span data-stu-id="b5824-164">This code example uses dynamic compilation.</span></span> <span data-ttu-id="b5824-165">コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)です。</span><span class="sxs-lookup"><span data-stu-id="b5824-165">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="b5824-166">コード例の 3 番目の部分は、Web ページです。</span><span class="sxs-lookup"><span data-stu-id="b5824-166">The third part of the code example is the Web page.</span></span> <span data-ttu-id="b5824-167">上部にある、 `Register`  ページで、接続を構成するカスタム コントロールおよび変更できるようにするユーザー コントロールを登録するためのディレクティブの表示モード。</span><span class="sxs-lookup"><span data-stu-id="b5824-167">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="b5824-168">接続自体が内で宣言によって作成された、`<staticconnections>`ページ上の要素。</span><span class="sxs-lookup"><span data-stu-id="b5824-168">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="b5824-169">これは、接続を作成する 1 つの方法-注、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`要素。</span><span class="sxs-lookup"><span data-stu-id="b5824-169">This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="b5824-170">プログラムからの接続を作成することもできます。これを行うためのコードは、`Button1_Click`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b5824-170">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="b5824-171">ここで、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトが作成され、実際の接続を作成するメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b5824-171">In this case, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="b5824-172">宣言またはプログラムによって、接続が作成されるかどうかの接続ポイントはコンシューマーとプロバイダーの常に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-172">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="b5824-173">`Button2_Click`メソッドへのアクセス、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>コンシューマーとプロバイダーの両方のオブジェクトし、ページ内のラベルに、プロパティ値の一部を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b5824-173">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="b5824-174">ブラウザーでページを読み込んだ後、**コネクション ポイントの詳細**ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="b5824-174">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="b5824-175">宣言型の接続で確立されているプロバイダーおよびコンシューマー接続ポイントに関する情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b5824-175">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="b5824-176">次に、使用、**表示モード**接続モードのドロップダウン コントロールをページに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="b5824-176">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="b5824-177">動詞メニューを開き、**郵便コンシューマー** <xref:System.Web.UI.WebControls.WebParts.WebPart> (タイトル バーに下向きの矢印によって表される)、コントロール動詞を接続 をクリックします。</span><span class="sxs-lookup"><span data-stu-id="b5824-177">On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="b5824-178">UI が表示されたら、接続はによって自動的に作成された、`<asp:connectionszone>`コントロール、ページで宣言します。</span><span class="sxs-lookup"><span data-stu-id="b5824-178">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="b5824-179">これは、ここで説明した宣言とプログラムのメソッドと共に (UI) を経由して接続を作成する別の方法です。</span><span class="sxs-lookup"><span data-stu-id="b5824-179">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="b5824-180">クリックして、**切断**を既存の静的な接続を終了するボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="b5824-180">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="b5824-181">クリックして、**プロバイダーへの接続を作成する**リンクします。</span><span class="sxs-lookup"><span data-stu-id="b5824-181">Click the **Create a Connection to a Provider** link.</span></span> <span data-ttu-id="b5824-182">UI では、プロバイダー接続ポイントの表示名を一覧表示するドロップダウン コントロールが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b5824-182">The UI now displays a drop-down control that lists the provider connection point display name.</span></span> <span data-ttu-id="b5824-183">ドロップダウン リストで、接続ポイントを選択し、クリックして**接続**接続を完了します。</span><span class="sxs-lookup"><span data-stu-id="b5824-183">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="b5824-184">次に、をクリックして**切断**もう一度です。</span><span class="sxs-lookup"><span data-stu-id="b5824-184">Next, click **Disconnect** again.</span></span> <span data-ttu-id="b5824-185">[] をクリックして、**動的接続**プログラムで接続を作成するボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="b5824-185">Then, click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="b5824-186">使用して、**表示モード**コントロールをページをブラウズ モードを返します。</span><span class="sxs-lookup"><span data-stu-id="b5824-186">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="b5824-187">クリックして、**接続ポイントの詳細**ボタンをもう一度、もう一度プロバイダー接続ポイント オブジェクトに関する詳細情報を示すためにします。</span><span class="sxs-lookup"><span data-stu-id="b5824-187">Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.</span></span>  
  
 <span data-ttu-id="b5824-188">接続が確立され、プロバイダー接続ポイントを使用して、次の 3 つの方法で、例で説明しました Web ページのマークアップで宣言された静的な接続。使用するコードで作成した接続、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、およびユーザー接続の UI を使って作成した接続です。</span><span class="sxs-lookup"><span data-stu-id="b5824-188">The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">
          <span data-ttu-id="b5824-189">インターフェイス インスタンスをコンシューマーに返して接続を確立する、プロバイダー コントロールのメソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-189">The method in the provider control that returns an interface instance to consumers to establish a connection.</span>
          </span>
        </param>
        <param name="interfaceType">
          <span data-ttu-id="b5824-190">プロバイダーがコンシューマーに提供するインターフェイスの <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-190">The <see cref="T:System.Type" /> of the interface that the provider serves to consumers.</span>
          </span>
        </param>
        <param name="controlType">
          <span data-ttu-id="b5824-191">プロバイダー コネクション ポイントが関連付けられるプロバイダー コントロールの <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-191">The <see cref="T:System.Type" /> of the provider control with which the provider connection point is associated.</span>
          </span>
        </param>
        <param name="displayName">
          <span data-ttu-id="b5824-192">接続ユーザー インターフェイス (UI) でユーザーに表示される、プロバイダー コネクション ポイントの表示名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-192">A friendly display name for the provider connection point that appears to users in the connection user interface (UI).</span>
          </span>
        </param>
        <param name="id">
          <span data-ttu-id="b5824-193">プロバイダー コネクション ポイントの一意の識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-193">A unique identifier for the provider connection point.</span>
          </span>
        </param>
        <param name="allowsMultipleConnections">
          <span data-ttu-id="b5824-194">プロバイダー コネクション ポイントがコンシューマーとの間で同時に複数の接続を持つことができるかどうかを示すブール値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-194">A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b5824-195">
            <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-195">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5824-196"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>のコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスは、基底コンス トラクター、さまざまなパラメーターを渡すと、基本クラスの初期化を呼び出すだけです。</span><span class="sxs-lookup"><span data-stu-id="b5824-196">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="b5824-197">基本クラス コンス トラクターでは、接続ポイントのパラメーターの数を確認し、いくつかの例外をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="b5824-197">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="b5824-198">可能性のある例外の一覧は、例外を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b5824-198">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="b5824-199">呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>の独自のインスタンスを作成するコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b5824-199">You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class.</span></span> <span data-ttu-id="b5824-200">ただし、しているだけで接続を確立して、クラスを拡張しない場合を呼び出す必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>プロバイダーの既存の接続ポイント オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b5824-200">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5824-201">派生する次のコード例には、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>カスタム プロバイダー接続ポイントを作成するクラス。</span><span class="sxs-lookup"><span data-stu-id="b5824-201">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="b5824-202">このコード例では、3 つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-202">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="b5824-203">プロバイダーを含むソース ファイル<xref:System.Web.UI.WebControls.WebParts.WebPart>を制御するコンシューマー<xref:System.Web.UI.WebControls.WebParts.WebPart>制御、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5824-203">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="b5824-204">静的な接続のコントロールをホストする Web ページ。</span><span class="sxs-lookup"><span data-stu-id="b5824-204">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="b5824-205">コード例を実行する方法の説明。</span><span class="sxs-lookup"><span data-stu-id="b5824-205">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="b5824-206">このコード例の最初の部分はコンシューマーとプロバイダーのソース<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>という名前のクラス`TableProviderConnectionPoint`です。</span><span class="sxs-lookup"><span data-stu-id="b5824-206">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`.</span></span> <span data-ttu-id="b5824-207">なおのコンス トラクター、`TableProviderConnectionPoint`クラスは、パラメーターを渡すことが、必要なパラメーター セクションに記載されている、基底コンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b5824-207">Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="b5824-208">またを注意してください、`TableProviderWebPart`クラス、`GetConnectionInterface`メソッドは、接続のコールバック メソッドとして指定され、`ConnectionProvider`属性宣言のカスタム`TableProviderConnectionPoint`をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="b5824-208">Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter.</span></span> <span data-ttu-id="b5824-209">これは、カスタム プロバイダー接続ポイントを作成し、それをプロバイダー コントロールに関連付ける方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b5824-209">This demonstrates how to create a custom provider connection point and then associate it with a provider control.</span></span> <span data-ttu-id="b5824-210">この例では、ソース コードが動的にコンパイルされる、ため、ソース コード ファイルを Web アプリケーションの App_Code サブフォルダーに配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-210">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="b5824-211">コード例の 2 番目の部分は、静的な Web パーツ接続においてカスタム コントロールをホストする Web ページです。</span><span class="sxs-lookup"><span data-stu-id="b5824-211">The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection.</span></span> <span data-ttu-id="b5824-212">ページの上部には、`Register`ディレクティブをプレフィックスとカスタム コントロールの名前空間を宣言します。</span><span class="sxs-lookup"><span data-stu-id="b5824-212">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="b5824-213">使用して、接続が宣言されている、`<asp:webpartconnection>`要素、およびプロバイダーとコンシューマーのコントロールが内で宣言された、`<asp:webpartzone>`要素。</span><span class="sxs-lookup"><span data-stu-id="b5824-213">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="b5824-214">ブラウザーでページを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="b5824-214">Load the page in a browser.</span></span> <span data-ttu-id="b5824-215">既にコントロール間の接続が存在し、接続がページに静的な接続として宣言されているため、コンシューマーは、プロバイダーからのデータが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b5824-215">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b5824-216">
            <paramref name="callbackMethod" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-216">
              <paramref name="callbackMethod" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b5824-217">\- または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-217">\- or -</span>
          </span>
          <span data-ttu-id="b5824-218">
            <paramref name="interfaceType" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-218">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b5824-219">\- または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-219">\- or -</span>
          </span>
          <span data-ttu-id="b5824-220">
            <paramref name="controlType" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-220">
              <paramref name="controlType" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b5824-221">\- または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-221">\- or -</span>
          </span>
          <span data-ttu-id="b5824-222">
            <paramref name="displayName" /> は <see langword="null" /> または空の文字列 ("") です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-222">
              <paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b5824-223">
            <paramref name="controlType" /> が、プロバイダー コントロール (またはそれから派生した有効なクラス) と同じ型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-223">
              <paramref name="controlType" /> is not the same type as the provider control (or a valid class derived from it).</span>
          </span>
        </exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">
          <span data-ttu-id="b5824-224">Web パーツ接続でプロバイダーとして動作するコントロール。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-224">The control acting as the provider in a Web Parts connection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b5824-225">コンシューマーに返すインターフェイス インスタンスを取得する、プロバイダー コントロールのコールバック メソッドを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-225">Invokes the callback method in a provider control that gets an interface instance to return to consumers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b5824-226">プロバイダーがコンシューマーに返して接続を確立するインターフェイスのインスタンスである、<see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-226">An <see cref="T:System.Object" /> that is an instance of the interface a provider returns to consumers to establish a connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5824-227">このメソッドは、接続を確立するために使用されるインターフェイスのインスタンスは、プロバイダー管理からオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b5824-227">This method returns an object from the provider control that is an instance of the interface used to establish a connection.</span></span> <span data-ttu-id="b5824-228">オブジェクトの型は、実装されたインターフェイスの型になります。</span><span class="sxs-lookup"><span data-stu-id="b5824-228">The type of the object will be the type of the implemented interface.</span></span> <span data-ttu-id="b5824-229">たとえば、2 つのインターフェイスで Web パーツ コントロール セットは、接続用に実装されている<xref:System.Web.UI.WebControls.WebParts.IWebPartField>と<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>です。</span><span class="sxs-lookup"><span data-stu-id="b5824-229">For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</span></span> <span data-ttu-id="b5824-230">ときに、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドが、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、同じ型、返されたオブジェクトである場合は、関連付けられているプロバイダーでは、これらのインターフェイスの 1 つを実装して、します。</span><span class="sxs-lookup"><span data-stu-id="b5824-230">When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.</span></span>  
  
 <span data-ttu-id="b5824-231"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドによって呼び出されます<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトの接続をアクティブ化時にします。</span><span class="sxs-lookup"><span data-stu-id="b5824-231">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="b5824-232">これは、実際には、接続を開始し、2 つのコントロールでデータを共有できるようにするプロセスを開始する重要な手順です。</span><span class="sxs-lookup"><span data-stu-id="b5824-232">This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.</span></span>  
  
 <span data-ttu-id="b5824-233">接続のコンシューマー コントロールは、プロバイダーと同じ型のインターフェイスを使用できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-233">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="b5824-234">コントロールとの互換性がない場合は、および<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトは、接続を確立するために使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5824-234">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b5824-235">
            <paramref name="control" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-235">
              <paramref name="control" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">
          <span data-ttu-id="b5824-236">Web パーツ接続でプロバイダーとして動作するコントロール。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-236">The control acting as the provider in a Web Parts connection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b5824-237">プロバイダー コネクション ポイントによってサポートされるセカンダリ インターフェイスの、オプションのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-237">Gets an optional collection of secondary interfaces that can be supported by a provider connection point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b5824-238">プロバイダーとして動作するコントロールによって提供される追加のインターフェイスの <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b5824-238">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of additional interfaces provided by the control acting as a provider.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5824-239">プロバイダー接続ポイント オブジェクトは、常にコンシューマーとの接続を確立するために使用される既定のインターフェイスを持ちます。</span><span class="sxs-lookup"><span data-stu-id="b5824-239">A provider connection point object always has a default interface that is used to establish a connection with consumers.</span></span> <span data-ttu-id="b5824-240">既定のインターフェイスのインスタンスを呼び出すことによって取得、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5824-240">An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
 <span data-ttu-id="b5824-241">ただし、一部のプロバイダー コントロールは、接続の一環として、コンシューマーに提供する複数のインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="b5824-241">However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection.</span></span> <span data-ttu-id="b5824-242">これらのインターフェイスでは、既定の接続を確立するために使用するものではないは、セカンダリ インターフェイスと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="b5824-242">These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces.</span></span> <span data-ttu-id="b5824-243"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドと同様に、セカンダリ インターフェイスへの参照のコレクションを取得する方法を提供する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドは、既定のインターフェイスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="b5824-243">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b5824-244">
              <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />メソッドで、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラスに実装が含まれていません。 セカンダリ インターフェイスの空のコレクションを返します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b5824-244">The <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> method in the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class contains no implementation; it returns an empty collection of secondary interfaces.</span>
            </span>
            <span data-ttu-id="b5824-245">このメソッドを実装するのにはから継承する必要があります、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラス、し、そこからセカンダリ インターフェイスの特定のセットを返す、このメソッドをオーバーライドします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b5824-245">To implement this method, you must inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class, and override this method, returning from it a specific set of secondary interfaces.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>