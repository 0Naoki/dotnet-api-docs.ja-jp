<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b0446877e077410dd38d404d92e2614023a53094" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590836" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロバイダーとして動作するサーバー コントロールがコンシューマーとの接続を形成できるようにする、コネクション ポイント オブジェクトを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての Web パーツには、2 つのサーバー コントロールの間の接続が、各コントロールは、その他のコントロールへの接続および指定するか、コントロールがプロバイダーまたは接続のコンシューマーとして指定されているかどうかに応じて、データを使用することを有効にするに関連付けられた接続ポイント オブジェクト (その他の要件) が必要です。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトには一般に、コントロールが別のコントロールおよびと共有できるデータの種類に接続できる方法の詳細が含まれています。 接続のプロバイダーとして機能するコントロール、その接続ポイントがある必要があります、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。 Web パーツの接続および接続ポイントの詳細については、「参照」セクションのトピックを参照してください。  
  
 作成する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトをいくつかの手順が必要。  
  
1.  インターフェイスを作成します。 ときにコンシューマーとプロバイダーの共有データ、それは、インターフェイスのインスタンスを取得し、コンシューマーにそのインスタンスを返すことで。  
  
2.  プロバイダーのインターフェイスを実装します。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>またはその他のサーバー コントロール (任意の型でのサーバー コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンを使用できます)、プロバイダーは、最初の手順で作成したインターフェイスを実装する必要がありますになります。  
  
3.  コールバック メソッドを識別します。 プロバイダーのメソッドは、接続を確立するために、コールバック メソッドとして識別される必要があります。 このメソッドは、コンシューマーに実装されたインターフェイスのインスタンスを返します。 プロバイダーのコールバック メソッドを識別するための Web パーツ方法は、追加する、`ConnectionProvider`メタデータの属性 (によって定義された、<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>クラス) インターフェイスのインスタンスを返すメソッド。 属性が追加されると、唯一必須のパラメーターは、プロバイダー接続ポイントを使用する表示名です。 省略可能なパラメーター追加することも、接続ポイントの ID などです。  
  
 プロバイダーとして機能するコントロールを備えたされましたが、後に、コントロールは、(装備され使用可能なコンシューマーのコントロールが同様があると仮定) の接続に参加できます。 Web ページのマークアップで、宣言型の静的な接続を作成する開発者が使用して、`<asp:webpartconnection>`要素。 場合、`ConnectionProvider`コールバック メソッドを識別するプロバイダーのソース コード内の属性は、接続ポイントの ID を指定し、その値を割り当てる必要があります、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`ページの要素。 開発者がプロバイダー接続ポイントの ID を指定する 1 つの理由は、プロバイダーのコントロールに複数の接続ポイントがあるかどうかです。 割り当てられる値がない場合は、ID プロバイダーのコントロールでのプロバイダー接続ポイントが指定されていない、`ProviderConnectionPointID`から取得した既定値を使用して、接続が作成するため、ページで、属性、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>フィールドです。  
  
 コードで接続を作成するには、開発者を新規に作成する必要があります<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを呼び出して、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドの ID またはインデックスの定義と共に、プロバイダー コントロールの ID を渡す<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>プロバイダー コントロール内のオブジェクト。 返された<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>コンシューマー コントロールと、対応するへの参照をプロバイダー コントロールへの参照と共にオブジェクト<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトでは、すべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを作成、新しい<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。  
  
 開発者は、宣言またはプログラムによって、接続を確立するための一部として、プロバイダー接続ポイントを使用できますが、ユーザーも、ユーザー インターフェイス (UI) 経由の接続を確立するためにプロバイダー接続ポイントと対話できます。 開発者は、宣言する場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、Web ページ上ユーザー接続を作成するためのランタイムの UI を提供します。 ユーザーをクリックして接続を確立するための出発点として、コンシューマーのコントロールを選択する場合、connect 動詞 (プロバイダーを選択することも以外の場合は、結果として得られる接続に違いはありません)、使用可能なプロバイダー接続ポイント (またはポイントが複数の場合) の表示名のドロップダウン リスト コントロールが UI に表示されます。 ユーザーは、接続を作成するプロバイダー接続ポイントを選択する必要があります。  
  
 A<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトは、特定のプロバイダーのコントロールを直接関連付けます、基数、継承元のプロパティでは、接続の詳細を格納<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラスです。 たとえばでは、継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>プロパティ、プロバイダー接続ポイントは、プロバイダーによって返されるインターフェイスの型を保持します。 場合は、プロバイダーとの接続を同じ作業両方のコンシューマー インターフェイスの型をコントロールは互換性のあるおよび直接接続を形成することです。 互換性がありませんし、使用する必要があります、プロバイダーとコンシューマーは、同じインターフェイス型を扱うことはできない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>プロバイダー接続ポイントの翻訳をオブジェクト<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>コンシューマーが使用できる型に値。 他の重要な継承されたプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>をユーザーが、プロバイダー接続を選択するための UI に表示するフレンドリ名を提供するプロパティが接続を作成するときにポイントします。 開発者を追加するときに、表示名は必須のパラメーター、`ConnectionProvider`属性をプロバイダーのコントロールのコールバック メソッド。 継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>プロパティは上に示されて、プロバイダーが複数の接続ポイントを持つことのプロバイダー接続ポイントの一意識別子を提供するために便利です。 プロバイダーでは複数<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトとに定義された、この場合は、開発者を追加するときに、`ConnectionProvider`属性、メソッドに各接続ポイントを区別するために ID 値を指定する必要があります。 その他の注目すべき継承されたプロパティは 1 つは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>プロパティで、プロバイダー接続ポイントが複数のコンシューマーに同時に接続できるかどうかを示します。 このプロパティの値が`true`既定では、プロバイダー接続ポイント (既定値は一方`false`コンシューマー接続ポイントの)。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>固有のいくつかのメソッドを追加するクラスから継承してメンバーに、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラスです。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドは、コールバック メソッドをコンシューマーに返すインターフェイスのインスタンスを取得します。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドを既存の接続の一部である追加の消費者のインターフェイスを取得しますが、インターフェイスではない接続を確立するために使用します。  
  
   
  
## Examples  
 次のコード例では、宣言によって接続を作成、プログラム、または UI の各ケースでは、プロバイダー接続ポイントを使用する簡単な方法を示します。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーとの接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 次のソース コード、ファイルを保存 .ascx、それにに割り当てられているファイルの名前、`Src`の属性、`Register`ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールでモードと、ソース コードの説明を表示を参照してください[チュートリアル: Web パーツ ページの表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)です。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。 ソース ファイルには、という名前の単純なインターフェイスが含まれています。`IZipCode`です。 <xref:System.Web.UI.WebControls.WebParts.WebPart>という名前のクラス`ZipCodeWebPart`インターフェイスを実装して、プロバイダー コントロールとして機能します。 その`ProvideIZipCode`インターフェイスの唯一のメンバーを実装するコールバック メソッドです。 このメソッドは、単に、インターフェイスのインスタンスを返します。 メソッドが付いている、`ConnectionProvider`メタデータ内の属性です。 これは、プロバイダーの接続ポイントのコールバック メソッドとしてメソッドを識別するためのメカニズムです。 他の<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスの名前は`WeatherWebPart`、し、接続のコンシューマーとして機能します。 このクラスは、という名前のメソッドを持つ`GetZipCode`のインスタンスを取得する、`IZipCode`プロバイダー コントロールからのインターフェイスです。 このメソッドが、コンシューマーの接続ポイント メソッドとしてマークされていることに注意してください、`ConnectionConsumer`メタデータ内の属性です。 これは、コンシューマー コントロールの接続ポイント メソッドを識別するためのメカニズムです。  
  
 コード例を実行するには、このソース コードをコンパイルする必要があります。 コンパイルするには明示的にし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに結果として得られるアセンブリを配置できます。 またはを動的にコンパイルされる実行時に、サイトの App_Code フォルダー内のソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)です。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 上部にある、 `Register`  ページで、接続を構成するカスタム コントロールおよび変更できるようにするユーザー コントロールを登録するためのディレクティブの表示モード。 接続自体が内で宣言によって作成された、`<staticconnections>`ページ上の要素。 これは、接続を作成する 1 つの方法-注、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`要素。 プログラムからの接続を作成することもできます。これを行うためのコードは、`Button1_Click`メソッドです。 ここで、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトが作成され、実際の接続を作成するメソッドに渡されます。 宣言またはプログラムによって、接続が作成されるかどうかの接続ポイントはコンシューマーとプロバイダーの常に指定する必要があります。 `Button2_Click`メソッドへのアクセス、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>コンシューマーとプロバイダーの両方のオブジェクトし、ページ内のラベルに、プロパティ値の一部を書き込みます。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、**コネクション ポイントの詳細**ボタンをクリックします。 宣言型の接続で確立されているプロバイダーおよびコンシューマー接続ポイントに関する情報が表示されます。 次に、使用、**表示モード**接続モードのドロップダウン コントロールをページに切り替えます。 動詞メニューを開き、**郵便コンシューマー** <xref:System.Web.UI.WebControls.WebParts.WebPart> (タイトル バーに下向きの矢印によって表される)、コントロール動詞を接続 をクリックします。 UI が表示されたら、接続はによって自動的に作成された、`<asp:connectionszone>`コントロール、ページで宣言します。 これは、ここで説明した宣言とプログラムのメソッドと共に (UI) を経由して接続を作成する別の方法です。 クリックして、**切断**を既存の静的な接続を終了するボタンをクリックします。 クリックして、**プロバイダーへの接続を作成する**リンクします。 UI では、プロバイダー接続ポイントの表示名を一覧表示するドロップダウン コントロールが表示されます。 ドロップダウン リストで、接続ポイントを選択し、クリックして**接続**接続を完了します。 次に、をクリックして**切断**もう一度です。 [] をクリックして、**動的接続**プログラムで接続を作成するボタンをクリックします。 使用して、**表示モード**コントロールをページをブラウズ モードを返します。 クリックして、**接続ポイントの詳細**ボタンをもう一度、もう一度プロバイダー接続ポイント オブジェクトに関する詳細情報を示すためにします。  
  
 接続が確立され、プロバイダー接続ポイントを使用して、次の 3 つの方法で、例で説明しました Web ページのマークアップで宣言された静的な接続。使用するコードで作成した接続、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、およびユーザー接続の UI を使って作成した接続です。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">インターフェイス インスタンスをコンシューマーに返して接続を確立する、プロバイダー コントロールのメソッド。</param>
        <param name="interfaceType">プロバイダーがコンシューマーに提供するインターフェイスの <see cref="T:System.Type" />。</param>
        <param name="controlType">プロバイダー コネクション ポイントが関連付けられるプロバイダー コントロールの <see cref="T:System.Type" />。</param>
        <param name="displayName">接続ユーザー インターフェイス (UI) でユーザーに表示される、プロバイダー コネクション ポイントの表示名。</param>
        <param name="id">プロバイダー コネクション ポイントの一意の識別子。</param>
        <param name="allowsMultipleConnections">プロバイダー コネクション ポイントがコンシューマーとの間で同時に複数の接続を持つことができるかどうかを示すブール値。</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>のコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスは、基底コンス トラクター、さまざまなパラメーターを渡すと、基本クラスの初期化を呼び出すだけです。  
  
 基本クラス コンス トラクターでは、接続ポイントのパラメーターの数を確認し、いくつかの例外をスローすることができます。 可能性のある例外の一覧は、例外を参照してください。  
  
 呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>の独自のインスタンスを作成するコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスです。 ただし、しているだけで接続を確立して、クラスを拡張しない場合を呼び出す必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>プロバイダーの既存の接続ポイント オブジェクトを返します。  
  
   
  
## Examples  
 派生する次のコード例には、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>カスタム プロバイダー接続ポイントを作成するクラス。  
  
 このコード例では、3 つの部分があります。  
  
-   プロバイダーを含むソース ファイル<xref:System.Web.UI.WebControls.WebParts.WebPart>を制御するコンシューマー<xref:System.Web.UI.WebControls.WebParts.WebPart>制御、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。  
  
-   静的な接続のコントロールをホストする Web ページ。  
  
-   コード例を実行する方法の説明。  
  
 このコード例の最初の部分はコンシューマーとプロバイダーのソース<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>という名前のクラス`TableProviderConnectionPoint`です。 なおのコンス トラクター、`TableProviderConnectionPoint`クラスは、パラメーターを渡すことが、必要なパラメーター セクションに記載されている、基底コンス トラクターを呼び出します。 またを注意してください、`TableProviderWebPart`クラス、`GetConnectionInterface`メソッドは、接続のコールバック メソッドとして指定され、`ConnectionProvider`属性宣言のカスタム`TableProviderConnectionPoint`をパラメーターとして。 これは、カスタム プロバイダー接続ポイントを作成し、それをプロバイダー コントロールに関連付ける方法を示しています。 この例では、ソース コードが動的にコンパイルされる、ため、ソース コード ファイルを Web アプリケーションの App_Code サブフォルダーに配置する必要があります。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 コード例の 2 番目の部分は、静的な Web パーツ接続においてカスタム コントロールをホストする Web ページです。 ページの上部には、`Register`ディレクティブをプレフィックスとカスタム コントロールの名前空間を宣言します。 使用して、接続が宣言されている、`<asp:webpartconnection>`要素、およびプロバイダーとコンシューマーのコントロールが内で宣言された、`<asp:webpartzone>`要素。  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 ブラウザーでページを読み込みます。 既にコントロール間の接続が存在し、接続がページに静的な接続として宣言されているため、コンシューマーは、プロバイダーからのデータが表示されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> は <see langword="null" />です。  
  
 \- または  
  
 <paramref name="interfaceType" /> は <see langword="null" />です。  
  
 \- または  
  
 <paramref name="controlType" /> は <see langword="null" />です。  
  
 \- または  
  
 <paramref name="displayName" /> は <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> が、プロバイダー コントロール (またはそれから派生した有効なクラス) と同じ型ではありません。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Web パーツ接続でプロバイダーとして動作するコントロール。</param>
        <summary>コンシューマーに返すインターフェイス インスタンスを取得する、プロバイダー コントロールのコールバック メソッドを呼び出します。</summary>
        <returns>プロバイダーがコンシューマーに返して接続を確立するインターフェイスのインスタンスである、<see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、接続を確立するために使用されるインターフェイスのインスタンスは、プロバイダー管理からオブジェクトを返します。 オブジェクトの型は、実装されたインターフェイスの型になります。 たとえば、2 つのインターフェイスで Web パーツ コントロール セットは、接続用に実装されている<xref:System.Web.UI.WebControls.WebParts.IWebPartField>と<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>です。 ときに、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドが、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、同じ型、返されたオブジェクトである場合は、関連付けられているプロバイダーでは、これらのインターフェイスの 1 つを実装して、します。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドによって呼び出されます<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトの接続をアクティブ化時にします。 これは、実際には、接続を開始し、2 つのコントロールでデータを共有できるようにするプロセスを開始する重要な手順です。  
  
 接続のコンシューマー コントロールは、プロバイダーと同じ型のインターフェイスを使用できる必要があります。 コントロールとの互換性がない場合は、および<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトは、接続を確立するために使用する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Web パーツ接続でプロバイダーとして動作するコントロール。</param>
        <summary>プロバイダー コネクション ポイントによってサポートされるセカンダリ インターフェイスの、オプションのコレクションを取得します。</summary>
        <returns>プロバイダーとして動作するコントロールによって提供される追加のインターフェイスの <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロバイダー接続ポイント オブジェクトは、常にコンシューマーとの接続を確立するために使用される既定のインターフェイスを持ちます。 既定のインターフェイスのインスタンスを呼び出すことによって取得、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。  
  
 ただし、一部のプロバイダー コントロールは、接続の一環として、コンシューマーに提供する複数のインターフェイスを実装します。 これらのインターフェイスでは、既定の接続を確立するために使用するものではないは、セカンダリ インターフェイスと呼ばれます。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドと同様に、セカンダリ インターフェイスへの参照のコレクションを取得する方法を提供する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドは、既定のインターフェイスへの参照を返します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />メソッドで、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラスに実装が含まれていません。 セカンダリ インターフェイスの空のコレクションを返します。 このメソッドを実装するのにはから継承する必要があります、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラス、し、そこからセカンダリ インターフェイスの特定のセットを返す、このメソッドをオーバーライドします。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>