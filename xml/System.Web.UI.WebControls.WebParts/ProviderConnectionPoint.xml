<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64b02411247bc4383c9d0ba96309240f908373f9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69394866" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="293e0-101">プロバイダーとして動作するサーバー コントロールがコンシューマーとの接続を形成できるようにする、コネクション ポイント オブジェクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="293e0-101">Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="293e0-102">2つのサーバーコントロール間のすべての Web パーツ接続では、コントロールが他のコントロールに接続し、データを提供または使用できるようにするために、関連付けられている接続ポイントオブジェクトが各コントロールに必要です。は、接続のプロバイダーまたはコンシューマーとして指定されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="293e0-103">一般的<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>なオブジェクトには、コントロールが別のコントロールに接続する方法、および共有できるデータの種類の詳細が含まれています。</span><span class="sxs-lookup"><span data-stu-id="293e0-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="293e0-104">接続でプロバイダーとして動作するコントロールの場合、接続ポイントは<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトである必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-104">For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span> <span data-ttu-id="293e0-105">Web パーツ接続と接続ポイントの詳細については、以下の「関連項目」セクションに記載されているトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="293e0-105">For details on Web Parts connections and connection points, see the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="293e0-106"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを作成するには、いくつかの手順が必要です。</span><span class="sxs-lookup"><span data-stu-id="293e0-106">To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="293e0-107">インターフェイスを作成します。</span><span class="sxs-lookup"><span data-stu-id="293e0-107">Create an interface.</span></span> <span data-ttu-id="293e0-108">プロバイダーは、コンシューマーとデータを共有するときに、インターフェイスのインスタンスを取得し、そのインスタンスをコンシューマーに返します。</span><span class="sxs-lookup"><span data-stu-id="293e0-108">When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.</span></span>  
  
2.  <span data-ttu-id="293e0-109">プロバイダーにインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="293e0-109">Implement the interface in a provider.</span></span> <span data-ttu-id="293e0-110">またはその他のサーバーコントロール ( <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーン内の任意の種類のサーバーコントロールを使用できます)。プロバイダーは、最初の手順で作成したインターフェイスを実装する必要があります。 <xref:System.Web.UI.WebControls.WebParts.WebPart></span><span class="sxs-lookup"><span data-stu-id="293e0-110">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.</span></span>  
  
3.  <span data-ttu-id="293e0-111">コールバックメソッドを識別します。</span><span class="sxs-lookup"><span data-stu-id="293e0-111">Identify a callback method.</span></span> <span data-ttu-id="293e0-112">プロバイダーのメソッドは、接続を確立するためのコールバックメソッドとして識別される必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-112">A method in the provider must be identified as the callback method to establish a connection.</span></span> <span data-ttu-id="293e0-113">このメソッドは、実装されたインターフェイスのインスタンスをコンシューマーに返します。</span><span class="sxs-lookup"><span data-stu-id="293e0-113">This method returns an instance of the implemented interface to a consumer.</span></span> <span data-ttu-id="293e0-114">プロバイダー内のコールバックメソッドを識別する Web パーツ方法は、インターフェイスインスタンス`ConnectionProvider`を返すメソッドにメタデータ<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性 (クラスで定義) を追加することです。</span><span class="sxs-lookup"><span data-stu-id="293e0-114">The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance.</span></span> <span data-ttu-id="293e0-115">属性を追加するときに必要なパラメーターは、プロバイダー接続ポイントに使用する表示名だけです。</span><span class="sxs-lookup"><span data-stu-id="293e0-115">When the attribute is added, the only required parameter is a display name to use for the provider connection point.</span></span> <span data-ttu-id="293e0-116">コネクションポイントの ID など、省略可能なパラメーターを追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="293e0-116">Optional parameters can also be added, such as an ID for the connection point.</span></span>  
  
 <span data-ttu-id="293e0-117">コントロールがプロバイダーとして機能するようになった後、コントロールは接続に参加できます (コンシューマーコントロールが同様に装備され、使用可能であることを前提としています)。</span><span class="sxs-lookup"><span data-stu-id="293e0-117">After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available).</span></span> <span data-ttu-id="293e0-118">Web ページのマークアップ内に静的な宣言型接続を作成するには、 `<asp:webpartconnection>`開発者が要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="293e0-118">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="293e0-119">コールバックメソッドを識別するプロバイダーのソースコードの`ProviderConnectionPointID` `<asp:webpartconnection>` 属性でコネクションポイントのIDを指定する場合は、その値をページの要素の属性に割り当てる必要`ConnectionProvider`があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-119">If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="293e0-120">プロバイダー接続ポイントの ID を開発者が指定する理由の1つは、プロバイダーコントロールに複数のコネクションポイントがある場合です。</span><span class="sxs-lookup"><span data-stu-id="293e0-120">One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control.</span></span> <span data-ttu-id="293e0-121">プロバイダーコントロールのプロバイダー接続ポイントに ID が指定されていない場合は、ページの`ProviderConnectionPointID`属性に値を割り当てる必要はありません。接続は、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>から取得した既定値を使用して作成されるためです。分野.</span><span class="sxs-lookup"><span data-stu-id="293e0-121">If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="293e0-122">コード内で接続を作成するには、開発者<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>は<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドを呼び出し、プロバイダーコントロールの id またはプロバイダーコントロールの定義済み<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトの id またはインデックスと共に、新しいオブジェクトを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-122">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control.</span></span> <span data-ttu-id="293e0-123">返され<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>たオブジェクトは、プロバイダーコントロールへの参照、コンシューマーコントロールへの参照、および対応<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>するオブジェクトをすべて<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドに渡して、新しい<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="293e0-123">The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="293e0-124">開発者は、宣言によって、またはプログラムによって接続を確立する際にプロバイダー接続ポイントを使用できますが、ユーザーはプロバイダー接続ポイントと対話して、ユーザーインターフェイス (UI) を使用して接続を確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="293e0-124">Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="293e0-125">開発者が Web <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>ページ上でコントロールを宣言すると、ユーザーが接続を作成するためのランタイム UI が提供されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-125">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="293e0-126">接続を確立するための開始点としてコンシューマーコントロールを選択した場合 (プロバイダーを選択することもできますが、結果として得られる接続に違いはありません)、UI にはドロップダウンリストコントロールが表示されます。使用可能なプロバイダー接続ポイントの表示名 (または、複数の場合はポイント)。</span><span class="sxs-lookup"><span data-stu-id="293e0-126">If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones).</span></span> <span data-ttu-id="293e0-127">接続を作成するには、ユーザーがプロバイダー接続ポイントを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-127">Users must select a provider connection point to create a connection.</span></span>  
  
 <span data-ttu-id="293e0-128">オブジェクト<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>は、特定のプロバイダーコントロールに直接関連付け、基本<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラスから継承したプロパティに接続に関する詳細を格納します。</span><span class="sxs-lookup"><span data-stu-id="293e0-128">A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="293e0-129">たとえば、継承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>されたプロパティでは、プロバイダー接続ポイントはプロバイダーによって返されるインターフェイスの型を保持します。</span><span class="sxs-lookup"><span data-stu-id="293e0-129">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider.</span></span> <span data-ttu-id="293e0-130">接続のプロバイダーとコンシューマーがどちらも同じインターフェイス型を使用している場合、コントロールには互換性があり、直接接続を形成することができます。</span><span class="sxs-lookup"><span data-stu-id="293e0-130">If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="293e0-131">プロバイダーとコンシューマーが同じインターフェイス型を使用できない場合、それらは互換性がなく、オブジェクト<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>を使用して、コンシューマーが使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>できる型にプロバイダー接続ポイントの値を変換する必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-131">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with.</span></span> <span data-ttu-id="293e0-132">もう1つの重要な<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>継承プロパティとして、プロパティがあります。このプロパティは、ユーザーが接続の作成時にプロバイダー接続ポイントを選択するための表示名を提供します。</span><span class="sxs-lookup"><span data-stu-id="293e0-132">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections.</span></span> <span data-ttu-id="293e0-133">表示名は、開発者がプロバイダーコントロールのコール`ConnectionProvider`バックメソッドに属性を追加するときに必要なパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="293e0-133">The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control.</span></span> <span data-ttu-id="293e0-134">また、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>継承されたプロパティは、プロバイダーに複数のコネクションポイントがある場合にプロバイダー接続ポイントの一意の識別子を提供するため、前述のように便利です。</span><span class="sxs-lookup"><span data-stu-id="293e0-134">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points.</span></span> <span data-ttu-id="293e0-135">プロバイダーは複数<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>のオブジェクトを定義できます。この場合、開発者が`ConnectionProvider`属性をメソッドに追加するときに、各接続ポイントを区別するために ID 値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-135">A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="293e0-136">もう1つの注目すべき<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>継承されたプロパティは、プロバイダー接続ポイントを複数のコンシューマーに同時に接続できるかどうかを示すプロパティです。</span><span class="sxs-lookup"><span data-stu-id="293e0-136">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers.</span></span> <span data-ttu-id="293e0-137">このプロパティ値は`true` 、プロバイダー接続ポイントに対して既定で設定さ`false`れます (一方、コンシューマー接続ポイントではになります)。</span><span class="sxs-lookup"><span data-stu-id="293e0-137">This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).</span></span>  
  
 <span data-ttu-id="293e0-138">クラス<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>は、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラスから継承したメンバーに、いくつかの一意のメソッドを追加します。</span><span class="sxs-lookup"><span data-stu-id="293e0-138">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="293e0-139">メソッド<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>は、コールバックメソッドがコンシューマーに返すインターフェイスのインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="293e0-139">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers.</span></span> <span data-ttu-id="293e0-140">メソッド<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>は、既存の接続の一部であるが、接続を確立するために使用されるインターフェイスではない、追加のコンシューマーインターフェイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="293e0-140">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="293e0-141">次のコード例は、接続を宣言によって、プログラムで作成する、または UI を使用する簡単な方法を示しています。各ケースでは、プロバイダー接続ポイントを使用します。</span><span class="sxs-lookup"><span data-stu-id="293e0-141">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.</span></span>  
  
 <span data-ttu-id="293e0-142">この例には、次の4つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-142">The example has four parts:</span></span>  
  
-   <span data-ttu-id="293e0-143">ページの Web パーツ表示モードを変更できるユーザーコントロール。</span><span class="sxs-lookup"><span data-stu-id="293e0-143">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="293e0-144">インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。</span><span class="sxs-lookup"><span data-stu-id="293e0-144">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="293e0-145">すべてのコントロールをホストし、コード例を実行するための Web ページ。</span><span class="sxs-lookup"><span data-stu-id="293e0-145">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="293e0-146">例ページを実行する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="293e0-146">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="293e0-147">このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。</span><span class="sxs-lookup"><span data-stu-id="293e0-147">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="293e0-148">次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。</span><span class="sxs-lookup"><span data-stu-id="293e0-148">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="293e0-149">このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更</span><span class="sxs-lookup"><span data-stu-id="293e0-149">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="293e0-150">コード例の2番目の部分は、インターフェイスとコントロールのソースコードです。</span><span class="sxs-lookup"><span data-stu-id="293e0-150">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="293e0-151">ソースファイルには、という名前`IZipCode`の単純なインターフェイスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="293e0-151">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="293e0-152">インターフェイスを実装し<xref:System.Web.UI.WebControls.WebParts.WebPart> 、プロバイダー `ZipCodeWebPart`コントロールとして機能するという名前のクラスもあります。</span><span class="sxs-lookup"><span data-stu-id="293e0-152">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="293e0-153">この`ProvideIZipCode`メソッドは、インターフェイスの唯一のメンバーを実装するコールバックメソッドです。</span><span class="sxs-lookup"><span data-stu-id="293e0-153">Its `ProvideIZipCode` method is the callback method that implements the interface's only member.</span></span> <span data-ttu-id="293e0-154">メソッドは、単にインターフェイスのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="293e0-154">The method simply returns an instance of the interface.</span></span> <span data-ttu-id="293e0-155">メソッドは、そのメタデータ内の`ConnectionProvider`属性でマークされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="293e0-155">Note that the method is marked with a `ConnectionProvider` attribute in its metadata.</span></span> <span data-ttu-id="293e0-156">これは、プロバイダーのコネクションポイントのコールバックメソッドとしてメソッドを識別するための機構です。</span><span class="sxs-lookup"><span data-stu-id="293e0-156">This is the mechanism for identifying the method as the callback method for the provider's connection point.</span></span> <span data-ttu-id="293e0-157">もう 1 <xref:System.Web.UI.WebControls.WebParts.WebPart>つのクラス`WeatherWebPart`はという名前で、接続のコンシューマーとして機能します。</span><span class="sxs-lookup"><span data-stu-id="293e0-157">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="293e0-158">このクラスには、プロバイダー `GetZipCode`コントロールから`IZipCode`インターフェイスのインスタンスを取得するという名前のメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="293e0-158">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="293e0-159">このメソッドは、メタデータの属性を`ConnectionConsumer`使用して、コンシューマーの接続ポイントメソッドとしてマークされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="293e0-159">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="293e0-160">これは、コンシューマーコントロールのコネクションポイントメソッドを識別するための機構です。</span><span class="sxs-lookup"><span data-stu-id="293e0-160">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="293e0-161">コード例を実行するには、このソースコードをコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-161">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="293e0-162">これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。</span><span class="sxs-lookup"><span data-stu-id="293e0-162">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="293e0-163">または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。</span><span class="sxs-lookup"><span data-stu-id="293e0-163">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="293e0-164">このコード例では、動的コンパイルを使用します。</span><span class="sxs-lookup"><span data-stu-id="293e0-164">This code example uses dynamic compilation.</span></span> <span data-ttu-id="293e0-165">のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用</span><span class="sxs-lookup"><span data-stu-id="293e0-165">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="293e0-166">コード例の3番目の部分は、Web ページです。</span><span class="sxs-lookup"><span data-stu-id="293e0-166">The third part of the code example is the Web page.</span></span> <span data-ttu-id="293e0-167">上部の近くに`Register`は、接続を形成するカスタムコントロールを登録するためのディレクティブと、ユーザーがページの表示モードを変更できるようにするユーザーコントロールがあります。</span><span class="sxs-lookup"><span data-stu-id="293e0-167">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="293e0-168">接続自体は、ページ上の`<staticconnections>`要素内で宣言によって作成されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-168">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="293e0-169">これは、接続を作成する1つの方法を`ProviderConnectionPointID`示してい`<asp:webpartconnection>`ます。要素内の属性に注意してください。</span><span class="sxs-lookup"><span data-stu-id="293e0-169">This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="293e0-170">接続はプログラムによって作成することもできます。これを行うためのコードは、 `Button1_Click`メソッド内にあります。</span><span class="sxs-lookup"><span data-stu-id="293e0-170">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="293e0-171">この場合は、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトが作成され、実際の接続を作成するメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-171">In this case, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="293e0-172">接続が宣言によって作成されるか、プログラムによって作成されるかにかかわらず、接続ポイントはプロバイダーとコンシューマーの両方に対して常に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-172">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="293e0-173">メソッド`Button2_Click`は、プロバイダー <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>とコンシューマーの両方のオブジェクトにアクセスし、そのプロパティ値の一部をページのラベルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="293e0-173">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="293e0-174">ブラウザーでページを読み込んだ後、**[接続ポイントの詳細]** ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="293e0-174">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="293e0-175">宣言型接続で確立されたプロバイダーおよびコンシューマー接続ポイントに関する情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-175">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="293e0-176">次に、**[表示モード]** ドロップダウンコントロールを使用して、ページを接続モードに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="293e0-176">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="293e0-177">**郵便番号コンシューマー** <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの動詞メニュー (タイトルバーの下向き矢印で表されます) で、connect 動詞をクリックします。</span><span class="sxs-lookup"><span data-stu-id="293e0-177">On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="293e0-178">接続 UI が表示され、ページで`<asp:connectionszone>`宣言されたコントロールによって自動的に作成されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-178">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="293e0-179">これは、(UI を介して) 接続を作成するもう1つの方法であり、前に説明した宣言型およびプログラムによる方法を使用します。</span><span class="sxs-lookup"><span data-stu-id="293e0-179">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="293e0-180">**[切断]** ボタンをクリックして、既存の静的接続を終了します。</span><span class="sxs-lookup"><span data-stu-id="293e0-180">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="293e0-181">**[プロバイダーへの接続の作成]** リンクをクリックします。</span><span class="sxs-lookup"><span data-stu-id="293e0-181">Click the **Create a Connection to a Provider** link.</span></span> <span data-ttu-id="293e0-182">UI に、プロバイダー接続ポイントの表示名を一覧表示するドロップダウンコントロールが表示されるようになりました。</span><span class="sxs-lookup"><span data-stu-id="293e0-182">The UI now displays a drop-down control that lists the provider connection point display name.</span></span> <span data-ttu-id="293e0-183">ドロップダウンリストで接続ポイントを選択し、**[接続]** をクリックして接続を完了します。</span><span class="sxs-lookup"><span data-stu-id="293e0-183">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="293e0-184">次に、**[切断]** をもう一度クリックします。</span><span class="sxs-lookup"><span data-stu-id="293e0-184">Next, click **Disconnect** again.</span></span> <span data-ttu-id="293e0-185">次に、**[動的接続]** ボタンをクリックして、プログラムによって接続を作成します。</span><span class="sxs-lookup"><span data-stu-id="293e0-185">Then, click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="293e0-186">**[表示モード]** コントロールを使用して、ページをブラウズモードに戻します。</span><span class="sxs-lookup"><span data-stu-id="293e0-186">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="293e0-187">**[接続ポイントの詳細]** ボタンをもう一度クリックすると、プロバイダー接続ポイントオブジェクトの詳細が1回表示されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-187">Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.</span></span>  
  
 <span data-ttu-id="293e0-188">この例では、接続の確立とプロバイダー接続ポイントの使用方法について、Web ページマークアップで宣言された静的接続の3つの方法を示しています。オブジェクトを<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>使用したコードで作成された接続と、接続 UI を通じてユーザーが作成した接続。</span><span class="sxs-lookup"><span data-stu-id="293e0-188">The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="293e0-189">ASP.NET Web パーツコントロール</span><span class="sxs-lookup"><span data-stu-id="293e0-189">ASP.NET Web Parts Controls</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)"><span data-ttu-id="293e0-190">Web パーツ接続の概要</span><span class="sxs-lookup"><span data-stu-id="293e0-190">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="293e0-191">インターフェイス インスタンスをコンシューマーに返して接続を確立する、プロバイダー コントロールのメソッド。</span><span class="sxs-lookup"><span data-stu-id="293e0-191">The method in the provider control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="293e0-192">プロバイダーがコンシューマーに提供するインターフェイスの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="293e0-192">The <see cref="T:System.Type" /> of the interface that the provider serves to consumers.</span></span></param>
        <param name="controlType"><span data-ttu-id="293e0-193">プロバイダー コネクション ポイントが関連付けられるプロバイダー コントロールの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="293e0-193">The <see cref="T:System.Type" /> of the provider control with which the provider connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="293e0-194">接続ユーザー インターフェイス (UI) でユーザーに表示される、プロバイダー コネクション ポイントの表示名。</span><span class="sxs-lookup"><span data-stu-id="293e0-194">A friendly display name for the provider connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="293e0-195">プロバイダー コネクション ポイントの一意の識別子。</span><span class="sxs-lookup"><span data-stu-id="293e0-195">A unique identifier for the provider connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="293e0-196">プロバイダー コネクション ポイントがコンシューマーとの間で同時に複数の接続を持つことができるかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="293e0-196">A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.</span></span></param>
        <summary><span data-ttu-id="293e0-197"><see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="293e0-197">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="293e0-198">クラスのコンストラクターは<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> 、基本コンストラクターを呼び出して、さまざまなパラメーターを渡し、基本クラスを初期化するだけです。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint></span><span class="sxs-lookup"><span data-stu-id="293e0-198">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="293e0-199">基底クラスのコンストラクターは、コネクションポイントのパラメーターの数をチェックし、いくつかの例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="293e0-199">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="293e0-200">発生する可能性のある例外の一覧については、「例外」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="293e0-200">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="293e0-201"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>コンストラクターを呼び出して、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスの独自のインスタンスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="293e0-201">You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class.</span></span> <span data-ttu-id="293e0-202">ただし、単に接続を確立し、クラスを拡張しない場合は、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドを呼び出して、プロバイダーから既存の接続ポイントオブジェクトを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-202">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="293e0-203">次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスから派生させてカスタムプロバイダー接続ポイントを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="293e0-203">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="293e0-204">このコード例には、次の3つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-204">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="293e0-205">プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、コンシューマー <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを含むソースファイル。</span><span class="sxs-lookup"><span data-stu-id="293e0-205">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="293e0-206">静的接続のコントロールをホストする Web ページ。</span><span class="sxs-lookup"><span data-stu-id="293e0-206">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="293e0-207">コード例を実行する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="293e0-207">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="293e0-208">コード例の最初の部分は、プロバイダーおよびコンシューマー <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールのソースと、という名前`TableProviderConnectionPoint`の<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>カスタムクラスです。</span><span class="sxs-lookup"><span data-stu-id="293e0-208">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`.</span></span> <span data-ttu-id="293e0-209">`TableProviderConnectionPoint`クラスのコンストラクターは基本コンストラクターを呼び出し、パラメーターセクションに示されている必須パラメーターを渡します。</span><span class="sxs-lookup"><span data-stu-id="293e0-209">Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="293e0-210">また、 `TableProviderWebPart`クラス`GetConnectionInterface`では、メソッドは接続のコールバックメソッドとして指定され、 `ConnectionProvider`属性はカスタム`TableProviderConnectionPoint`をパラメーターとして宣言します。</span><span class="sxs-lookup"><span data-stu-id="293e0-210">Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter.</span></span> <span data-ttu-id="293e0-211">ここでは、カスタムプロバイダー接続ポイントを作成し、プロバイダーコントロールに関連付ける方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="293e0-211">This demonstrates how to create a custom provider connection point and then associate it with a provider control.</span></span> <span data-ttu-id="293e0-212">この例では、ソースコードが動的にコンパイルされることを前提としているため、ソースコードファイルを Web アプリケーションの App_Code サブフォルダーに配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-212">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="293e0-213">コード例の2番目の部分は、静的な Web パーツ接続でカスタムコントロールをホストする Web ページです。</span><span class="sxs-lookup"><span data-stu-id="293e0-213">The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection.</span></span> <span data-ttu-id="293e0-214">ページの上部には、カスタムコントロール`Register`のプレフィックスと名前空間を宣言するためのディレクティブがあります。</span><span class="sxs-lookup"><span data-stu-id="293e0-214">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="293e0-215">接続は`<asp:webpartconnection>`要素を使用して宣言され、プロバイダーおよびコンシューマーコントロールは`<asp:webpartzone>`要素内で宣言されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-215">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="293e0-216">ブラウザーにページを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="293e0-216">Load the page in a browser.</span></span> <span data-ttu-id="293e0-217">コントロール間の接続は既に存在しています。コンシューマーは、接続がページ内の静的接続として宣言されているため、プロバイダーからのデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="293e0-217">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="293e0-218"><paramref name="callbackMethod" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="293e0-218"><paramref name="callbackMethod" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="293e0-219">- または -</span><span class="sxs-lookup"><span data-stu-id="293e0-219">-or-</span></span> 
 <span data-ttu-id="293e0-220"><paramref name="interfaceType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="293e0-220"><paramref name="interfaceType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="293e0-221">- または -</span><span class="sxs-lookup"><span data-stu-id="293e0-221">-or-</span></span> 
 <span data-ttu-id="293e0-222"><paramref name="controlType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="293e0-222"><paramref name="controlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="293e0-223">または</span><span class="sxs-lookup"><span data-stu-id="293e0-223">-or-</span></span> 
 <span data-ttu-id="293e0-224"><paramref name="displayName" /> は <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="293e0-224"><paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="293e0-225"><paramref name="controlType" /> が、プロバイダー コントロール (またはそれから派生した有効なクラス) と同じ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="293e0-225"><paramref name="controlType" /> is not the same type as the provider control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="293e0-226">ASP.NET Web パーツコントロール</span><span class="sxs-lookup"><span data-stu-id="293e0-226">ASP.NET Web Parts Controls</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="293e0-227">Web パーツ接続でプロバイダーとして動作するコントロール。</span><span class="sxs-lookup"><span data-stu-id="293e0-227">The control acting as the provider in a Web Parts connection.</span></span></param>
        <summary><span data-ttu-id="293e0-228">コンシューマーに返すインターフェイス インスタンスを取得する、プロバイダー コントロールのコールバック メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="293e0-228">Invokes the callback method in a provider control that gets an interface instance to return to consumers.</span></span></summary>
        <returns><span data-ttu-id="293e0-229">プロバイダーがコンシューマーに返して接続を確立するインターフェイスのインスタンスである、<see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="293e0-229">An <see cref="T:System.Object" /> that is an instance of the interface a provider returns to consumers to establish a connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="293e0-230">このメソッドは、接続を確立するために使用されるインターフェイスのインスタンスであるプロバイダーコントロールからオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="293e0-230">This method returns an object from the provider control that is an instance of the interface used to establish a connection.</span></span> <span data-ttu-id="293e0-231">オブジェクトの型は、実装されたインターフェイスの型になります。</span><span class="sxs-lookup"><span data-stu-id="293e0-231">The type of the object will be the type of the implemented interface.</span></span> <span data-ttu-id="293e0-232">たとえば、Web パーツコントロールセットの接続用に実装されている2つ<xref:System.Web.UI.WebControls.WebParts.IWebPartField>の<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>インターフェイスは、とです。</span><span class="sxs-lookup"><span data-stu-id="293e0-232">For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</span></span> <span data-ttu-id="293e0-233">オブジェクトでメソッドが呼び出されると、関連付けられているプロバイダーがこれらのインターフェイスのいずれかを実装する場合、返されるオブジェクトは同じ型になります。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint></span><span class="sxs-lookup"><span data-stu-id="293e0-233">When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.</span></span>  
  
 <span data-ttu-id="293e0-234">メソッドは、接続が<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>アクティブになっているときに、オブジェクトによって呼び出されます。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A></span><span class="sxs-lookup"><span data-stu-id="293e0-234">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="293e0-235">これは、実際に接続を開始し、2つのコントロールでデータを共有できるようにするプロセスを開始するための重要な手順です。</span><span class="sxs-lookup"><span data-stu-id="293e0-235">This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.</span></span>  
  
 <span data-ttu-id="293e0-236">接続のコンシューマーコントロールは、プロバイダーと同じ種類のインターフェイスで動作できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-236">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="293e0-237">そうでない場合は、コントロールに互換性がなく<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 、オブジェクトを使用して接続を確立する必要があります。</span><span class="sxs-lookup"><span data-stu-id="293e0-237">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="293e0-238"><paramref name="control" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="293e0-238"><paramref name="control" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="293e0-239">Web パーツ接続でプロバイダーとして動作するコントロール。</span><span class="sxs-lookup"><span data-stu-id="293e0-239">The control acting as the provider in a Web Parts connection.</span></span></param>
        <summary><span data-ttu-id="293e0-240">プロバイダー コネクション ポイントによってサポートされるセカンダリ インターフェイスの、オプションのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="293e0-240">Gets an optional collection of secondary interfaces that can be supported by a provider connection point.</span></span></summary>
        <returns><span data-ttu-id="293e0-241">プロバイダーとして動作するコントロールによって提供される追加のインターフェイスの <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</span><span class="sxs-lookup"><span data-stu-id="293e0-241">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of additional interfaces provided by the control acting as a provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="293e0-242">プロバイダー接続ポイントオブジェクトには、コンシューマーとの接続を確立するために使用される既定のインターフェイスが常にあります。</span><span class="sxs-lookup"><span data-stu-id="293e0-242">A provider connection point object always has a default interface that is used to establish a connection with consumers.</span></span> <span data-ttu-id="293e0-243">既定のインターフェイスのインスタンスは、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトに対してメソッドを呼び出すことによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="293e0-243">An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
 <span data-ttu-id="293e0-244">ただし、一部のプロバイダーコントロールは、接続の一部としてコンシューマーに提供する複数のインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="293e0-244">However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection.</span></span> <span data-ttu-id="293e0-245">接続を確立するために使用される既定のインターフェイスではないインターフェイスは、セカンダリインターフェイスと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="293e0-245">These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces.</span></span> <span data-ttu-id="293e0-246">メソッドは、メソッドが<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>既定のインターフェイスへの参照を返すのと同じように、セカンダリインターフェイスへの参照のコレクションを返す方法を提供します。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A></span><span class="sxs-lookup"><span data-stu-id="293e0-246">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="293e0-247">クラスのメソッドには実装が含まれていません。このメソッド<see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />は、セカンダリインターフェイスの空のコレクションを返します。 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /></span><span class="sxs-lookup"><span data-stu-id="293e0-247">The <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> method in the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class contains no implementation; it returns an empty collection of secondary interfaces.</span></span> <span data-ttu-id="293e0-248">このメソッドを実装するには、 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラスを継承し、このメソッドをオーバーライドして、特定のセカンダリインターフェイスセットからこのメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="293e0-248">To implement this method, you must inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class, and override this method, returning from it a specific set of secondary interfaces.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
