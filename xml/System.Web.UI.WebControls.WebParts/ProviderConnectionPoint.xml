<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2fb2b1c6f52df31bf047de911a8e747c603bf4f" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51896821" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="369fa-101">プロバイダーとして動作するサーバー コントロールがコンシューマーとの接続を形成できるようにする、コネクション ポイント オブジェクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="369fa-101">Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="369fa-102">すべて Web パーツには、2 つのサーバー コントロール間の接続が、各コントロールがあります (その他の要件) の間で、関連付けられている接続ポイント オブジェクトを他のコントロールへの接続および指定するかどうかに応じて、データを使用することができるコントロールプロバイダーまたは接続のコンシューマーとして指定されます。</span><span class="sxs-lookup"><span data-stu-id="369fa-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="369fa-103">A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトには一般に別のコントロールと共有できるデータの種類にコントロールを接続する方法の詳細が含まれています。</span><span class="sxs-lookup"><span data-stu-id="369fa-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="369fa-104">接続でプロバイダーとして機能するコントロール、その接続ポイントがある必要があります、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="369fa-104">For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span> <span data-ttu-id="369fa-105">詳細については、Web パーツの接続と接続ポイントは、「参照」セクションのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="369fa-105">For details on Web Parts connections and connection points, see the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="369fa-106">作成する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、いくつかの手順が必要です。</span><span class="sxs-lookup"><span data-stu-id="369fa-106">To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="369fa-107">インターフェイスを作成します。</span><span class="sxs-lookup"><span data-stu-id="369fa-107">Create an interface.</span></span> <span data-ttu-id="369fa-108">ときに、コンシューマーとプロバイダーの共有データをあるインターフェイスのインスタンスを取得し、コンシューマーにそのインスタンスを返すことでは。</span><span class="sxs-lookup"><span data-stu-id="369fa-108">When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.</span></span>  
  
2.  <span data-ttu-id="369fa-109">プロバイダーのインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="369fa-109">Implement the interface in a provider.</span></span> <span data-ttu-id="369fa-110">A<xref:System.Web.UI.WebControls.WebParts.WebPart>または他のサーバー コントロール (任意の種類のサーバー コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンを使用できます)、プロバイダーは、最初の手順で作成したインターフェイスを実装する必要がありますになります。</span><span class="sxs-lookup"><span data-stu-id="369fa-110">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.</span></span>  
  
3.  <span data-ttu-id="369fa-111">コールバック メソッドを識別します。</span><span class="sxs-lookup"><span data-stu-id="369fa-111">Identify a callback method.</span></span> <span data-ttu-id="369fa-112">プロバイダーのメソッドは、接続を確立するコールバック メソッドとして識別する必要があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-112">A method in the provider must be identified as the callback method to establish a connection.</span></span> <span data-ttu-id="369fa-113">このメソッドは、コンシューマーに実装されたインターフェイスのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="369fa-113">This method returns an instance of the implemented interface to a consumer.</span></span> <span data-ttu-id="369fa-114">プロバイダーのコールバック メソッドを識別するための Web パーツのアプローチは、追加する、`ConnectionProvider`メタデータ属性 (によって定義された、<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>クラス) をインターフェイス インスタンスを返すメソッドにします。</span><span class="sxs-lookup"><span data-stu-id="369fa-114">The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance.</span></span> <span data-ttu-id="369fa-115">属性が追加されたときに、唯一必須のパラメーターは、プロバイダー接続ポイントを使用する表示名になります。</span><span class="sxs-lookup"><span data-stu-id="369fa-115">When the attribute is added, the only required parameter is a display name to use for the provider connection point.</span></span> <span data-ttu-id="369fa-116">接続ポイントの ID などは、省略可能なパラメーターが追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="369fa-116">Optional parameters can also be added, such as an ID for the connection point.</span></span>  
  
 <span data-ttu-id="369fa-117">コントロールは、プロバイダーとして機能するように装備が後、は、コントロールが接続 (装備され使用可能なコンシューマー コントロールは同様に、ことを想定) に参加できます。</span><span class="sxs-lookup"><span data-stu-id="369fa-117">After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available).</span></span> <span data-ttu-id="369fa-118">Web ページのマークアップで、宣言型の静的な接続を作成する開発者が使用できる、`<asp:webpartconnection>`要素。</span><span class="sxs-lookup"><span data-stu-id="369fa-118">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="369fa-119">場合、`ConnectionProvider`コールバック メソッドを識別するプロバイダーのソース コード内の属性は、接続ポイントの ID を指定し、その値を割り当てる必要があります、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`ページの要素。</span><span class="sxs-lookup"><span data-stu-id="369fa-119">If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="369fa-120">開発者がプロバイダーのコネクション ポイントの ID を指定する 1 つの理由は、プロバイダー コントロールに複数の接続ポイントがあるかどうか。</span><span class="sxs-lookup"><span data-stu-id="369fa-120">One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control.</span></span> <span data-ttu-id="369fa-121">割り当てられる値がない場合は、プロバイダー コントロール プロバイダー コネクション ポイントの ID が指定されていない、`ProviderConnectionPointID`から取得した既定値を使用して、接続が作成するため、ページで、属性、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>フィールド。</span><span class="sxs-lookup"><span data-stu-id="369fa-121">If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="369fa-122">コードで接続を作成するには、開発者を新規に作成する必要があります<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを呼び出すことによって、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドと ID または定義済みのインデックスと共に、プロバイダー コントロールの ID を渡す<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>プロバイダー コントロール内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="369fa-122">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control.</span></span> <span data-ttu-id="369fa-123">返された<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>、コンシューマー コントロールと対応するへの参照をプロバイダー コントロールへの参照と共にオブジェクト<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトはすべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>新たに作成するメソッド<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="369fa-123">The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="369fa-124">開発者は、宣言またはプログラムによって接続の確立の一部としてプロバイダー コネクション ポイントを使用できますが、ユーザーがユーザー インターフェイス (UI) 経由の接続を確立するために、プロバイダー接続ポイントと対話もできます。</span><span class="sxs-lookup"><span data-stu-id="369fa-124">Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="369fa-125">開発者は、宣言する場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、Web ページで接続を作成するユーザーの実行時の UI を提供します。</span><span class="sxs-lookup"><span data-stu-id="369fa-125">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="369fa-126">ユーザーをクリックして、接続を確立するための開始点として、コンシューマー コントロールを選択する場合は、動詞の接続 (プロバイダーを選択することも、結果として得られる接続に違いはありません) でドロップダウン リスト コントロールが UI に表示されます、使用可能なプロバイダー接続ポイント (またはポイントが複数の場合) の名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="369fa-126">If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones).</span></span> <span data-ttu-id="369fa-127">ユーザーは、接続を作成するプロバイダー接続ポイントを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-127">Users must select a provider connection point to create a connection.</span></span>  
  
 <span data-ttu-id="369fa-128">A<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトは、特定のプロバイダー コントロールを直接関連付けます、ベースから継承プロパティで、接続の詳細を格納<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス。</span><span class="sxs-lookup"><span data-stu-id="369fa-128">A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="369fa-129">たとえばで、継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>プロパティ、プロバイダー接続ポイントは、プロバイダーによって返されるインターフェイスの型。</span><span class="sxs-lookup"><span data-stu-id="369fa-129">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider.</span></span> <span data-ttu-id="369fa-130">場合は、プロバイダーと同じ操作両方の接続でコンシューマー インターフェイスの型をコントロールは互換性があり、直接接続を構成できますします。</span><span class="sxs-lookup"><span data-stu-id="369fa-130">If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="369fa-131">互換性のないし、使用する必要があります、同じインターフェイス型に、プロバイダーとコンシューマーが機能できない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト プロバイダー コネクション ポイントの変換を<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>コンシューマーが使用できる型に値。</span><span class="sxs-lookup"><span data-stu-id="369fa-131">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with.</span></span> <span data-ttu-id="369fa-132">もう 1 つの重要な継承されたプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>プロパティは、ユーザーがプロバイダーの接続を選択するための UI に表示するフレンドリ名を提供するポイントの接続を作成するときにします。</span><span class="sxs-lookup"><span data-stu-id="369fa-132">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections.</span></span> <span data-ttu-id="369fa-133">開発者の追加と、表示名は必須のパラメーターを`ConnectionProvider`属性をプロバイダー コントロールのコールバック メソッド。</span><span class="sxs-lookup"><span data-stu-id="369fa-133">The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control.</span></span> <span data-ttu-id="369fa-134">継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>プロパティは、上記プロバイダーが複数の接続ポイントを持つことをプロバイダーのコネクション ポイントの一意識別子を提供するためのようにも、役立ちます。</span><span class="sxs-lookup"><span data-stu-id="369fa-134">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points.</span></span> <span data-ttu-id="369fa-135">プロバイダーでは複数<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>とここで定義されている開発者は、追加時にオブジェクト、`ConnectionProvider`属性、メソッドに各接続ポイントを区別するために ID 値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-135">A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="369fa-136">その他の注目すべき継承されたプロパティは 1 つは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>プロパティで、プロバイダーのコネクション ポイントが複数のコンシューマーに同時に接続できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="369fa-136">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers.</span></span> <span data-ttu-id="369fa-137">このプロパティの値が`true`プロバイダー コネクション ポイントの既定 (既定値は`false`コンシューマー接続ポイント)。</span><span class="sxs-lookup"><span data-stu-id="369fa-137">This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).</span></span>  
  
 <span data-ttu-id="369fa-138"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスは、いくつかの固有のメソッドを追加します。 メンバーに、継承元、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス。</span><span class="sxs-lookup"><span data-stu-id="369fa-138">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="369fa-139"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドをコールバック メソッドをコンシューマーに返すインターフェイスのインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="369fa-139">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers.</span></span> <span data-ttu-id="369fa-140"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドは、既存の接続の一部である追加の消費者のインターフェイスを取得しますが、インターフェイスではない接続を確立するために使用します。</span><span class="sxs-lookup"><span data-stu-id="369fa-140">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="369fa-141">次のコード例では、宣言によって接続を作成、プログラム、または UI の各ケースでは、プロバイダーのコネクション ポイントを使用する簡単な方法を示します。</span><span class="sxs-lookup"><span data-stu-id="369fa-141">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.</span></span>  
  
 <span data-ttu-id="369fa-142">この例では、4 つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-142">The example has four parts:</span></span>  
  
-   <span data-ttu-id="369fa-143">ページのモードを表示するユーザー コントロール Web パーツを変更することができます。</span><span class="sxs-lookup"><span data-stu-id="369fa-143">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="369fa-144">ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="369fa-144">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="369fa-145">すべてのコントロールをホストし、コード例を実行する Web ページ。</span><span class="sxs-lookup"><span data-stu-id="369fa-145">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="369fa-146">ページの例を実行する方法の説明です。</span><span class="sxs-lookup"><span data-stu-id="369fa-146">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="369fa-147">このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。</span><span class="sxs-lookup"><span data-stu-id="369fa-147">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="369fa-148">割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。</span><span class="sxs-lookup"><span data-stu-id="369fa-148">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="369fa-149">詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。</span><span class="sxs-lookup"><span data-stu-id="369fa-149">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="369fa-150">コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。</span><span class="sxs-lookup"><span data-stu-id="369fa-150">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="369fa-151">ソース ファイルには、という名前の単純なインターフェイスが含まれています。`IZipCode`します。</span><span class="sxs-lookup"><span data-stu-id="369fa-151">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="369fa-152"><xref:System.Web.UI.WebControls.WebParts.WebPart>という名前のクラス`ZipCodeWebPart`するインターフェイスを実装し、プロバイダー コントロールとして機能します。</span><span class="sxs-lookup"><span data-stu-id="369fa-152">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="369fa-153">その`ProvideIZipCode`メソッドは、インターフェイスの唯一のメンバーを実装するコールバック メソッドです。</span><span class="sxs-lookup"><span data-stu-id="369fa-153">Its `ProvideIZipCode` method is the callback method that implements the interface's only member.</span></span> <span data-ttu-id="369fa-154">メソッドは、単に、インターフェイスのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="369fa-154">The method simply returns an instance of the interface.</span></span> <span data-ttu-id="369fa-155">メソッドが設定されている、`ConnectionProvider`そのメタデータ内の属性。</span><span class="sxs-lookup"><span data-stu-id="369fa-155">Note that the method is marked with a `ConnectionProvider` attribute in its metadata.</span></span> <span data-ttu-id="369fa-156">これは、プロバイダーのコネクション ポイントのコールバック メソッドとしてメソッドを識別するための機構です。</span><span class="sxs-lookup"><span data-stu-id="369fa-156">This is the mechanism for identifying the method as the callback method for the provider's connection point.</span></span> <span data-ttu-id="369fa-157">他の<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスの名前が`WeatherWebPart`、および接続のコンシューマーとして機能します。</span><span class="sxs-lookup"><span data-stu-id="369fa-157">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="369fa-158">このクラスは、という名前のメソッドを持つ`GetZipCode`のインスタンスを取得する、`IZipCode`プロバイダー コントロールからのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="369fa-158">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="369fa-159">コンシューマーのコネクション ポイントのメソッドとしてこのメソッドがマークされていることに注意してください、`ConnectionConsumer`そのメタデータ内の属性。</span><span class="sxs-lookup"><span data-stu-id="369fa-159">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="369fa-160">これは、コンシューマー コントロールの接続ポイント メソッドを識別するためのメカニズムです。</span><span class="sxs-lookup"><span data-stu-id="369fa-160">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="369fa-161">実行するコード例は、このソース コードをコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-161">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="369fa-162">明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。</span><span class="sxs-lookup"><span data-stu-id="369fa-162">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="369fa-163">または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。</span><span class="sxs-lookup"><span data-stu-id="369fa-163">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="369fa-164">このコード例では、動的なコンパイルを使用します。</span><span class="sxs-lookup"><span data-stu-id="369fa-164">This code example uses dynamic compilation.</span></span> <span data-ttu-id="369fa-165">コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。</span><span class="sxs-lookup"><span data-stu-id="369fa-165">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="369fa-166">コード例の 3 番目の部分は、Web ページです。</span><span class="sxs-lookup"><span data-stu-id="369fa-166">The third part of the code example is the Web page.</span></span> <span data-ttu-id="369fa-167">上部にある、 `Register`  ページの表示モードを接続を形成するカスタム コントロールおよび変更できるようにするユーザー コントロールを登録するためのディレクティブ。</span><span class="sxs-lookup"><span data-stu-id="369fa-167">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="369fa-168">宣言内自体の接続が作成された、`<staticconnections>`ページ上の要素。</span><span class="sxs-lookup"><span data-stu-id="369fa-168">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="369fa-169">これは、接続を作成する 1 つの方法-メモ、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`要素。</span><span class="sxs-lookup"><span data-stu-id="369fa-169">This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="369fa-170">プログラムでは、接続を作成することもできます。これを行うためのコードは、`Button1_Click`メソッド。</span><span class="sxs-lookup"><span data-stu-id="369fa-170">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="369fa-171">ここで、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを作成し、実際の接続を作成するメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="369fa-171">In this case, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="369fa-172">宣言またはプログラムによって、接続が作成されるかどうか接続ポイントは、プロバイダーとコンシューマーの両方に対して常に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-172">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="369fa-173">`Button2_Click`メソッドへのアクセス、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>プロバイダーとコンシューマーの両方のオブジェクトし、そのプロパティ値の一部のページでは、ラベルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="369fa-173">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="369fa-174">ブラウザーでページを読み込んだ後、**コネクション ポイントの詳細**ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="369fa-174">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="369fa-175">宣言型の接続で確立されているプロバイダーとコンシューマーのコネクション ポイントに関する情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="369fa-175">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="369fa-176">次に、使用、**表示モード**接続モードのドロップダウン コントロールをページに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="369fa-176">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="369fa-177">動詞メニューで、**郵便番号/ZIP Code コンシューマー** <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール (タイトル バーの下向きの矢印で表される)、connect の動詞をクリックします。</span><span class="sxs-lookup"><span data-stu-id="369fa-177">On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="369fa-178">UI が表示されたら、接続はによって自動的に作成された、`<asp:connectionszone>`コントロール、ページで宣言します。</span><span class="sxs-lookup"><span data-stu-id="369fa-178">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="369fa-179">これは、前に説明した宣言とプログラムのメソッドと共に接続 (UI) を作成する別の方法です。</span><span class="sxs-lookup"><span data-stu-id="369fa-179">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="369fa-180">をクリックして、**切断**を既存の静的な接続を終了するボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="369fa-180">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="369fa-181">をクリックして、**プロバイダーへの接続を作成する**リンク。</span><span class="sxs-lookup"><span data-stu-id="369fa-181">Click the **Create a Connection to a Provider** link.</span></span> <span data-ttu-id="369fa-182">UI では、プロバイダー接続ポイントの表示名を一覧表示するドロップダウン コントロールが表示されます。</span><span class="sxs-lookup"><span data-stu-id="369fa-182">The UI now displays a drop-down control that lists the provider connection point display name.</span></span> <span data-ttu-id="369fa-183">ボックスの一覧で、接続ポイントを選択し、クリックして**Connect**接続を完了します。</span><span class="sxs-lookup"><span data-stu-id="369fa-183">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="369fa-184">次に、クリックして**切断**もう一度です。</span><span class="sxs-lookup"><span data-stu-id="369fa-184">Next, click **Disconnect** again.</span></span> <span data-ttu-id="369fa-185">をクリックし、**動的接続**プログラムで接続を作成するボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="369fa-185">Then, click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="369fa-186">使用して、**表示モード**コントロールをページをブラウズ モードを返します。</span><span class="sxs-lookup"><span data-stu-id="369fa-186">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="369fa-187">をクリックして、**接続ポイントの詳細**をもう一度プロバイダーのコネクション ポイント オブジェクトの詳細を示すために、もう一度ボタン。</span><span class="sxs-lookup"><span data-stu-id="369fa-187">Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.</span></span>  
  
 <span data-ttu-id="369fa-188">接続を確立し、3 つの方法でプロバイダーのコネクション ポイントの使用例を説明しました Web ページのマークアップで宣言された静的な接続。使用するコードで作成した接続、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、および接続 UI を介して、ユーザーによって作成された接続。</span><span class="sxs-lookup"><span data-stu-id="369fa-188">The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308"><span data-ttu-id="369fa-189">ASP.NET Web パーツ ページ</span><span class="sxs-lookup"><span data-stu-id="369fa-189">ASP.NET Web Parts Pages</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b"><span data-ttu-id="369fa-190">Web パーツ接続の概要</span><span class="sxs-lookup"><span data-stu-id="369fa-190">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="369fa-191">インターフェイス インスタンスをコンシューマーに返して接続を確立する、プロバイダー コントロールのメソッド。</span><span class="sxs-lookup"><span data-stu-id="369fa-191">The method in the provider control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="369fa-192">プロバイダーがコンシューマーに提供するインターフェイスの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="369fa-192">The <see cref="T:System.Type" /> of the interface that the provider serves to consumers.</span></span></param>
        <param name="controlType"><span data-ttu-id="369fa-193">プロバイダー コネクション ポイントが関連付けられるプロバイダー コントロールの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="369fa-193">The <see cref="T:System.Type" /> of the provider control with which the provider connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="369fa-194">接続ユーザー インターフェイス (UI) でユーザーに表示される、プロバイダー コネクション ポイントの表示名。</span><span class="sxs-lookup"><span data-stu-id="369fa-194">A friendly display name for the provider connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="369fa-195">プロバイダー コネクション ポイントの一意の識別子。</span><span class="sxs-lookup"><span data-stu-id="369fa-195">A unique identifier for the provider connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="369fa-196">プロバイダー コネクション ポイントがコンシューマーとの間で同時に複数の接続を持つことができるかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="369fa-196">A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.</span></span></param>
        <summary><span data-ttu-id="369fa-197"><see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="369fa-197">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="369fa-198"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>のコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスが基本のコンス トラクターのさまざまなパラメーターを渡すと、基本クラスの初期化を呼び出すだけです。</span><span class="sxs-lookup"><span data-stu-id="369fa-198">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="369fa-199">基底クラスのコンス トラクターのパラメーターの接続ポイントの数を確認し、いくつかの例外をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="369fa-199">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="369fa-200">可能性のある例外の一覧は、例外を参照してください。</span><span class="sxs-lookup"><span data-stu-id="369fa-200">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="369fa-201">呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>のインスタンスを作成するコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラス。</span><span class="sxs-lookup"><span data-stu-id="369fa-201">You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class.</span></span> <span data-ttu-id="369fa-202">ただし、単に接続を確立し、クラスを拡張しないがいる場合でを呼び出す必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>プロバイダーの既存の接続ポイント オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="369fa-202">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="369fa-203">派生させる方法を次のコード例に示します、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>カスタム プロバイダー接続ポイントを作成するクラス。</span><span class="sxs-lookup"><span data-stu-id="369fa-203">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="369fa-204">コード例では、3 つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-204">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="369fa-205">プロバイダーを含むソース ファイル<xref:System.Web.UI.WebControls.WebParts.WebPart>コンシューマーを制御します。<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="369fa-205">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="369fa-206">静的な接続のコントロールをホストする Web ページ。</span><span class="sxs-lookup"><span data-stu-id="369fa-206">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="369fa-207">サンプル コードを実行する方法の説明です。</span><span class="sxs-lookup"><span data-stu-id="369fa-207">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="369fa-208">コード例の最初の部分は、プロバイダーとコンシューマーのソース<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびカスタム<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>という名前のクラス`TableProviderConnectionPoint`します。</span><span class="sxs-lookup"><span data-stu-id="369fa-208">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`.</span></span> <span data-ttu-id="369fa-209">注意のコンス トラクター、`TableProviderConnectionPoint`クラスは、必須のパラメーターを渡すパラメーター セクションに記載されている、基本コンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="369fa-209">Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="369fa-210">いることを確認、`TableProviderWebPart`クラス、`GetConnectionInterface`メソッドは、接続のコールバック メソッドとして指定し、`ConnectionProvider`属性は、カスタムを宣言`TableProviderConnectionPoint`をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="369fa-210">Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter.</span></span> <span data-ttu-id="369fa-211">これは、カスタム プロバイダー接続ポイントを作成し、それをプロバイダー コントロールに関連付ける方法を示します。</span><span class="sxs-lookup"><span data-stu-id="369fa-211">This demonstrates how to create a custom provider connection point and then associate it with a provider control.</span></span> <span data-ttu-id="369fa-212">この例では、ソース コードが動的にコンパイル、ため、ソース コード ファイルは、Web アプリケーションの App_Code サブフォルダーに配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-212">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="369fa-213">コード例の 2 番目の部分は、静的な Web パーツ接続でカスタム コントロールをホストする Web ページです。</span><span class="sxs-lookup"><span data-stu-id="369fa-213">The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection.</span></span> <span data-ttu-id="369fa-214">ページの上部には、`Register`ディレクティブをプレフィックスとカスタム コントロールの名前空間を宣言します。</span><span class="sxs-lookup"><span data-stu-id="369fa-214">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="369fa-215">使用して、接続が宣言されている、`<asp:webpartconnection>`要素、およびプロバイダーとコンシューマー コントロールが内で宣言された、`<asp:webpartzone>`要素。</span><span class="sxs-lookup"><span data-stu-id="369fa-215">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="369fa-216">ブラウザーでページを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="369fa-216">Load the page in a browser.</span></span> <span data-ttu-id="369fa-217">既にコントロール間の接続が存在し、接続が、ページ内で静的接続として宣言されているため、コンシューマーは、プロバイダーからデータが表示されます。</span><span class="sxs-lookup"><span data-stu-id="369fa-217">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="369fa-218"><paramref name="callbackMethod" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="369fa-218"><paramref name="callbackMethod" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="369fa-219">\- または</span><span class="sxs-lookup"><span data-stu-id="369fa-219">\- or -</span></span> 
 <span data-ttu-id="369fa-220"><paramref name="interfaceType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="369fa-220"><paramref name="interfaceType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="369fa-221">\- または</span><span class="sxs-lookup"><span data-stu-id="369fa-221">\- or -</span></span> 
 <span data-ttu-id="369fa-222"><paramref name="controlType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="369fa-222"><paramref name="controlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="369fa-223">\- または</span><span class="sxs-lookup"><span data-stu-id="369fa-223">\- or -</span></span> 
 <span data-ttu-id="369fa-224"><paramref name="displayName" /> は <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="369fa-224"><paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="369fa-225"><paramref name="controlType" /> が、プロバイダー コントロール (またはそれから派生した有効なクラス) と同じ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="369fa-225"><paramref name="controlType" /> is not the same type as the provider control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308"><span data-ttu-id="369fa-226">ASP.NET Web パーツ ページ</span><span class="sxs-lookup"><span data-stu-id="369fa-226">ASP.NET Web Parts Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="369fa-227">Web パーツ接続でプロバイダーとして動作するコントロール。</span><span class="sxs-lookup"><span data-stu-id="369fa-227">The control acting as the provider in a Web Parts connection.</span></span></param>
        <summary><span data-ttu-id="369fa-228">コンシューマーに返すインターフェイス インスタンスを取得する、プロバイダー コントロールのコールバック メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="369fa-228">Invokes the callback method in a provider control that gets an interface instance to return to consumers.</span></span></summary>
        <returns><span data-ttu-id="369fa-229">プロバイダーがコンシューマーに返して接続を確立するインターフェイスのインスタンスである、<see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="369fa-229">An <see cref="T:System.Object" /> that is an instance of the interface a provider returns to consumers to establish a connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="369fa-230">このメソッドは、接続を確立するために使用されるインターフェイスのインスタンスでは、プロバイダー コントロールからオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="369fa-230">This method returns an object from the provider control that is an instance of the interface used to establish a connection.</span></span> <span data-ttu-id="369fa-231">オブジェクトの型は、実装されたインターフェイスの型になります。</span><span class="sxs-lookup"><span data-stu-id="369fa-231">The type of the object will be the type of the implemented interface.</span></span> <span data-ttu-id="369fa-232">たとえば、2 つのインターフェイスの接続で Web パーツ コントロール セットには実装されている<xref:System.Web.UI.WebControls.WebParts.IWebPartField>と<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>します。</span><span class="sxs-lookup"><span data-stu-id="369fa-232">For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</span></span> <span data-ttu-id="369fa-233">ときに、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>でメソッドが呼び出される、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを関連付けられたプロバイダーは、これらのインターフェイスを実装する場合、返されたオブジェクトが同じ型になります。</span><span class="sxs-lookup"><span data-stu-id="369fa-233">When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.</span></span>  
  
 <span data-ttu-id="369fa-234"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドを呼び出して<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>接続がアクティブ化されるオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="369fa-234">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="369fa-235">これは、実際には接続を開始して、2 つのコントロールでデータを共有できるようにするプロセスを開始するための重要なステップです。</span><span class="sxs-lookup"><span data-stu-id="369fa-235">This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.</span></span>  
  
 <span data-ttu-id="369fa-236">接続でコンシューマー コントロールは、プロバイダーと同じ型のインターフェイスを使用できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-236">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="369fa-237">コントロールとの互換性がない場合はそうでないと、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトは、接続を確立するために使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="369fa-237">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="369fa-238"><paramref name="control" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="369fa-238"><paramref name="control" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="369fa-239">Web パーツ接続でプロバイダーとして動作するコントロール。</span><span class="sxs-lookup"><span data-stu-id="369fa-239">The control acting as the provider in a Web Parts connection.</span></span></param>
        <summary><span data-ttu-id="369fa-240">プロバイダー コネクション ポイントによってサポートされるセカンダリ インターフェイスの、オプションのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="369fa-240">Gets an optional collection of secondary interfaces that can be supported by a provider connection point.</span></span></summary>
        <returns><span data-ttu-id="369fa-241">プロバイダーとして動作するコントロールによって提供される追加のインターフェイスの <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</span><span class="sxs-lookup"><span data-stu-id="369fa-241">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of additional interfaces provided by the control acting as a provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="369fa-242">プロバイダー コネクション ポイント オブジェクトは、常にコンシューマーとの接続を確立するために使用される既定のインターフェイスを持ちます。</span><span class="sxs-lookup"><span data-stu-id="369fa-242">A provider connection point object always has a default interface that is used to establish a connection with consumers.</span></span> <span data-ttu-id="369fa-243">既定のインターフェイスのインスタンスを呼び出すことによって取得、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="369fa-243">An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
 <span data-ttu-id="369fa-244">ただし、一部のプロバイダー コントロールは、接続の一部として、コンシューマーに提供する複数のインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="369fa-244">However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection.</span></span> <span data-ttu-id="369fa-245">既定の接続を確立するために使用されるものではない、これらのインターフェイスは、セカンダリ インターフェイスと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="369fa-245">These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces.</span></span> <span data-ttu-id="369fa-246"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドと同様にセカンダリのインターフェイスへの参照のコレクションを取得する方法を提供する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドは、既定のインターフェイスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="369fa-246">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="369fa-247"><see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />メソッドで、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラスに実装が含まれていません。 セカンダリ インターフェイスの空のコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="369fa-247">The <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> method in the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class contains no implementation; it returns an empty collection of secondary interfaces.</span></span> <span data-ttu-id="369fa-248">このメソッドを実装するから継承する必要があります、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />クラス、およびセカンダリ インターフェイスの特定のセットを返すことから、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="369fa-248">To implement this method, you must inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class, and override this method, returning from it a specific set of secondary interfaces.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>