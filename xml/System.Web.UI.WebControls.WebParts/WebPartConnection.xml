<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51155de7d23c7958800f502e0aaf995f864d8b09" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69394482" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>2 つの <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールで接続を構成できるようにするオブジェクトを提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web パーツコントロールセットでは、接続は2つ<xref:System.Web.UI.WebControls.WebParts.WebPart> (または他のサーバーまたはユーザー) コントロール間のリンクまたは関連付けで、データを共有できます。 データを共有するこの機能により、接続されたコントロールを、分離コントロールが提供する機能を超える方法で使用できるようになります。 たとえば、1つのコントロールが郵便番号データを提供し、別のコントロールがそのデータを読み取り、郵便番号に基づいて地域の気象情報を提供できる場合、2つのコントロールの接続された機能により、ユーザーにとってより多くの価値が得られます。 この例を拡張するために、現地のニュースへのリンクが設定されたコントロールなど、郵便番号に基づいて情報を表示する他のコントロールを作成できます。また、郵便番号データで使用できるすべてのコントロールは、郵便番号。 Web パーツアプリケーションのエンドユーザーは、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロールによって提供される標準接続ユーザーインターフェイス (UI) を使用するか、またはによって提供されるカスタム ui を使用して、このような互換性のあるすべてのコントロール間の接続を Web ブラウザーから直接作成して管理することができます。向け.  
  
 この<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>クラスの概要は、接続を作成するための基本的な詳細情報の一般的なステートメントです。 接続の作成に関連する特定のコンポーネントと要件の詳細については、「 [Web パーツ接続の概要](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100))」を参照するか、次の説明に記載されている参照クラスとコード例を参照してください。 Web パーツ接続には、次のようないくつかの基本的な側面があります。  
  
-   2 <xref:System.Web.UI.WebControls.WebParts.WebPart>つのコントロール。 すべての Web パーツ接続は、2つのコントロールで構成されます。 1つのコントロールが同時に複数の接続に参加することはできますが、1つの接続は、厳密に2つのコントロールで構成されます。 コントロールは、 <xref:System.Web.UI.WebControls.WebParts.WebPart>基本クラスから直接派生することも、ASP.NET コントロール、カスタムサーバーコントロール、ユーザーコントロールなどの他のサーバーコントロールにすることもできます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>クラスから派生していないコントロール ( <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンに配置<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>されている場合) は、実行時にオブジェクトと共に自動的にラップされ<xref:System.Web.UI.WebControls.WebParts.WebPart>ます。これにより、これら<xref:System.Web.UI.WebControls.WebParts.WebPart>のコントロールは、クラスから継承し、実行時として機能します。制限.  
  
-   ゾーン内に<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>存在するコントロール。 Web パーツ<xref:System.Web.UI.WebControls.WebParts.WebPart>接続 (およびその他のほとんどの Web パーツ機能) に<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>参加できるようにするには、コントロールとその他の種類のサーバーコントロールの両方がゾーン内に存在している必要があります。  
  
-   コンシューマーとプロバイダー。 すべての Web パーツ接続には、データのプロバイダーとデータのコンシューマーの2つのコントロールがあります。 プロバイダーは、インターフェイスの形式でデータを返す指定されたコールバックメソッドを使用して、コンシューマーにデータを提供します。 (コールバックメソッドを作成して指定する方法の例については、このトピックの「例」を参照してください)。このコールバックメソッドは、プロバイダー接続ポイントと呼ばれます。 このコネクションポイントの詳細 ("わかりやすい" 名前、ID、および返されたインターフェイスの種類) は、プロバイダーコントロールに関連<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>付けられているオブジェクトに含まれています。 コンシューマーは、インターフェイスのインスタンスを受け入れることができる指定されたメソッドを使用してデータを受信します。 このメソッドはコンシューマー接続ポイントと呼ばれ、接続ポイントの詳細 (名前、ID、およびインターフェイスの種類) は、コンシューマーコントロールに関連付け<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>られているオブジェクトに含まれています。  
  
-   互換性のあるコントロールまたは有効なトランスフォーマー。 接続を機能させるには、コンシューマーとプロバイダーが互換性がある必要があります (つまり、指定されたコネクションポイントメソッドが同じ型のインターフェイスで動作する<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>可能性があります)。または、によって提供される型を変換できるオブジェクトが必要です。プロバイダーは、コンシューマーによって認識される型になります。  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクト。 接続が存在するためには、プロバイダーおよびコンシューマーコントロールへ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>の参照と、その接続ポイントの詳細を含むクラスのインスタンスが必要です。 プロバイダーとコンシューマーに互換性がなく、代わりにオブジェクトを<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>使用して接続する場合、接続はトランスフォーマーを参照します。  
  
-   接続を確立する手段。 互換性のあるコンシューマーおよびプロバイダーの制御が、接続ポイントのメソッドを使用して適切に設計さ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>れ、ゾーンに配置された後、オブジェクトを使用できるようになったら、最後に必要な手順は接続を開始することです。 これは、ユーザーが UI を使用して接続を作成する方法の1つです。 ページに`<asp:connectionszone>`要素を配置し、接続に必要なその他のコンポーネントが配置されている場合、実行時に、ユーザーがページを接続表示モードに切り替えるには、プロバイダーまたはコンシューマーの動詞メニューで connect 動詞をクリックします。、および ( <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロールに基づく) 接続 UI が表示されます。 この UI を使用すると、ユーザーは接続を開始できます。 接続を開始するもう1つの方法は、プログラムで行うことです。 どちらの場合も、UI またはプログラムのどちらを使用しているかにかかわらず、接続を開始する基になるメソッドは同じです。 アプリケーションは、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールでメソッド ( <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>またはトランスフォーマーを使用している場合はメソッド) を呼び出し、プロバイダー、コンシューマー、およびそれぞれの接続<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>ポイントオブジェクトに渡します。メソッドはを返します。素材.  
  
 クラス<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>は、2つ<xref:System.Web.UI.WebControls.WebParts.WebPart>のコントロール間の接続の基本情報をカプセル化するオブジェクトを定義します。 クラスは、特定の接続の詳細に関連するほとんどすべてのプロパティを構成します。 接続のコンシューマーコントロールに関して、いくつかのプロパティが関係しています。 プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>はコンシューマーコントロール自体を参照し、プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>はコンシューマーの ID を参照します。 コンシューマーの接続ポイントの詳細を含む<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> オブジェクトは、コンシューマーのプロパティによって参照されます。<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>は、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトの ID を参照します。 接続を作成するには、これらのコンシューマー関連のすべての接続プロパティに値が割り当てられている必要があります。  
  
 また<xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 、クラスには、接続のプロバイダーコントロールに関連するいくつかのプロパティがあり、これらはコンシューマーのプロパティに対応しています。 プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>はプロバイダーコントロール自体を参照し、プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>はその ID を参照します。 プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>は<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトを参照し、プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>はプロバイダーのコネクションポイントの ID を参照します。  
  
 いくつかのプロパティは、接続の状態に関係しています。 プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>は、接続がアクティブである (現在データを交換している) か、非アクティブである (まだ接続されているがデータをアクティブに共有していない) かを示します。 プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>は、接続が共有である (ページのすべてのユーザーが使用できる) か、またはユーザー固有の接続<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>であるかを示します。プロパティは、コントロールが静的である (ページマークアップで宣言されていて、そのために永続的である) かどうかを示します。動的 (プログラムによって作成され、削除可能であることを意味します)。  
  
   
  
## Examples  
 次のコード例は、2つ<xref:System.Web.UI.WebControls.WebParts.WebPart>のコントロール間の単純な接続を作成する方法を示しています。 この例では、接続のタグを Web ページのマークアップに配置することによって、接続を形成する3つの方法を示します。プログラムによって、コードで接続を作成します。また、UI を介して、ユーザー <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>が接続を確立できるように、ページにコントロールを配置します。  
  
 このコード例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、インターフェイスとコントロールのソースコードです。 ソースファイルには、という名前`IZipCode`の単純なインターフェイスが含まれています。 インターフェイスを実装し<xref:System.Web.UI.WebControls.WebParts.WebPart> 、プロバイダー `ZipCodeWebPart`コントロールとして機能するという名前のクラスもあります。 この`ProvideIZipCode`メソッドは、インターフェイスの唯一のメンバーを実装するコールバックメソッドです。 メソッドは、単にインターフェイスのインスタンスを返します。 メソッドは、そのメタデータ内の`ConnectionProvider`属性でマークされていることに注意してください。 これは、プロバイダーのコネクションポイントのコールバックメソッドとしてメソッドを識別するための機構です。 もう 1 <xref:System.Web.UI.WebControls.WebParts.WebPart>つのクラス`WeatherWebPart`はという名前で、接続のコンシューマーとして機能します。 このクラスには、プロバイダー `GetZipCode`コントロールから`IZipCode`インターフェイスのインスタンスを取得するという名前のメソッドがあります。 このメソッドは、メタデータの属性を`ConnectionConsumer`使用して、コンシューマーの接続ポイントメソッドとしてマークされていることに注意してください。  
  
 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、Web ページです。 上部の近くには`Register` 、ユーザーコントロールとカスタム<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールのディレクティブがあります。 この例ではコントロールの動的コンパイルを前提としているため、コントロールのソースコードは App_Code サブフォルダーに存在する必要があります。ページ`Register`のタグは、任意のタグプレフィックスとコントロールの名前空間のみを参照します。 カスタム<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール (プロバイダーとコンシューマー) は、 `<zonetemplate>`要素内の Web ページの`<asp:webpartzone>`要素内で宣言されます。  
  
 ページには、カスタムコントロール間の接続を構成する3つの方法が用意されています。 最初のメソッドは宣言型です。 ページ`<StaticConnections>`のマークアップでは、要素が宣言され、その`<asp:WebPartConnections>`中で、さまざまなコンシューマーおよびプロバイダーの詳細が属性として指定されています。 これは、Web ページで直接宣言することによって接続を作成する方法の1つ`<asp:WebPartManager>`です。これは、特に要素内で行います。 この静的接続により、2つのカスタムコントロール間の接続が、ページの初回読み込み時に直ちに作成されます。  
  
 コントロール間の接続を形成する2つ目の方法は、 `<asp:connectionszone>`ページの要素によって提供されます。 ユーザーが実行時にページを接続表示モードに切り替え、いずれかのカスタムコントロールで connect 動詞をクリックすると、要素`<asp:connectionszone>`は接続を作成するための UI を自動的に表示します。  
  
 また、このページでは、接続を作成する3番目の方法も示しています。これはプログラムによって行われます。 メソッドでは、コードはプロバイダーコントロール<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>のオブジェクトを作成し、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドを呼び出すことによって接続ポイントの詳細を取得します。 `Button1_Click` コンシューマーコントロールに対して同様のタスクを実行し、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>メソッドを呼び出します。 最後に、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> <xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを呼び出すことによって、新しいオブジェクトを作成します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーに Web ページを読み込んだ後、最初の接続は`<StaticConnections>`要素内で宣言されているため、既に存在しています。 **郵便番号プロバイダー**コントロールにテキストを入力すると、それがコンシューマーコントロールに表示されます。 次に、2つのコントロールを切断します。 **表示モード** ドロップダウンリストコントロールを使用して、ページを 接続 表示モードに変更します。 各<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックすると、それぞれに**接続**オプションが表示されていることがわかります。 これは connect 動詞であり、ページが接続モードのときにのみ動詞メニューに表示されます。 いずれかのコントロールで connect 動詞をクリックすると、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロールによって提供される接続 UI が表示されます。 **[切断]** ボタンをクリックして、コントロール間の静的接続を終了します。 **[表示モード]** コントロールを使用して、ページをブラウズモードに戻します。 プロバイダーに新しいテキストをもう一度入力してみてください。コントロールが切断されているため、コンシューマーコントロールでテキストを更新できないことに注意してください。  
  
 次に、上記と同じ方法を使用して、ページを connect 表示モードに切り替えます。 いずれかのコントロールで接続動詞をクリックします。 **[接続の作成]** リンクをクリックし、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロールによって提供される UI を使用して、コントロール間の接続を作成します。 これは、接続を作成するための2番目の方法です。 接続が作成されるとすぐに、プロバイダーコントロールに入力した最後の文字列 (コントロールが切断されたために表示できなかったもの) が、コンシューマーに突然表示されることに注意してください。これは、接続が再作成されたためです。 **[切断]** ボタンをクリックして、今作成した現在の接続を終了します。 ページをブラウズモードに戻します。 プロバイダーに新しいテキストを入力して、テキストが更新されていないこと、およびコントロールが再び切断されていることを示します。  
  
 ページを返して表示モードに接続します。 Connect 動詞をクリックするのではなく、[接続**WebPart コントロール**] ボタンをクリックします。これは、3番目の接続方法を示しています。 この方法では、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロールを使用せずに、コントロールをプログラムで1つの簡単な手順で接続します。 接続が作成されると、プロバイダーに入力した最後の文字列が、突然コンシューマーコントロールに表示されることに注意してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Web パーツ接続の概要</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A>コンストラクターはパブリックであるため、接続が Web ページのマークアップで宣言されている場合、ASP.NET パーサーはインスタンスを作成できます。このコンストラクターは、開発者コードで使用するためのものではありません。  
  
 プログラムによってオブジェクトを<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>作成する場合は、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> <xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールに用意さ<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType>れているまたはメソッドを使用する必要があります。 これらのメソッドは、接続を作成するための多くの詳細<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>を処理し、オブジェクトを返します。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>クラスのコンストラクターは、プロパティと<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティの値をに`true`設定します。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> したがって、新しい接続の既定の状態は静的になります (つまり、それを含んでいる Web ページのマークアップで宣言され、ページのすべてのユーザーに表示されます)。 これは、通常のシナリオで接続を追加するときに、ページのマークアップで`<asp:webpartconnection>`要素を使用して接続を宣言することによって行われます。 ただし、その他の状況では、接続にはこれらのプロパティに対して異なる値が設定されます。 たとえば、コードで接続オブジェクトを作成することによってプログラムによって接続を追加し、ユーザーが既定のユーザーのパーソナル化スコープでページを表示している場合、接続は動的なユーザーごとに作成されます (特定のユーザーのみに表示されます)。接続.  
  
> [!NOTE]
>  プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager>と<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティは読み取り専用です。接続の性質を決定するこれらのプロパティは、接続の作成方法 (ページマークアップで宣言されているかどうかによって異なります) に応じて、コントロールによって内部的に設定されます。プログラムによってコードまたはユーザーインターフェイスを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続でコンシューマー コントロールとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> オブジェクトを取得します。</summary>
        <value>接続でコンシューマーとして動作する Web パーツ コントロールを表す <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての Web パーツ接続は、データを共有する2つのコントロールで構成されます。 一方のコントロールはデータのプロバイダーとして機能し、もう一方のコントロールはコンシューマーとして機能し、プロバイダーからのデータを受信して処理します。 プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>は、接続関係でコンシューマー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能するコントロールへの参照を取得します。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティのプログラムによる使用方法を示しています。  
  
 このコード例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、コンシューマーとして<xref:System.Web.UI.WebControls.WebParts.WebPart>機能する2つのコントロールと接続のプロバイダーとして機能する2つのコントロールのソースコード、および接続ポイントに使用されるインターフェイスです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、コントロールをホストする Web ページのコードであり、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティの使用方法を示しています。 ページの上部付近には、ユーザー `Register`コントロールとカスタムコントロールのディレクティブがあります。 この例では動的コンパイルを`Register`使用するため、ソースファイルのディレクティブはアセンブリ名を参照する必要はありません。これには、任意のタグプレフィックスとコントロールの名前空間のみが含まれます。 メソッドでは、コードは<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールを介して接続オブジェクトにアクセスし、コンシューマーコントロールへの参照を取得します。 `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーにページを読み込んだ後、**[表示モード]** ドロップダウンリストコントロールを使用して、ページを接続モードに切り替えます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの1つで動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックし、connect 動詞をクリックします。 **[WebPart コントロールの接続]** ボタンまたは指定された接続ユーザーインターフェイス (UI) を使用して、2つのコントロール間の接続を作成します。 **[コンシューマー情報の表示]** ボタンをクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティを示すコードを実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> プロパティの長さが 0 です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続でコンシューマーとして動作するコントロールに対するコネクション ポイントとしての役割を果たすオブジェクトを取得します。</summary>
        <value>接続のコンシューマー コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2つ<xref:System.Web.UI.WebControls.WebParts.WebPart>のコントロール間の接続を作成するために必要な手順の1つは、各コントロールの接続ポイントを作成することです。 コンシューマー接続ポイントは、コンシューマーとして動作するコントロールに接続する方法に関する情報を格納するオブジェクトです。 コンシューマーのソースコードでは、メソッドの1つを`ConnectionConsumer`属性で識別する必要があります。 コンシューマー <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>コントロールに関連付けられているオブジェクトには、メソッドの ID、ユーザーインターフェイス (UI) で使用する表示名、およびメソッドが取得できるインターフェイスの種類など、メソッドと属性の詳細が含まれています。 コンシューマーに関するこの一連の情報、接続を形成するためのメソッド、およびそれが認識するインターフェイスの種類によって、コンシューマー接続ポイントが形成されます。  
  
 既定では、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトは一度に1つ<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>のオブジェクトにしか接続できません。 コンシューマーは、可能なコンシューマー接続ポイントとして複数のメソッドを識別できますが、コンシューマーは1つのコンシューマーとして1つの接続にのみ参加できます (したがって、1つのコンシューマー接続ポイントだけをアクティブにできます)。 これに対し、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>は、任意の数の<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトに接続できます。 この既定の動作は、 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>属性のプロパティをオーバーライドすることによって変更できます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>プロパティのプログラムによる使用方法を示しています。  
  
 この例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、コンシューマーとして<xref:System.Web.UI.WebControls.WebParts.WebPart>機能する2つのコントロールと接続のプロバイダーとして機能する2つのコントロールのソースコード、および接続ポイントに使用されるインターフェイスです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、コントロールをホストする Web ページのコードであり、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>プロパティの使用方法を示しています。 メソッドでは、接続を形成するために必要なすべてのオブジェクトが作成<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>されます。これにはオブジェクトも含まれます。 `Button1_Click` これらのオブジェクトはすべて、接続<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>を作成するためにメソッドに渡されます。 メソッドでは、コードはプロパティに<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>アクセスし、コネクションポイントの詳細を表示します。 `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーにページを読み込んだ後、**[表示モード]** ドロップダウンリストコントロールを使用して、ページを接続モードに切り替えます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの1つで動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックし、connect 動詞をクリックします。 2つのコントロール間の接続を作成するには、**[WebPart コントロールの接続]** ボタンまたは提供された接続 UI を使用します。 **[ConnectionPoint Details]** \ (詳細 \) ボタンをクリック<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>して、プロパティを示すコードを実行します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続のコンシューマー接続ポイントとしての役割を果たすオブジェクトの ID を参照する接続のプロパティ値を取得または設定します。</summary>
        <value>コンシューマー接続ポイントの ID を格納する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web ページのマークアップで宣言された静的接続の場合、開発者は、 `ConsumerConnectionPointID` `<asp:webpartconnection>`要素の属性に値を割り当てることによって、接続に使用するコンシューマー接続ポイントを指定できます。 属性に値が割り当てられていない場合<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>は、プロパティ値が使用されます。  
  
 動的な (プログラムによる) 接続を作成する場合は、通常、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティの値を設定しないようにしてください。 コントロールでメソッド<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>を呼び出して、コンシューマーおよびコンシューマー接続ポイントオブジェクトを (他の必須パラメーターと共に) 渡すだけで、そのメソッドはコンシューマーの接続に使用する正しい ID を決定します。 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>視点. 同様に、接続を切断すると、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティ値を指定しなくてもメソッドを呼び出すことができます。  
  
> [!NOTE]
>  コンシューマーの接続ポイントの ID は、または他のサーバーコントロールを<xref:System.Web.UI.WebControls.WebParts.WebPart>コンシューマーとして指定するときに決定できます。 プロバイダーコントロールまたはトランスフォーマーのいずれかによって提供されるインターフェイスのインスタンスを取得するメソッドを、コンシューマーで特定する必要があります。 メソッドを識別するには、 `ConnectionConsumer`コード属性でマークします。 この属性を追加すると、コンシューマーの<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトの ID として機能するオプションの文字列値パラメーターを追加できます。 省略可能な ID パラメーターの値を指定すると、その値は接続の<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティの値になります。 ID 値を指定しない場合は、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>プロパティ値が使用されます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティの宣言型の使用方法を示しています。  
  
 この例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、Web ページです。 接続は、要素`<StaticConnections>`と`<asp:WebPartsConnection>`要素を使用して、ページマークアップで宣言されることに注意してください。 接続宣言には、必須`ConsumerConnectionPointID`の属性が含まれています。 接続を作成するための2つ目の`Button1_Click`方法は、メソッドに表示されます。このメソッドでは、コンシューマーコントロールで定義されているコネクションポイントを使用して、コードが新しい接続を作成します。 次に、 `Button2_Click`メソッドで、コードはプロパティに<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>アクセスします。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ページをブラウザーに読み込むと、そのページで静的接続が宣言されているため、接続が既に存在しています。 プロバイダーコントロールにテキストを入力し、接続のためにコンシューマーに表示されることを確認します。 次に、コントロールを切断します。 **表示モード** ドロップダウンリストコントロールを使用して、ページを 接続モード に切り替えます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの1つで動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックし、connect 動詞をクリックします。 **[切断]** ボタンをクリックします。 **[WebPart コントロールの接続]** ボタンを使用して、2つのコントロール間の接続を再作成します。 **[ConnectionPoint Details]** ボタンをクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティ値にアクセスするコードを実行します。 値は、コントロールの下のラベルに書き込まれます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続のコンシューマーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールの ID を参照する接続のプロパティ値を取得または設定します。</summary>
        <value>接続のコンシューマーとして動作するコントロールの ID を格納する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロール<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>間の<xref:System.Web.UI.WebControls.WebParts.WebPart>接続を作成する場合は、プロパティ値が必要です。 プロパティに値が割り当てられていない場合、コントロールが<xref:System.Web.UI.WebControls.WebParts.WebPartManager>接続のアクティブ化を試みたときに例外がスローされます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>プロパティの宣言型の使用方法を示しています。  
  
 この例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、Web ページです。 接続は、要素`<StaticConnections>`と`<asp:WebPartsConnection>`要素を使用して、ページマークアップで宣言されることに注意してください。 接続宣言には、必須`ConsumerID`の属性が含まれています。 接続を作成するための2つ目の`Button1_Click`方法は、メソッドに表示されます。このメソッドでは、コンシューマーコントロールで定義されているコネクションポイントを使用して、コードが新しい接続を作成します。 次に、 `Button2_Click`メソッドで、コードが<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>プロパティの値にアクセスして、ラベルに表示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ページをブラウザーに読み込むと、そのページで静的接続が宣言されているため、接続が既に存在しています。 プロバイダーコントロールにテキストを入力し、接続のためにコンシューマーに表示されることを確認します。 次に、コントロールを切断します。 **表示モード** ドロップダウンリストコントロールを使用して、ページを 接続モード に切り替えます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの1つで動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックし、connect 動詞をクリックします。 **[切断]** ボタンをクリックします。 **[WebPart コントロールの接続]** ボタンを使用して、2つのコントロール間の接続を再作成します。 **[コンシューマーの詳細]** ボタンをクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>プロパティ値にアクセスするコードを実行します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトの ID を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> の ID を格納する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべて<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>のオブジェクトには、その<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>プロパティに一意の値が割り当てられています。 これは、複数の接続を区別する方法があることを確認するためです。  
  
 Web ページで`<asp:webpartconnection>`要素を宣言して静的な接続を作成し、接続の`ID`属性に値を割り当てない場合、コントロールが<xref:System.Web.UI.WebControls.WebParts.WebPartManager>接続のアクティブ化を試みたときに例外がスローされます。  
  
 コントロールは<xref:System.Web.UI.WebControls.WebParts.WebPartManager> 、新しい動的接続を作成するときに、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>メソッドを呼び出して、接続の一意の ID を生成します。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>プロパティの宣言型の使用方法を示しています。  
  
 この例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、Web ページです。 接続は、要素`<StaticConnections>`と`<asp:WebPartsConnection>`要素を使用して、ページマークアップで宣言されることに注意してください。 接続宣言には、必須`ID`の属性が含まれています。 接続を作成するための2つ目の`Button1_Click`方法は、メソッドに表示されます。このメソッドでは、コンシューマーコントロールで定義されているコネクションポイントを使用して、コードが新しい接続を作成します。 ここでは、接続が動的であり、コントロールが<xref:System.Web.UI.WebControls.WebParts.WebPartManager>接続に id を割り当てるため、id プロパティは必要ありません。 メソッドでは、コードが<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>プロパティの値にアクセスして、ラベルに表示します。 `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ページをブラウザーに読み込むと、そのページで静的接続が宣言されているため、接続が既に存在しています。 プロバイダーコントロールにテキストを入力し、接続のためにコンシューマーに表示されることを確認します。 次に、コントロールを切断します。 **表示モード** ドロップダウンリストコントロールを使用して、ページを 接続モード に切り替えます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの1つで動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックし、connect 動詞をクリックします。 **[切断]** ボタンをクリックします。 **[WebPart コントロールの接続]** ボタンを使用して、2つのコントロール間の接続を再作成します。 **[接続の詳細]** ボタンをクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>プロパティ値にアクセスするコードを実行します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトが確立されていて、そのプロバイダー コントロールとコンシューマー コントロールの間でデータを交換できるかどうかを示す値を取得します。</summary>
        <value>接続がアクティブな場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトの状態を示します。 接続がこの状態になると、接続のプロバイダーとコンシューマーの制御が通信し、共通のインターフェイスまたは<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトを介してデータを交換できるようになります。  
  
 通常のブラウズモードで確立された接続を含むレンダリングページをユーザーが表示すると、通常、接続はアクティブになります (ページが読み込まれたときに、競合やその他の問題が原因でアクティブ化できなかった場合を除きます)。 ページおよびコントロールのライフサイクルの初期段階では、プロパティの値は`false`になります。 接続は、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> <xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールのイベントが発生した直後にアクティブ化されます。 具体的には、コンシューマーがプロバイダーまた<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>はオブジェクトから指定されたインターフェイスのインスタンスを取得した後に、接続がアクティブ化されます。  
  
 ページ上の複数の接続によって競合または同期の問題が発生する可能性がある状況で、接続がアクティブであるかどうかを確認すると便利です。 たとえば、2つの接続<xref:System.Web.UI.WebControls.WebParts.WebPartManager>の間に何らかの競合がある場合、コントロールには、競合を回避するために接続の1つをアクティブ化しないオプションがあります。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>プロパティの使用方法を示しています。  
  
 この例には、次の3つの部分があります。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 コード例の最初の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 コード例の2番目の部分は、Web ページです。 Top の近くには`Register` 、2つの動的にコンパイル<xref:System.Web.UI.WebControls.WebParts.WebPart>されたコントロールのソースコードを参照するディレクティブがあります。 静的接続は、ページ上の`<StaticConnections>`要素内で宣言されます。 要素内`<script>`には、4つのイベントハンドラーがあります。 各イベントハンドラーは、静的な<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>接続でプロパティの値をチェックし、接続がアクティブ<xref:System.Web.UI.WebControls.Label>であるか非アクティブであるかを示すメッセージをコントロールに書き込みます。 これは、接続がアクティブになってから、ページがレンダリングされた後もアクティブなままになるポイントを示しています。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 ブラウザーにページを読み込みます。 静的接続は既に作成されており、ページ内のさまざまなポイントで接続がアクティブであったかどうかを示すラベルに既にメッセージが書き込まれています。 **[接続の詳細]** ボタンをクリックすると、その時点では接続がアクティブにならないことに注意してください。 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>ただし、接続は、イベントの後に再びアクティブになります (その<xref:System.Web.UI.Control.PreRender>後も引き続きアクティブになります)。ページ。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトをすべてのユーザーに表示するかまたは現在のユーザーのみに表示するかを示す値を取得または設定します。</summary>
        <value>接続が共有される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 個々<xref:System.Web.UI.WebControls.WebParts.WebPart>のコントロール<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>と同様に、オブジェクトは、共有ユーザーまたはユーザーごとのインスタンスにすることができます。 共有インスタンスとは、Web ページのすべてのユーザーに接続が表示されることを意味します。また、ユーザーごとのインスタンスは、接続が特定のユーザーに対してのみ表示されることを意味します。  
  
 一般に、接続がページに追加される方法によって、接続が共有されているかどうかが決まります。 接続が Web ページのマークアップで宣言されている場合、接続は共有<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>され、プロパティ値は`true`になります。 また、接続が追加されたときに Web ページが共有パーソナル化スコープに含まれている場合、接続も共有されます。 通常、ユーザーが接続を追加`<asp:connectionszone>`するためにユーザーインターフェイス (UI) を使用する場合、ページはユーザーのパーソナル化スコープ内にあるため、接続<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>は共有さ`false`れず、プロパティの値はになります。  
  
   
  
## Examples  
 次のコード例は、プログラムに<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>よるプロパティの使用方法を示しています。  
  
 このコード例には5つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   この例を実行するために必要な web.config ファイル内のエントリ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、Web ページです。 メソッドでは、既存の接続<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>のプロパティをチェックし、結果をページに表示します。 `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 コード例の4番目の部分は、web.config ファイル内のエントリです。このファイルは、共有パーソナル化スコープでページを編集できるように、例を実行するユーザーアカウントに必要です。 これを有効にするには、次の例のように、 `<system.web>`セクション内の web.config ファイルにエントリが必要です。  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 ブラウザーにページを読み込んだ後、**表示モード** ドロップダウンリストコントロールを使用して、ページを 接続 表示モードに切り替えます。 **[WebPart コントロールの接続]** ボタンをクリックして、接続を形成します。 次に、**[接続の詳細]** ボタンをクリックして、接続が共有されているかどうかを表示します。 既定のユーザーパーソナル化スコープ内のページとの接続を作成した<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>場合、プロパティ値`false`は接続用である必要があります。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールのいずれかの動詞メニューで (タイトルバーの下向き矢印によって示されます)、[接続] 動詞をクリックします。 接続 UI が表示されたら、**[切断]** ボタンをクリックして接続を終了します。 **[表示モード]** コントロールを使用して、ページをブラウズモードに戻します。  
  
 **[表示モード]** コントロールで、**[共有]** オプションを選択して、ページを共有パーソナル化スコープに切り替えます。 上記と同じ手順に従って接続を作成し、もう一度 **[接続の詳細]** ボタンをクリックして、接続が共有されているかどうかを表示します。 この場合、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>プロパティ`true`の値はになります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトが Web ページのマークアップに宣言されているか、またはプログラムで作成されるかを示す値を取得します。</summary>
        <value>接続が静的な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web パーツコントロール間の接続は、静的または動的のどちらでもかまいません。 静的接続は、 `<asp:WebPartConnection>`要素を使用して、Web ページのマークアップで宣言されます。 動的接続は、プログラムによって、またはユーザーが<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロールによって定義されたユーザーインターフェイス (UI) を使用して接続を作成するときに作成されます。  
  
 静的接続は共有オブジェクトであり、Web ページのすべてのユーザーが使用できます。 また、静的<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールと同様に、完全に削除することはできないため、実質的に永続的です。  
  
> [!NOTE]
>  静的接続オブジェクトを完全に削除することはできませんが、完全に切断できます。 この場合、切断されたオブジェクトはサーバーに存在しますが、エンドユーザーはページ内にオブジェクトが存在することを認識することはありません。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティのプログラムによる使用方法を示しています。  
  
 このコード例には、次の3つの部分があります。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   コントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 コード例の最初の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 コード例の2番目の部分は、Web ページです。 Top の近くには`Register` 、2つの動的にコンパイル<xref:System.Web.UI.WebControls.WebParts.WebPart>されたコントロールのソースコードを参照するディレクティブがあります。 静的接続は、ページ上の`<StaticConnections>`要素内で宣言されます。 メソッド`Button1_Click`は、プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>にアクセスして、接続が静的であるかどうかを確認します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 ブラウザーにページを読み込みます。 静的接続は既に作成されています。 プロバイダーコントロールにテキストを入力し、そのテキストがコンシューマーコントロールに表示されることを確認します。 **[接続の詳細]** ボタンをクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティの値を表示します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web パーツ接続でプロバイダーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールを取得します。</summary>
        <value>データのプロバイダーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての Web パーツ接続は、 <xref:System.Web.UI.WebControls.WebParts.WebPart>コンシューマーとプロバイダーの2つのコントロールで構成され<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> 、プロパティは接続のプロバイダーコントロールへの参照を返します。  
  
 接続 (コンシューマーコントロール) の対応するものと同様に、接続を確立するにはプロバイダーコントロールが必要です。 接続をプログラムによって作成するか、またはページの永続形式で宣言することによって、接続のプロバイダーとして機能するコントロールを指定する必要があります。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>プロパティの使用方法を示しています。  
  
 このコード例には、次の3つの部分があります。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   コントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 コード例の最初の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 コード例の2番目の部分は、Web ページです。 Top の近くには`Register` 、2つの動的にコンパイル<xref:System.Web.UI.WebControls.WebParts.WebPart>されたコントロールのソースコードを参照するディレクティブがあります。 静的接続は、ページ上の`<StaticConnections>`要素内で宣言されます。 `<asp:webpartconnection>` 要素`ProviderID`の属性には、割り当てられているプロバイダーコントロールの ID があることに注意してください。 これは、静的接続のプロバイダーを識別するために必要です。 メソッド`Button1_Click`は、プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>にアクセスし、その詳細の一部をラベルに書き込みます。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 ブラウザーにページを読み込みます。 静的接続は既に作成されています。 プロバイダーコントロールにテキストを入力し、そのテキストがコンシューマーコントロールに表示されることを確認します。 **[プロバイダーの詳細]** ボタンをクリックすると、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>プロパティを通じてアクセスされるプロパティ値の一部が表示されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> プロパティ値の長さが 0 です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続でプロバイダーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールに対するコネクション ポイントとしての役割を果たすオブジェクトを取得します。</summary>
        <value>接続のプロバイダー コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2つ<xref:System.Web.UI.WebControls.WebParts.WebPart>のコントロール間の接続を作成するために必要な手順の1つは、各コントロールの接続ポイントを作成することです。 プロバイダー接続ポイントは、プロバイダーとして動作するコントロールに接続する方法に関する情報を格納するオブジェクトです。 プロバイダーのソースコードでは、メソッドの1つを`ConnectionProvider`属性で識別する必要があります。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>プロバイダーコントロールに関連付けられているには、メソッドの ID、ユーザーインターフェイス (UI) で使用する表示名、およびメソッドがコンシューマーに返すインターフェイスインスタンスの種類など、メソッドと属性の詳細が含まれています。制御. プロバイダーに関するこの一連の情報、接続の方法、提供されるインターフェイスの種類について、まとめてプロバイダー接続ポイントを形成します。  
  
 既定では、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>は一度に1つ<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>のオブジェクトにしか接続できません。 コンシューマーは、可能なコンシューマー接続ポイントとして複数のメソッドを識別できますが、コンシューマーは1つのコンシューマーとして1つの接続にのみ参加できます (したがって、1つのコンシューマー接続ポイントだけをアクティブにできます)。 これに対し、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>は、既定では任意<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>の数のオブジェクトに接続できます。 たとえば、郵便番号を提供するプロバイダーコントロールは、郵便番号を使用する複数のコンシューマーコントロールに接続して、気象データやニュースなど、郵便番号に基づいてさまざまな種類のデータを作成することができます。 この既定の動作は、 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性のプロパティをオーバーライドすることによって変更できます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>プロパティのプログラムによる使用方法を示しています。  
  
 この例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、コンシューマーとして<xref:System.Web.UI.WebControls.WebParts.WebPart>機能する2つのコントロールと接続のプロバイダーとして機能する2つのコントロールのソースコード、および接続ポイントに使用されるインターフェイスです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、コントロールをホストする Web ページのコードであり、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>プロパティの使用方法を示しています。 メソッドでは、接続を形成するために必要なすべてのオブジェクトが作成<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>されます。これにはオブジェクトも含まれます。 `Button1_Click` <xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドへの呼び出しに注意してください。 作成されたさまざまなオブジェクトは、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>接続を作成するためにメソッドに渡されます。 メソッドでは、コードはプロパティに<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>アクセスし、コネクションポイントの詳細を表示します。 `Button2_Click`  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーにページを読み込んだ後、**[表示モード]** ドロップダウンリストコントロールを使用して、ページを接続モードに切り替えます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの1つで動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックし、connect 動詞をクリックします。 2つのコントロール間の接続を作成するには、**[WebPart コントロールの接続]** ボタンまたは提供された接続 UI を使用します。 **[ConnectionPoint Details]** \ (詳細 \) ボタンをクリック<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>して、プロパティを示すコードを実行します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続のプロバイダー コネクション ポイントとしての役割を果たすオブジェクトの ID を参照する接続のプロパティ値を取得または設定します。</summary>
        <value>プロバイダー コネクション ポイント オブジェクトの ID が含まれている文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web ページのマークアップで宣言された静的接続の場合、開発者は、 `ProviderConnectionPointID` `<asp:webpartconnection>`要素の属性に値を割り当てることによって、接続に使用するプロバイダー接続ポイントを指定できます。 属性に値が割り当てられていない場合<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>は、プロパティ値が使用されます。  
  
 動的な (プログラムによる) 接続を作成する場合は、通常、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティの値を設定しないようにしてください。 コントロールでメソッド<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>を呼び出して、プロバイダーとプロバイダーの接続ポイントオブジェクトを (他の必須パラメーターと共に) 渡すだけで、そのメソッドはプロバイダーの接続に使用する正しい ID を決定します。 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>視点. 同様に、接続を切断すると、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティ値を指定しなくてもメソッドを呼び出すことができます。  
  
> [!NOTE]
>  プロバイダーの接続ポイントの ID は、または他のサーバーコントロールを<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーとして指定するときに決定できます。 コンシューマーにデータを含むインターフェイスのインスタンスを提供する、プロバイダーのコールバックメソッドを識別する必要があります。 メソッドを識別するには、 `ConnectionProvider`コード属性でマークします。 この属性を追加すると、プロバイダーの<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトの ID として機能するオプションの文字列値パラメーターを追加できます。 省略可能な ID パラメーターの値を指定すると、その値は接続の<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティの値になります。 Id 値を指定しない場合は、オブジェクト<xref:System.Web.UI.WebControls.WebParts.WebPartManager>の作成時にコントロールによって既定の id が割り当てられます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティの宣言型の使用方法を示しています。  
  
 この例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、Web ページです。 接続は、要素`<StaticConnections>`と`<asp:WebPartsConnection>`要素を使用して、ページマークアップで宣言されることに注意してください。 接続宣言には、必須`ProviderConnectionPointID`の属性が含まれています。 接続を作成する2つ目の方法は`Button1_Click` 、メソッドに表示されます。このメソッドでは、プロバイダーコントロールで定義されている接続ポイント (と ID) を使用して、コードが新しい接続を作成します。 次に、 `Button2_Click`メソッドで、コードはプロパティに<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>アクセスします。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ページをブラウザーに読み込むと、そのページで静的接続が宣言されているため、接続が既に存在しています。 プロバイダーコントロールにテキストを入力し、接続のためにコンシューマーに表示されることを確認します。 次に、コントロールを切断します。 **表示モード** ドロップダウンリストコントロールを使用して、ページを 接続モード に切り替えます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの1つで動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックし、connect 動詞をクリックします。 **[切断]** ボタンをクリックします。 **[WebPart コントロールの接続]** ボタンを使用して、2つのコントロール間の接続を再作成します。 **[ConnectionPoint Details]** ボタンをクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティ値にアクセスするコードを実行します。 値は、コントロールの下のラベルに書き込まれます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続のプロバイダーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールの ID を参照する接続のプロパティ値を取得または設定します。</summary>
        <value>プロバイダー コントロールの ID を格納する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> つ<xref:System.Web.UI.WebControls.WebParts.WebPart>のコントロール間の接続を作成する場合は、プロパティ値が必要です。 プロパティに値が割り当てられていない場合、コントロールが<xref:System.Web.UI.WebControls.WebParts.WebPartManager>接続のアクティブ化を試みたときに例外がスローされます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティの宣言型の使用方法を示しています。  
  
 この例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの`Src` `Register`ディレクティブの属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、 [「チュートリアル:Web パーツページ](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)での表示モードの変更  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、Web ページです。 接続は、要素`<StaticConnections>`と`<asp:WebPartsConnection>`要素を使用して、ページマークアップで宣言されることに注意してください。 接続宣言には、必須`ProviderID`の属性が含まれています。 接続を作成するための2つ目の`Button1_Click`方法は、メソッドに表示されます。このメソッドでは、コンシューマーコントロールで定義されているコネクションポイントを使用して、コードが新しい接続を作成します。 次に、 `Button2_Click`メソッドで、コードが<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティの値にアクセスして、ラベルに表示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ページをブラウザーに読み込むと、そのページで静的接続が宣言されているため、接続が既に存在しています。 プロバイダーコントロールにテキストを入力し、接続のためにコンシューマーに表示されることを確認します。 次に、コントロールを切断します。 これを行うには、**[表示モード]** ドロップダウンリストコントロールを使用して、ページを接続モードに切り替えます。 <xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールの1つで動詞メニュー (タイトルバーの下向き矢印で表されます) をクリックし、connect 動詞をクリックします。 **[切断]** ボタンをクリックすると、コントロールが切断されます。 次に、**[WebPart コントロールの接続]** ボタンを使用して、2つのコントロール間の接続を再作成します。 **[コンシューマーの詳細]** ボタンをクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティ値にアクセスするコードを実行します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>継承した <see cref="M:System.Object.ToString" /> メソッドをオーバーライドし、接続オブジェクトの short 型の名前を返します。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> の short (非修飾) 型の名前を格納する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ほとんどの場合、コントロールデザイナーによって使用されます。 完全修飾型名ではなく、短い型名を使用して、デザインビューでの接続オブジェクトの表示方法が向上します。 ただし、メソッドは、接続オブジェクトの型名を知る必要があるコード内の任意の場所で呼び出すことができます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>メソッドを呼び出して、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトの短い型名を返す方法を示しています。  
  
 このコード例には、次の3つの部分があります。  
  
-   インターフェイスのソースコードと、プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart>として機能する2つのコントロールと、接続のコンシューマー。  
  
-   コントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 コード例の最初の部分は、インターフェイスのソースコードと、コンシューマーコントロールとプロバイダーコントロールです。 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては[、「チュートリアル:カスタム Web サーバーコントロール](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)の開発と使用  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 コード例の2番目の部分は、Web ページです。 Top の近くには`Register` 、2つの動的にコンパイル<xref:System.Web.UI.WebControls.WebParts.WebPart>されたコントロールのソースコードを参照するディレクティブがあります。 静的接続は、ページ上の`<StaticConnections>`要素内で宣言されます。 メソッド`Button1_Click`は、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>メソッドを呼び出して、接続の型名をラベルに書き込みます。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 ブラウザーにページを読み込みます。 静的接続は既に作成されています。 プロバイダーコントロールにテキストを入力し、そのテキストがコンシューマーコントロールに表示されることを確認します。 **[接続の詳細]** ボタンをクリック<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>して、メソッドを実行します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web パーツ接続の 2 つの異なった互換性のないコネクション ポイントの間でデータを変換するために使用する <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> オブジェクトを取得します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web パーツ接続には、接続のプロバイダーとコンシューマーコントロールが接続できる2つの方法があります。 これらのオブジェクトは、それぞれ<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>のオブジェクトと、両方のコントロールによって認識されるインターフェイス型を通じて直接接続できます。 または、互換性がない場合は、プロバイダーのインターフェイスインスタンスを<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>コンシューマーによって認識される型に変換するオブジェクトを使用して、間接的に接続できます。  
  
 接続<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>の一部としてトランスフォーマーが必要な場合は、プロパティ<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>によってオブジェクトへの参照が提供されます。 Web ページのマークアップで接続のトランスフォーマーを宣言によって追加するには、 `<asp:WebPartConnection>`要素内にカスタムトランスフォーマー (または Web パーツコントロールセットで提供されるいずれかのトランスフォーマー) のタグを追加します。 プログラムを使用してトランスフォーマーを追加し、コードでそのインスタンスを作成し、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> <xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールのメソッドを呼び出して接続を作成し、その他の必要なパラメーターと共にトランスフォーマーオブジェクトに渡すこともできます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web パーツ コントロール セットで内部的に使用する <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> オブジェクトのコレクションを取得します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> オブジェクトを格納している <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>プロパティは、開発者が使用するためのものではありません。 接続に関連付けられているトランスフォーマーにアクセスするには<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> 、開発者が常にプロパティを使用する必要があります。  
  
 プロパティは、ページ開発者が Web ページのマークアップ内の`<asp:webpartconnection>`要素内のトランスフォーマー要素を宣言できるようにするために、Web パーツコントロールセットによって内部的に使用されます。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
  </Members>
</Type>
