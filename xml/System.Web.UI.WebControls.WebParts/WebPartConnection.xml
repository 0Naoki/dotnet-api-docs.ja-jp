<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b1dab9b7d3348dd81471c415d0c9ff230db233e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48649448" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>2 つの <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールで接続を構成できるようにするオブジェクトを提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接続がリンクまたは 2 つの間のアソシエーションには、Web パーツ コントロール セットで<xref:System.Web.UI.WebControls.WebParts.WebPart>(またはその他のサーバーまたはユーザー) のデータを共有できるようにするコントロール。 データを共有するには、この機能により、分離されたコントロールによって提供される機能以外の方法で使用される接続されているコントロールです。 たとえば、1 つのコントロールは、郵便番号データを提供し、別のコントロールがそのデータを読み取るし、郵便番号に基づいて地域の気象情報を提供する、接続されている 2 つのコントロールの機能を提供より多くの価値をユーザーにします。 この例を拡張する他のコントロールを作成へのリンク ローカル ニュースを使用して、コントロールなどの郵便番号コードに基づいて表示情報もし、郵便番号データで動作するこれらすべてのコントロールは 1 つのコントロールを提供するとデータを共有する可能性があります、郵便番号。 Web パーツ アプリケーションのエンド ユーザーの作成し、管理によって提供される標準接続ユーザー インターフェイス (UI) を使用して、Web ブラウザーから直接このような互換性のあるすべてのコントロール間の接続、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、またはによって提供されるカスタム UI を使用して、開発者。  
  
 これは、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>クラスの概要は、接続を作成するための基本的な詳細の [全般] ステートメント。 詳細については、特定のコンポーネントおよび接続の作成に関連する要件は、次を参照してください。 [Web パーツ接続の概要](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b)、参照クラスを参照してください。 または、およびコード例を次の説明に記載されています。 Web パーツ接続のいくつかの基本的な側面があります。  
  
-   2 つ<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 すべての Web パーツ接続では、2 つのコントロールで構成されます。 同時に、1 つ以上の接続に関与するコントロールのことがすべて 1 つの接続は、厳密に 2 つのコントロールで構成されます。 コントロールをから直接派生させることができます、<xref:System.Web.UI.WebControls.WebParts.WebPart>基底クラス、またはこれらには、ASP.NET コントロール、カスタム サーバー コントロール、およびユーザー コントロールを含む、他のサーバー コントロールを指定できます。 コントロールから派生していない、<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスに配置されている場合、<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンをかっこで囲んでは自動的に、<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>オブジェクトから継承することができます、実行時に、<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスと関数の実行時刻として<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。  
  
-   コントロール内に存在する<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーン。 両方<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールとサーバー コントロールの他の任意の型に存在する必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンの Web パーツ接続 (およびその他のほとんどの Web パーツ機能) に参加できるようにします。  
  
-   コンシューマーとプロバイダー。 すべての Web パーツ接続では、2 つのコントロール: データとデータのコンシューマーのプロバイダー。 プロバイダーは、データを返すインターフェイスの形式で指定されたコールバック メソッドをコンシューマーにデータを提供します。 (を作成し、コールバック メソッドを指定する方法の例は、このトピックの例のセクションを参照してください)。このコールバック メソッドは、プロバイダーのコネクション ポイントと呼ばれます。 この接続ポイント (「わかりやすい」名前、ID、および返されたインターフェイスの種類) の詳細に含まれる、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>プロバイダー コントロールに関連付けられているオブジェクト。 コンシューマーは、インターフェイスのインスタンスを受け入れることができる、指定されたメソッドを通じて、データを受信します。 このメソッドは、コンシューマー接続ポイントと呼ばれ、接続ポイント (名前、ID、およびインターフェイスの型) の詳細に含まれる、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>コンシューマー コントロールに関連付けられているオブジェクト。  
  
-   互換性のあるコントロールまたは有効なトランスフォーマー。 接続を機能させるには、コンシューマーとプロバイダーがありますと互換性のある (つまり、同じ種類のインターフェイスで、指定した接続ポイント メソッドが使える)、またはある必要がありますが、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトによって提供される型を変換できる、コンシューマーによって認識される型にプロバイダー。  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクト。 接続が存在する必要がありますのインスタンス、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>接続ポイントの詳細と共に、プロバイダーとコンシューマー コントロールへの参照を含むクラスです。 かどうか、プロバイダーとコンシューマーが互換性のない、代わりに使用、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>接続には、オブジェクト、接続は、トランスフォーマーを参照します。  
  
-   接続を確立することを意味します。 正しく設計ポイントの接続方法および、ゾーンに配置された互換性のあるコンシューマーとプロバイダー コントロールと<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトが使用可能な最後の基本的な手順の必要なの接続を開始します。 これに 1 つの方法は、UI 経由の接続を作成するユーザーです。 配置した場合、`<asp:connectionszone>`接続用のコンポーネントはインプレースで実行時にユーザーを使用して、ページを接続の表示モードに切り替えることができます動詞をクリックして、接続プロバイダーまたはコンシューマーのいずれかの動詞メニューで、ページおよびその他の要素が必要です、および接続 UI (に基づいて、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール) が表示されます。 この UI を通じて、ユーザーは、接続を開始できます。 接続を開始する別の方法では、プログラムによって実行します。 どちらの場合、UI またはプログラムによって、基になるメソッドを介して接続を開始するかどうかは、同じです。 アプリケーションの呼び出し、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッド (または<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッド トランスフォーマーを使用する場合) で、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>を制御する、プロバイダー、コンシューマー、および、それぞれのコネクション ポイント オブジェクトをそれに渡すと、メソッドを返します、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>クラスは、2 つの間の接続の重要な詳細情報をカプセル化するオブジェクトを定義します。<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 クラスは、ほとんどすべての関連する特定の接続の詳細プロパティで構成されます。 いくつかのプロパティでは、接続でコンシューマー コントロールに関するものです。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティは、コンシューマー コントロール自体を参照し、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>プロパティは、コンシューマーの ID を参照 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>コンシューマーのコネクション ポイントの詳細を含むオブジェクトですが、コンシューマーのによって参照される<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>プロパティ。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティ参照の ID、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト。 これらすべての接続のコンシューマーに関連するプロパティは、接続を作成する有効な値をいる必要があります。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>クラスは、接続のプロバイダー コントロールに関連するいくつかのプロパティもあり、これらは、コンシューマーのプロパティに対応しています。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>プロパティは、プロバイダー コントロール自体を参照中に、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティは、その ID を参照 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>プロパティ参照、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、および<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティは、プロバイダーのコネクション ポイントの ID を参照します。  
  
 いくつかのプロパティでは、接続の状態に関するものです。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>プロパティは、接続が (データを交換する現在) アクティブまたは非アクティブな (まだ接続されているが、アクティブに共有ではないデータ) があるかどうかを示します。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>プロパティは、接続が共有するかどうかを示します (ページのすべてのユーザーに使用可能) またはユーザー固有の接続では、および<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティは、かどうか、コントロールが静的 (とため永続的なページのマークアップで宣言) を示しますまたは動的 (プログラムで作成された、意味を削除できます)。  
  
   
  
## Examples  
 次のコード例は、2 つの単純な接続を作成する方法を示します<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 接続の構成の 3 つの方法の例を示します Web ページのマークアップでの接続用のタグを配置することで宣言によって、。はコードで接続を作成してプログラムでは、配置することで UI を使用して、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>  ページで、ユーザーの接続を確立できるようにするコントロール。  
  
 コード例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。 ソース ファイルには、という名前の単純なインターフェイスが含まれています。`IZipCode`します。 <xref:System.Web.UI.WebControls.WebParts.WebPart>という名前のクラス`ZipCodeWebPart`するインターフェイスを実装し、プロバイダー コントロールとして機能します。 その`ProvideIZipCode`メソッドは、インターフェイスの唯一のメンバーを実装するコールバック メソッドです。 メソッドは、単に、インターフェイスのインスタンスを返します。 メソッドが設定されている、`ConnectionProvider`そのメタデータ内の属性。 これは、プロバイダーのコネクション ポイントのコールバック メソッドとしてメソッドを識別するための機構です。 他の<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスの名前が`WeatherWebPart`、および接続のコンシューマーとして機能します。 このクラスは、という名前のメソッドを持つ`GetZipCode`のインスタンスを取得する、`IZipCode`プロバイダー コントロールからのインターフェイス。 コンシューマーのコネクション ポイントのメソッドとしてこのメソッドがマークされていることに注意してください、`ConnectionConsumer`そのメタデータ内の属性。  
  
 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 上部には、 `Register` 、ユーザー コントロールとカスタム ディレクティブ<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 App_Code サブフォルダーに、コントロールのソース コードがありますので、この例では、コントロールの動的なコンパイル、`Register`ページ内のタグは、任意のタグ プリフィックスのみと、コントロールの名前空間を参照します。 カスタム<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール (プロバイダーおよびコンシューマー) は、Web ページの中で宣言された`<asp:webpartzone>`要素では、内部、`<zonetemplate>`要素。  
  
 ページは、カスタム コントロール間の接続を形成する 3 つの方法を提供します。 最初のメソッドは、宣言型です。 ページのマークアップで、<`StaticConnections>`要素が宣言し、内では、`<asp:WebPartConnections>`要素、属性として指定された接続のさまざまなコンシューマーとプロバイダーの詳細。 これは、具体的には内で、Web ページ内で直接宣言することにより、接続を作成する方法の 1 つ、`<asp:WebPartManager>`要素。 この静的な接続により、2 つのカスタム コントロール間の接続は、ページが読み込まれる最初にすぐに作成されます。  
  
 コントロール間の接続を構成するための 2 番目のメソッドがによって提供される、`<asp:connectionszone>`ページ内の要素。 ユーザーが実行時に、接続の表示モードを切り替えます、カスタムのコントロールの 1 つの connect 動詞をクリックすると、`<asp:connectionszone>`要素が自動的に接続を作成するための UI を表示します。  
  
 ページには、プログラムで行うが、接続の作成の 3 番目の方法も示します。 `Button1_Click`メソッド、コードを作成、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>プロバイダー コントロールとの接続ポイントの詳細を呼び出すことによって取得オブジェクト、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッド。 コンシューマー コントロールの場合と同様のタスク実行を呼び出す、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>メソッド。 最後に、作成、新しい<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトを呼び出すことによって、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロール。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 内で宣言されているため、既に、最初の接続が存在する、ブラウザーで Web ページの読み込み後、`<StaticConnections>`要素。 任意のテキストを入力してください、**郵便番号/ZIP Code プロバイダー**コントロールがコンシューマー コントロールに表示されます。 次に、2 つのコントロールを切断します。 使用して、**表示モード**ドロップダウン リスト コントロール、ページを表示モードの接続を変更します。 それぞれに対して (タイトル バーの下向きの矢印で表される) の動詞メニューをクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびそれぞれには、 **Connect**オプション。 動詞メニューに表示される、接続の動詞は、このページが接続モードが場合にのみです。 コントロール、および接続が提供する UI のいずれかの接続の動詞をクリックして、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロールが表示されます。 をクリックして、**切断**コントロール間の静的な接続を終了するボタンをクリックします。 使用して、**表示モード**コントロールをページをブラウズ モードを返します。 ここでも、プロバイダーに新しいテキストを入力し、コントロールが切断されているため、コンシューマー コントロールを更新する、テキストが失敗に注意してください。 お試しください。  
  
 次に、上記と同じメソッドを使用して、もう一度 connect 表示モードに切り替えます。 コントロールの 1 つの connect 動詞をクリックします。 をクリックして、**接続を作成**リンク、およびが提供する UI を使用して、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール間の接続を作成するコントロール。 これは、接続を作成する 2 番目のメソッドです。 接続が形成されるとすぐに、最後の文字列で入力した (つまり、コントロールの接続が切断されたために、表示に失敗しました)、プロバイダー コントロールに注意してください。 接続が再作成されているために、コンシューマーに突然表示されます。 をクリックして、**切断** ボタンを作成した現在の接続を終了します。 ページをブラウズ モードを返します。 テキストが更新されないことと、コントロールがもう一度切断されていることを示す、プロバイダーには、新しいテキストを入力します。  
  
 ページを表示モードの接続を返します。 接続の動詞をクリックする代わりにをクリックして、 **web パーツ コントロールの接続**ボタンで、接続の構成の 3 番目の方法を示しています。 このアプローチでは、1 つの簡単な手順で、プログラムでコントロールを接続を使用しなくても、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール。 接続が作成されるとコンシューマー コントロールに突然プロバイダーで入力した最後の文字列が表示に注意してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Web パーツ接続の概要</related>
    <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> ASP.NET パーサーは、接続が Web ページのマークアップで宣言されているときにインスタンスを作成できるようにするパブリック コンス トラクターです。 このコンス トラクターを開発者のコードで使用する必要はありません。  
  
 作成する場合、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>する必要がありますを使用するプログラムでは、オブジェクト、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType>または<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType>メソッドで提供される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロール。 これらのメソッドは、接続の作成のさまざまな詳細を処理し、返す、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A>のコンス トラクター、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>クラスの値を設定する、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>と<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティ`true`します。 したがって、新しい接続の既定の状態は (つまり、格納されている Web ページのマークアップで宣言されていること) を静的になりし、共有 (ページのすべてのユーザーに表示される)。 ある場合、このページのマークアップで接続を宣言することで、一般的なシナリオでは、接続を追加するときに、`<asp:webpartconnection>`要素。 ただし、他の状況での接続は、これらのプロパティに別の値があります。 たとえば、コードでは、接続オブジェクトを作成して接続をプログラムで追加すると、ユーザーは、ページを表示する既定のユーザーのパーソナル化スコープでは、接続が、動的にあたり、user(visible only to the specific user) として作成されます。接続します。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>と<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティは読み取り専用との接続の種類を決定するこれらのプロパティの設定によって内部的に、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>接続の作成方法によってコントロール (ページのマークアップで宣言またはプログラムで、コードやユーザー インターフェイスを使用)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続でコンシューマー コントロールとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> オブジェクトを取得します。</summary>
        <value>接続でコンシューマーとして動作する Web パーツ コントロールを表す <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての Web パーツ接続では、データを共有する 2 つのコントロールで構成されます。 1 つのコントロールが、データのプロバイダーとして機能し、その他のコントロールを受け取って、プロバイダーからデータを処理するコンシューマーとして動作します。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティへの参照を取得する、 <xref:System.Web.UI.WebControls.WebParts.WebPart> connection リレーションシップでコンシューマーとして動作を制御します。  
  
   
  
## Examples  
 次のコード例は、のプログラムによる使用を示します、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティ。  
  
 コード例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分は、2 つのソース コード<xref:System.Web.UI.WebControls.WebParts.WebPart>との接続、および接続ポイントを使用するインターフェイスのプロバイダーのコンシューマーとして機能するコントロール。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、の使用方法、コントロールをホストする Web ページのコード、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティ。 ページの上部には、`Register`ユーザー コントロールとカスタム コントロール用のディレクティブ。 この例は、動的なコンパイルを使用するため、`Register`ソース ファイルのディレクティブは、アセンブリ名を参照する必要はありません。 これは、任意のタグ プリフィックスのみと、コントロールの名前空間が含まれます。 `Button2_Click`メソッド、コードを使用して接続オブジェクトにアクセスする、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>を制御して、コンシューマー コントロールへの参照を取得します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 使用して、ブラウザーでページを読み込んだ後、**表示モード**ドロップダウン リスト コントロールを接続モードのページに切り替えます。 いずれかの動詞メニュー (タイトル バーの下向きの矢印で表される) をクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、および connect 動詞をクリックします。 使用して、 **web パーツ コントロールの接続**ボタン、または指定された接続ユーザー インターフェイス (UI) は、2 つのコントロール間の接続を作成します。 をクリックして、**コンシューマーの情報を表示**を示すコードを実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> プロパティの長さが 0 です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続でコンシューマーとして動作するコントロールに対するコネクション ポイントとしての役割を果たすオブジェクトを取得します。</summary>
        <value>接続のコンシューマー コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つの間の接続を作成するための必要な手順のいずれかの<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールは、各コントロールの接続ポイントを作成します。 コンシューマー接続ポイントは、コンシューマーとして機能するコントロールに接続する方法に関する情報を含むオブジェクトです。 いずれかのコンシューマーのソース コード内で識別する必要があります、`ConnectionConsumer`属性。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>コンシューマー コントロールに関連付けられているオブジェクトには、メソッドとユーザー インターフェイス (UI) で使用する表示名、メソッドの ID を含む、属性の詳細が含まれ、メソッド、インターフェイスの種類を取得できます。 この一連のコンシューマーに関する情報、接続、および認識するインターフェイスの型を形成するためのメソッドは、まとめてコンシューマー接続ポイントを形成します。  
  
 既定で、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトは、1 つだけに接続できる<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>一度にオブジェクト。 コンシューマーは、使用可能なコンシューマー接続ポイントとして識別される複数のメソッドがある可能性がありますが、(そのため、そのコンシューマー接続ポイントの 1 つは、アクティブにすることができます) のみ、コンシューマーはコンシューマーとしての 1 つの接続に関与のみできる、時にします。 これに対し、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>の任意の数に接続できる<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト。 この既定の動作をオーバーライドすることで変更することができます、<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>プロパティを<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>属性。  
  
   
  
## Examples  
 次のコード例は、のプログラムによる使用を示します、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>プロパティ。  
  
 この例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分は、2 つのソース コード<xref:System.Web.UI.WebControls.WebParts.WebPart>との接続、および接続ポイントを使用するインターフェイスのプロバイダーのコンシューマーとして機能するコントロール。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、の使用方法、コントロールをホストする Web ページのコード、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>プロパティ。 `Button1_Click`接続の形成に必要なすべてのオブジェクトで作成されますメソッドなどを<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト。 これらのオブジェクトがすべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>接続を作成するメソッド。 `Button2_Click`メソッド、コードにアクセスする、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>接続の詳細の一部がポイント プロパティを表示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 使用して、ブラウザーでページを読み込んだ後、**表示モード**ドロップダウン リスト コントロールを接続モードのページに切り替えます。 いずれかの動詞メニュー (タイトル バーの下向きの矢印で表される) をクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、および connect 動詞をクリックします。 使用して、 **web パーツ コントロールの接続**ボタン、または指定された接続 UI を 2 つのコントロール間の接続を作成します。 をクリックして、 **ConnectionPoint 詳細**を示すコードを実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続のコンシューマー接続ポイントとしての役割を果たすオブジェクトの ID を参照する接続のプロパティ値を取得または設定します。</summary>
        <value>コンシューマー接続ポイントの ID を格納する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値を割り当てることで、接続のどのコンシューマー接続ポイントが使用される Web ページのマークアップで宣言された静的な接続の開発者が指定できます、`ConsumerConnectionPointID`属性を`<asp:webpartconnection>`要素。 値は、属性に割り当てられていない場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>プロパティの値を使用します。  
  
 動的 (プログラムによる) 接続を作成するときに通常必要がありますいない値を設定するの<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティ。 単に呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールをコンシューマーとコンシューマー接続ポイント (その他の必要なパラメーターと共に)、オブジェクトをそれに渡すと、そのメソッドは、コンシューマーの接続に使用する正しい ID を決定します。ポイント。 同様に、切断すると、呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>メソッドを指定せず、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティの値。  
  
> [!NOTE]
>  指定するときに、コンシューマーのコネクション ポイントの ID を決定できます、<xref:System.Web.UI.WebControls.WebParts.WebPart>またはコンシューマーとしての他のサーバー コントロール。 プロバイダー コントロールまたはトランスフォーマーのいずれかによって提供されたインターフェイスのインスタンスを取得する、コンシューマーでメソッドを指定する必要があります。 メソッドを識別するためにマークして、`ConnectionConsumer`コード属性。 この属性を追加する場合は、コンシューマーの ID として機能する省略可能な文字列値パラメーターを追加することができます<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト。 省略可能な ID パラメーターの値を指定すると、その値がの値、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>接続のプロパティ。 ID 値を指定しない場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>プロパティの値を使用します。  
  
   
  
## Examples  
 次のコード例の宣言とプログラムの使用を示しています、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティ。  
  
 この例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、`<StaticConnections>`と`<asp:WebPartsConnection>`要素。 接続の宣言が含まれていますが、必要な`ConsumerConnectionPointID`属性。 接続を作成するための 2 番目のメソッドが表示されます、`Button1_Click`メソッド、コードが、コンシューマー コントロールで定義されている接続ポイントを使用して、新しい接続を作成します。 次に、`Button2_Click`メソッド、コードにアクセスする、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティ。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続により接続が既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のためのコンシューマーに表示されることに注意してください。 次に、コントロールを切断します。 使用して、**表示モード**ドロップダウン リスト コントロール、ページ接続モードを切り替えます。 いずれかの動詞メニュー (タイトル バーの下向きの矢印で表される) をクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、および connect 動詞をクリックします。 をクリックして、**切断**ボタンをクリックします。 使用して、 **web パーツ コントロールの接続**を 2 つのコントロール間の接続を再作成するボタンをクリックします。 をクリックして、 **ConnectionPoint 詳細**にアクセスするコードを実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティの値。 値は、コントロールの下のラベルでアウトを記述されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続のコンシューマーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールの ID を参照する接続のプロパティ値を取得または設定します。</summary>
        <value>接続のコンシューマーとして動作するコントロールの ID を格納する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>間の接続を作成するときに、プロパティの値が必要な<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 例外がときにスローされるプロパティに値が割り当てられていない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールは、接続をアクティブ化を試みます。  
  
   
  
## Examples  
 次のコード例の宣言とプログラムの使用を示しています、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>プロパティ。  
  
 この例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、`<StaticConnections>`と`<asp:WebPartsConnection>`要素。 接続の宣言が含まれていますが、必要な`ConsumerID`属性。 接続を作成するための 2 番目のメソッドが表示されます、`Button1_Click`メソッド、コードが、コンシューマー コントロールで定義されている接続ポイントを使用して、新しい接続を作成します。 次に、`Button2_Click`メソッド、コードの値にアクセスする、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>プロパティし、ラベルに表示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続により接続が既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のためのコンシューマーに表示されることに注意してください。 次に、コントロールを切断します。 使用して、**表示モード**ドロップダウン リスト コントロール、ページ接続モードを切り替えます。 いずれかの動詞メニュー (タイトル バーの下向きの矢印で表される) をクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、および connect 動詞をクリックします。 をクリックして、**切断**ボタンをクリックします。 使用して、 **web パーツ コントロールの接続**を 2 つのコントロール間の接続を再作成するボタンをクリックします。 をクリックして、**コンシューマー詳細**にアクセスするコードを実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>プロパティの値。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトの ID を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> の ID を格納する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべて<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトに割り当てられている一意の値を持つその<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>プロパティ。 これは、複数の接続を区別する方法があることを確認します。  
  
 宣言することで静的な接続を作成する場合、 `<asp:webpartconnection>` Web ページにある要素の値を割り当てないでください、`ID`属性、接続では、例外がスローされます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールは、接続をアクティブ化を試みます。  
  
 ときに、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールは、新しい動的な接続を作成、呼び出し、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>接続の一意の ID を生成します。  
  
   
  
## Examples  
 次のコード例の宣言とプログラムの使用を示しています、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>プロパティ。  
  
 この例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、`<StaticConnections>`と`<asp:WebPartsConnection>`要素。 接続の宣言が含まれていますが、必要な`ID`属性。 接続を作成するための 2 番目のメソッドが表示されます、`Button1_Click`メソッド、コードが、コンシューマー コントロールで定義されている接続ポイントを使用して、新しい接続を作成します。 ここでは、ID プロパティは必要ありません、接続が動的であるため、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールへの接続 ID が割り当てられます。 `Button2_Click`メソッドの値にアクセスするコード、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>プロパティし、ラベルに表示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続により接続が既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のためのコンシューマーに表示されることに注意してください。 次に、コントロールを切断します。 使用して、**表示モード**ドロップダウン リスト コントロール、ページ接続モードを切り替えます。 いずれかの動詞メニュー (タイトル バーの下向きの矢印で表される) をクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、および connect 動詞をクリックします。 をクリックして、**切断**ボタンをクリックします。 使用して、 **web パーツ コントロールの接続**を 2 つのコントロール間の接続を再作成するボタンをクリックします。 をクリックして、**接続の詳細**にアクセスするコードを実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A>プロパティの値。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトが確立されていて、そのプロバイダー コントロールとコンシューマー コントロールの間でデータを交換できるかどうかを示す値を取得します。</summary>
        <value>接続がアクティブな場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>プロパティの状態を示す、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。 通信を行うと、共通のインターフェイスを介してデータを交換すること、接続のプロバイダーとコンシューマーのコントロールは、接続がこの状態になった場合、または<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト。  
  
 ユーザーは、通常のブラウズ モードで確立された接続を含むレンダリングされたページを表示、(ページが読み込まれるときにいくつかの競合またはその他の問題によりアクティブ化に失敗した) 場合を除き、接続には通常アクティブ。 プロパティの値には、ページおよびコントロールのライフ サイクルの初期の段階で`false`します。 直後に、接続がアクティブ化、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>上のイベント、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールが発生します。 コンシューマーがプロバイダーから、指定したインターフェイスのインスタンスを取得した後に具体的には、接続がアクティブ化または<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト。  
  
 接続が状況でアクティブかどうかを把握するのに役立ちますが、競合やページ上の複数の接続による同期の問題がある可能性があります。 たとえば、ある種の 2 つの接続間の競合がある場合、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロール、競合を回避するためにアクティブにしない接続のいずれかのオプションがあります。  
  
   
  
## Examples  
 次のコード例に示しますを使用、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>プロパティ。  
  
 この例では、3 つの部分があります。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 コード例の最初の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 2 番目の部分は、Web ページです。 上部にあるが、`Register`動的にコンパイルされた 2 つのソース コードを参照するディレクティブ<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 静的な接続が内で宣言された、`<StaticConnections>`ページ上の要素。 内で、`<script>`要素は 4 つのイベント ハンドラー。 各イベント ハンドラーの値をチェックする、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> 、静的な接続のプロパティにメッセージが書き込まれます、<xref:System.Web.UI.WebControls.Label>ページおよびコントロールのライフ サイクルの状態では、アクティブまたは非アクティブに接続するかどうかを示すコントロール。 レンダリングされますが残っているアクティブなページの後およびこれは、どの時点で、接続がアクティブになりを示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 ブラウザーでページを読み込みます。 静的な接続が既に作成されて、およびメッセージが、接続がページとコントロールのライフ サイクルのさまざまな時点でアクティブだったかどうかを示すラベルに既に書き込まれています。 をクリックして、**接続の詳細**ボタンをクリックし、接続がないアクティブである時点で、接続が後に毎回の再アクティブ化したことに注意してください、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>イベント、および、アクティブなままです (およびされ続ける) した後、<xref:System.Web.UI.Control.PreRender>ページのイベント。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトをすべてのユーザーに表示するかまたは現在のユーザーのみに表示するかを示す値を取得または設定します。</summary>
        <value>接続が共有される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 個人と同様<xref:System.Web.UI.WebControls.WebParts.WebPart>、コントロール、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトは、共有、またはユーザーごとのインスタンスを指定できます。 共有インスタンスは、接続が Web ページのすべてのユーザーに表示され、ユーザーごとのインスタンスでは、接続が特定のユーザーにのみ表示されることを意味ことを意味します。  
  
 一般に、接続は、ページに追加する方法は、接続を共有するかどうかを判断します。 接続が Web ページのマークアップで宣言されているかどうかは、接続の共有と<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>プロパティの値が`true`します。 さらに、Web ページが共有パーソナル化スコープの場合、接続が追加されたときに、接続も共有されます。 ユーザーが使用する場合、通常、`<asp:connectionszone>`接続が共有されていないため、ページの接続を追加するユーザー インターフェイス (UI) がユーザーのパーソナル化スコープでは、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>プロパティの値が`false`します。  
  
   
  
## Examples  
 次のコード例に示しますをプログラムで使用、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>プロパティ。  
  
 コード例では、5 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   例を実行するために必要な Web.config ファイル内のエントリ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 `Button2_Click`チェック、メソッド、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>既存の接続のプロパティ ページで結果を表示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 4 番目の部分のコード例では、共有パーソナル化スコープでページを編集できる例を実行するユーザー アカウントに必要な Web.config ファイル内のエントリです。 これを有効にするのには、内の Web.config ファイルにエントリをいる必要があります、`<system.web>`セクションを次の例のようになります。  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 使用して、ブラウザーでページを読み込んだ後、**表示モード**ドロップダウン リスト コントロールの表示モードを接続するページに切り替えます。 をクリックして、 **web パーツ コントロールの接続**接続ボタンをクリックします。 次に、クリックして、**接続の詳細**接続を共有するかどうかを表示するボタンをクリックします。 既定のユーザーのパーソナル化スコープ内のページで、接続を作成した場合、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>プロパティ値を指定する必要があります`false`接続します。  
  
 いずれかの動詞メニューで、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール (タイトル バーの下向きの矢印で示されます)、接続の動詞をクリックします。 接続 UI が表示されたら、クリックして、**切断**ボタン接続を終了します。 使用して、**表示モード**コントロールをページをブラウズ モードを返します。  
  
 **表示モード**コントロールの選択、 **Shared**にページを切り替えることは、パーソナル化スコープを共有します。 接続を作成し、もう一度クリックして、上記と同じ手順に従って、**接続の詳細**接続を共有するかどうかを表示するボタンをクリックします。 この例では、値で、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>プロパティは、指定`true`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトが Web ページのマークアップに宣言されているか、またはプログラムで作成されるかを示す値を取得します。</summary>
        <value>接続が静的な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web パーツ コントロール間の接続には、静的または動的のいずれかを指定します。 静的な接続が Web ページのマークアップで宣言されているを使用して、`<asp:WebPartConnection>`要素。 動的な接続がプログラムで作成またはユーザーがによって定義されたユーザー インターフェイス (UI) からの接続を作成するときに、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール。  
  
 静的な接続は、共有オブジェクトであるため、Web ページのすべてのユーザーに利用します。 また、これらは基本的に永続的なのでなどの静的な<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、完全に削除することはできません。  
  
> [!NOTE]
>  静的な接続オブジェクトは完全に削除中に、完全に切断できます。 この場合、サーバーで、切断されたオブジェクトが存在も、エンドユーザーはことはありませんのページで、オブジェクトの存在に注意してくださかった。  
  
   
  
## Examples  
 次のコード例は、のプログラムによる使用を示します、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティ。  
  
 コード例では、3 つの部分があります。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   コントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 コード例の最初の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 2 番目の部分は、Web ページです。 上部にあるが、`Register`動的にコンパイルされた 2 つのソース コードを参照するディレクティブ<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 静的な接続が内で宣言された、`<StaticConnections>`ページ上の要素。 `Button1_Click`メソッドへのアクセス、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>接続が静的かどうかを確認するプロパティ。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 ブラウザーでページを読み込みます。 静的な接続が既に作成されています。 プロバイダー コントロールにテキストを入力して、コンシューマー コントロールのテキストが表示されることに注意してください。 をクリックして、**接続の詳細**の値を表示するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web パーツ接続でプロバイダーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールを取得します。</summary>
        <value>データのプロバイダーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つのすべての Web パーツ接続で構成されます<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール - コンシューマーおよびプロバイダー--と<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>プロパティは、接続でプロバイダー コントロールへの参照を返します。  
  
 接続 (コンシューマー コントロール) での対応するように、プロバイダー コントロールが接続を確立するために必要です。 プログラム、またはページの永続形式で宣言することによって、接続を作成するかどうかは、接続のプロバイダーとして機能するコントロールを指定する必要があります。  
  
   
  
## Examples  
 次のコード例に示しますを使用、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>プロパティ。  
  
 コード例では、3 つの部分があります。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   コントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 コード例の最初の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 2 番目の部分は、Web ページです。 上部にあるが、`Register`動的にコンパイルされた 2 つのソース コードを参照するディレクティブ<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 静的な接続が内で宣言された、`<StaticConnections>`ページ上の要素。 インシデントを`<asp:webpartconnection>`要素、`ProviderID`属性が割り当てられて、プロバイダー コントロールの ID。 これは、静的な接続のプロバイダーを識別するために必要です。 `Button1_Click`メソッドへのアクセス、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>プロパティとその詳細の一部にラベルを書き込みます。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 ブラウザーでページを読み込みます。 静的な接続が既に作成されています。 プロバイダー コントロールにテキストを入力して、コンシューマー コントロールのテキストが表示されることに注意してください。 をクリックして、 **Provider Details**経由でアクセスするプロパティ値の一部を表示するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> プロパティ値の長さが 0 です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続でプロバイダーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールに対するコネクション ポイントとしての役割を果たすオブジェクトを取得します。</summary>
        <value>接続のプロバイダー コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つの間の接続を作成するための必要な手順のいずれかの<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールは、各コントロールの接続ポイントを作成します。 プロバイダー コネクション ポイントは、プロバイダーとして機能するコントロールに接続する方法に関する情報を含むオブジェクトです。 いずれかのプロバイダーのソース コード内で識別する必要があります、`ConnectionProvider`属性。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>が関連付けられているコントロールにはプロバイダーにはメソッドとユーザー インターフェイス (UI) で使用する表示名、メソッドの ID を含む、属性の詳細が含まれています、コンシューマーを戻すことができるメソッド、インターフェイス インスタンスの種類コントロール。 このプロバイダーについては、接続、およびが提供するインターフェイスの型を形成するためのメソッドのセットは、まとめてプロバイダー コネクション ポイントを形成します。  
  
 既定で、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 1 つだけに接続できる<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>一度にオブジェクト。 コンシューマーは、使用可能なコンシューマー接続ポイントとして識別される複数のメソッドがある可能性がありますが、(そのため、そのコンシューマー接続ポイントの 1 つは、アクティブにすることができます) のみ、コンシューマーはコンシューマーとしての 1 つの接続に関与のみできる、時にします。 これに対し、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>の任意の数に接続できる<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>既定のオブジェクト。 たとえば、郵便番号コードを提供するプロバイダー コントロールの場合は、郵便番号コードを使用して、気象データ、ニュースなどの郵便番号コードに基づいてデータのさまざまな種類を作成する複数のコンシューマー コントロールに接続されている。 この既定の動作をオーバーライドすることで変更することができます、<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>プロパティを<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性。  
  
   
  
## Examples  
 次のコード例は、のプログラムによる使用を示します、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>プロパティ。  
  
 この例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分は、2 つのソース コード<xref:System.Web.UI.WebControls.WebParts.WebPart>との接続、および接続ポイントを使用するインターフェイスのプロバイダーのコンシューマーとして機能するコントロール。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、の使用方法、コントロールをホストする Web ページのコード、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>プロパティ。 `Button1_Click`接続の形成に必要なすべてのオブジェクトで作成されますメソッドなどを<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。 呼び出しに注意してください、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロール。 さまざまな作成されたオブジェクトがすべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>接続を作成するメソッド。 `Button2_Click`メソッド、コードにアクセスする、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>接続の詳細の一部がポイント プロパティを表示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 使用して、ブラウザーでページを読み込んだ後、**表示モード**ドロップダウン リスト コントロールを接続モードのページに切り替えます。 いずれかの動詞メニュー (タイトル バーの下向きの矢印で表される) をクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、および connect 動詞をクリックします。 使用して、 **web パーツ コントロールの接続**ボタン、または指定された接続 UI を 2 つのコントロール間の接続を作成します。 をクリックして、 **ConnectionPoint 詳細**を示すコードを実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続のプロバイダー コネクション ポイントとしての役割を果たすオブジェクトの ID を参照する接続のプロパティ値を取得または設定します。</summary>
        <value>プロバイダー コネクション ポイント オブジェクトの ID が含まれている文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値を割り当てることで、接続のどのプロバイダー コネクション ポイントが使用される Web ページのマークアップで宣言された静的な接続の開発者が指定できます、`ProviderConnectionPointID`属性を`<asp:webpartconnection>`要素。 値は、属性に割り当てられていない場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>プロパティの値を使用します。  
  
 動的 (プログラムによる) 接続を作成するときに通常必要がありますいない値を設定するの<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティ。 単に呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>、制御をそれに渡す、プロバイダーとプロバイダー接続ポイント (その他の必要なパラメーターと共に)、オブジェクトとそのメソッドでは、プロバイダーの接続に使用する正しい ID を決定します。ポイント。 同様に、切断すると、呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>メソッドを指定せず、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティの値。  
  
> [!NOTE]
>  指定するときに、プロバイダーのコネクション ポイントの ID を決定できます、<xref:System.Web.UI.WebControls.WebParts.WebPart>またはプロバイダーとしての他のサーバー コントロール。 コンシューマーにデータを格納しているインターフェイスのインスタンスを提供するプロバイダーのコールバック メソッドを指定する必要があります。 メソッドを識別するためにマークして、`ConnectionProvider`コード属性。 この属性を追加する場合は、プロバイダーの ID として機能する省略可能な文字列値パラメーターを追加することができます<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト。 省略可能な ID パラメーターの値を指定すると、その値がの値、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>接続のプロパティ。 ID 値を指定しない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>オブジェクトが作成されたときに、コントロールが既定の ID を割り当てます。  
  
   
  
## Examples  
 次のコード例の宣言とプログラムの使用を示しています、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティ。  
  
 この例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、`<StaticConnections>`と`<asp:WebPartsConnection>`要素。 接続の宣言が含まれていますが、必要な`ProviderConnectionPointID`属性。 接続を作成するための 2 番目のメソッドが表示されます、`Button1_Click`メソッド、コードは、新しい接続を作成しますが、接続ポイント (と ID) を使用してで定義されている、プロバイダー コントロール。 次に、`Button2_Click`メソッド、コードにアクセスする、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティ。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続により接続が既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のためのコンシューマーに表示されることに注意してください。 次に、コントロールを切断します。 使用して、**表示モード**ドロップダウン リスト コントロール、ページ接続モードを切り替えます。 いずれかの動詞メニュー (タイトル バーの下向きの矢印で表される) をクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、および connect 動詞をクリックします。 をクリックして、**切断**ボタンをクリックします。 使用して、 **web パーツ コントロールの接続**を 2 つのコントロール間の接続を再作成するボタンをクリックします。 をクリックして、 **ConnectionPoint 詳細**にアクセスするコードを実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティの値。 値は、コントロールの下のラベルでアウトを記述されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続のプロバイダーとして動作する <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールの ID を参照する接続のプロパティ値を取得または設定します。</summary>
        <value>プロバイダー コントロールの ID を格納する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティの値は、2 つの間の接続を作成するときに必要な<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 例外がときにスローされるプロパティに値が割り当てられていない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールは、接続をアクティブ化を試みます。  
  
   
  
## Examples  
 次のコード例の宣言とプログラムの使用を示しています、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティ。  
  
 この例では、4 つの部分があります。  
  
-   ページのモードを表示するユーザー コントロール Web パーツを変更することができます。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けることを .ascx ファイルでは、次のソース コードを保存、`Src`の属性、`Register`これはこのユーザー コントロールのディレクティブをホストする Web ページの上部にあります。 詳細については、このコントロールのモードと、ソース コードの説明を表示するを参照してください。[チュートリアル: Web パーツ ページ上の表示モードの変更](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、`<StaticConnections>`と`<asp:WebPartsConnection>`要素。 接続の宣言が含まれていますが、必要な`ProviderID`属性。 接続を作成するための 2 番目のメソッドが表示されます、`Button1_Click`メソッド、コードが、コンシューマー コントロールで定義されている接続ポイントを使用して、新しい接続を作成します。 次に、`Button2_Click`メソッド、コードの値にアクセスする、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティし、ラベルに表示します。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続により接続が既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のためのコンシューマーに表示されることに注意してください。 次に、コントロールを切断します。 そのために使用して、**表示モード**ドロップダウン リスト コントロールを接続モードのページに切り替えます。 いずれかの動詞メニュー (タイトル バーの下向きの矢印で表される) をクリックして、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、および connect 動詞をクリックします。 をクリックして、**切断**ボタン、およびコントロールを切断します。 次に、使用、 **web パーツ コントロールの接続**を 2 つのコントロール間の接続を再作成するボタンをクリックします。 をクリックして、**コンシューマー詳細**にアクセスするコードを実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティの値。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>継承した <see cref="M:System.Object.ToString" /> メソッドをオーバーライドし、接続オブジェクトの short 型の名前を返します。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> の short (非修飾) 型の名前を格納する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ほとんどの場合、便宜上コントロール デザイナーによって使用されます。 完全修飾型名ではなく、短い型名を使用して接続オブジェクトをデザイン ビューに表示する方法が向上します。 ただし、メソッド呼び出すことができます、コード内の任意のポイントを接続オブジェクトの型名を知りたいです。  
  
   
  
## Examples  
 次のコード例を呼び出す方法を示します、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>の短い型名を返すメソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト。  
  
 コード例では、3 つの部分があります。  
  
-   ソース インターフェイスと 2 つのコード<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   コントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 コード例の最初の部分では、インターフェイス、およびコンシューマーとプロバイダー コントロールのソース コードを示します。 実行するコード例は、このソース コードをコンパイルする必要があります。 明示的にコンパイルでき、結果として得られるアセンブリを Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに格納できます。 または、場所に動的にコンパイルされる実行時に、サイトの App_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルでは、次を参照してください。[チュートリアル: カスタム Web サーバー コントロールの開発と](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 2 番目の部分は、Web ページです。 上部にあるが、`Register`動的にコンパイルされた 2 つのソース コードを参照するディレクティブ<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。 静的な接続が内で宣言された、`<StaticConnections>`ページ上の要素。 `Button1_Click`メソッドの呼び出し、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>ラベルに、接続の種類名を書き込みます。  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 ブラウザーでページを読み込みます。 静的な接続が既に作成されています。 プロバイダー コントロールにテキストを入力して、コンシューマー コントロールのテキストが表示されることに注意してください。 をクリックして、**接続の詳細**を実行するボタン、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web パーツ接続の 2 つの異なった互換性のないコネクション ポイントの間でデータを変換するために使用する <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> オブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web パーツの接続は、接続のプロバイダーとコンシューマーのコントロールの接続に使用できる 2 つの方法があります。 を通じて、それぞれを直接接続できる<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトとが両方のコントロールによって認識されるインターフェイス型。 または、互換性がない場合、直接接続できるされませんを使用して、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>プロバイダーからインターフェイス インスタンスをコンシューマーによって認識される型に変換するオブジェクト。  
  
 トランスフォーマーが、接続の一部として必要な場合、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>プロパティへの参照を提供する、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト。 カスタムのトランスフォーマー (または、Web パーツ コントロール セットで提供されるトランスフォーマーのいずれか) のタグを追加することで、Web ページのマークアップで宣言によって接続のトランスフォーマーを追加するには内で、`<asp:WebPartConnection>`要素。 追加することもトランスフォーマーをプログラムでは、コードで、そのインスタンスを作成して、呼び出し、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>メソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>トランスフォーマー オブジェクトと共に、他の必要なパラメーターを渡す、接続を作成するコントロール。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web パーツ コントロール セットで内部的に使用する <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> オブジェクトのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> オブジェクトを含んでいる <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>プロパティが、開発者による使用は想定されてことはありません。 接続に関連付けられているトランスフォーマーをアクセスする開発者に使用する必要があります常に、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>プロパティ。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A>プロパティは、ページ開発者は、宣言内でトランスフォーマー要素を有効にして Web パーツ コントロールで内部的に使用されます、 `<asp:webpartconnection>` Web ページのマークアップ要素。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="http://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web パーツ ページ</related>
      </Docs>
    </Member>
  </Members>
</Type>