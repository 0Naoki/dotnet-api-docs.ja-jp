<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3d37dc80dcd76aa1f45850002a179ce589e3a2d" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70331331" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="177a1-101">ワークフローをメソッド呼び出しであるかのように呼び出す手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="177a1-101">Provides a means for invoking a workflow as if it were a method call.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-102"><xref:System.Activities.WorkflowInvoker> には、複数のワークフローを同期的に呼び出すためのインスタンス メソッドと静的メソッドの両方、および複数のワークフローを非同期的に呼び出すためのインスタンス メソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="177a1-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="177a1-103"><xref:System.Activities.WorkflowInvoker> では、インスタンス コントロール (ブックマークの保持、アンロード、再開など) は許可されません。</span><span class="sxs-lookup"><span data-stu-id="177a1-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="177a1-104">インスタンス コントロールが必要な場合には、代わりに <xref:System.Activities.WorkflowApplication> を使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="177a1-105">インスタンス コントロールなしで複数のワークフローを同期的に実行するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="177a1-106">インスタンス コントロールなしで複数のワークフローを非同期的に実行するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> メソッドと <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドのペア、または <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-107">次の例は、1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成される <xref:System.Activities.WorkflowInvoker> を使用してワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="177a1-108"><see cref="T:System.Activities.WorkflowInvoker" /> クラスのこのインスタンスによって呼び出されるワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></param>
        <summary><span data-ttu-id="177a1-109"><see cref="T:System.Activities.WorkflowInvoker" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="177a1-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-110"><xref:System.Activities.WorkflowInvoker> には、複数のワークフローを同期的に呼び出すためのインスタンス メソッドと静的メソッドの両方、および複数のワークフローを非同期的に呼び出すためのインスタンス メソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="177a1-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-111">次の例は、1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="177a1-112"><see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-113">詳細については、「[非同期プログラミングの概要](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="177a1-114">ワークフローが完了した時点で呼び出されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="177a1-114">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="177a1-115">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="177a1-115">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="177a1-116">指定された <see cref="T:System.AsyncCallback" /> およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="177a1-117">非同期呼び出し操作への参照。</span><span class="sxs-lookup"><span data-stu-id="177a1-117">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-118">ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="177a1-119"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="177a1-120">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="177a1-121">このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="177a1-122">詳細については、「[非同期プログラミングの概要](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-123">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-124">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-125">これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="177a1-126"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="177a1-127">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-127">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="callback"><span data-ttu-id="177a1-128">ワークフローが完了した時点で呼び出されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="177a1-128">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="177a1-129">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="177a1-129">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="177a1-130">入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="177a1-131">非同期呼び出し操作への参照。</span><span class="sxs-lookup"><span data-stu-id="177a1-131">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-132">ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="177a1-133"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="177a1-134">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="177a1-135">このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="177a1-136">詳細については、「[非同期プログラミングの概要](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-137">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-138">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-139">これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="177a1-140"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="177a1-141">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="177a1-142">ワークフローが完了した時点で呼び出されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="177a1-142">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="177a1-143">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="177a1-143">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="177a1-144">指定されたタイムアウト時間、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="177a1-145">非同期呼び出し操作への参照。</span><span class="sxs-lookup"><span data-stu-id="177a1-145">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-146">ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="177a1-147"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="177a1-148">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されます。そして、<xref:System.TimeoutException> メソッドが呼び出されると、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-149"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-150">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="177a1-151">このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="177a1-152">詳細については、「[非同期プログラミングの概要](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-153">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-154">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-155">これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="177a1-156"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="177a1-157">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-157">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="177a1-158">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="177a1-159">ワークフローが完了した時点で呼び出されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="177a1-159">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="177a1-160">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="177a1-160">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="177a1-161">入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、タイムアウト時間、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="177a1-162">非同期呼び出し操作への参照。</span><span class="sxs-lookup"><span data-stu-id="177a1-162">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-163">ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="177a1-164"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="177a1-165">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されます。そして、<xref:System.TimeoutException> が呼び出されると、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-166"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-167">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="177a1-168">このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="177a1-169">詳細については、「[非同期プログラミングの概要](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-170">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-171">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-172">これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="177a1-173"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="177a1-174">ワークフローを取り消すためのトークン。</span><span class="sxs-lookup"><span data-stu-id="177a1-174">The token for the workflow to cancel.</span></span></param>
        <summary><span data-ttu-id="177a1-175">指定された <paramref name="userState" /> によって呼び出されたワークフローを取り消そうとします。</span><span class="sxs-lookup"><span data-stu-id="177a1-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-176">取り消すことができるのは、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> パラメーターを受け取る、`userState` オーバーロードのいずれかによって呼び出されるワークフローだけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="177a1-177">取り消しが成功した場合<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 、 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>ハンドラーに<xref:System.Activities.InvokeCompletedEventArgs>渡されるのプロパティはに`true`設定されます。それ以外の`false`場合はに設定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-178">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-179">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-180">ワークフローが呼び出されると、ホストはワークフローを取り消そうとします。</span><span class="sxs-lookup"><span data-stu-id="177a1-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="177a1-181">ワークフローを開始した <see cref="T:System.IAsyncResult" /> 操作を参照する <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />。</span><span class="sxs-lookup"><span data-stu-id="177a1-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span></span></param>
        <summary><span data-ttu-id="177a1-182"><see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> オーバーロードのいずれかを使用して呼び出されたワークフローの結果を返します。</span><span class="sxs-lookup"><span data-stu-id="177a1-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span></span></summary>
        <returns><span data-ttu-id="177a1-183">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-183">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-184">ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> によって指定される`callback` メソッドから <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="177a1-185"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="177a1-186">このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して非同期的に呼び出されるワークフローの結果を返します。</span><span class="sxs-lookup"><span data-stu-id="177a1-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="177a1-187">詳細については、「[非同期プログラミングの概要](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-188">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-189">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-190">これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="177a1-191"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="177a1-192"><see cref="T:System.Collections.ObjectModel.Collection`1" /> インスタンスによって呼び出されるワークフローが使用できる拡張機能の <see cref="T:System.Activities.WorkflowInvoker" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="177a1-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></summary>
        <value><span data-ttu-id="177a1-193"><see cref="T:System.Collections.ObjectModel.Collection`1" /> インスタンスによって呼び出されるワークフローが使用できる拡張機能の <see cref="T:System.Activities.WorkflowInvoker" />。</span><span class="sxs-lookup"><span data-stu-id="177a1-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-194">このプロパティは、<xref:System.Activities.WorkflowInvoker> インスタンスに拡張機能を追加して、呼び出されるワークフローで使用できるようにするためにワークフローのホスト作成者によって使用されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-195">次の例は、カスタム <xref:System.Activities.Tracking.TrackingParticipant> を <xref:System.Activities.WorkflowInvoker> インスタンスの <xref:System.Activities.WorkflowInvoker.Extensions%2A> コレクションに登録します。</span><span class="sxs-lookup"><span data-stu-id="177a1-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="177a1-196">このコード例は、[カスタム追跡](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md)サンプルの一部です。</span><span class="sxs-lookup"><span data-stu-id="177a1-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="177a1-197">ワークフローを同期的に呼び出して、引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリを返します。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-197">Invokes a workflow synchronously and returns a dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-198">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-199">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-200">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="177a1-201"><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに渡されたワークフロー定義を使用して、ワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="177a1-202">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-202">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-203">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-204">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-205">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-206">次の例は、1 つの `DiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="177a1-207">`DiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-208">`Invoke` への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="177a1-209">ワークフローは、 `WorkflowInvoker`コンストラクターに渡されたワークフロー定義を使用して2回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="177a1-210">ワークフローのルート アクティビティに出力引数がない、またはホストで出力引数が必要でない場合は、無視されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="177a1-211">次の例は、出力引数を持たない 1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="177a1-212">呼び出すワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-212">The workflow definition of the workflow to invoke.</span></span></param>
        <summary><span data-ttu-id="177a1-213">指定されたワークフロー定義を使用してワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-213">Invokes a workflow synchronously using the specified workflow definition.</span></span></summary>
        <returns><span data-ttu-id="177a1-214">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-214">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-215">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-216">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-217">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-218">次の例は、1 つの `DiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="177a1-219">`DiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-220">`Invoke` への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="177a1-221">ワークフローのルート アクティビティに出力引数がない、またはホストで出力引数が必要でない場合は、無視されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="177a1-222">次の例は、出力引数を持たない 1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="177a1-223">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-223">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="177a1-224"><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに同期的に渡されるアクティビティを入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="177a1-225">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-225">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-226">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-227">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-228">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-229">次の例は、2 つの入力引数と 2 つの出力引数を持つ 1 つの `Divide` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="177a1-230">ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="177a1-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="177a1-231">`Invoke` の呼び出しから制御が戻るときに、同様に引数名でキー指定された各出力引数が、`outputs` 辞書で返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="177a1-232"><xref:System.Activities.ActivityWithResult>ワークフローが`CodeActivity<TResult>`や<xref:System.Activities.Activity%601.Result%2A> `Invoke`などのから派生し、適切に定義された出力引数に加えて出力引数がある場合は、次のようにの非ジェネリックオーバーロードを使用する必要があります。 `Activity<TResult>`追加の引数を取得するための順序。</span><span class="sxs-lookup"><span data-stu-id="177a1-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="177a1-233">これを行うには、 `WorkflowInvoker`コンストラクターに渡されるワークフロー定義が型<xref:System.Activities.Activity>である必要があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="177a1-234">この例では`Divide` 、アクティビティは`CodeActivity<int>`から派生しますが<xref:System.Activities.Activity> 、1つの戻り`Invoke`値ではなく引数のディクショナリを返す、のこのオーバーロードが使用されるように、として宣言されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="177a1-235">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="177a1-236">指定されたタイムアウト時間を使用して、ワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-236">Invokes a workflow synchronously with the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="177a1-237">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-237">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-238">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-239">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-240">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-241"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-242">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-243">次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="177a1-244">このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="177a1-245">最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされて次のメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="177a1-246">を出力引数と共`Invoke`に使用する例については<xref:System.Activities.WorkflowInvoker.Invoke%2A> 、「」のオーバーロードを参照してください。このオーバーロードと同じパラメーターを使用して、タイムアウト間隔を指定します。</span><span class="sxs-lookup"><span data-stu-id="177a1-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="177a1-247">呼び出すワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-247">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="177a1-248">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-248">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="177a1-249">指定されたワークフロー定義、および入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="177a1-250">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-250">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-251">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-252">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-253">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-254">次の例は、2 つの入力引数と 2 つの出力引数を持つ 1 つの `Divide` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="177a1-255">ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="177a1-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="177a1-256">`Invoke` の呼び出しから制御が戻るときに、同様に引数名でキー指定された各出力引数が、`outputs` 辞書で返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="177a1-257"><xref:System.Activities.ActivityWithResult>ワークフローが`CodeActivity<TResult>`や<xref:System.Activities.Activity%601.Result%2A> `Invoke`などのから派生し、適切に定義された出力引数に加えて出力引数がある場合は、次のようにの非ジェネリックオーバーロードを使用する必要があります。 `Activity<TResult>`追加の引数を取得するための順序。</span><span class="sxs-lookup"><span data-stu-id="177a1-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="177a1-258">これを行うには、`Invoke` に渡されるワークフロー定義は <xref:System.Activities.Activity> 型である必要があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="177a1-259">この例では`Divide` 、アクティビティは`CodeActivity<int>`から派生しますが<xref:System.Activities.Activity> 、1つの戻り`Invoke`値ではなく引数のディクショナリを返す、のこのオーバーロードが使用されるように、として宣言されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="177a1-260">呼び出すワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-260">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="timeout"><span data-ttu-id="177a1-261">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="177a1-262">指定されたワークフロー定義およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="177a1-263">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-263">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-264">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-265">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-266">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-267"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-268">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-269">次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="177a1-270">このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="177a1-271">最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="177a1-272">を出力引数と共`Invoke`に使用する例については<xref:System.Activities.WorkflowInvoker.Invoke%2A> 、「」のオーバーロードを参照してください。このオーバーロードと同じパラメーターを使用して、タイムアウト間隔を指定します。</span><span class="sxs-lookup"><span data-stu-id="177a1-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="177a1-273">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-273">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="177a1-274">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="177a1-275"><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに同期的に渡されるアクティビティを入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> および指定されたタイムアウト時間を使用して呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="177a1-276">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-276">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-277">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-278">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-279">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-280"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-281">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-282">次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="177a1-283">このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="177a1-284">最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされて次のメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="177a1-285">入力引数と出力引数`Invoke`を指定してを使用する例につい<xref:System.Activities.WorkflowInvoker.Invoke%2A>ては、このオーバーロードと同じパラメーターを持つのオーバーロードを、タイムアウト間隔なしで参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="177a1-286">呼び出すワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-286">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="177a1-287">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-287">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="177a1-288">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="177a1-289">指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="177a1-290">引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</span><span class="sxs-lookup"><span data-stu-id="177a1-290">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-291">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-292">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-293">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-294"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-295">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-296">次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="177a1-297">このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="177a1-298">最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="177a1-299">入力引数と出力引数`Invoke`を指定してを使用する例につい<xref:System.Activities.WorkflowInvoker.Invoke%2A>ては、このオーバーロードと同じパラメーターを持つのオーバーロードを、タイムアウト間隔なしで参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="177a1-300">ワークフローの型。</span><span class="sxs-lookup"><span data-stu-id="177a1-300">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="177a1-301">呼び出すワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-301">The workflow definition of the workflow to invoke.</span></span> <span data-ttu-id="177a1-302">ワークフロー定義は、<see cref="T:System.Activities.ActivityWithResult" /> から派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span></span></param>
        <summary><span data-ttu-id="177a1-303"><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに渡されたワークフロー定義を使用して、ワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="177a1-304">型 TResult の値およびアクティビティの実行結果。</span><span class="sxs-lookup"><span data-stu-id="177a1-304">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-305">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-306">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-307">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-308">次の例では、2つの入力`Add`引数`CodeActivity<int>`を持つ1つのアクティビティで構成されるワークフローを呼び出します。この<xref:System.Activities.Activity%601.Result%2A>ワークフローには、適切に定義された出力引数が1つあります。</span><span class="sxs-lookup"><span data-stu-id="177a1-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="177a1-309">ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="177a1-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="177a1-310">の呼び出し`Invoke`によってが返されると、 <xref:System.Activities.Activity%601.Result%2A>出力引数の値が返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="177a1-311">このコード例は、 [「WorkflowInvoker 元クラス](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)のサンプルの使用」に基づいています。</span><span class="sxs-lookup"><span data-stu-id="177a1-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="177a1-312">ワークフローの型。</span><span class="sxs-lookup"><span data-stu-id="177a1-312">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="177a1-313">呼び出すワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-313">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="177a1-314">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-314">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="177a1-315">指定されたワークフロー定義、および入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="177a1-316">型 TResult の値およびアクティビティの実行結果。</span><span class="sxs-lookup"><span data-stu-id="177a1-316">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-317">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-318">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-319">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-320"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-321">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-322">次の例では、2つの入力`Add`引数`CodeActivity<int>`を持つ1つのアクティビティで構成されるワークフローを呼び出します。この<xref:System.Activities.Activity%601.Result%2A>ワークフローには、適切に定義された出力引数が1つあります。</span><span class="sxs-lookup"><span data-stu-id="177a1-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="177a1-323">ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="177a1-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="177a1-324">の呼び出し`Invoke`によってが返されると、 <xref:System.Activities.Activity%601.Result%2A>出力引数の値が返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="177a1-325">このコード例は、 [「WorkflowInvoker 元クラス](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)のサンプルの使用」に基づいています。</span><span class="sxs-lookup"><span data-stu-id="177a1-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="177a1-326">ワークフローの型。</span><span class="sxs-lookup"><span data-stu-id="177a1-326">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="177a1-327">呼び出すワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-327">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="177a1-328">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-328">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="177a1-329">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="177a1-330">指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="177a1-331">型 TResult の値およびアクティビティの実行結果。</span><span class="sxs-lookup"><span data-stu-id="177a1-331">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-332">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-333">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-334">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-335"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-336">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-337">次の例では、2つの入力`Add`引数`CodeActivity<int>`を持つ1つのアクティビティで構成されるワークフローを呼び出します。この<xref:System.Activities.Activity%601.Result%2A>ワークフローには、適切に定義された出力引数が1つあります。</span><span class="sxs-lookup"><span data-stu-id="177a1-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="177a1-338">ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="177a1-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="177a1-339">の呼び出し`Invoke`によってが返されると、 <xref:System.Activities.Activity%601.Result%2A>出力引数の値が返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="177a1-340">このコード例は、 [「WorkflowInvoker 元クラス](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)のサンプルの使用」に基づいています。</span><span class="sxs-lookup"><span data-stu-id="177a1-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * IDictionary * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="177a1-341">ワークフローの型。</span><span class="sxs-lookup"><span data-stu-id="177a1-341">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="177a1-342">呼び出すワークフローのワークフロー定義。</span><span class="sxs-lookup"><span data-stu-id="177a1-342">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="177a1-343">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-343">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="additionalOutputs"><span data-ttu-id="177a1-344">ワークフローの追加出力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="177a1-345">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="177a1-346">指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、追加の出力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="177a1-347">型 TResult の値およびアクティビティの実行結果。</span><span class="sxs-lookup"><span data-stu-id="177a1-347">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-348">このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="177a1-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="177a1-349">ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。</span><span class="sxs-lookup"><span data-stu-id="177a1-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="177a1-350">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-351"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-352">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-353">次の例では、2つの入力`Add`引数`CodeActivity<int>`を持つ1つのアクティビティで構成されるワークフローを呼び出します。この<xref:System.Activities.Activity%601.Result%2A>ワークフローには、適切に定義された出力引数が1つあります。</span><span class="sxs-lookup"><span data-stu-id="177a1-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="177a1-354">ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="177a1-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="177a1-355">の呼び出し`Invoke`によってが返されると、 <xref:System.Activities.Activity%601.Result%2A>出力引数の値が返されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="177a1-356">このコード例は、 [「WorkflowInvoker 元クラス](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)のサンプルの使用」に基づいています。</span><span class="sxs-lookup"><span data-stu-id="177a1-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="177a1-357">イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-358">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-359">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="177a1-360">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-361">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-361">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="177a1-362">ワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-362">Invokes a workflow asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-363">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-364">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="177a1-365">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-366">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-366">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-367">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-368">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-369">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="177a1-370">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-370">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="177a1-371">入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-372">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-373">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="177a1-374">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-375">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-375">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-376">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-377">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-378">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="177a1-379">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="177a1-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="177a1-380">指定された一意の識別子を使用してワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-380">Invokes a workflow asynchronously using the specified unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-381">`userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="177a1-382">`userState` パラメーターが一意でない場合、<xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="177a1-383">`userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="177a1-384">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-385">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="177a1-386">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-387">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-387">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-388">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-389">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-390">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="177a1-391">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="177a1-392">指定タイムアウト時間を使用して、ワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-392">Invokes a workflow asynchronously with the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-393">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-394">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-395"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-396">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="177a1-397">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-398">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-398">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-399">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-400">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-401">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="177a1-402">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-402">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="userState"><span data-ttu-id="177a1-403">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="177a1-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="177a1-404">入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> および一意の識別子を使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-405">`userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="177a1-406">`userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="177a1-407">`userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="177a1-408">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-409">ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="177a1-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="177a1-410">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-411">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-411">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-412">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-413">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-414">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="177a1-415">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-415">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="177a1-416">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="177a1-417">入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、および指定されたタイムアウト時間を使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-418">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-419">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-420"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-421">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="177a1-422">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-423">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-423">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-424">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-425">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-426">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="177a1-427">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="177a1-428">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="177a1-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="177a1-429">指定タイムアウト時間および一意の識別子を使用して、ワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-430">`userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="177a1-431">`userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="177a1-432">`userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="177a1-433">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-434">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-435"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-436">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="177a1-437">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-438">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-438">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-439">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-440">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-441">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="177a1-442">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-442">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="177a1-443">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="177a1-444">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="177a1-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="177a1-445">入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、指定されたタイムアウト時間、および一意の識別子を使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-446">`userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="177a1-447">`userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="177a1-448">`userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="177a1-449">ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。</span><span class="sxs-lookup"><span data-stu-id="177a1-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="177a1-450">指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="177a1-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="177a1-451"><xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。</span><span class="sxs-lookup"><span data-stu-id="177a1-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="177a1-452">指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。</span><span class="sxs-lookup"><span data-stu-id="177a1-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="177a1-453">このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="177a1-454">詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="177a1-454">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-455">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-456">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-457">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="177a1-458"><see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> オーバーロードのいずれかによって呼び出されるワークフローが完了するか取り消されると発生します。</span><span class="sxs-lookup"><span data-stu-id="177a1-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="177a1-459">これを処理して、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> オーバーロードの 1 つを使用して呼び出したワークフローが正常に完了したかどうかを判断し、完了したワークフローの出力引数を取得します。</span><span class="sxs-lookup"><span data-stu-id="177a1-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="177a1-460">次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="177a1-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="177a1-461">`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。</span><span class="sxs-lookup"><span data-stu-id="177a1-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="177a1-462">ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。</span><span class="sxs-lookup"><span data-stu-id="177a1-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
