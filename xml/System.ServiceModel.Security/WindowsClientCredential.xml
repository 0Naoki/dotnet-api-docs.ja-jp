<Type Name="WindowsClientCredential" FullName="System.ServiceModel.Security.WindowsClientCredential">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b8f4bcd41908e0a109ad94880ff1145d09c1707d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36612271" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WindowsClientCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowsClientCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.WindowsClientCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowsClientCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsClientCredential sealed" />
  <TypeSignature Language="F#" Value="type WindowsClientCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>クライアントを表すために使用される Windows 資格情報に関連するプロパティを指定できます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Security.WindowsClientCredential> を使用して、サービスと通信するときに使用する Windows クライアントのプロパティを設定できます。 <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> は、クライアントを偽装するときにサービスが利用できる偽装のレベルを設定します。 <xref:System.ServiceModel.Security.WindowsClientCredential.ClientCredential%2A> は、クライアントがユーザー名とパスワードを使用してサービスから認証を受けられるようにします。 <xref:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm%2A> は、Kerberos が使用されていない場合にクライアントの認証に NTLM を使用できるかどうかを決定します。  
  
   
  
## Examples  
 クライアントを作成し、<xref:System.ServiceModel.Security.WindowsClientCredential> への参照を取得する例を次に示します。 コードでは、その後、<xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> を新しい値に変更します。  
  
 [!code-csharp[WindowsClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#1)]
 [!code-vb[WindowsClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/windowsclientcredential/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowedImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowedImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::TokenImpersonationLevel AllowedImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); void set(System::Security::Principal::TokenImpersonationLevel value); };" />
      <MemberSignature Language="F#" Value="member this.AllowedImpersonationLevel : System.Security.Principal.TokenImpersonationLevel with get, set" Usage="System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>許可される偽装レベルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値のいずれか 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、Windows SSPI ネゴシエート認証の使用時にクライアントがサーバーに付与する偽装レベルを指定します。 サーバーがクライアント トークンを偽装するときに取得する偽装レベルは、この設定だけに依存するわけではありません。 サービスが実行されているアカウントの関連付けられている特権やドメインの設定にも依存します。  
  
 クライアントは、このプロパティを使って、許可される偽装レベルを明示的に設定する必要があります。  
  
 クライアントが匿名偽装レベルを指定した場合、サービスで偽装が実行されなくても、クライアントは常に匿名ユーザーとしてサービスから認証されます。 これは、基になる Windows オペレーティング システムの動作によるものです。  
  
 Windows の権限借用の詳細についてを参照してください[偽装と復帰](http://go.microsoft.com/fwlink/?LinkId=96178)です。 Windows Communication Foundation を使用して権限借用の詳細については、次を参照してください。[委任と偽装](~/docs/framework/wcf/feature-details/delegation-and-impersonation-with-wcf.md)です。  
  
   
  
## Examples  
 このプロパティを設定する方法を次の例に示します。  
  
 [!code-csharp[WindowsClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#1)]
 [!code-vb[WindowsClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/windowsclientcredential/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowNtlm">
      <MemberSignature Language="C#" Value="public bool AllowNtlm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowNtlm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowNtlm As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowNtlm { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowNtlm : bool with get, set" Usage="System.ServiceModel.Security.WindowsClientCredential.AllowNtlm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows SSPI ネゴシエート認証時に NTLM 認証を許可するかどうかを示す値を取得または設定します。</summary>
        <value>Windows SSPI ネゴシエート認証時に NTLM 認証を許可する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを `true` に設定すると、Kerberos 認証を利用できない場合、NTLM 認証にダウングレードできます。  
  
 このプロパティを設定`false`ベスト エフォート NTLM が使用されている場合に例外をスローするように、Windows Communication Foundation (WCF) が発生します。 ただし、このプロパティを `false` に設定しても、ネットワーク経由で NTLM 資格情報が送信されなくなるとは限りません。  
  
 ワークグループやローカル アカウントなどの一部の展開では NTLM 認証が必要です。 このフラグを設定`false`WCF を使用する場合、認証エラーには、このような展開結果にします。 相互認証 (Kerberos のみでサポート) を必要とする展開では、このフラグを `false` に設定します。  
  
 NTLM (Windows NT LAN Manager) は、およびスタンドアロン システムで、Windows NT オペレーティング システムを実行しているシステムを含むネットワークで使用される認証プロトコルです。  
  
 Microsoft Kerberos セキュリティ パッケージを使用すると、NTLM と比較してネットワーク上のシステムのセキュリティを大幅に強化できます。 Microsoft Kerberos には、任意のプロトコルが、NTLM は、引き続きサポートし、およびスタンドアロン システム、ネットワークには、Windows NT 4.0 と以前のバージョンを実行しているシステムが含まれている場合、ネットワーク認証のために使用する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential ClientCredential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkCredential ClientCredential" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.ClientCredential" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientCredential As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkCredential ^ ClientCredential { System::Net::NetworkCredential ^ get(); void set(System::Net::NetworkCredential ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientCredential : System.Net.NetworkCredential with get, set" Usage="System.ServiceModel.Security.WindowsClientCredential.ClientCredential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows クライアント資格情報を取得または設定します。</summary>
        <value>クライアントの <see cref="T:System.Net.NetworkCredential" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、現在のスレッドの資格情報は、Windows SSPI ネゴシエート認証を行うための WCF で使用されます。  
  
 クライアントを別のプリンシパルとして認証するには、このプロパティによって返される <xref:System.Net.NetworkCredential> クラスのインスタンスのプロパティを変更します。 または、<xref:System.Net.NetworkCredential> クラスの新しいインスタンスを作成し、このプロパティに割り当てます。  
  
   
  
## Examples  
 クライアントを別のプリンシパルとして認証する方法を次のコード例に示します。  
  
 このプロパティによって返される <xref:System.Net.NetworkCredential> クラスのインスタンスのプロパティを変更する方法を次に示します。  
  
 [!code-csharp[WindowsClientCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#2)]  
  
 <xref:System.Net.NetworkCredential> クラスの新しいインスタンスを作成し、このプロパティに割り当てる方法を次に示します。  
  
 [!code-csharp[WindowsClientCredential#3](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>