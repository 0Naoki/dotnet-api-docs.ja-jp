<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="604364a9fb843d960f70874b849b40c35eb11b70" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36413582" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f781e-101">セキュリティで保護されたメッセージ交換サービスの資格情報の設定を提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f781e-101">Provides credential settings for a secure conversation service.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f781e-102">安全な対話を行うには、複数のメッセージを交換し、セキュリティ コンテキスト トークン (SCT) を使用してセキュリティを保証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f781e-102">Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security.</span></span> <span data-ttu-id="f781e-103">SCT は、通信セッションが存続している期間中、すべての通信参加者の間で共有されます。</span><span class="sxs-lookup"><span data-stu-id="f781e-103">The SCT is shared among the communicating parties for the lifetime of a communications session.</span></span> <span data-ttu-id="f781e-104">サービスは 2 種類の SCT を発行できます。</span><span class="sxs-lookup"><span data-stu-id="f781e-104">A service can issue two different kinds of SCTs:</span></span>  
  
-   <span data-ttu-id="f781e-105">最初の SCT は一意の ID を含むセッション ベースの SCT です。メッセージにはこの ID だけが含まれ、SCT ID と内容 (クレーム、セキュリティ キーなど) をマップする状態マッピング キャッシュがサービスで保持されます。</span><span class="sxs-lookup"><span data-stu-id="f781e-105">The first is a session-based SCT that contains a unique id. Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on).</span></span> <span data-ttu-id="f781e-106">適切に動作するクライアントは SCT キャンセルを送信して、サービスでキャッシュ リソースを最適化できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f781e-106">A well-behaved client must send an SCT cancellation to help the service optimize the cache resources.</span></span> <span data-ttu-id="f781e-107"><xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> パラメーターを `requireCancellation` に設定した `true` を呼び出すことでこのクラスをインスタンス化すると、SCT はこの方法で発行されます。</span><span class="sxs-lookup"><span data-stu-id="f781e-107">If you instantiate this class by calling <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> with the `requireCancellation` parameter equal to `true`, the SCT is issued in this manner.</span></span>  
  
-   <span data-ttu-id="f781e-108">2 番目の SCT は、クライアントのクッキーに存在する独立した SCT です。</span><span class="sxs-lookup"><span data-stu-id="f781e-108">The second is a self-contained SCT that resides in a cookie on the client.</span></span> <span data-ttu-id="f781e-109">この SCT は完全な状態情報を格納しているため、サービスからの状態管理もクライアントからの SCT キャンセルも必要ありません。</span><span class="sxs-lookup"><span data-stu-id="f781e-109">This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client.</span></span> <span data-ttu-id="f781e-110">これを "クッキー モード" SCT と呼ぶこともあります。</span><span class="sxs-lookup"><span data-stu-id="f781e-110">This is sometimes called a "cookie-mode" SCT.</span></span> <span data-ttu-id="f781e-111">SCT は完全な状態情報を格納しているため、SCT のサイズはセッション ベースの場合より大きくなります。</span><span class="sxs-lookup"><span data-stu-id="f781e-111">Because the SCT contains the entire state information, its size is larger than in the session-based case.</span></span> <span data-ttu-id="f781e-112">セッション ベースの SCT により、サービスは状態情報のほとんどを格納します。</span><span class="sxs-lookup"><span data-stu-id="f781e-112">With session-based SCTs, the service stores much of the state information.</span></span> <span data-ttu-id="f781e-113">ただし、この SCT は独立しているため、サービスの有効期間にわたって使用でき、サービスの停止と再起動の間も持続します。</span><span class="sxs-lookup"><span data-stu-id="f781e-113">However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f781e-114">クッキー シリアル化のための <see cref="T:System.Type" /> クレームのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f781e-114">Gets a collection of the <see cref="T:System.Type" /> claims for cookie serialization.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f781e-115">クッキー シリアル化のための <see cref="T:System.Type" /> クレームのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f781e-115">A collection of the <see cref="T:System.Type" /> claims for cookie serialization.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f781e-116">Windows Communication Foundation (WCF) を使用してクレームを SCT クッキーにシリアル化する<xref:System.Runtime.Serialization.DataContractSerializer>既定値として。</span><span class="sxs-lookup"><span data-stu-id="f781e-116">To serialize claims into SCT cookies, Windows Communication Foundation (WCF) uses <xref:System.Runtime.Serialization.DataContractSerializer> as the default.</span></span> <span data-ttu-id="f781e-117">クレームのリソースが拡張可能なため、WCF では、既知のリソースの種類の一覧を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="f781e-117">Because the Claim resource is extensible, WCF allows you to provide a list of known resource types.</span></span> <span data-ttu-id="f781e-118">これはクッキー内のクレームの逆シリアル化時に <xref:System.Runtime.Serialization.DataContractSerializer> を支援し、元の厳密に型指定されたオブジェクトを返すことができるようになります。</span><span class="sxs-lookup"><span data-stu-id="f781e-118">This assists the <xref:System.Runtime.Serialization.DataContractSerializer> during deserialization of the claims in the cookie so that it can return the original strongly-typed objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f781e-119">このプロパティを取得する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="f781e-119">The following code shows how to get this property.</span></span>  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f781e-120">クッキー シリアル化をエンコードおよびデコードするためのカスタマイズした <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f781e-120">Gets or sets a customized <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> for encoding and decoding cookie serialization.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f781e-121">
            <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> オブジェクト。これはカスタマイズされた <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f781e-121">A <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> object, which is a customization of <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f781e-122">"クッキー モード" では、サービスがクッキー形式でセキュリティ コンテキスト トークン (SCT) をクライアントに発行するため、セキュリティ状態を維持する必要がありません。</span><span class="sxs-lookup"><span data-stu-id="f781e-122">In "cookie mode", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state.</span></span> <span data-ttu-id="f781e-123">クライアントは要求メッセージでクッキーを送り返して、サービスに要求メッセージの保護を解除して検証する方法を伝達します。</span><span class="sxs-lookup"><span data-stu-id="f781e-123">The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message.</span></span> <span data-ttu-id="f781e-124">SCT はセキュリティで保護されていないネットワーク経由で転送されることが多いため、保護する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f781e-124">Because the SCT is often transmitted over a non-secure network, it must be protected.</span></span>  
  
 <span data-ttu-id="f781e-125">既定では、Windows Communication Foundation (WCF) を使用して、<xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder>データ保護 API (DPAPI) を使用して cookie を保護するクラス。</span><span class="sxs-lookup"><span data-stu-id="f781e-125">By default, Windows Communication Foundation (WCF) uses the <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> class to protect the cookie using the Data Protection API (DPAPI).</span></span> <span data-ttu-id="f781e-126">DPAPI が Web ファーム環境で機能するようにするには、すべてのバックエンド サービスが同じドメイン ユーザー アカウントとして実行されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="f781e-126">For DPAPI to work in a Web farm environment, all the backend services must run as the same domain user account.</span></span> <span data-ttu-id="f781e-127">言い換えると、サービスが Web ホストである場合は、インターネット インフォメーション サービス (IIS) ワーカー プロセスをドメイン ユーザーとして実行するよう構成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f781e-127">In other words, if the service is Web hosted, then the Internet Information Services (IIS) worker process must be configured to run as a domain user.</span></span>  
  
 <span data-ttu-id="f781e-128">このプロパティにより、DPAPI を使用せずに、カスタマイズされた <xref:System.ServiceModel.Security.SecurityStateEncoder> を使用してクッキーを暗号化および復号化することができます。</span><span class="sxs-lookup"><span data-stu-id="f781e-128">This property enables you to use a customized <xref:System.ServiceModel.Security.SecurityStateEncoder> to encrypt and decrypt the cookie and not depend on DPAPI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f781e-129">次のコードに、このプロパティを設定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f781e-129">The following code shows how to set this property.</span></span>  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>