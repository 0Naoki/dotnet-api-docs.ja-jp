<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b507ff86d3d28a0198880442d73a284a2a76dd60" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39810636" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>セキュリティで保護されたメッセージ交換サービスの資格情報の設定を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全な対話を行うには、複数のメッセージを交換し、セキュリティ コンテキスト トークン (SCT) を使用してセキュリティを保証する必要があります。 SCT は、通信セッションが存続している期間中、すべての通信参加者の間で共有されます。 サービスは 2 種類の SCT を発行できます。  
  
-   最初の SCT は一意の ID を含むセッション ベースの SCT です。メッセージにはこの ID だけが含まれ、SCT ID と内容 (クレーム、セキュリティ キーなど) をマップする状態マッピング キャッシュがサービスで保持されます。 適切に動作するクライアントは SCT キャンセルを送信して、サービスでキャッシュ リソースを最適化できるようにする必要があります。 <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> パラメーターを `requireCancellation` に設定した `true` を呼び出すことでこのクラスをインスタンス化すると、SCT はこの方法で発行されます。  
  
-   2 番目の SCT は、クライアントのクッキーに存在する独立した SCT です。 この SCT は完全な状態情報を格納しているため、サービスからの状態管理もクライアントからの SCT キャンセルも必要ありません。 これを "クッキー モード" SCT と呼ぶこともあります。 SCT は完全な状態情報を格納しているため、SCT のサイズはセッション ベースの場合より大きくなります。 セッション ベースの SCT により、サービスは状態情報のほとんどを格納します。 ただし、この SCT は独立しているため、サービスの有効期間にわたって使用でき、サービスの停止と再起動の間も持続します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クッキー シリアル化のための <see cref="T:System.Type" /> クレームのコレクションを取得します。</summary>
        <value>クッキー シリアル化のための <see cref="T:System.Type" /> クレームのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows Communication Foundation (WCF) を使用してクレームを SCT クッキーにシリアル化する<xref:System.Runtime.Serialization.DataContractSerializer>既定値として。 クレームのリソースは、拡張可能であるために、WCF を使用すると、既知のリソースの種類の一覧を指定できます。 これはクッキー内のクレームの逆シリアル化時に <xref:System.Runtime.Serialization.DataContractSerializer> を支援し、元の厳密に型指定されたオブジェクトを返すことができるようになります。  
  
   
  
## Examples  
 このプロパティを取得する方法を次のコードに示します。  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クッキー シリアル化をエンコードおよびデコードするためのカスタマイズした <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> を取得または設定します。</summary>
        <value><see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> オブジェクト。これはカスタマイズされた <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "クッキー モード" では、サービスがクッキー形式でセキュリティ コンテキスト トークン (SCT) をクライアントに発行するため、セキュリティ状態を維持する必要がありません。 クライアントは要求メッセージでクッキーを送り返して、サービスに要求メッセージの保護を解除して検証する方法を伝達します。 SCT はセキュリティで保護されていないネットワーク経由で転送されることが多いため、保護する必要があります。  
  
 既定では、Windows Communication Foundation (WCF) を使用して、<xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder>データ保護 API (DPAPI) を使用して cookie を保護するクラス。 DPAPI が Web ファーム環境で機能するようにするには、すべてのバックエンド サービスが同じドメイン ユーザー アカウントとして実行されている必要があります。 言い換えると、サービスが Web ホストである場合は、インターネット インフォメーション サービス (IIS) ワーカー プロセスをドメイン ユーザーとして実行するよう構成する必要があります。  
  
 このプロパティにより、DPAPI を使用せずに、カスタマイズされた <xref:System.ServiceModel.Security.SecurityStateEncoder> を使用してクッキーを暗号化および復号化することができます。  
  
   
  
## Examples  
 次のコードに、このプロパティを設定する方法を示します。  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>