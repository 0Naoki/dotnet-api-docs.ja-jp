<Type Name="CommittableTransaction" FullName="System.Transactions.CommittableTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="83edc5ef08d08dd83bccb09e59e60fb22f55b841" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605247" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CommittableTransaction extends System.Transactions.Transaction implements class System.IAsyncResult, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.CommittableTransaction" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CommittableTransaction&#xA;Inherits Transaction&#xA;Implements IAsyncResult, IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommittableTransaction sealed : System::Transactions::Transaction, IAsyncResult, IDisposable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type CommittableTransaction = class&#xA;    inherit Transaction&#xA;    interface ISerializable&#xA;    interface IDisposable&#xA;    interface IAsyncResult" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Transactions.Transaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="4e146-101">コミットできるトランザクションを示します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4e146-101">Describes a committable transaction.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e146-102"><xref:System.Transactions.CommittableTransaction> クラスは、<xref:System.Transactions.TransactionScope> クラスが暗黙的に使用されるのと対照的に、アプリケーションがトランザクションを明示的に使用する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="4e146-102">The <xref:System.Transactions.CommittableTransaction> class provides an explicit way for applications to use a transaction, as opposed to using the <xref:System.Transactions.TransactionScope> class implicitly.</span></span> <span data-ttu-id="4e146-103"><xref:System.Transactions.TransactionScope> クラスとは異なり、アプリケーション作成者はトランザクションをコミットまたは中止するために、具体的に <xref:System.Transactions.CommittableTransaction.Commit%2A> メソッドまたは <xref:System.Transactions.Transaction.Rollback%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="4e146-103">Unlike the <xref:System.Transactions.TransactionScope> class, the application writer needs to specifically call the <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.Transaction.Rollback%2A> methods in order to commit or abort the transaction.</span></span> <span data-ttu-id="4e146-104">ただし、トランザクションの作成者のみがトランザクションをコミットすることができます。</span><span class="sxs-lookup"><span data-stu-id="4e146-104">However, only the creator of a transaction can commit the transaction.</span></span> <span data-ttu-id="4e146-105">コミットできるトランザクションのコピーがを介して取得されたため、<xref:System.Transactions.Transaction.Clone%2A>メソッドはコミットされません。</span><span class="sxs-lookup"><span data-stu-id="4e146-105">Therefore, copies of a committable transaction, obtained through the <xref:System.Transactions.Transaction.Clone%2A> method are not committable.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e146-106">使用して暗黙のトランザクションを作成することをお勧め、<xref:System.Transactions.TransactionScope>クラスのアンビエント トランザクションのコンテキストが自動的に管理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="4e146-106">We recommend that you create implicit transactions using the <xref:System.Transactions.TransactionScope> class, so that the ambient transaction context is automatically managed for you.</span></span> <span data-ttu-id="4e146-107">使用する必要も、<xref:System.Transactions.TransactionScope>と<xref:System.Transactions.DependentTransaction>複数の関数呼び出しまたは複数のスレッド呼び出しの間で同じトランザクションの使用を必要とするアプリケーションのクラスです。</span><span class="sxs-lookup"><span data-stu-id="4e146-107">You should also use the <xref:System.Transactions.TransactionScope> and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</span></span> <span data-ttu-id="4e146-108">このモデルの詳細については、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="4e146-108">For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md) topic.</span></span>  
  
 <span data-ttu-id="4e146-109">作成する、<xref:System.Transactions.CommittableTransaction>アンビエント トランザクション、これは、コードで実行するトランザクションを自動的に設定しません。</span><span class="sxs-lookup"><span data-stu-id="4e146-109">Creating a <xref:System.Transactions.CommittableTransaction> does not automatically set the ambient transaction, which is the transaction your code executes in.</span></span> <span data-ttu-id="4e146-110">取得または静的なを呼び出すことによって、アンビエント トランザクションを設定することができます<xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType>のグローバル プロパティ<xref:System.Transactions.Transaction>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4e146-110">You can get or set the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType> property of the global <xref:System.Transactions.Transaction> object.</span></span> <span data-ttu-id="4e146-111">アンビエント トランザクションの詳細については、の「管理するトランザクションを使用してフロー TransactionScopeOption」を参照してください、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="4e146-111">For more information on ambient transactions, see the " Managing Transaction Flow using TransactionScopeOption" section of the [Implementing An Implicit Transaction Using Transaction Scope](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md) topic.</span></span> <span data-ttu-id="4e146-112">アンビエント トランザクションが設定されていない場合、リソース マネージャーで任意の操作はこのトランザクションの一部ではありません。</span><span class="sxs-lookup"><span data-stu-id="4e146-112">If the ambient transaction is not set, any operation on a resource manager is not part of that transaction.</span></span> <span data-ttu-id="4e146-113">明示的に設定し、アンビエント トランザクション リソース マネージャが右のトランザクション コンテキストで動作することを確認するをリセットする必要があります。</span><span class="sxs-lookup"><span data-stu-id="4e146-113">You need to explicitly set and reset the ambient transaction to ensure that resource managers operate under the right transaction context.</span></span>  
  
 <span data-ttu-id="4e146-114">なるまで、<xref:System.Transactions.CommittableTransaction>がコミットされると、トランザクションに関連するすべてのリソースがまだロックされています。</span><span class="sxs-lookup"><span data-stu-id="4e146-114">Until a <xref:System.Transactions.CommittableTransaction> has been committed, all the resources involved with the transaction are still locked.</span></span>  
  
 <span data-ttu-id="4e146-115"><xref:System.Transactions.CommittableTransaction> オブジェクトは再利用できません。</span><span class="sxs-lookup"><span data-stu-id="4e146-115">A <xref:System.Transactions.CommittableTransaction> object cannot be reused.</span></span> <span data-ttu-id="4e146-116">コミットまたはロールバックされましたが、トランザクションで再度使用または現在のアンビエント トランザクションのコンテキストとして設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="4e146-116">Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e146-117">次の例の 2 つの新しいインスタンスを作成する<xref:System.Transactions.CommittableTransaction>、コミットして、それぞれに戻るにロールアップします。</span><span class="sxs-lookup"><span data-stu-id="4e146-117">The following sample creates two new instances of <xref:System.Transactions.CommittableTransaction>, commits and rolls back them respectively.</span></span>  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="4e146-118">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4e146-118">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4e146-119">
            <see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-119">Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommittableTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e146-120">
            <see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-120">Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4e146-121">次のサンプルの新しいインスタンスを作成する<xref:System.Transactions.CommittableTransaction>コミットされるとします。</span><span class="sxs-lookup"><span data-stu-id="4e146-121">The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.</span></span>  
  
 [!code-csharp[Tx_CommittableTx#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_committabletx/cs/committabletxwithsql.cs#1)]
 [!code-vb[Tx_CommittableTx#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_committabletx/vb/committabletxwithsql.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="4e146-122">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-122">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommittableTransaction(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="new System.Transactions.CommittableTransaction : TimeSpan -&gt; System.Transactions.CommittableTransaction" Usage="new System.Transactions.CommittableTransaction timeout" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="4e146-123">トランザクションが中止されるまでに存在できる最大時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-123">The maximum amount of time the transaction can exist, before it is aborted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e146-124">指定した <paramref name="timeout" /> 値を使用して、<see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-124">Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" /> class with the specified <paramref name="timeout" /> value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="4e146-125">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-125">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction (System.Transactions.TransactionOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As TransactionOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommittableTransaction(System::Transactions::TransactionOptions options);" />
      <MemberSignature Language="F#" Value="new System.Transactions.CommittableTransaction : System.Transactions.TransactionOptions -&gt; System.Transactions.CommittableTransaction" Usage="new System.Transactions.CommittableTransaction options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Transactions.TransactionOptions" />
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="4e146-126">新しいトランザクションで使用するトランザクション オプションを示す <see cref="T:System.Transactions.TransactionOptions" /> 構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-126">A <see cref="T:System.Transactions.TransactionOptions" /> structure that describes the transaction options to use for the new transaction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4e146-127">指定したトランザクション オプションを使用して、<see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-127">Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" /> class with the specified transaction options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4e146-128">次のサンプルの新しいインスタンスを作成する<xref:System.Transactions.CommittableTransaction>オプションとし、それを中止します。</span><span class="sxs-lookup"><span data-stu-id="4e146-128">The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="4e146-129">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-129">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4e146-130">
            <paramref name="options" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-130">
              <paramref name="options" /> is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginCommit">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCommit(class System.AsyncCallback asyncCallback, object asyncState) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginCommit(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCommit (AsyncCallback callback, object user_defined_state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCommit(class System.AsyncCallback callback, object user_defined_state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginCommit (callback As AsyncCallback, user_defined_state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginCommit(AsyncCallback ^ callback, System::Object ^ user_defined_state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginCommit : AsyncCallback * obj -&gt; IAsyncResult" Usage="committableTransaction.BeginCommit (callback, user_defined_state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="asyncState" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="user_defined_state" Type="System.Object" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="asyncState">To be added.</param>
        <param name="user_defined_state">To be added.</param>
        <summary>
          <span data-ttu-id="4e146-131">非同期的にトランザクションをコミットする試みを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-131">Begins an attempt to commit the transaction asynchronously.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4e146-132">呼び出し元が非同期操作のステータスのチェックや操作完了までの待機に使用できる <see cref="T:System.IAsyncResult" /> インターフェイス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-132">An <see cref="T:System.IAsyncResult" /> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e146-133">このメソッドは、トランザクションが完了する前に、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="4e146-133">This method returns immediately, before the transaction has been completed.</span></span> <span data-ttu-id="4e146-134">トランザクション、別のスレッドでのコミットと`asyncCallback`が完了したときに、デリゲートが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4e146-134">The transaction then commits on a different thread, and the `asyncCallback` delegate is invoked when it has completed.</span></span> <span data-ttu-id="4e146-135">このメソッドが呼び出された後に表示されません、トランザクションの結果が呼び出されるまで<xref:System.Transactions.CommittableTransaction.EndCommit%2A>です。</span><span class="sxs-lookup"><span data-stu-id="4e146-135">After this method is called, you do not receive the outcome of the transaction until you call <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e146-136">コミット処理は、このメソッドの呼び出しの内部同期をとって実行可能性があります。</span><span class="sxs-lookup"><span data-stu-id="4e146-136">The commit process may complete synchronously inside this method call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="committableTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4e146-137">トランザクションをコミットしようとします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-137">Attempts to commit the transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e146-138">このメソッドが呼び出されると、トランザクションに参加する登録されているすべてのオブジェクトをポーリングして、コミットまたはトランザクションをロールバックするには、その投票が個別に示さです。</span><span class="sxs-lookup"><span data-stu-id="4e146-138">When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction.</span></span> <span data-ttu-id="4e146-139">すべての参加要素は、トランザクションをロールバックする投票する場合、はロールバックし、このメソッドはスロー、<xref:System.Transactions.TransactionException>例外。</span><span class="sxs-lookup"><span data-stu-id="4e146-139">If any participant votes to roll back the transaction, it is rolled back and this method throws a <xref:System.Transactions.TransactionException> exception.</span></span> <span data-ttu-id="4e146-140">これは、トランザクションに対する通常の動作であり、コードでキャッチしてこのような例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4e146-140">This is a normal occurrence for a transaction and your code should catch and process such exceptions.</span></span>  
  
 <span data-ttu-id="4e146-141"><xref:System.Transactions.CommittableTransaction.Commit%2A> および<xref:System.Transactions.CommittableTransaction.EndCommit%2A>トランザクション処理の最初のフェーズが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="4e146-141"><xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete.</span></span> <span data-ttu-id="4e146-142">すべてのリソース マネージャーの後に最初のフェーズが終了し、トランザクションの参加リストは、トランザクションの結果に投票がおよび、<xref:System.Transactions.TransactionManager>コミットするか、トランザクションを中止することにしました永続的にします。</span><span class="sxs-lookup"><span data-stu-id="4e146-142">The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction.</span></span> <span data-ttu-id="4e146-143">処理の 2 番目のフェーズは、常に非同期にします。</span><span class="sxs-lookup"><span data-stu-id="4e146-143">The second phase of processing is always asynchronous.</span></span> <span data-ttu-id="4e146-144">したがって、特定のトランザクション内からコミットされたばかりのデータが使用できることすぐにその後このデータを表示する別のトランザクションを使用していないときに保証はありません。</span><span class="sxs-lookup"><span data-stu-id="4e146-144">Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</span></span>  
  
 <span data-ttu-id="4e146-145">トランザクション処理の最初のフェーズが完了するまでに十分な注意する必要があります (WinForm) の Windows フォーム アプリケーションの場合、またはデッドロックでこのメソッドを使用するときにこのメソッドはブロックが発生することができます。</span><span class="sxs-lookup"><span data-stu-id="4e146-145">Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</span></span> <span data-ttu-id="4e146-146">(たとえば、ボタンをクリックすると)、1 つの WinForm コントロール イベント内でこのメソッドを呼び出すし、同期を使用する場合<xref:System.Windows.Forms.Control.Invoke%2A>トランザクションの処理中のいくつかの UI タスク (たとえば、変化する色) を実行するコントロールを送信するためのメソッド、デッドロックが発生します。</span><span class="sxs-lookup"><span data-stu-id="4e146-146">If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</span></span> <span data-ttu-id="4e146-147">これは、ため、<xref:System.Windows.Forms.Control.Invoke%2A>メソッドは同期であり、UI スレッドには、そのジョブが完了するまで、ワーカー スレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="4e146-147">This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job.</span></span> <span data-ttu-id="4e146-148">ただし、このシナリオでは、UI スレッドも待機しているワーカー スレッドがトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="4e146-148">However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</span></span> <span data-ttu-id="4e146-149">結果とは、[なし] を続行できませんされ、スコープは、コミットの終了を無期限に待機です。</span><span class="sxs-lookup"><span data-stu-id="4e146-149">The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</span></span> <span data-ttu-id="4e146-150">使用する必要があります<xref:System.Windows.Forms.Control.BeginInvoke%2A>なく<xref:System.Windows.Forms.Control.Invoke%2A>可能な限り、非同期、したがってにくくなりました。 デッドロックになっているためです。</span><span class="sxs-lookup"><span data-stu-id="4e146-150">You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionInDoubtException">
          <span data-ttu-id="4e146-151">トランザクションで <see cref="M:System.Transactions.CommittableTransaction.Commit" /> が呼び出され、トランザクションが <see cref="F:System.Transactions.TransactionStatus.InDoubt" /> の状態になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-151">
              <see cref="M:System.Transactions.CommittableTransaction.Commit" /> is called on a transaction and the transaction becomes <see cref="F:System.Transactions.TransactionStatus.InDoubt" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Transactions.TransactionAbortedException">
          <span data-ttu-id="4e146-152">
            <see cref="M:System.Transactions.CommittableTransaction.Commit" /> が呼び出され、トランザクションが初めてロールバックされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-152">
              <see cref="M:System.Transactions.CommittableTransaction.Commit" /> is called and the transaction rolls back for the first time.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndCommit">
      <MemberSignature Language="C#" Value="public void EndCommit (IAsyncResult asyncResult);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndCommit(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" FrameworkAlternate="netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndCommit (asyncResult As IAsyncResult)" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndCommit(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public void EndCommit (IAsyncResult ar);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndCommit(class System.IAsyncResult ar) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndCommit (ar As IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndCommit(IAsyncResult ^ ar);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndCommit : IAsyncResult -&gt; unit" Usage="committableTransaction.EndCommit ar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="ar" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="ar">To be added.</param>
        <summary>
          <span data-ttu-id="4e146-153">非同期的にトランザクションをコミットする試みを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-153">Ends an attempt to commit the transaction asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e146-154">パラメーターとして指定されたコールバック デリゲートでこのメソッドを呼び出す必要があります、<xref:System.Transactions.CommittableTransaction.BeginCommit%2A>メソッドは、非同期のコミットに関連するクリーンアップ作業を完了するとします。</span><span class="sxs-lookup"><span data-stu-id="4e146-154">You should call this method in the callback delegate specified as a parameter to the <xref:System.Transactions.CommittableTransaction.BeginCommit%2A> method, when you have finished any cleanup work associated with the asynchronous commitment.</span></span> <span data-ttu-id="4e146-155">デリゲートを待たずに早い段階このメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="4e146-155">You can also call this method early without waiting for the delegate.</span></span> <span data-ttu-id="4e146-156">このメソッドを呼び出すまで、トランザクションが完了していない場合は、このメソッドは、その完了を待機します。</span><span class="sxs-lookup"><span data-stu-id="4e146-156">If, by the time you call this method, the transaction has not completed, this method waits for its completion.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="4e146-157"><xref:System.IAsyncResult.CompletedSynchronously%2A>プロパティから返される`asyncResult`は常に`false`場合でも、同期的に、操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="4e146-157">The <xref:System.IAsyncResult.CompletedSynchronously%2A> property returned by `asyncResult` is always `false`, even if the operation completed synchronously.</span></span>  
  
 <span data-ttu-id="4e146-158"><xref:System.Transactions.CommittableTransaction.Commit%2A> および<xref:System.Transactions.CommittableTransaction.EndCommit%2A>トランザクション処理の最初のフェーズが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="4e146-158"><xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete.</span></span> <span data-ttu-id="4e146-159">すべてのリソース マネージャーの後に最初のフェーズが終了し、トランザクションの参加リストは、トランザクションの結果に投票がおよび、<xref:System.Transactions.TransactionManager>コミットするか、トランザクションを中止することにしました永続的にします。</span><span class="sxs-lookup"><span data-stu-id="4e146-159">The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction.</span></span> <span data-ttu-id="4e146-160">処理の 2 番目のフェーズは、常に非同期にします。</span><span class="sxs-lookup"><span data-stu-id="4e146-160">The second phase of processing is always asynchronous.</span></span> <span data-ttu-id="4e146-161">したがって、特定のトランザクション内からコミットされたばかりのデータが使用できることすぐにその後このデータを表示する別のトランザクションを使用していないときに保証はありません。</span><span class="sxs-lookup"><span data-stu-id="4e146-161">Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionAbortedException">
          <span data-ttu-id="4e146-162">
            <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> が呼び出され、トランザクションが初めてロールバックされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-162">
              <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> is called and the transaction rolls back for the first time.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncState">
      <MemberSignature Language="C#" Value="object System.IAsyncResult.AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.IAsyncResult.AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncState As Object Implements IAsyncResult.AsyncState" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.IAsyncResult.AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e146-163">
            <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> メソッド呼び出しの最後のパラメーターに指定されたオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-163">Gets the object provided as the last parameter of the <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> method call.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e146-164">
            <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> メソッド呼び出しの最後のパラメーターに指定されたオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-164">The object provided as the last parameter of the <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> method call.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System.IAsyncResult.AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e146-165">非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-165">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e146-166">非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-166">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System.IAsyncResult.CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e146-167">非同期のコミット操作が同期的に完了したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-167">Gets an indication of whether the asynchronous commit operation completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e146-168">非同期のコミット操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-168">
              <see langword="true" /> if the asynchronous commit operation completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4e146-169">このプロパティは、操作が同期的に完了した場合でも、常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-169">This property always returns <see langword="false" /> even if the operation completed synchronously.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.IsCompleted">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsCompleted As Boolean Implements IAsyncResult.IsCompleted" />
      <MemberSignature Language="C++ CLI" Value="property bool System.IAsyncResult.IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4e146-170">非同期のコミット操作が完了したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-170">Gets an indication whether the asynchronous commit operation has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4e146-171">操作が完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4e146-171">
              <see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>