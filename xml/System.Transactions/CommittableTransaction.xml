<Type Name="CommittableTransaction" FullName="System.Transactions.CommittableTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2222aa04a8fb3610f873a78d97da04c70c9bb4de" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57939957" /></Metadata><TypeSignature Language="C#" Value="public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CommittableTransaction extends System.Transactions.Transaction implements class System.IAsyncResult, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.CommittableTransaction" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CommittableTransaction&#xA;Inherits Transaction&#xA;Implements IAsyncResult, IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommittableTransaction sealed : System::Transactions::Transaction, IAsyncResult, IDisposable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type CommittableTransaction = class&#xA;    inherit Transaction&#xA;    interface ISerializable&#xA;    interface IDisposable&#xA;    interface IAsyncResult" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Transactions.Transaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="64613-101">コミットできるトランザクションを示します。</span><span class="sxs-lookup"><span data-stu-id="64613-101">Describes a committable transaction.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64613-102">
  <xref:System.Transactions.CommittableTransaction> クラスは、<xref:System.Transactions.TransactionScope> クラスが暗黙的に使用されるのと対照的に、アプリケーションがトランザクションを明示的に使用する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="64613-102">The <xref:System.Transactions.CommittableTransaction> class provides an explicit way for applications to use a transaction, as opposed to using the <xref:System.Transactions.TransactionScope> class implicitly.</span></span> <span data-ttu-id="64613-103">
  <xref:System.Transactions.TransactionScope> クラスとは異なり、アプリケーション作成者はトランザクションをコミットまたは中止するために、具体的に <xref:System.Transactions.CommittableTransaction.Commit%2A> メソッドまたは <xref:System.Transactions.Transaction.Rollback%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="64613-103">Unlike the <xref:System.Transactions.TransactionScope> class, the application writer needs to specifically call the <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.Transaction.Rollback%2A> methods in order to commit or abort the transaction.</span></span> <span data-ttu-id="64613-104">ただし、トランザクションの作成者のみがトランザクションをコミットすることができます。</span><span class="sxs-lookup"><span data-stu-id="64613-104">However, only the creator of a transaction can commit the transaction.</span></span> <span data-ttu-id="64613-105">を通じて、コミット可能なトランザクションのコピーを取得するため、<xref:System.Transactions.Transaction.Clone%2A>メソッドはコミットされません。</span><span class="sxs-lookup"><span data-stu-id="64613-105">Therefore, copies of a committable transaction, obtained through the <xref:System.Transactions.Transaction.Clone%2A> method are not committable.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="64613-106">使用して暗黙のトランザクションを作成することをお勧め、<xref:System.Transactions.TransactionScope>クラスのアンビエント トランザクション コンテキストが自動的に管理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="64613-106">We recommend that you create implicit transactions using the <xref:System.Transactions.TransactionScope> class, so that the ambient transaction context is automatically managed for you.</span></span> <span data-ttu-id="64613-107">使用することも必要があります、<xref:System.Transactions.TransactionScope>と<xref:System.Transactions.DependentTransaction>を複数の関数呼び出しまたは複数のスレッド呼び出しの間で、同じトランザクションの使用を必要とするアプリケーションのクラス。</span><span class="sxs-lookup"><span data-stu-id="64613-107">You should also use the <xref:System.Transactions.TransactionScope> and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</span></span> <span data-ttu-id="64613-108">このモデルの詳細については、次を参照してください。、[実装 An Implicit Transaction Using Transaction Scope](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピック。</span><span class="sxs-lookup"><span data-stu-id="64613-108">For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md) topic.</span></span>  
  
 <span data-ttu-id="64613-109">作成、<xref:System.Transactions.CommittableTransaction>でコードが実行されるトランザクションをアンビエント トランザクションを自動的に設定されません。</span><span class="sxs-lookup"><span data-stu-id="64613-109">Creating a <xref:System.Transactions.CommittableTransaction> does not automatically set the ambient transaction, which is the transaction your code executes in.</span></span> <span data-ttu-id="64613-110">取得または静的なを呼び出すことによって、アンビエント トランザクションを設定することができます<xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType>のグローバル プロパティ<xref:System.Transactions.Transaction>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="64613-110">You can get or set the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType> property of the global <xref:System.Transactions.Transaction> object.</span></span> <span data-ttu-id="64613-111">アンビエント トランザクションの詳細については、の「TransactionScopeOption を使用して管理するトランザクション フロー」セクションを参照してください、[実装 An Implicit Transaction Using Transaction Scope](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピック。</span><span class="sxs-lookup"><span data-stu-id="64613-111">For more information on ambient transactions, see the " Managing Transaction Flow using TransactionScopeOption" section of the [Implementing An Implicit Transaction Using Transaction Scope](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md) topic.</span></span> <span data-ttu-id="64613-112">アンビエント トランザクションが設定されていない場合、リソース マネージャーでの任意の操作はこのトランザクションの一部ではありません。</span><span class="sxs-lookup"><span data-stu-id="64613-112">If the ambient transaction is not set, any operation on a resource manager is not part of that transaction.</span></span> <span data-ttu-id="64613-113">明示的に設定し、リソース マネージャーに適切なトランザクション コンテキストで動作させるのにアンビエント トランザクションをリセットする必要があります。</span><span class="sxs-lookup"><span data-stu-id="64613-113">You need to explicitly set and reset the ambient transaction to ensure that resource managers operate under the right transaction context.</span></span>  
  
 <span data-ttu-id="64613-114">まで、<xref:System.Transactions.CommittableTransaction>がコミットされると、トランザクションに関連するすべてのリソースはロックされたままです。</span><span class="sxs-lookup"><span data-stu-id="64613-114">Until a <xref:System.Transactions.CommittableTransaction> has been committed, all the resources involved with the transaction are still locked.</span></span>  
  
 <span data-ttu-id="64613-115">
  <xref:System.Transactions.CommittableTransaction> オブジェクトは再利用できません。</span><span class="sxs-lookup"><span data-stu-id="64613-115">A <xref:System.Transactions.CommittableTransaction> object cannot be reused.</span></span> <span data-ttu-id="64613-116">コミットまたはロールバックされていますが後、トランザクションでもう一度使用または現在のアンビエント トランザクション コンテキストとして設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="64613-116">Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64613-117">次の例は、2 つの新しいインスタンスを作成します。<xref:System.Transactions.CommittableTransaction>をコミットし、それぞれ戻るには、します。</span><span class="sxs-lookup"><span data-stu-id="64613-117">The following sample creates two new instances of <xref:System.Transactions.CommittableTransaction>, commits and rolls back them respectively.</span></span>  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="64613-118">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="64613-118">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85)"><span data-ttu-id="64613-119">「Implementing An Implicit Transaction Using Transaction Scope」</span><span class="sxs-lookup"><span data-stu-id="64613-119">Implementing An Implicit Transaction Using Transaction Scope</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/f6c648f8-d638-4228-bfa4-0d65dd262968"><span data-ttu-id="64613-120">「Implementing An Explicit Transaction Using CommittableTransaction」</span><span class="sxs-lookup"><span data-stu-id="64613-120">Implementing An Explicit Transaction Using CommittableTransaction</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="64613-121"><see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="64613-121">Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommittableTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="64613-122"><see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="64613-122">Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="64613-123">次の例は、の新しいインスタンスを作成します。<xref:System.Transactions.CommittableTransaction>してコミットします。</span><span class="sxs-lookup"><span data-stu-id="64613-123">The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.</span></span>  
  
 [!code-csharp[Tx_CommittableTx#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_committabletx/cs/committabletxwithsql.cs#1)]
 [!code-vb[Tx_CommittableTx#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_committabletx/vb/committabletxwithsql.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="64613-124">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</span><span class="sxs-lookup"><span data-stu-id="64613-124">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommittableTransaction(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="new System.Transactions.CommittableTransaction : TimeSpan -&gt; System.Transactions.CommittableTransaction" Usage="new System.Transactions.CommittableTransaction timeout" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="64613-125">トランザクションが中止されるまでに存在できる最大時間。</span><span class="sxs-lookup"><span data-stu-id="64613-125">The maximum amount of time the transaction can exist, before it is aborted.</span></span></param>
        <summary><span data-ttu-id="64613-126">指定した <paramref name="timeout" /> 値を使用して、<see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="64613-126">Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" /> class with the specified <paramref name="timeout" /> value.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="64613-127">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</span><span class="sxs-lookup"><span data-stu-id="64613-127">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction (System.Transactions.TransactionOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As TransactionOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommittableTransaction(System::Transactions::TransactionOptions options);" />
      <MemberSignature Language="F#" Value="new System.Transactions.CommittableTransaction : System.Transactions.TransactionOptions -&gt; System.Transactions.CommittableTransaction" Usage="new System.Transactions.CommittableTransaction options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Transactions.TransactionOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="64613-128">新しいトランザクションで使用するトランザクション オプションを示す <see cref="T:System.Transactions.TransactionOptions" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="64613-128">A <see cref="T:System.Transactions.TransactionOptions" /> structure that describes the transaction options to use for the new transaction.</span></span></param>
        <summary><span data-ttu-id="64613-129">指定したトランザクション オプションを使用して、<see cref="T:System.Transactions.CommittableTransaction" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="64613-129">Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" /> class with the specified transaction options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="64613-130">次の例は、の新しいインスタンスを作成します。<xref:System.Transactions.CommittableTransaction>をオプションでそれを中止します。</span><span class="sxs-lookup"><span data-stu-id="64613-130">The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="64613-131">Windows 98、Windows 98 Second Edition、または Windows Millennium Edition でトランザクションを作成しようとしました。</span><span class="sxs-lookup"><span data-stu-id="64613-131">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="64613-132"><paramref name="options" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="64613-132"><paramref name="options" /> is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginCommit">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCommit(class System.AsyncCallback asyncCallback, object asyncState) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginCommit(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCommit (AsyncCallback callback, object user_defined_state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCommit(class System.AsyncCallback callback, object user_defined_state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginCommit (callback As AsyncCallback, user_defined_state As Object) As IAsyncResult" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginCommit(AsyncCallback ^ callback, System::Object ^ user_defined_state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginCommit : AsyncCallback * obj -&gt; IAsyncResult" Usage="committableTransaction.BeginCommit (asyncCallback, asyncState)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginCommit (callback As AsyncCallback, user_defined_state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="F#" Value="member this.BeginCommit : AsyncCallback * obj -&gt; IAsyncResult" Usage="committableTransaction.BeginCommit (callback, user_defined_state)" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="asyncState" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0" />
        <Parameter Name="user_defined_state" Type="System.Object" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="64613-133">トランザクションの完了時に呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="64613-133">The <see cref="T:System.AsyncCallback" /> delegate that is invoked when the transaction completes.</span></span> <span data-ttu-id="64613-134">このパラメーターは <see langword="null" /> になる可能性があります。この場合、アプリケーションにはトランザクションの完了が通知されません。</span><span class="sxs-lookup"><span data-stu-id="64613-134">This parameter can be <see langword="null" />, in which case the application is not notified of the transaction's completion.</span></span> <span data-ttu-id="64613-135">代わりに、アプリケーションは <see cref="T:System.IAsyncResult" /> インターフェイスを使用してトランザクションが完了したかどうかをチェックし、その結果に応じて待機するか、または <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> を呼び出して完了するまで待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="64613-135">Instead, the application must use the <see cref="T:System.IAsyncResult" /> interface to check for completion and wait accordingly, or call <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> to wait for completion.</span></span></param>
        <param name="callback"><span data-ttu-id="64613-136">トランザクションの完了時に呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="64613-136">The <see cref="T:System.AsyncCallback" /> delegate that is invoked when the transaction completes.</span></span> <span data-ttu-id="64613-137">このパラメーターは <see langword="null" /> になる可能性があります。この場合、アプリケーションにはトランザクションの完了が通知されません。</span><span class="sxs-lookup"><span data-stu-id="64613-137">This parameter can be <see langword="null" />, in which case the application is not notified of the transaction's completion.</span></span> <span data-ttu-id="64613-138">代わりに、アプリケーションは <see cref="T:System.IAsyncResult" /> インターフェイスを使用してトランザクションが完了したかどうかをチェックし、その結果に応じて待機するか、または <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> を呼び出して完了するまで待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="64613-138">Instead, the application must use the <see cref="T:System.IAsyncResult" /> interface to check for completion and wait accordingly, or call <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> to wait for completion.</span></span></param>
        <param name="asyncState"><span data-ttu-id="64613-139">非同期のコミットに関連付けられた、任意のステータス情報を格納している可能性のあるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="64613-139">An object, which might contain arbitrary state information, associated with the asynchronous commitment.</span></span> <span data-ttu-id="64613-140">このオブジェクトはコールバックに渡されます。<see cref="N:System.Transactions" /> では解釈されません。</span><span class="sxs-lookup"><span data-stu-id="64613-140">This object is passed to the callback, and is not interpreted by <see cref="N:System.Transactions" />.</span></span> <span data-ttu-id="64613-141">null 参照は許可されています。</span><span class="sxs-lookup"><span data-stu-id="64613-141">A null reference is permitted.</span></span></param>
        <param name="user_defined_state"><span data-ttu-id="64613-142">非同期のコミットに関連付けられた、任意のステータス情報を格納している可能性のあるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="64613-142">An object, which might contain arbitrary state information, associated with the asynchronous commitment.</span></span> <span data-ttu-id="64613-143">このオブジェクトはコールバックに渡されます。<see cref="N:System.Transactions" /> では解釈されません。</span><span class="sxs-lookup"><span data-stu-id="64613-143">This object is passed to the callback, and is not interpreted by <see cref="N:System.Transactions" />.</span></span> <span data-ttu-id="64613-144">null 参照は許可されています。</span><span class="sxs-lookup"><span data-stu-id="64613-144">A null reference is permitted.</span></span></param>
        <summary><span data-ttu-id="64613-145">非同期的にトランザクションをコミットする試みを開始します。</span><span class="sxs-lookup"><span data-stu-id="64613-145">Begins an attempt to commit the transaction asynchronously.</span></span></summary>
        <returns><span data-ttu-id="64613-146">呼び出し元が非同期操作のステータスのチェックや操作完了までの待機に使用できる <see cref="T:System.IAsyncResult" /> インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="64613-146">An <see cref="T:System.IAsyncResult" /> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64613-147">このメソッドは、トランザクションが完了する前に、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="64613-147">This method returns immediately, before the transaction has been completed.</span></span> <span data-ttu-id="64613-148">トランザクション、別のスレッドでのコミットと`asyncCallback`終了時にデリゲートが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="64613-148">The transaction then commits on a different thread, and the `asyncCallback` delegate is invoked when it has completed.</span></span> <span data-ttu-id="64613-149">このメソッドが呼び出されると、受信しないトランザクションの結果を呼び出すまで<xref:System.Transactions.CommittableTransaction.EndCommit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="64613-149">After this method is called, you do not receive the outcome of the transaction until you call <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="64613-150">コミット処理は、このメソッドの呼び出し内で同期的に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="64613-150">The commit process may complete synchronously inside this method call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="committableTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="64613-151">トランザクションをコミットしようとします。</span><span class="sxs-lookup"><span data-stu-id="64613-151">Attempts to commit the transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64613-152">このメソッドが呼び出されると、トランザクションに参加する登録されているすべてのオブジェクトをポーリングして、トランザクションをロールバックまたはコミットにその投票が個別に示さ。</span><span class="sxs-lookup"><span data-stu-id="64613-152">When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction.</span></span> <span data-ttu-id="64613-153">すべての参加要素は、トランザクションをロールバックする投票する場合、はロールバックし、このメソッドがスローされます、<xref:System.Transactions.TransactionException>例外。</span><span class="sxs-lookup"><span data-stu-id="64613-153">If any participant votes to roll back the transaction, it is rolled back and this method throws a <xref:System.Transactions.TransactionException> exception.</span></span> <span data-ttu-id="64613-154">これは、トランザクションに対する通常の動作であり、コードでキャッチしてこのような例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="64613-154">This is a normal occurrence for a transaction and your code should catch and process such exceptions.</span></span>  
  
 <span data-ttu-id="64613-155"><xref:System.Transactions.CommittableTransaction.Commit%2A> <xref:System.Transactions.CommittableTransaction.EndCommit%2A>トランザクション処理の最初のフェーズが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="64613-155"><xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete.</span></span> <span data-ttu-id="64613-156">すべてのリソース マネージャーの後に最初のフェーズが終了し、トランザクションの参加リストがトランザクションの結果を報告しました、<xref:System.Transactions.TransactionManager>は永続的ことにコミットするか、トランザクションを中止しました。</span><span class="sxs-lookup"><span data-stu-id="64613-156">The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction.</span></span> <span data-ttu-id="64613-157">2 番目のフェーズの処理は常に非同期です。</span><span class="sxs-lookup"><span data-stu-id="64613-157">The second phase of processing is always asynchronous.</span></span> <span data-ttu-id="64613-158">そのためから特定のトランザクション内でコミットされたばかりのデータはすぐに使用できる後でこのデータを表示する別のトランザクションを使用していないときに保証することはありません。</span><span class="sxs-lookup"><span data-stu-id="64613-158">Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</span></span>  
  
 <span data-ttu-id="64613-159">トランザクション処理の最初のフェーズが完了するまで、細心の注意する必要があります (WinForm) の Windows フォーム アプリケーションでは、またはデッドロックでこのメソッドを使用する場合、このメソッドはブロックが発生することができます。</span><span class="sxs-lookup"><span data-stu-id="64613-159">Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</span></span> <span data-ttu-id="64613-160">(たとえば、ボタンをクリックして)、1 つの WinForm コントロール イベント内では、このメソッドの呼び出しし、同期を使用して、<xref:System.Windows.Forms.Control.Invoke%2A>トランザクションの処理の途中でいくつかの UI タスク (たとえば、変化する色) を実行するコントロールに出力するためのメソッド、デッドロックは発生します。</span><span class="sxs-lookup"><span data-stu-id="64613-160">If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</span></span> <span data-ttu-id="64613-161">これは、ため、<xref:System.Windows.Forms.Control.Invoke%2A>メソッドは同期であり、UI スレッドがそのジョブが完了するまでにワーカー スレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="64613-161">This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job.</span></span> <span data-ttu-id="64613-162">ただし、ここでは、UI スレッド側も、ワーカー スレッドがトランザクションをコミットするまで待機しようとします。</span><span class="sxs-lookup"><span data-stu-id="64613-162">However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</span></span> <span data-ttu-id="64613-163">結果は、スコープがコミットが完了するは無期限に待機を none は続行できません。</span><span class="sxs-lookup"><span data-stu-id="64613-163">The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</span></span> <span data-ttu-id="64613-164">使用する必要があります<xref:System.Windows.Forms.Control.BeginInvoke%2A>なく<xref:System.Windows.Forms.Control.Invoke%2A>可能な限り、非同期およびそのため、デッドロックに陥りやすい未満であるためです。</span><span class="sxs-lookup"><span data-stu-id="64613-164">You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionInDoubtException"><span data-ttu-id="64613-165">トランザクションで <see cref="M:System.Transactions.CommittableTransaction.Commit" /> が呼び出され、トランザクションが <see cref="F:System.Transactions.TransactionStatus.InDoubt" /> の状態になります。</span><span class="sxs-lookup"><span data-stu-id="64613-165"><see cref="M:System.Transactions.CommittableTransaction.Commit" /> is called on a transaction and the transaction becomes <see cref="F:System.Transactions.TransactionStatus.InDoubt" />.</span></span></exception>
        <exception cref="T:System.Transactions.TransactionAbortedException"><span data-ttu-id="64613-166"><see cref="M:System.Transactions.CommittableTransaction.Commit" /> が呼び出され、トランザクションが初めてロールバックされます。</span><span class="sxs-lookup"><span data-stu-id="64613-166"><see cref="M:System.Transactions.CommittableTransaction.Commit" /> is called and the transaction rolls back for the first time.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndCommit">
      <MemberSignature Language="C#" Value="public void EndCommit (IAsyncResult asyncResult);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndCommit(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndCommit (asyncResult As IAsyncResult)" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndCommit(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C#" Value="public void EndCommit (IAsyncResult ar);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndCommit(class System.IAsyncResult ar) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndCommit (ar As IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndCommit(IAsyncResult ^ ar);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndCommit : IAsyncResult -&gt; unit" Usage="committableTransaction.EndCommit asyncResult" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="F#" Value="member this.EndCommit : IAsyncResult -&gt; unit" Usage="committableTransaction.EndCommit ar" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0" />
        <Parameter Name="ar" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="64613-167">非同期のコミットに関連付けられた <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="64613-167">The <see cref="T:System.IAsyncResult" /> object associated with the asynchronous commitment.</span></span></param>
        <param name="ar"><span data-ttu-id="64613-168">非同期のコミットに関連付けられた <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="64613-168">The <see cref="T:System.IAsyncResult" /> object associated with the asynchronous commitment.</span></span></param>
        <summary><span data-ttu-id="64613-169">非同期的にトランザクションをコミットする試みを終了します。</span><span class="sxs-lookup"><span data-stu-id="64613-169">Ends an attempt to commit the transaction asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64613-170">パラメーターとして指定されたコールバックのデリゲートでこのメソッドを呼び出す必要があります、<xref:System.Transactions.CommittableTransaction.BeginCommit%2A>メソッドは、非同期のコミットに関連付けられている任意のクリーンアップ作業を完了するとします。</span><span class="sxs-lookup"><span data-stu-id="64613-170">You should call this method in the callback delegate specified as a parameter to the <xref:System.Transactions.CommittableTransaction.BeginCommit%2A> method, when you have finished any cleanup work associated with the asynchronous commitment.</span></span> <span data-ttu-id="64613-171">デリゲートを待たずに早い段階もこのメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="64613-171">You can also call this method early without waiting for the delegate.</span></span> <span data-ttu-id="64613-172">このメソッドを呼び出すまで、トランザクションが完了していない場合は、このメソッドはその完了を待機します。</span><span class="sxs-lookup"><span data-stu-id="64613-172">If, by the time you call this method, the transaction has not completed, this method waits for its completion.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="64613-173"><xref:System.IAsyncResult.CompletedSynchronously%2A>プロパティによって返された`asyncResult`は常に`false`操作が同期的に完了した場合でも、します。</span><span class="sxs-lookup"><span data-stu-id="64613-173">The <xref:System.IAsyncResult.CompletedSynchronously%2A> property returned by `asyncResult` is always `false`, even if the operation completed synchronously.</span></span>  
  
 <span data-ttu-id="64613-174"><xref:System.Transactions.CommittableTransaction.Commit%2A> <xref:System.Transactions.CommittableTransaction.EndCommit%2A>トランザクション処理の最初のフェーズが完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="64613-174"><xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete.</span></span> <span data-ttu-id="64613-175">すべてのリソース マネージャーの後に最初のフェーズが終了し、トランザクションの参加リストがトランザクションの結果を報告しました、<xref:System.Transactions.TransactionManager>は永続的ことにコミットするか、トランザクションを中止しました。</span><span class="sxs-lookup"><span data-stu-id="64613-175">The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction.</span></span> <span data-ttu-id="64613-176">2 番目のフェーズの処理は常に非同期です。</span><span class="sxs-lookup"><span data-stu-id="64613-176">The second phase of processing is always asynchronous.</span></span> <span data-ttu-id="64613-177">そのためから特定のトランザクション内でコミットされたばかりのデータはすぐに使用できる後でこのデータを表示する別のトランザクションを使用していないときに保証することはありません。</span><span class="sxs-lookup"><span data-stu-id="64613-177">Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionAbortedException"><span data-ttu-id="64613-178"><see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> が呼び出され、トランザクションが初めてロールバックされます。</span><span class="sxs-lookup"><span data-stu-id="64613-178"><see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> is called and the transaction rolls back for the first time.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncState">
      <MemberSignature Language="C#" Value="object System.IAsyncResult.AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.IAsyncResult.AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncState As Object Implements IAsyncResult.AsyncState" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::IAsyncResult::AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64613-179"><see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> メソッド呼び出しの最後のパラメーターに指定されたオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="64613-179">Gets the object provided as the last parameter of the <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> method call.</span></span></summary>
        <value><span data-ttu-id="64613-180"><see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> メソッド呼び出しの最後のパラメーターに指定されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="64613-180">The object provided as the last parameter of the <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> method call.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System::IAsyncResult::AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64613-181">非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="64613-181">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></summary>
        <value><span data-ttu-id="64613-182">非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="64613-182">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System::IAsyncResult::CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64613-183">非同期のコミット操作が同期的に完了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="64613-183">Gets an indication of whether the asynchronous commit operation completed synchronously.</span></span></summary>
        <value><span data-ttu-id="64613-184">非同期のコミット操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="64613-184"><see langword="true" /> if the asynchronous commit operation completed synchronously; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="64613-185">このプロパティは、操作が同期的に完了した場合でも、常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="64613-185">This property always returns <see langword="false" /> even if the operation completed synchronously.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.IsCompleted">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsCompleted As Boolean Implements IAsyncResult.IsCompleted" />
      <MemberSignature Language="C++ CLI" Value="property bool System::IAsyncResult::IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64613-186">非同期のコミット操作が完了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="64613-186">Gets an indication whether the asynchronous commit operation has completed.</span></span></summary>
        <value><span data-ttu-id="64613-187">操作が完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="64613-187"><see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>