<Type Name="DependentTransaction" FullName="System.Transactions.DependentTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4166ba671801fa4151f470ff0f011cba3bbc0f8d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30526736" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependentTransaction : System.Transactions.Transaction, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DependentTransaction extends System.Transactions.Transaction implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.DependentTransaction" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependentTransaction&#xA;Inherits Transaction&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependentTransaction sealed : System::Transactions::Transaction, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Transactions.Transaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="385cb-101">トランザクションの作業に関してアプリケーションが停止するまで、トランザクションをコミットできないようにする、トランザクションの複製を記述します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="385cb-101">Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction.</span>
      </span>
      <span data-ttu-id="385cb-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="385cb-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385cb-103"><xref:System.Transactions.DependentTransaction>のクローンである、<xref:System.Transactions.Transaction>を使用して作成されたオブジェクト、<xref:System.Transactions.Transaction.DependentClone%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="385cb-103">The <xref:System.Transactions.DependentTransaction> is a clone of a <xref:System.Transactions.Transaction> object created using the <xref:System.Transactions.Transaction.DependentClone%2A> method.</span></span>  <span data-ttu-id="385cb-104">その唯一の目的では、アプリケーションを置くし、(たとえば、ワーカー スレッド) 上でトランザクションの作業が実行されているときにトランザクションをコミットできないことを保証するものを使用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="385cb-104">Its sole purpose is to allow the application to come to rest and guarantee that the transaction cannot commit while work is still being performed on the transaction (for example, on a worker thread).</span></span>  
  
 <span data-ttu-id="385cb-105">使用して、トランザクションの作成者を通知できますが、複製されたトランザクション内で行われる処理を最後に完了してコミットする準備、<xref:System.Transactions.DependentTransaction.Complete%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="385cb-105">When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <xref:System.Transactions.DependentTransaction.Complete%2A> method.</span></span> <span data-ttu-id="385cb-106">したがって、整合性とデータの正確性を保持できます。</span><span class="sxs-lookup"><span data-stu-id="385cb-106">Thus you can preserve the consistency and correctness of data.</span></span>  
  
 <span data-ttu-id="385cb-107"><xref:System.Transactions.DependentCloneOption>コミット時に動作を決定する列挙を使用します。</span><span class="sxs-lookup"><span data-stu-id="385cb-107">The <xref:System.Transactions.DependentCloneOption> enumeration is used to determine the behavior on commit.</span></span>  <span data-ttu-id="385cb-108">この動作の制御には、アプリケーションを停止できるだけでなく、同時実行のサポートができます。</span><span class="sxs-lookup"><span data-stu-id="385cb-108">This behavior control allows an application to come to rest, as well as provides concurrency support.</span></span> <span data-ttu-id="385cb-109">この列挙体の使用方法の詳細については、次を参照してください。 [DependentTransaction で同時実行を管理する](http://msdn.microsoft.com/library/bdad8468-2a90-4b81-8375-278067120cab)です。</span><span class="sxs-lookup"><span data-stu-id="385cb-109">For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/library/bdad8468-2a90-4b81-8375-278067120cab).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="385cb-110">次の例では、依存するトランザクションを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="385cb-110">The following example shows you how to create a dependent transaction.</span></span>  
  
 [!code-csharp[Tx_DependentTx#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_dependenttx/cs/dependenttx.cs#1)]
 [!code-vb[Tx_DependentTx#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_dependenttx/vb/dependenttx.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="385cb-111">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="385cb-111">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.DependentTransaction.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="385cb-112">依存トランザクションの完了を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="385cb-112">Attempts to complete the dependent transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="385cb-113">依存の複製が、作業を完了したことをトランザクションをコミットする場合は、親は準備ができても、トランザクションの作成者を通知する場合は、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="385cb-113">Call this method when the dependent clone wants to inform the creator of the transaction that it has finished its work, and the transaction can be committed if the parent is also ready.</span></span>  
  
 <span data-ttu-id="385cb-114">この呼び出しを呼び出した後、トランザクションの追加作業がしないでまたは、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="385cb-114">After this call is invoked, you should not attempt any additional work on the transaction, or an exception is thrown.</span></span>  
  
 <span data-ttu-id="385cb-115">後に、アプリケーション ドメインがダウンした場合は、このメソッドが呼び出されますとトランザクションを完了する前にトランザクションが中止可能性があります。</span><span class="sxs-lookup"><span data-stu-id="385cb-115">If the application domain goes down after this method is called, and before the transaction is completed, the transaction might abort.</span></span>  
  
 <span data-ttu-id="385cb-116">**注**このメソッドは、依存するトランザクションの有効期間中に 1 回だけ呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="385cb-116">**Note** This method should be called only once during the dependent transaction's lifetime.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionException">
          <span data-ttu-id="385cb-117">このメソッドが呼び出された後の、トランザクションへの追加作業の試み。</span>
          <span class="sxs-lookup">
            <span data-stu-id="385cb-117">Any attempt for additional work on the transaction after this method is called.</span>
          </span>
          <span data-ttu-id="385cb-118">これらには、<see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />、<see cref="Overload:System.Transactions.Transaction.EnlistDurable" />、<see cref="M:System.Transactions.Transaction.Clone" />、<see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" />、またはトランザクション上の任意のシリアル化操作などの、メソッドの呼び出しが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="385cb-118">These include invoking methods such as <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />, <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />, <see cref="M:System.Transactions.Transaction.Clone" />, <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> , or any serialization operations on the transaction.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.DependentTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>