<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TransactionScope.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5867d154cb09fe9a3f2d65475772ad0363add7e98.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">867d154cb09fe9a3f2d65475772ad0363add7e98</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>Makes a code block transactional.</source>
          <target state="translated">コード ブロックをトランザクションにします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> infrastructure provides both an explicit programming model based on the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class, as well as an implicit programming model using the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, in which transactions are automatically managed by the infrastructure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions&gt;</ph>インフラストラクチャでは明示的なプログラミング モデルに基づく、<ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph>クラスだけでなく、暗黙的なプログラミング モデルを使用して、<ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph>トランザクションを自動的にインフラストラクチャを管理するクラス。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>We recommend that you create implicit transactions using the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">使用して暗黙のトランザクションを作成することをお勧め、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>クラスのアンビエント トランザクションのコンテキストが自動的に管理できるようにします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>You should also use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">使用する必要も、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>と<ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph>複数の関数呼び出しまたは複数のスレッド呼び出しの間で同じトランザクションの使用を必要とするアプリケーションのクラスです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">このモデルの詳細については、次を参照してください。、<bpt id="p1">[</bpt>を実装する、暗黙的なトランザクションを使用してトランザクション スコープ<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on writing a transactional application, see <bpt id="p1">[</bpt>Writing A Transactional Application<ept id="p1">](~/docs/framework/data/transactions/writing-a-transactional-application.md)</ept>.</source>
          <target state="translated">トランザクション アプリケーションの作成の詳細については、次を参照してください。 <bpt id="p1">[</bpt>A トランザクション アプリケーションの記述<ept id="p1">](~/docs/framework/data/transactions/writing-a-transactional-application.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Upon instantiating a <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> by the <ph id="ph2">`new`</ph> statement, the transaction manager determines which transaction to participate in.</source>
          <target state="translated">インスタンス化時に、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>によって、<ph id="ph2">`new`</ph>ステートメントでは、トランザクション マネージャーは、どのトランザクションに参加するを決定します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Once determined, the scope always participates in that transaction.</source>
          <target state="translated">いったん決定されると、このスコープは常にそのトランザクションに参加します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The decision is based on two factors: whether an ambient transaction is present and the value of the <ph id="ph1">`TransactionScopeOption`</ph> parameter in the constructor.</source>
          <target state="translated">この決定は 2 つの要因に基づいて行われます。1 つはアンビエント トランザクションが存在するかどうか、もう 1 つはコンストラクターの <ph id="ph1">`TransactionScopeOption`</ph> パラメーターの値です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The ambient transaction is the transaction your code executes in.</source>
          <target state="translated">アンビエント トランザクションで、コードが実行されるトランザクションです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>You can obtain a reference to the ambient transaction by calling the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> クラスの静的 <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> プロパティを呼び出すことによってアンビエント トランザクションへの参照を取得できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on how this parameter is used, see the "Transaction Flow Management" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">このパラメーターの使用方法の詳細については、の「トランザクション フローの管理」セクションを参照して、<bpt id="p1">[</bpt>を実装する、暗黙的なトランザクションを使用してトランザクション スコープ<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If no exception occurs within the transaction scope (that is, between the initialization of the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object and the calling of its <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method), then the transaction in which the scope participates is allowed to proceed.</source>
          <target state="translated">トランザクション スコープ内で例外が発生しない場合 (つまりの初期化の間、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>オブジェクトと、呼び出し元の<ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph>メソッド)、スコープが参加しているトランザクションの実行を許可し、します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If an exception does occur within the transaction scope, the transaction in which it participates will be rolled back.</source>
          <target state="translated">トランザクション スコープ内で例外が発生、参加しているトランザクションはロールバックされます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>When your application completes all work it wants to perform in a transaction, you should call the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method only once to inform that transaction manager that it is acceptable to commit the transaction.</source>
          <target state="translated">アプリケーションには、すべての作業が完了すると、トランザクションで実行する、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph>トランザクション マネージャーがトランザクションをコミットする許容であることを通知するために、メソッドを 1 回だけです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Failing to call this method aborts the transaction.</source>
          <target state="translated">このメソッドの呼び出しに失敗すると、トランザクションが中止されます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>A call to the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method marks the end of the transaction scope.</source>
          <target state="translated">呼び出し、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph>メソッドは、トランザクション スコープの終了を示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
          <target state="translated">このメソッドの呼び出し後に発生した例外は、トランザクションに影響しない場合があります。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If you modify the value of <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> inside a scope, an exception is thrown when <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> is called.</source>
          <target state="translated">値を変更する場合<ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph>、スコープ内で、例外がスロー<ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>However, at the end of the scope, the previous value is restored.</source>
          <target state="translated">ただし、スコープの最後に、前の値に戻されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>In addition, if you call <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> on <ph id="ph2">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> inside a transaction scope that created the transaction, the transaction aborts at the end of the scope.</source>
          <target state="translated">さらに、呼び出した場合<ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph>で<ph id="ph2">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph>スコープの最後に、トランザクションを作成したトランザクション スコープ内部トランザクションが中止されました。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>をトランザクションに参加するためのコードのブロックを定義するクラス。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>This constructor creates a new transaction scope with the transaction scope option equal to <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption.Required&gt;</ph>.</source>
          <target state="translated">このコンス トラクターを作成新しいトランザクション スコープのトランザクション スコープのオプションと等しい<ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption.Required&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>This means that a transaction is required by the new scope and the ambient transaction is used if one already exists.</source>
          <target state="translated">つまり、新しいスコープでトランザクションが必要な 1 つが既に存在する場合、そのアンビエント トランザクションが使用します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>Otherwise, it creates a new transaction before entering the scope.</source>
          <target state="translated">トランザクションが存在しない場合は、スコープに入る前に新しいトランザクションが作成されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを初期化し、指定したトランザクションをアンビエント トランザクションとして設定します。これによって、スコープ内で実行されるトランザクション作業でこのトランザクションが使用されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">スコープ内で実行されるトランザクション作業でこのトランザクションが使用されるように、アンビエント トランザクションとして設定するトランザクション。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> 列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[.NET Framework 4.5.1 以降のバージョンでサポート]</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを初期化し、指定したトランザクションをアンビエント トランザクションとして設定します。これによって、スコープ内で実行されるトランザクション作業でこのトランザクションが使用されます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[.NET Framework 4.5.1 以降のバージョンでサポート]</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified asynchronous flow option.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを、非同期フロー オプションを使用して初期化します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements.</source>
          <target state="translated">要件を指定して、<ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">スコープ内で実行されるトランザクション作業でこのトランザクションが使用されるように、アンビエント トランザクションとして設定するトランザクション。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> after which the transaction scope times out and aborts the transaction.</source>
          <target state="translated">トランザクション スコープがタイムアウトしてトランザクションが中止されるまでの <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> 列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[.NET Framework 4.5.1 以降のバージョンでサポート]</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">タイムアウト値を指定して <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを初期化し、指定したトランザクションをアンビエント トランザクションとして設定します。これによって、スコープ内で実行されるトランザクション作業でこのトランザクションが使用されます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">このトランザクション スコープに関連付けられているトランザクション要件を示す <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> 列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> structure that describes the transaction options to use if a new transaction is created.</source>
          <target state="translated">新しいトランザクションが作成された場合に使用するトランザクション オプションを示す <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.</source>
          <target state="translated">既存のトランザクションを使用する場合は、このパラメーターのタイムアウト値がトランザクション スコープに適用されます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>If that time expires before the scope is disposed, the transaction is aborted.</source>
          <target state="translated">スコープを破棄する前にその時間が経過してしまうと、トランザクションは中止されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">タスク、async と、await .NET プログラミングを使用するときに、トランザクションのスコープに関連付けられたアンビエント トランザクションがスレッドの継続でフローするかどうかを表す <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> 列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[.NET Framework 4.5.1 以降のバージョンでサポート]</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements and asynchronous flow option.</source>
          <target state="translated">タイムアウト値と要件、非同期フロー オプションを指定して、<ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">このトランザクション スコープに関連付けられているトランザクション要件を示す <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> 列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements.</source>
          <target state="translated">要件を指定して、<ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>When you use the <ph id="ph1">`transactionOptions`</ph> parameter to specify an <ph id="ph2">&lt;xref:System.Transactions.IsolationLevel&gt;</ph>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level.</source>
          <target state="translated">使用する場合、<ph id="ph1">`transactionOptions`</ph>パラメーターを指定、<ph id="ph2">&lt;xref:System.Transactions.IsolationLevel&gt;</ph>スコープ後でトランザクションを作成して、新しいトランザクションが、指定された分離レベルに関連付けられています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.</source>
          <target state="translated">分離レベルがトランザクションと共に渡された場合は、トランザクションは、同じ分離レベルが必要または、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Complete">
          <source>Indicates that all operations within the scope are completed successfully.</source>
          <target state="translated">スコープ内のすべての操作が正常に完了したことを示します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>When you are satisfied that all operations within the scope are completed successfully, you should call this method only once to inform that transaction manager that the state across all resources is consistent, and the transaction can be committed.</source>
          <target state="translated">問題がなければ、スコープ内のすべての操作が正常に完了した、すべてのリソースの状態に一貫性があり、トランザクションをコミットすることは、そのトランザクション マネージャーを通知するために 1 回だけ、このメソッドを呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>It is very good practice to put the call as the last statement in the <ph id="ph1">`using`</ph> block.</source>
          <target state="translated">最後のステートメントとして呼び出しを配置することを非常に良好である、<ph id="ph1">`using`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>For more information on how this method is used, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">このメソッドの使用方法の詳細については、次を参照してください。、<bpt id="p1">[</bpt>を実装する、暗黙的なトランザクションを使用してトランザクション スコープ<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or exceptions thrown within the scope of transaction.</source>
          <target state="translated">このメソッドの呼び出しに失敗すると、トランザクション マネージャー、システム障害として解釈するため、またはトランザクションのスコープ内でスローされる例外に、トランザクションが中止します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>However, you should also note that calling this method does not guarantee a commit of the transaction.</source>
          <target state="translated">ただし、このメソッドを呼び出すことも、トランザクションのコミットは保証されませんを注意する必要があります。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>It is merely a way of informing the transaction manager of your status.</source>
          <target state="translated">これはトランザクション マネージャーにステータスを通知する手段にすぎません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>After calling this method, you can no longer access the ambient transaction via the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property, and trying to do so results in an exception being thrown.</source>
          <target state="translated">このメソッドを呼び出した後、アクセスできなくなります経由でのアンビエント トランザクション、<ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph>プロパティ、および例外がスローされるは結果を実行しようとします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>The actual work of commit between the resources manager happens at the <ph id="ph1">`End Using`</ph> statement if the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object created the transaction.</source>
          <target state="translated">リソース マネージャー間のコミットの実際の作業のように、<ph id="ph1">`End Using`</ph>ステートメント場合、<ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph>オブジェクトは、トランザクションを作成します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>If it did not create the transaction, the commit occurs whenever <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> is called by the owner of the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object.</source>
          <target state="translated">このオブジェクトによってトランザクションが作成されていない場合、<ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> オブジェクトの所有者によって <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> が呼び出されるたびにコミットが発生します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object.</source>
          <target state="translated">その時点でトランザクション マネージャーのリソース マネージャーを呼び出してし、commit または rollback をでこのメソッドが呼び出されたかどうかに基づいてのいずれかを知らせる、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>をトランザクションに参加するためのコードのブロックを定義するクラス。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Complete">
          <source>This method has already been called once.</source>
          <target state="translated">このメソッドは、既に一度呼び出されています。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Ends the transaction scope.</source>
          <target state="translated">トランザクション スコープを終了します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Calling this method marks the end of the transaction scope.</source>
          <target state="translated">このメソッドを呼び出すと、トランザクション スコープの末尾をマークします。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>If the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object created the transaction and <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> was called on the scope, the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object attempts to commit the transaction when this method is called.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>オブジェクトは、トランザクションを作成し、 <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> 、スコープで呼び出されましたが、<ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph>オブジェクトが、このメソッドが呼び出されたときに、トランザクションをコミットしようとしています。 します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The use of the C# <ph id="ph1">`using`</ph> construction ensures that this method is called even if an exception occurs.</source>
          <target state="translated">C# を使用して<ph id="ph1">`using`</ph>構築により、例外が発生した場合でもこのメソッドを呼び出すことです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
          <target state="translated">このメソッドの呼び出し後に発生した例外は、トランザクションに影響しない場合があります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This method also restores the ambient transaction to it original state.</source>
          <target state="translated">このメソッドも、アンビエント トランザクションを元の状態を復元します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.TransactionAbortedException&gt;</ph> is thrown if the transaction is not actually committed.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Transactions.TransactionAbortedException&gt;</ph>が、トランザクションが実際にコミットされていない場合にスローされます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This method is synchronous and blocks until the transaction has been committed or aborted.</source>
          <target state="translated">このメソッドは、同期トランザクションをコミットまたは中止するまでブロックします。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Because of this, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">このため、Windows フォーム (WinForm) のアプリケーションでこのメソッドを使用する場合に非常に注意が必要またはデッドロックが発生することができます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">(たとえば、ボタンをクリックすると)、1 つの WinForm コントロール イベント内でこのメソッドを呼び出すし、同期を使用する場合<ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>デッドロックが発生するトランザクションの処理中のいくつかの UI タスク (たとえば、変化する色) を実行するコントロールを送信するためのメソッドです。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This is because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">これは、ため、<ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>メソッドは同期であり、UI スレッドには、そのジョブが完了するまで、ワーカー スレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">ただし、このシナリオでは、UI スレッドも待機しているワーカー スレッドがトランザクションをコミットします。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">結果とは、[なし] を続行できませんされ、スコープは、コミットの終了を無期限に待機です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">使用する必要があります<ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>なく<ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>可能な限り、非同期、したがってにくくなりました。 デッドロックになっているためです。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>For more information on how this method is used, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">このメソッドの使用方法の詳細については、次を参照してください。、<bpt id="p1">[</bpt>を実装する、暗黙的なトランザクションを使用してトランザクション スコープ<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>をトランザクションに参加するためのコードのブロックを定義するクラス。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>