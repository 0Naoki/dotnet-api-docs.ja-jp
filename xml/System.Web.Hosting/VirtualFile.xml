<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1dc1490a7df51d445efca113976396a3d0fc7cb5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69138785" /></Metadata><TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <TypeSignature Language="F#" Value="type VirtualFile = class&#xA;    inherit VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>仮想ファイルまたはリソース領域のファイル オブジェクトを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile>クラスは、仮想ファイルシステム内のファイルを表すオブジェクトの基本クラスです。 通常は、Web アプリケーション内の各<xref:System.Web.Hosting.VirtualFile> <xref:System.Web.Hosting.VirtualPathProvider>オブジェクトの子孫に対して、クラスの子孫を実装します。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.Hosting.VirtualFile> <xref:System.Data.DataSet>オブジェクトに格納されている情報とテンプレートファイルを組み合わせて HTML データを返すクラスの実装です。 このコード例では、クラス<xref:System.Web.Hosting.VirtualPathProvider>と<xref:System.Web.Hosting.VirtualDirectory>クラスのコード例を使用して、 <xref:System.Data.DataSet>オブジェクトに読み込まれるデータストアから仮想リソースを提供します。 例をコンパイルして実行するための完全な手順については、 <xref:System.Web.Hosting.VirtualPathProvider>クラスの概要の「例」セクションを参照してください。  
  
 この例には、クラスの<xref:System.Web.Hosting.VirtualFile>実装、オブジェクトの<xref:System.Data.DataSet>設定に使用される XML データファイル、およびページテンプレートファイルの3つの部分があります。  
  
 最初のコード例は、 <xref:System.Web.Hosting.VirtualFile>クラスの実装です。 そのコンストラクターは、カスタム<xref:System.Web.Hosting.VirtualPathProvider>オブジェクトのメソッドを使用してオブジェクトを<xref:System.Data.DataSet>返します。 次に、 <xref:System.Data.DataSet>オブジェクトを検索して、指定された仮想ファイルパスに関連付けられている情報を取得します。 メソッドでは、 <xref:System.Data.DataSet>オブジェクトの情報をテンプレートファイルと結合し、その組み合わせを<xref:System.IO.Stream>オブジェクトとして返します。 <xref:System.Web.Hosting.VirtualFile.Open%2A>  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 2番目の例は、カスタム<xref:System.Data.DataSet> <xref:System.Web.Hosting.VirtualPathProvider>オブジェクトによって返されるオブジェクトを設定するために使用される XML データファイルです。 この XML データは、、、および<xref:System.Web.Hosting.VirtualPathProvider> <xref:System.Web.Hosting.VirtualDirectory>の各<xref:System.Web.Hosting.VirtualFile>クラスを使用して外部データからデータを取得する方法を示すために使用されます。これは、実稼働品質のデータストアを表すためのものではありません。  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 3番目の例は、仮想ファイルのテンプレートとして使用されるテキストファイルです。 ファイル内のプレースホルダーは、テキストでパーセント (%) で表されますマーク ( `%file%`や`%content%`など)。 キャッシュされた仮想ファイルデータへの変更を監視するには、タイムスタンプを使用します。  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><see cref="T:System.Web.Hosting.VirtualFile" />クラスから継承する場合は、メソッドを<see cref="M:System.Web.Hosting.VirtualFile.Open" />オーバーライドして、仮想リソースのコンテンツに読み取り専用ストリームを返す必要があります。</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="new System.Web.Hosting.VirtualFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="new System.Web.Hosting.VirtualFile virtualPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">このインスタンスによって表されるリソースへの仮想パス。</param>
        <summary><see cref="T:System.Web.Hosting.VirtualFile" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、カスタム<xref:System.Web.Hosting.VirtualFile.%23ctor%2A> <xref:System.Web.Hosting.VirtualPathProvider>オブジェクトによって提供される<xref:System.Data.DataSet>オブジェクトから仮想ファイル情報を取得するコンストラクターの実装です。 例を実行するために必要な完全なコードについては、 <xref:System.Web.Hosting.VirtualFile>クラスの概要の「例」セクションを参照してください。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirectory : bool" Usage="System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイルとして扱う必要がある仮想リソースであることを示す値を取得します。</summary>
        <value>常に <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberSignature Language="F#" Value="abstract member Open : unit -&gt; System.IO.Stream" Usage="virtualFile.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合、仮想リソースへの読み取り専用のストリームを返します。</summary>
        <returns>仮想ファイルへの読み取り専用のストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Web.Hosting.VirtualFile.Open%2A>は、 <xref:System.Web.Hosting.VirtualPathProvider>クラスによってファイルとして扱われるデータを含むストリームを返します。 ストリームは読み取り専用で、シーク可能です ( <xref:System.IO.Stream.CanSeek%2A>プロパティは true)。  
  
   
  
## Examples  
 次のコード例は、仮想ファイル固有<xref:System.Web.Hosting.VirtualFile.Open%2A>の情報をテンプレートファイルと結合し、その組み合わせを返すメソッドを実装したものです。 テンプレートファイルは、テンプレートファイルを取得するためにファイルシステムを複数回読み取るオーバーヘッドを減らすためにキャッシュされます。 例を実行するために必要な完全なコードについては、 <xref:System.Web.Hosting.VirtualFile>クラスの概要の「例」セクションを参照してください。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスでは<see cref="M:System.Web.Hosting.VirtualFile.Open" /> 、メソッドはシーク可能なストリームを返す必要があります。 メソッドがシークをサポートしていないストリームを返す場合<see cref="T:System.NotSupportedException" /> 、データを書き込むためにストリームが<see cref="T:System.Web.HttpResponse" />オブジェクトに渡されると、がスローされます。 この例外は、応答によってプロパティが<see cref="P:System.IO.Stream.Length" />読み取られ、シークできないストリームでプロパティにアクセスしようとすると例外が発生するために発生します。 詳細については、<see cref="P:System.IO.Stream.CanSeek" /> プロパティを参照してください。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
