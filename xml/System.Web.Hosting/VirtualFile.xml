<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33f9791a60e614665696afca84d9f5d1942faacc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30540056" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>仮想ファイルまたはリソース領域のファイル オブジェクトを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile>クラスは仮想ファイル システム内のファイルを表すオブジェクトの基本クラスです。 通常、実装するの子孫、<xref:System.Web.Hosting.VirtualFile>ごとクラス<xref:System.Web.Hosting.VirtualPathProvider>Web アプリケーションで子孫オブジェクト。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.Hosting.VirtualFile>に格納された情報を結合するクラスの実装、<xref:System.Data.DataSet>オブジェクトを HTML のデータを返すテンプレート ファイルを使用します。 このコード例のコード例で動作、<xref:System.Web.Hosting.VirtualPathProvider>と<xref:System.Web.Hosting.VirtualDirectory>に、データからの仮想リソース ストアが提供するクラスが読み込まれる、<xref:System.Data.DataSet>オブジェクト。 コンパイルして、例を実行するための手順の例」のセクションを参照してください、<xref:System.Web.Hosting.VirtualPathProvider>クラスの概要です。  
  
 この例は、3 つの部分を:<xref:System.Web.Hosting.VirtualFile>クラスの実装、設定に使用する XML データ ファイル、<xref:System.Data.DataSet>オブジェクト、およびページ テンプレート ファイル。  
  
 最初のコード例は、実装の<xref:System.Web.Hosting.VirtualFile>クラスです。 コンス トラクターは、カスタム メソッドを使用して<xref:System.Web.Hosting.VirtualPathProvider>オブジェクトを返す、<xref:System.Data.DataSet>オブジェクト。 検索、<xref:System.Data.DataSet>仮想ファイル パスを指定に関連する情報を取得するオブジェクト。 <xref:System.Web.Hosting.VirtualFile.Open%2A>メソッドからの情報を組み合わせて、<xref:System.Data.DataSet>テンプレート ファイルを持つオブジェクトとしての組み合わせを返しますと、<xref:System.IO.Stream>オブジェクト。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 2 番目の例は、XML データ ファイルの作成に使用する、<xref:System.Data.DataSet>カスタムによって返されるオブジェクト<xref:System.Web.Hosting.VirtualPathProvider>オブジェクト。 この XML データは、使用方法を示すために使用、 <xref:System.Web.Hosting.VirtualPathProvider>、 <xref:System.Web.Hosting.VirtualFile>、および<xref:System.Web.Hosting.VirtualDirectory>クラスの外部のデータからデータを取得して、実稼働品質データ ストアを表すものではありません。  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 3 番目の例は、仮想ファイルのテンプレートとして使用するテキスト ファイルです。 など、ファイル内のプレース ホルダーをパーセント (%) 記号の間のテキストで表される`%file%`と`%content%`です。 タイムスタンプは、仮想ファイルのキャッシュされたデータへの変更の監視に使用されます。  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>継承する場合、<see cref="T:System.Web.Hosting.VirtualFile" />オーバーライドする必要があります、クラス、<see cref="M:System.Web.Hosting.VirtualFile.Open" />仮想リソースの内容に対して読み取り専用ストリームを返すメソッド。</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">このインスタンスによって表されるリソースへの仮想パス。</param>
        <summary>
          <see cref="T:System.Web.Hosting.VirtualFile" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、実装の<xref:System.Web.Hosting.VirtualFile.%23ctor%2A>から仮想ファイルの情報を取得するコンス トラクター、<xref:System.Data.DataSet>カスタムによって提供されるオブジェクト<xref:System.Web.Hosting.VirtualPathProvider>オブジェクト。 例を実行するために必要な完全なコードのセクションの例を参照してください、<xref:System.Web.Hosting.VirtualFile>クラスの概要です。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイルとして扱う必要がある仮想リソースであることを示す値を取得します。</summary>
        <value>常に <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合、仮想リソースへの読み取り専用のストリームを返します。</summary>
        <returns>仮想ファイルへの読み取り専用のストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile.Open%2A>メソッドごとにファイルとして扱われるデータを含むストリームを返します、<xref:System.Web.Hosting.VirtualPathProvider>クラスです。 ストリームは読み取り専用とシーク可能では (、<xref:System.IO.Stream.CanSeek%2A>プロパティが true)。  
  
   
  
## Examples  
 次のコード例は、実装の<xref:System.Web.Hosting.VirtualFile.Open%2A>メソッド テンプレート ファイルを使用して仮想ファイルに固有の情報に結合し、組み合わせを返します。 テンプレート ファイルは、テンプレート ファイルを取得するファイル システムの読み取りが複数回のオーバーヘッドが低減キャッシュされます。 例を実行するために必要な完全なコードのセクションの例を参照してください、<xref:System.Web.Hosting.VirtualFile>クラスの概要です。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで、<see cref="M:System.Web.Hosting.VirtualFile.Open" />メソッドは、シーク可能ストリームを返す必要があります。 メソッドは、シークをサポートしていないストリームを返す場合、<see cref="T:System.NotSupportedException" />にストリームが渡される場合にスローされる、<see cref="T:System.Web.HttpResponse" />データを書き込むオブジェクト。 応答を読み取るしようとするために、例外が発生した、<see cref="P:System.IO.Stream.Length" />プロパティ、シーク可能ではないストリームで、プロパティにアクセスしようとして例外が発生します。 詳細については、<see cref="P:System.IO.Stream.CanSeek" /> プロパティを参照してください。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>