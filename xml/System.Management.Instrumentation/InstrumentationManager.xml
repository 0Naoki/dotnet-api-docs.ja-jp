<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57c8f02f177566e76601df0b5d3378d1209f62ea" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30425906" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a6db6-101">分離プロバイダーで使用される有効期間とモデルを管理するメソッドを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a6db6-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span>
      </span>
      <span data-ttu-id="a6db6-102">注: WMI .NET ライブラリは最終的な状態と見なされます。これらのライブラリに影響を与えるセキュリティ以外に関連する問題については、さらなる開発、機能拡張、または更新は利用できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a6db6-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span>
      </span>
      <span data-ttu-id="a6db6-103">[MI API](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) は新しい開発すべてに使用する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a6db6-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6db6-104">分離プロバイダーは、アプリケーションによってホストされます。</span><span class="sxs-lookup"><span data-stu-id="a6db6-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="a6db6-105">2 つのメソッドは、WMI クラスのインスタンスを使用できるようにするアプリケーションで使用できます。 発行または取り消すか、コールバック メソッド。</span><span class="sxs-lookup"><span data-stu-id="a6db6-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="a6db6-106">コールバック メソッドを使用して、<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>と<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a6db6-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="a6db6-107">発行または取り消すモデルでは、WMI インフラストラクチャは、多くのコールバック メソッドで自分で作成する必要があるメソッドの既定の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="a6db6-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="a6db6-108">これらは、列挙体を含めるし、メソッドをバインドします。</span><span class="sxs-lookup"><span data-stu-id="a6db6-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="a6db6-109">このモデルでは、アプリケーションは、インスタンスを作成し、それらを公開します。</span><span class="sxs-lookup"><span data-stu-id="a6db6-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="a6db6-110">このアプリケーションは、クラスのキー プロパティが守られていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="a6db6-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="a6db6-111">アプリケーションは、インスタンスを削除する役割もできます。</span><span class="sxs-lookup"><span data-stu-id="a6db6-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="a6db6-112">コールバック モデルでは、WMI インフラストラクチャには、列挙型、バインディング、およびプロバイダーの機能を実装するために必要なその他のメソッドを処理するメソッドをアプリケーションが期待しています。</span><span class="sxs-lookup"><span data-stu-id="a6db6-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="a6db6-113">この機能のため、アプリケーションを呼び出すし、それが存在しないか、正しく実装されていない場合は失敗します。</span><span class="sxs-lookup"><span data-stu-id="a6db6-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="a6db6-114">アプリケーション インフラストラクチャを呼び出すことによってその WMI クラスの種類を登録する<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>を示し、呼び出すことによって公開される WMI クラスが不要になった必要である<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a6db6-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6db6-115">次の例では、発行または取り消すモデルを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a6db6-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="a6db6-116">ルーター クラスの 2 つのインスタンスが作成および公開します。</span><span class="sxs-lookup"><span data-stu-id="a6db6-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="a6db6-117">これらは後で取り消されます。</span><span class="sxs-lookup"><span data-stu-id="a6db6-117">They are later revoked.</span></span>  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 <span data-ttu-id="a6db6-118">次の例では、登録のコールバック メソッドを使用して、RouterNew クラスを公開します。</span><span class="sxs-lookup"><span data-stu-id="a6db6-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a6db6-119">公開するプロバイダーを実装するクラスのインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-119">An instance of the class that implements the provider to publish.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6db6-120">WMI インフラストラクチャ内で使用可能なプロバイダーのインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-120">Makes an instance of a provider available within the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">
          <span data-ttu-id="a6db6-121">登録するアセンブリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-121">The assembly to register.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6db6-122">アセンブリを WMI インフラストラクチャに登録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-122">Registers an assembly with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">
          <span data-ttu-id="a6db6-123">クラスの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-123">The type of the class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6db6-124">クラスを WMI インフラストラクチャに登録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-124">Registers a class with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a6db6-125">失効するプロバイダーを実装するクラスのインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-125">An instance of the class that implements the provider to revoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6db6-126">現在利用可能なプロバイダーのインスタンスを実行し、WMI インフラストラクチャ内で利用できなくします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-126">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">
          <span data-ttu-id="a6db6-127">登録を解除する登録済みのセンブリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-127">The registered assembly to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6db6-128">WMI インフラストラクチャに現在登録されているアセンブリの登録を解除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-128">Unregisters an assembly currently registered with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">
          <span data-ttu-id="a6db6-129">登録を解除する登録済みの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-129">The registered type to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6db6-130">WMI インフラストラクチャに登録されたクラスの登録を解除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6db6-130">Unregisters a class registered with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>