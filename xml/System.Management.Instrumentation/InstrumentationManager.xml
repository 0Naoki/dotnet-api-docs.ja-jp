<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InstrumentationManager.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac557c8f02f177566e76601df0b5d3378d1209f62ea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57c8f02f177566e76601df0b5d3378d1209f62ea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Provides methods that manage the lifetime and the model used for decoupled providers.</source>
          <target state="translated">分離プロバイダーで使用される有効期間とモデルを管理するメソッドを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</source>
          <target state="translated">注: WMI .NET ライブラリは最終的な状態と見なされます。これらのライブラリに影響を与えるセキュリティ以外に関連する問題については、さらなる開発、機能拡張、または更新は利用できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The <bpt id="p1">[</bpt>MI APIs<ept id="p1">](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx)</ept> should be used for all new development.</source>
          <target state="translated"><bpt id="p1">[</bpt>MI API<ept id="p1">](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx)</ept> は新しい開発すべてに使用する必要があります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Decoupled providers are hosted by an application.</source>
          <target state="translated">分離プロバイダーは、アプリケーションによってホストされます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</source>
          <target state="translated">2 つのメソッドは、WMI クラスのインスタンスを使用できるようにするアプリケーションで使用できます。 発行または取り消すか、コールバック メソッド。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The callback method uses the <ph id="ph1">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph> methods.</source>
          <target state="translated">コールバック メソッドを使用して、<ph id="ph1">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</source>
          <target state="translated">発行または取り消すモデルでは、WMI インフラストラクチャは、多くのコールバック メソッドで自分で作成する必要があるメソッドの既定の動作を提供します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>These include the enumeration and bind methods.</source>
          <target state="translated">これらは、列挙体を含めるし、メソッドをバインドします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>In this model, the application creates instances and publishes them.</source>
          <target state="translated">このモデルでは、アプリケーションは、インスタンスを作成し、それらを公開します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The application is responsible for ensuring that the key properties of the classes are respected.</source>
          <target state="translated">このアプリケーションは、クラスのキー プロパティが守られていることを保証します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The application is also responsible for deleting instances.</source>
          <target state="translated">アプリケーションは、インスタンスを削除する役割もできます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</source>
          <target state="translated">コールバック モデルでは、WMI インフラストラクチャには、列挙型、バインディング、およびプロバイダーの機能を実装するために必要なその他のメソッドを処理するメソッドをアプリケーションが期待しています。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</source>
          <target state="translated">この機能のため、アプリケーションを呼び出すし、それが存在しないか、正しく実装されていない場合は失敗します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The application registers the type of its WMI classes with the infrastructure by calling <ph id="ph1">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph> and indicates that it no longer wants the WMI classes exposed by calling <ph id="ph2">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph>.</source>
          <target state="translated">アプリケーション インフラストラクチャを呼び出すことによってその WMI クラスの種類を登録する<ph id="ph1">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph>を示し、呼び出すことによって公開される WMI クラスが不要になった必要である<ph id="ph2">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The following example demonstrates how to use the publish/revoke model.</source>
          <target state="translated">次の例では、発行または取り消すモデルを使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Two instances of the router class are created and published.</source>
          <target state="translated">ルーター クラスの 2 つのインスタンスが作成および公開します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>They are later revoked.</source>
          <target state="translated">これらは後で取り消されます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>In the next example, the callback method of registration is used to expose the RouterNew class.</source>
          <target state="translated">次の例では、登録のコールバック メソッドを使用して、RouterNew クラスを公開します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)">
          <source>An instance of the class that implements the provider to publish.</source>
          <target state="translated">公開するプロバイダーを実装するクラスのインスタンス。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)">
          <source>Makes an instance of a provider available within the WMI infrastructure.</source>
          <target state="translated">WMI インフラストラクチャ内で使用可能なプロバイダーのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)">
          <source>The assembly to register.</source>
          <target state="translated">登録するアセンブリ。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)">
          <source>Registers an assembly with the WMI infrastructure.</source>
          <target state="translated">アセンブリを WMI インフラストラクチャに登録します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)">
          <source>The type of the class.</source>
          <target state="translated">クラスの型。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)">
          <source>Registers a class with the WMI infrastructure.</source>
          <target state="translated">クラスを WMI インフラストラクチャに登録します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)">
          <source>An instance of the class that implements the provider to revoke.</source>
          <target state="translated">失効するプロバイダーを実装するクラスのインスタンス。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)">
          <source>Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</source>
          <target state="translated">現在利用可能なプロバイダーのインスタンスを実行し、WMI インフラストラクチャ内で利用できなくします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)">
          <source>The registered assembly to unregister.</source>
          <target state="translated">登録を解除する登録済みのセンブリ。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)">
          <source>Unregisters an assembly currently registered with the WMI infrastructure.</source>
          <target state="translated">WMI インフラストラクチャに現在登録されているアセンブリの登録を解除します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)">
          <source>The registered type to unregister.</source>
          <target state="translated">登録を解除する登録済みの型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)">
          <source>Unregisters a class registered with the WMI infrastructure.</source>
          <target state="translated">WMI インフラストラクチャに登録されたクラスの登録を解除します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>