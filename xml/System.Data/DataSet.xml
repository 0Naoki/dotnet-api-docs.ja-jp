<Type Name="DataSet" FullName="System.Data.DataSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5163c85e237deab0787c49304ed679533645c57" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67239971" /></Metadata><TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataSet" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitializeNotification, IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultProperty("DataSetName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0">
      <AttributeName>System.Xml.Serialization.XmlRoot("DataSet")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1ccb9-101">データのメモリ内キャッシュを表します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-101">Represents an in-memory cache of data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-102"><xref:System.Data.DataSet>ADO.NET のアーキテクチャの主要なコンポーネントは、これは、データ ソースから取得したデータのメモリ内キャッシュで、します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-102">The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture.</span></span> <span data-ttu-id="1ccb9-103"><xref:System.Data.DataSet>のコレクションから成る<xref:System.Data.DataTable>で互いに関連付けることができるオブジェクト<xref:System.Data.DataRelation>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-103">The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects.</span></span> <span data-ttu-id="1ccb9-104">データの整合性を適用することもできます、<xref:System.Data.DataSet>を使用して、<xref:System.Data.UniqueConstraint>と<xref:System.Data.ForeignKeyConstraint>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-104">You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects.</span></span> <span data-ttu-id="1ccb9-105">使用に関する詳細については<xref:System.Data.DataSet>、オブジェクトを参照してください[Dataset、Datatable、および Dataview](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-105">For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md).</span></span>  
  
 <span data-ttu-id="1ccb9-106">一方<xref:System.Data.DataTable>オブジェクトは、データを含む、<xref:System.Data.DataRelationCollection>がテーブルの階層構造を移動することができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-106">Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy.</span></span> <span data-ttu-id="1ccb9-107">テーブルが含まれている、<xref:System.Data.DataTableCollection>経由でアクセス、<xref:System.Data.DataSet.Tables%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-107">The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property.</span></span> <span data-ttu-id="1ccb9-108">アクセスするときに<xref:System.Data.DataTable>オブジェクトでは、条件付きで大文字小文字が区別されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-108">When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive.</span></span> <span data-ttu-id="1ccb9-109">たとえば、1 つ<xref:System.Data.DataTable>"mydatatable"という名前し"Mydatatable"という 2 つは、1 つのテーブルの検索に使用される文字列は大文字と小文字を区別見なされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-109">For example, if one <xref:System.Data.DataTable> is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</span></span> <span data-ttu-id="1ccb9-110">ただし、"mydatatable"が存在し、"Mydatatable"は、検索文字列は、大文字と小文字を区別しない見なされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-110">However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</span></span> <span data-ttu-id="1ccb9-111">操作の詳細については<xref:System.Data.DataTable>、オブジェクトを参照してください[DataTable の作成](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-111">For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).</span></span>  
  
 <span data-ttu-id="1ccb9-112">A<xref:System.Data.DataSet>読み取ってデータとスキーマを XML ドキュメントとして記述できます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-112">A <xref:System.Data.DataSet> can read and write data and schema as XML documents.</span></span> <span data-ttu-id="1ccb9-113">データとスキーマが HTTP で転送し、XML が有効な任意のプラットフォーム上の任意のアプリケーションで使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-113">The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled.</span></span> <span data-ttu-id="1ccb9-114">XML スキーマとしてスキーマを保存することができます、<xref:System.Data.DataSet.WriteXmlSchema%2A>を使用して、メソッド、およびスキーマとデータの両方を保存できる、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-114">You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="1ccb9-115">スキーマとデータの両方を含む XML ドキュメントを読み取り、使用、<xref:System.Data.DataSet.ReadXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-115">To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-116">一般的な複数層の実装を作成および更新するための手順で、 <xref:System.Data.DataSet>、し、さらには、元のデータを更新しています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-116">In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:</span></span>  
  
1.  <span data-ttu-id="1ccb9-117">ビルドし、各<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>を使用してデータ ソースからデータを<xref:System.Data.Common.DataAdapter>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-117">Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>.</span></span>  
  
2.  <span data-ttu-id="1ccb9-118">個々 のデータが変更<xref:System.Data.DataTable>オブジェクトを追加、更新、または削除<xref:System.Data.DataRow>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-118">Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.</span></span>  
  
3.  <span data-ttu-id="1ccb9-119">呼び出す、<xref:System.Data.DataSet.GetChanges%2A>秒を作成するメソッドを<xref:System.Data.DataSet>データへの変更のみの機能です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-119">Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data.</span></span>  
  
4.  <span data-ttu-id="1ccb9-120">呼び出す、<xref:System.Data.Common.DataAdapter.Update%2A>のメソッド、 <xref:System.Data.Common.DataAdapter>、もう 1 つを渡す<xref:System.Data.DataSet>を引数として。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-120">Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument.</span></span>  
  
5.  <span data-ttu-id="1ccb9-121">呼び出す、<xref:System.Data.DataSet.Merge%2A>メソッドは、2 番目の変更をマージする<xref:System.Data.DataSet>最初にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-121">Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first.</span></span>  
  
6.  <span data-ttu-id="1ccb9-122">呼び出す、<xref:System.Data.DataSet.AcceptChanges%2A>上、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-122">Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-123">またを呼び出して<xref:System.Data.DataSet.RejectChanges%2A>変更を取り消します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-123">Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-124"><xref:System.Data.DataSet>と<xref:System.Data.DataTable>オブジェクトから継承<xref:System.ComponentModel.MarshalByValueComponent>、およびサポート、<xref:System.Runtime.Serialization.ISerializable>リモート処理用のインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-124">The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting.</span></span> <span data-ttu-id="1ccb9-125">これらは、リモート処理ができる唯一の ADO.NET オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-125">These are the only ADO.NET objects that can be remoted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-126">継承されたクラス<xref:System.Data.DataSet>でファイナライザーが中止されたため、ガベージ コレクターによって、ファイナライズいない<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-126">Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-127">派生クラスで呼び出すことができます、<xref:System.GC.ReRegisterForFinalize%2A>メソッド、クラス、ガベージ コレクターによって完了するを許可するコンス トラクター内。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-127">The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-128">次の例は、いくつかの方法を組み合わせることで構成されていますし、作成し、入力、<xref:System.Data.DataSet>から、 **Northwind**データベース。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-128">The following example consists of several methods that, combined, create and fill a <xref:System.Data.DataSet> from the **Northwind** database.</span></span>  
  
 [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="1ccb9-129">この型は、マルチ スレッドの読み取り操作も安全です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-129">This type is safe for multithreaded read operations.</span></span> <span data-ttu-id="1ccb9-130">書き込み操作を同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-130">You must synchronize any write operations.</span></span></threadsafe>
    <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-131">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-131">Using DataSets in ADO.NET</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-132"><see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-132">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-133">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-133">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-134"><see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-134">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-135">この実装の<xref:System.Data.DataSet>コンス トラクターが、パラメーターを受け取らないし、新しいインスタンスの既定の名前では、"NewDataSet、"を作成します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-135">This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, "NewDataSet," for the new instance.</span></span>  
  
 <span data-ttu-id="1ccb9-136">名前、<xref:System.Data.DataSet>の XML 表現することを確認するために必要な<xref:System.Data.DataSet>常にスキーマ定義内の最上位レベルの要素は、ドキュメントの要素の名前を持ちます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-136">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-137">次の例では、作成、新しい<xref:System.Data.DataSet>、し、2 つ追加<xref:System.Data.DataTable>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-137">The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-138">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-138">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet (string dataSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataSetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet(System::String ^ dataSetName);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : string -&gt; System.Data.DataSet" Usage="new System.Data.DataSet dataSetName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetName"><span data-ttu-id="1ccb9-139"><see cref="T:System.Data.DataSet" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-139">The name of the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-140">指定した名前で <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-140">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class with the given name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-141">名前、<xref:System.Data.DataSet>の XML 表現することを確認するために必要な<xref:System.Data.DataSet>常にスキーマ定義で最上位レベルの要素は、ドキュメントの要素の名前を持ちます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-141">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-142">次の例では、作成、新しい<xref:System.Data.DataSet>、2 つに<xref:System.Data.DataTable>オブジェクトが追加されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-142">The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataSet.DataSetName" />
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-143">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-143">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="1ccb9-144">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-144">The data needed to serialize or deserialize an object.</span></span></param>
        <param name="context"><span data-ttu-id="1ccb9-145">指定したシリアル化ストリームの転送元と転送先。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-145">The source and destination of a given serialized stream.</span></span></param>
        <summary><span data-ttu-id="1ccb9-146">指定されたシリアル化情報とコンテキストを持つ <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-146">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class that has the given serialization information and context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, bool ConstructSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext, ConstructSchema As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext * bool -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context, ConstructSchema)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ConstructSchema" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="1ccb9-147"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-147">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="1ccb9-148"><see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-148">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span></span></param>
        <param name="ConstructSchema"><span data-ttu-id="1ccb9-149">ブール値。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-149">The boolean value.</span></span></param>
        <summary><span data-ttu-id="1ccb9-150"><see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-150">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="dataSet.AcceptChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-151">この <see cref="T:System.Data.DataSet" /> の読み込み、または前回の <see cref="M:System.Data.DataSet.AcceptChanges" /> の呼び出し以降にこのデータセットに対して行われたすべての変更をコミットします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-151">Commits all the changes made to this <see cref="T:System.Data.DataSet" /> since it was loaded or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-152">両方の<xref:System.Data.DataRow>と<xref:System.Data.DataTable>クラスが<xref:System.Data.DataSet.AcceptChanges%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-152">Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods.</span></span> <span data-ttu-id="1ccb9-153">呼び出す<xref:System.Data.DataTable.AcceptChanges%2A>で、<xref:System.Data.DataTable>レベルのエラーの原因、<xref:System.Data.DataRow.AcceptChanges%2A>メソッドごとに<xref:System.Data.DataRow>呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-153">Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called.</span></span> <span data-ttu-id="1ccb9-154">同様に、呼び出す<xref:System.Data.DataSet.AcceptChanges%2A>上、<xref:System.Data.DataSet>により<xref:System.Data.DataTable.AcceptChanges%2A>内の各テーブルに呼び出される、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-154">Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-155">この方法では、複数レベルのメソッドを呼び出すことができますがあります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-155">In this manner, you have multiple levels at which the method can be invoked.</span></span> <span data-ttu-id="1ccb9-156">呼び出す、<xref:System.Data.DataSet.AcceptChanges%2A>の<xref:System.Data.DataSet>すると、1 回の呼び出しですべての下位オブジェクト (たとえば、テーブルと行) でメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-156">Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.</span></span>  
  
 <span data-ttu-id="1ccb9-157">呼び出すと`AcceptChanges`上、 `DataSet`、any<xref:System.Data.DataRow>まだ編集モードでのオブジェクトが編集内容を正常に終了します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-157">When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully.</span></span> <span data-ttu-id="1ccb9-158"><xref:System.Data.DataRow.RowState%2A>の各プロパティ<xref:System.Data.DataRow>も変更します。`Added`と`Modified`になる行`Unchanged`、および`Deleted`行が削除されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-158">The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.</span></span>  
  
 <span data-ttu-id="1ccb9-159">場合、`DataSet`が含まれています<xref:System.Data.ForeignKeyConstraint>オブジェクトを呼び出し、`AcceptChanges`メソッドとも、<xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A>を適用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-159">If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-160">`AcceptChanges` `RejectChanges`にのみ適用`DataRow`に関連する変更 (つまり、Add、Remove、Delete、および変更)。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-160">`AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify).</span></span> <span data-ttu-id="1ccb9-161">これらは、スキーマまたは構造の変更を適用できません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-161">They are not applicable to schema or structural changes.</span></span>  
>   
>  <span data-ttu-id="1ccb9-162">AcceptChanges を呼び出すことはレプリケートされませんこれらの変更データ ソース、データ アダプターを使用して、データセットに格納された場合。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-162">Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter.</span></span> <span data-ttu-id="1ccb9-163">そのような状況で呼び出す<xref:System.Data.Common.DataAdapter.Update%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-163">In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead.</span></span> <span data-ttu-id="1ccb9-164">参照してください[Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-164">See [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md) for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-165">次の例では、追加、<xref:System.Data.DataRow>を<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-165">The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-166"><xref:System.Data.DataSet.AcceptChanges%2A>に対してメソッドを呼び出すし、 <xref:System.Data.DataSet>、すべてにどの連鎖<xref:System.Data.DataTable>それに含まれるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-166">The <xref:System.Data.DataSet.AcceptChanges%2A> method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-167">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-167">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="dataSet.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-168">フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataSet" /> の初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-168">Begins the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span></span> <span data-ttu-id="1ccb9-169">初期化は実行時に発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-169">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-170">Visual Studio .NET のデザイン環境では、このメソッドを使用して、フォームまたはその他のコンポーネントで使用するコンポーネントの初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-170">The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="1ccb9-171"><xref:System.Data.DataSet.EndInit%2A>メソッドは、初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-171">The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="1ccb9-172">使用して、<xref:System.Data.DataSet.BeginInit%2A>と<xref:System.Data.DataSet.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-172">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-173">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-173">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CaseSensitive : bool with get, set" Usage="System.Data.DataSet.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetCaseSensitiveDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-174"><see cref="T:System.Data.DataTable" /> オブジェクト内の文字列比較で大文字と小文字を区別するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-174">Gets or sets a value indicating whether string comparisons within <see cref="T:System.Data.DataTable" /> objects are case-sensitive.</span></span></summary>
        <value><span data-ttu-id="1ccb9-175"><see langword="true" /> 場合、文字列比較では大文字小文字を区別します。それ以外の場合、<see langword="false" />します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-175"><see langword="true" /> if string comparisons are case-sensitive; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1ccb9-176">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-176">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-177"><xref:System.Data.DataSet.CaseSensitive%2A>プロパティごとに並べ替え、検索、およびフィルター操作を実行する方法に影響する<xref:System.Data.DataTable>に含まれるオブジェクトを<xref:System.Data.DataSet>を使用する場合、<xref:System.Data.DataTable.Select%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-177">The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-178">既定の設定によって、<xref:System.Data.DataSet.CaseSensitive%2A>プロパティを<xref:System.Data.DataSet>設定も、<xref:System.Data.DataTable.CaseSensitive%2A>関連付けられているそれぞれのプロパティ<xref:System.Data.DataTable>同じ値にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-178">By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-179">次の例を切り替えます、<xref:System.Data.DataSet.CaseSensitive%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-179">The following example toggles the <xref:System.Data.DataSet.CaseSensitive%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-180">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-180">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="dataSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-181">すべてのテーブル内のすべての行を削除して、データの <see cref="T:System.Data.DataSet" /> を消去します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-181">Clears the <see cref="T:System.Data.DataSet" /> of any data by removing all rows in all tables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-182">場合、<xref:System.Data.DataSet>にバインドされて、<xref:System.Xml.XmlDataDocument>を呼び出すと、<xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType>または<xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType>発生させる、<xref:System.NotSupportedException>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-182">If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> or <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> raises the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="1ccb9-183">このような状況を避けるためには、各テーブルは、一度に 1 行ずつを削除するを走査します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-183">To avoid this situation, traverse each table, removing each row one at a time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-184">次の例では、クリア、<xref:System.Data.DataSet>のすべてのテーブルのすべての行。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-184">The following example clears the <xref:System.Data.DataSet> of all rows in all tables.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-185">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-185">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataSet Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataSet ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Data.DataSet&#xA;override this.Clone : unit -&gt; System.Data.DataSet" Usage="dataSet.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-186">すべての <see cref="T:System.Data.DataSet" /> スキーマ、リレーションシップ、および制約を含め <see cref="T:System.Data.DataTable" /> の構造体をコピーします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-186">Copies the structure of the <see cref="T:System.Data.DataSet" />, including all <see cref="T:System.Data.DataTable" /> schemas, relations, and constraints.</span></span> <span data-ttu-id="1ccb9-187">データのコピーは行いません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-187">Does not copy any data.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-188">現在の <see cref="T:System.Data.DataSet" /> と同じスキーマを持つが、データが格納されていない新しい <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-188">A new <see cref="T:System.Data.DataSet" /> with the same schema as the current <see cref="T:System.Data.DataSet" />, but none of the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-189">これらのクラスがサブクラス化されている場合、クローンは同じサブクラスがあります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-189">If these classes have been subclassed, the clone will also be of the same subclasses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-190">次の例のクローンを作成する、<xref:System.Data.DataSet>オブジェクトのスキーマ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-190">The following example creates a clone of a <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Copy" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-191">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-191">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataSet Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Data.DataSet" Usage="dataSet.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-192">この <see cref="T:System.Data.DataSet" /> の構造体だけでなくデータもコピーします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-192">Copies both the structure and data for this <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-193">この <see cref="T:System.Data.DataSet" /> と同じ構造体 (テーブル スキーマ、リレーションシップ、および制約) とデータを持つ新しい <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-193">A new <see cref="T:System.Data.DataSet" /> with the same structure (table schemas, relations, and constraints) and data as this <see cref="T:System.Data.DataSet" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="1ccb9-194">これらのクラスがサブクラス化されている場合は、コピーも同じサブクラスになります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-194">If these classes have been subclassed, the copy will also be of the same subclasses.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ccb9-195">次の例では、 <xref:System.Data.DataSet.Copy%2A> 、元のコピーを作成するメソッド<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-195">The following example uses the <xref:System.Data.DataSet.Copy%2A> method to create a copy of the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Clone" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-196">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-196">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDataReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-197"><see cref="T:System.Data.DataTableReader" /> ごとに 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。順序は、<see cref="P:System.Data.DataSet.Tables" /> コレクション内のテーブルでの出現順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-197">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-198">内で、返された結果セットの順序を保証するために<xref:System.Data.DataTableReader>場合、<xref:System.Data.DataTable>内、<xref:System.Data.DataSet>が空では表すことがによって空の結果セット内で、返された`DataTableReader`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-198">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it will be represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-199">この例では、コンソール アプリケーションを作成します 3<xref:System.Data.DataTable>インスタンスし、それぞれに追加します、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-199">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-200">例では、<xref:System.Data.DataSet.CreateDataReader%2A>メソッドと、返された内容を表示<xref:System.Data.DataTableReader>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-200">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="1ccb9-201">結果の順序の設定に注意してください、`DataTableReader`の順序では、制御、`DataTable`パラメーターとして渡されたインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-201">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-202">この例は、のいずれかのオーバー ロードされたバージョンを使用する方法を示します`CreateDataReader`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-202">This example shows how to use one of the overloaded versions of `CreateDataReader`.</span></span> <span data-ttu-id="1ccb9-203">使用可能な可能性があるその他の例は、個々 のオーバー ロードのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-203">For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/VB/source.vb#1)]  
  
 <span data-ttu-id="1ccb9-204">例では、コンソール ウィンドウに次のコードが表示されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-204">The example displays the following code in the Console window:</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-205">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-205">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : unit -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-206"><see cref="T:System.Data.DataTableReader" /> ごとに 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。順序は、<see cref="P:System.Data.DataSet.Tables" /> コレクション内のテーブルでの出現順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-206">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-207">ソースの <see cref="T:System.Data.DataTableReader" /> 内に格納されている <see cref="T:System.Data.DataTable" /> インスタンスに対応する結果セットを 1 つ以上格納している <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-207">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-208">内で、返された結果セットの順序を保証するために<xref:System.Data.DataTableReader>場合を<xref:System.Data.DataTable>内、<xref:System.Data.DataSet>が空で、これで表される空の結果セット内で、返された`DataTableReader`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-208">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-209">次の例では、作成 3<xref:System.Data.DataTable>インスタンス、およびそれぞれに追加します、 <xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-209">The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-210">渡します、塗りつぶされた`DataSet`を呼び出すプロシージャに、<xref:System.Data.DataSet.CreateDataReader%2A>メソッド、および内に含まれるすべての結果セットを反復処理する処理の進行状況、<xref:System.Data.DataTableReader>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-210">The example then passes the filled `DataSet` to a procedure that calls the <xref:System.Data.DataSet.CreateDataReader%2A> method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="1ccb9-211">例では、コンソール ウィンドウに結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-211">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-212">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-212">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader (params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader (ParamArray dataTables As DataTable()) As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader(... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : System.Data.DataTable[] -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader dataTables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataTables"><span data-ttu-id="1ccb9-213"><see cref="T:System.Data.DataTableReader" /> で返される結果セットの順序を示す、DataTable の配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-213">An array of DataTables providing the order of the result sets to be returned in the <see cref="T:System.Data.DataTableReader" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-214">1 つの <see cref="T:System.Data.DataTableReader" /> につき 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-214">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-215">ソースの <see cref="T:System.Data.DataTableReader" /> 内に格納されている <see cref="T:System.Data.DataTable" /> インスタンスに対応する結果セットを 1 つ以上格納している <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-215">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="1ccb9-216">返される結果セットの順序は、<paramref name="dataTables" /> パラメーターにより指定されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-216">The returned result sets are in the order specified by the <paramref name="dataTables" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-217">返された内の結果の順序を設定することを確認するには<xref:System.Data.DataTableReader>場合を<xref:System.Data.DataTable>内で、<xref:System.Data.DataSet>が空で、これで表される空の結果セット内で、返された`DataTableReader`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-217">In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span> <span data-ttu-id="1ccb9-218">このオーバー ロードされたバージョンでは、一覧を指定できます。 ため`DataTable`パラメーターとしてインスタンス内で、返された結果セットが表示される順序を指定できます`DataTableReader`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-218">Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-219">この例では、コンソール アプリケーションを作成します 3<xref:System.Data.DataTable>インスタンスし、それぞれに追加します、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-219">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-220">例では、<xref:System.Data.DataSet.CreateDataReader%2A>メソッドと、返された内容を表示<xref:System.Data.DataTableReader>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-220">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="1ccb9-221">結果の順序の設定に注意してください、`DataTableReader`の順序では、制御、`DataTable`パラメーターとして渡されたインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-221">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span> <span data-ttu-id="1ccb9-222">例では、コンソール ウィンドウに結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-222">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-223">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-223">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DataSetName">
      <MemberSignature Language="C#" Value="public string DataSetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DataSetName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataSetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSetName : string with get, set" Usage="System.Data.DataSet.DataSetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDataSetNameDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-224">現在の <see cref="T:System.Data.DataSet" /> の名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-224">Gets or sets the name of the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-225"><see cref="T:System.Data.DataSet" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-225">The name of the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ccb9-226">次の例では、作成、新しい<xref:System.Data.DataSet>で、指定された<xref:System.Data.DataSet.DataSetName%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-226">The following example creates a new <xref:System.Data.DataSet> with the given <xref:System.Data.DataSet.DataSetName%2A>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-227">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-227">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultViewManager">
      <MemberSignature Language="C#" Value="public System.Data.DataViewManager DefaultViewManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataViewManager DefaultViewManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DefaultViewManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultViewManager As DataViewManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataViewManager ^ DefaultViewManager { System::Data::DataViewManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultViewManager : System.Data.DataViewManager" Usage="System.Data.DataSet.DefaultViewManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDefaultViewDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataViewManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-228">カスタム <see cref="T:System.Data.DataSet" /> を使用してフィルター処理、検索、移動の各操作を行うことができる、<see cref="T:System.Data.DataViewManager" /> に格納されているデータのカスタム ビューを取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-228">Gets a custom view of the data contained in the <see cref="T:System.Data.DataSet" /> to allow filtering, searching, and navigating using a custom <see cref="T:System.Data.DataViewManager" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-229"><see cref="T:System.Data.DataViewManager" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-229">A <see cref="T:System.Data.DataViewManager" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-230"><xref:System.Data.DataViewManager>によって返される、<xref:System.Data.DataSet.DefaultViewManager%2A>プロパティでは、カスタムの設定を作成できます。<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-230">The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-231">取得する場合、<xref:System.Data.DataView>から、 <xref:System.Data.DataTable>、フィルター処理、並べ替え順序と<xref:System.Data.DataViewRowState>設定に従って構成されて、<xref:System.Data.DataSet.DefaultViewManager%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-231">When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-232">次の例は、既定値を取得します。<xref:System.Data.DataViewManager>の、 <xref:System.Data.DataSet>、し、追加、<xref:System.Data.DataTable>を、<xref:System.Data.DataTableCollection>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-232">The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-233">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-233">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DetermineSchemaSerializationMode">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-234"><see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-234">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-235">型指定された逆シリアル化時にこのメソッドを呼び出すことが<xref:System.Data.DataSet>をその<xref:System.Data.DataSet.SchemaSerializationMode%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-235">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-236">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-236">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (reader As XmlReader) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Xml.XmlReader -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-237"><see cref="T:System.Xml.XmlReader" /> の逆シリアル化の際に渡される <see cref="T:System.Data.DataSet" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-237">The <see cref="T:System.Xml.XmlReader" /> instance that is passed during deserialization of the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-238"><see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-238">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-239">ペイロードのスキーマ情報が省略されているかどうかを示す、<see cref="T:System.Data.SchemaSerializationMode" /> 列挙体。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-239">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-240">型指定された逆シリアル化時にこのメソッドを呼び出すことが<xref:System.Data.DataSet>をその<xref:System.Data.DataSet.SchemaSerializationMode%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-240">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-241">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-241">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (info As SerializationInfo, context As StreamingContext) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="1ccb9-242">リモート処理のシナリオで逆シリアル化の間に <see langword="DataSet" /> の保護されたコンストラクター <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> を起動するために使用される <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-242">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that a <see langword="DataSet" />'s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span></span></param>
        <param name="context"><span data-ttu-id="1ccb9-243">リモート処理のシナリオで逆シリアル化の間に <see langword="DataSet" /> の保護されたコンストラクター <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> を起動するために使用される <see cref="T:System.Runtime.Serialization.StreamingContext" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-243">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that a <see langword="DataSet" />'s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span></span></param>
        <summary><span data-ttu-id="1ccb9-244"><see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-244">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-245">ペイロードのスキーマ情報が省略されているかどうかを示す、<see cref="T:System.Data.SchemaSerializationMode" /> 列挙体。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-245">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-246">型指定された逆シリアル化時にこのメソッドを呼び出すことが<xref:System.Data.DataSet>をその<xref:System.Data.DataSet.SchemaSerializationMode%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-246">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-247">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-247">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="dataSet.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-248">フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataSet" /> の初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-248">Ends the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span></span> <span data-ttu-id="1ccb9-249">初期化は実行時に発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-249">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-250">Visual Studio .NET のデザイン環境では、このメソッドを使用して、フォームまたはその他のコンポーネントで使用するコンポーネントの初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-250">The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="1ccb9-251"><xref:System.Data.DataSet.BeginInit%2A>メソッドは、初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-251">The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="1ccb9-252">使用して、<xref:System.Data.DataSet.BeginInit%2A>と<xref:System.Data.DataSet.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-252">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-253">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-253">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnforceConstraints">
      <MemberSignature Language="C#" Value="public bool EnforceConstraints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnforceConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.EnforceConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Property EnforceConstraints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnforceConstraints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnforceConstraints : bool with get, set" Usage="System.Data.DataSet.EnforceConstraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetEnforceConstraintsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-254">更新操作を試みたときに操作が制約規則に従っているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-254">Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.</span></span></summary>
        <value><span data-ttu-id="1ccb9-255"><see langword="true" /> 規則が適用されます。 場合、それ以外の場合、<see langword="false" />します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-255"><see langword="true" /> if rules are enforced; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1ccb9-256">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-256">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-257">制約が設定されて、<xref:System.Data.DataTable>レベル (<xref:System.Data.DataTable.Constraints%2A>プロパティ)。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-257">Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property).</span></span> <span data-ttu-id="1ccb9-258">制約の作成の詳細については、次を参照してください。 [DataTable の制約](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-258">For more information about creating constraints, see [DataTable Constraints](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-259">次の例では、作成、 <xref:System.Data.DataSet> 1 つのテーブル、1 つの列、5 つの行および 1 つで<xref:System.Data.UniqueConstraint>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-259">The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>.</span></span> <span data-ttu-id="1ccb9-260"><xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`し、各行の値が同じ値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-260">The <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false` and the values of each row are set to the same value.</span></span> <span data-ttu-id="1ccb9-261">ときに、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティをリセット`true`、<xref:System.Data.ConstraintException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-261">When the <xref:System.Data.DataSet.EnforceConstraints%2A> property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException"><span data-ttu-id="1ccb9-262">1 つ以上の制約を適用できません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-262">One or more constraints cannot be enforced.</span></span></exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-263">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-263">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProperties : System.Data.PropertyCollection" Usage="System.Data.DataSet.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("ExtendedPropertiesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-264"><see langword="DataSet" /> に関連付けられている、カスタマイズされたユーザー情報のコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-264">Gets the collection of customized user information associated with the <see langword="DataSet" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-265">すべてのカスタム ユーザー情報が含まれる <see cref="T:System.Data.PropertyCollection" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-265">A <see cref="T:System.Data.PropertyCollection" /> with all custom user information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-266"><xref:System.Data.DataSet.ExtendedProperties%2A>プロパティでは、カスタム情報を格納することができます、`DataSet`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-266">The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`.</span></span> <span data-ttu-id="1ccb9-267">たとえば、データを更新する場合、時刻を格納可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-267">For example, you might store a time when the data should be refreshed.</span></span>  
  
 <span data-ttu-id="1ccb9-268">型の拡張プロパティがある必要があります<xref:System.String>場合は、永続化すると、<xref:System.Data.DataSet>は XML として書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-268">Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-269">次の例では、カスタム プロパティを<xref:System.Data.PropertyCollection>によって返される、<xref:System.Data.DataColumn.ExtendedProperties%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-269">The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property.</span></span> <span data-ttu-id="1ccb9-270">2 番目の例では、カスタム プロパティを取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-270">The second example retrieves the custom property.</span></span>  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-271">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-271">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-272">前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-272">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-273">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-273">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges();" />
      <MemberSignature Language="F#" Value="member this.GetChanges : unit -&gt; System.Data.DataSet" Usage="dataSet.GetChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-274">前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-274">Gets a copy of the <see cref="T:System.Data.DataSet" /> that contains all changes made to it since it was loaded or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was last called.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-275">この <see cref="T:System.Data.DataSet" /> の変更内容のコピー。これに対してアクションを実行した後、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> を使って元のデータにマージできます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-275">A copy of the changes from this <see cref="T:System.Data.DataSet" /> that can have actions performed on it and later be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span></span> <span data-ttu-id="1ccb9-276">変更された行が見つからない場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-276">If no changed rows are found, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-277">新たに作成<xref:System.Data.DataSet>、元のすべての行のコピーを格納している<xref:System.Data.DataSet>保留中の変更があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-277">Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span> <span data-ttu-id="1ccb9-278">リレーションシップの制限が原因で、新規に追加する追加の変更されていない行<xref:System.Data.DataSet>変更されていない行が変更された行の外部キーに対応する主キーを含めるかどうか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-278">Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</span></span> <span data-ttu-id="1ccb9-279">メソッドを返します`null`は元の行がない場合<xref:System.Data.DataSet>保留中の変更があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-279">The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-280">次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-280">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-281">2 つの値が変更され、1 つの行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-281">Two values are changed, and one row is added.</span></span> <span data-ttu-id="1ccb9-282">使用して、変更されたデータのサブセットを作成、<xref:System.Data.DataSet.GetChanges%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-282">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="1ccb9-283">エラーを解決した後、新しい列は、スキーマを変更する、サブセットに追加されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-283">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="1ccb9-284">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドを呼び出すと、`missingSchemaAction`に設定`MissingSchemaAction.Add`、元に新しい列が追加<xref:System.Data.DataSet>オブジェクトのスキーマ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-284">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.HasChanges" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-285">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-285">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.GetChanges : System.Data.DataRowState -&gt; System.Data.DataSet" Usage="dataSet.GetChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><span data-ttu-id="1ccb9-286"><see cref="T:System.Data.DataRowState" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-286">One of the <see cref="T:System.Data.DataRowState" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-287">前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを、<see cref="T:System.Data.DataRowState" /> によってフィルター処理した後で取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-287">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called, filtered by <see cref="T:System.Data.DataRowState" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-288">アクションを実行した後、<see cref="T:System.Data.DataSet" /> を使用して元のデータセットにマージするために使用できる、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> のフィルター処理後のコピー。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-288">A filtered copy of the <see cref="T:System.Data.DataSet" /> that can have actions performed on it, and subsequently be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span></span> <span data-ttu-id="1ccb9-289">必要な <see cref="T:System.Data.DataRowState" /> の行が見つからない場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-289">If no rows of the desired <see cref="T:System.Data.DataRowState" /> are found, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-290"><xref:System.Data.DataSet.GetChanges%2A>メソッドは、1 秒あたりに生成するために使用<xref:System.Data.DataSet>元に導入された変更のみを格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-290">The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original.</span></span> <span data-ttu-id="1ccb9-291">使用して、`rowStates`新しいオブジェクトを含める必要があります変更の種類を指定する引数。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-291">Use the `rowStates` argument to specify the type of changes the new object should include.</span></span>  
  
 <span data-ttu-id="1ccb9-292">これは、コピーはこの元に戻すでマージする設計されています。 返される<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-292">This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-293">リレーションシップの制約がマークされている親行あります`Unchanged`にインクルードします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-293">Relationship constraints may cause parent rows marked `Unchanged` to be included.</span></span> <span data-ttu-id="1ccb9-294">場合、目的の行<xref:System.Data.DataRowState>がある、<xref:System.Data.DataSet.GetChanges%2A>メソッドを返します。`null`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-294">If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-295">次の例では、<xref:System.Data.DataSet.GetChanges%2A>秒を作成するメソッドを<xref:System.Data.DataSet>オブジェクトは、データ ソースを更新するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-295">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-296">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-296">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDataSetSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataSetSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataSetSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberSignature Language="F#" Value="static member GetDataSetSchema : System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaComplexType" Usage="System.Data.DataSet.GetDataSetSchema schemaSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="schemaSet"><span data-ttu-id="1ccb9-297">指定されたスキーマ セット。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-297">The specified schema set.</span></span></param>
        <summary><span data-ttu-id="1ccb9-298">データセットの <see cref="T:System.Xml.Schema.XmlSchemaSet" /> のコピーを取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-298">Gets a copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" /> for the DataSet.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-299"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-299">A copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="1ccb9-300"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> と関連付けるシリアル化データを保持する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-300">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized data associated with the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <param name="context"><span data-ttu-id="1ccb9-301"><see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けるシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-301">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-302">シリアル化情報オブジェクトを、<see cref="T:System.Data.DataSet" /> のシリアル化に必要なデータで事前設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-302">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ccb9-303"><paramref name="info" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-303">The <paramref name="info" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-304">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-304">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaSerializable">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchemaSerializable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSchemaSerializable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchemaSerializable () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchemaSerializable();" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.GetSchemaSerializable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-305">シリアル化することができる <see cref="T:System.Xml.Schema.XmlSchema" /> インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-305">Returns a serializable <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-306"><see cref="T:System.Xml.Schema.XmlSchema" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-306">The <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializationData">
      <MemberSignature Language="C#" Value="protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetSerializationData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GetSerializationData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetSerializationData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.GetSerializationData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetSerializationData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="1ccb9-307"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-307">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance.</span></span></param>
        <param name="context"><span data-ttu-id="1ccb9-308">ストリーム コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-308">The streaming context.</span></span></param>
        <summary><span data-ttu-id="1ccb9-309">バイナリまたは XML ストリームからテーブル データを逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-309">Deserializes the table data from the binary or XML stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public string GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; string" Usage="dataSet.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-310"><see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現を返します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-310">Returns the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-311"><see cref="T:System.Data.DataSet" /> に格納されているデータの表現である文字列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-311">A string that is a representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-312">呼び出すことと同じではこのメソッドを呼び出す<xref:System.Data.DataSet.WriteXml%2A>で<xref:System.Data.XmlWriteMode>設定<xref:System.Data.XmlWriteMode.IgnoreSchema>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-312">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>.</span></span>  
  
 <span data-ttu-id="1ccb9-313"><xref:System.Data.DataSet.GetXml%2A> 以上のオーバーヘッドを必要し、なる XML を文字列として返します<xref:System.Data.DataSet.WriteXml%2A>に XML をファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-313"><xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="1ccb9-314">ビルドする場合、<xref:System.Data.DataSet>スキーマの推論を使用して、シリアル化および XML または Web サービスを使用して列の順序変更可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-314">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-315">次の例では、作成、<xref:System.Data.DataSet>と<xref:System.Data.DataTable>、サンプル データを追加し、XML 形式でデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-315">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  
  
 <span data-ttu-id="1ccb9-316">このサンプルでは、データセットからデータを XML ファイルを書き込むし、XML からのデータセットにデータを読み取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-316">This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML.</span></span> <span data-ttu-id="1ccb9-317">このサンプルは 2 つのテーブルの 1 つのデータセットの作成、データセットを XML ファイル (WriteXml および GetXml) にエクスポートする 2 つの方法を使用し、(ReadXml および InferXmlSchema) データセットを XML ファイルからインポートする 2 つの方法を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-317">This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.</span></span>  
  
 <span data-ttu-id="1ccb9-318">コンパイルして、サンプルを実行する前に、サンプル ディレクトリに 4 つの XML ファイルを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-318">Before you compile and run the sample, you need to create four XML files in the sample directory.</span></span> <span data-ttu-id="1ccb9-319">まず、ElementsWithAttributes.xml を作成します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-319">First, create ElementsWithAttributes.xml:</span></span>  
  
```xml  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7">New</Course>  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3">Cancelled</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="1ccb9-320">次に、ElementsWithChildElementsxml.xml を作成します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-320">Next, create ElementsWithChildElementsxml.xml:</span></span>  
  
```xml  
<MySchool>  
  <Course>  
    <CourseID>C1045</CourseID>  
    <Year>2012</Year>  
    <Title>Calculus</Title>  
    <Credits>4</Credits>  
    <DepartmentID>7</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C1061</CourseID>  
    <Year>2012</Year>  
    <Title>Physics</Title>  
    <Credits>4</Credits>  
    <DepartmentID>1</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2021</CourseID>  
    <Year>2012</Year>  
    <Title>Composition</Title>  
    <Credits>3</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2042</CourseID>  
    <Year>2012</Year>  
    <Title>Literature</Title>  
    <Credits>4</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Department>  
    <DepartmentID>1</DepartmentID>  
    <Name>Engineering</Name>  
    <Budget>350000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>2</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>2</DepartmentID>  
    <Name>English</Name>  
    <Budget>120000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>6</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>4</DepartmentID>  
    <Name>Economics</Name>  
    <Budget>200000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>4</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>7</DepartmentID>  
    <Name>Mathematics</Name>  
    <Budget>250024</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>3</Administrator>  
  </Department>  
</MySchool>  
```  
  
 <span data-ttu-id="1ccb9-321">ElementsWithOnlyAttributes.xml を作成します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-321">Now create ElementsWithOnlyAttributes.xml:</span></span>  
  
```xml
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7" />  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3" />  
</MySchool>  
```  
  
 <span data-ttu-id="1ccb9-322">RepeatingElements.xml を最後に、作成します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-322">And finally, create RepeatingElements.xml:</span></span>  
  
```xml
<MySchool>  
  <Course>C1045</Course>  
  <Course>C1061</Course>  
  <Department>Engineering</Department>   
  <Department>Mathematics</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="1ccb9-323">これでコンパイルして、次のソース コードを実行することができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-323">Now you can compile and run the following source code.</span></span>  <span data-ttu-id="1ccb9-324">[XML ファイルのデータセットのデータのストア方法](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3)はこのサンプルの Visual Basic および c# のプロジェクトがあります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-324">[How to Store Data of DataSet into XML File](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.</span></span>  
  
```csharp
using System;  
using System.Data;  
using System.IO;  
using System.Text;  
using System.Xml;  
  
// Use WriteXml method to export the dataset.  
static class DataTableHelper {  
   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  
      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  
         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  
            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  
            Console.WriteLine("Write {0} to the File {1}.", dataset.DataSetName, xmlFileName);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use GetXml method to get the XML data of the dataset and then export to the file.  
   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  
      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  
         writer.WriteLine(dataset.GetXml());  
         Console.WriteLine("Get Xml data from {0} and write to the File {1}.", dataset.DataSetName, xmlFileName);  
         Console.WriteLine();  
      }  
   }  
  
   // Use ReadXml method to import the dataset from the dataset.  
   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  
      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  
         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  
            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  
         }  
      }  
   }  
  
   // Display the columns and value of DataSet.  
   public static void ShowDataSet(DataSet dataset) {  
      foreach (DataTable table in dataset.Tables) {  
         Console.WriteLine("Table {0}:", table.TableName);  
         ShowDataTable(table);  
      }  
   }  
  
   // Display the columns and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
               }  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col]);  
               }  
            }  
         }  
         Console.WriteLine("{0,-14}", "");  
      }  
   }  
  
   // Display the columns of DataSet.  
   public static void ShowDataSetSchema(DataSet dataSet) {  
      Console.WriteLine("{0} contains the following tables:", dataSet.DataSetName);  
      foreach (DataTable table in dataSet.Tables) {  
         Console.WriteLine("   Table {0} contains the following columns:", table.TableName);  
         ShowDataTableSchema(table);  
      }  
   }  
  
   // Display the columns of DataTable  
   private static void ShowDataTableSchema(DataTable table) {  
      String columnString = "";  
      foreach (DataColumn col in table.Columns) {  
         columnString += col.ColumnName + "   ";  
      }  
      Console.WriteLine(columnString);  
   }  
}  
  
class Program {  
   static void Main(string[] args) {  
      // Create the DataSet  
      DataSet school = new DataSet("MySchool");  
      DataTable course = CreateCourse();  
      DataTable department = CreateDepartment();  
      school.Tables.Add(course);  
      school.Tables.Add(department);  
  
      // Define the constraint between the tables.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      InsertDepartments(department);  
      InsertCourses(course);  
  
      // Export the dataset to the XML file.  
      Console.WriteLine("Data of the whole DataSet {0}", school.DataSetName);  
      DataTableHelper.ShowDataSet(school);  
  
      String xmlWithSchemaFileName = "WriterXMLWithSchema.xml";  
      String xmlGetDataFileName = "GetXML.xml";  
  
      // Use two ways to export the dataset to the Xml file.  
      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  
      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  
  
      // Import the dataset from the XML file.  
      // Use two ways to import the dataset from the Xml file.  
      Console.WriteLine("Read Xml document into a new DataSet:");  
      DataSet newSchool = new DataSet("NewSchool");  
      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  
      DataTableHelper.ShowDataSetSchema(newSchool);  
      Console.WriteLine();  
  
      Console.WriteLine("Infer a schema for a DataSet from an XML document:");  
      InferDataSetSchemaFromXml();  
  
      Console.WriteLine("Press any key to exit.");  
      Console.ReadKey();  
   }  
  
   static DataTable CreateCourse() {  
      DataTable course = new DataTable("Course");  
      DataColumn[] cols ={  
                              new DataColumn("CourseID",typeof(String)),  
                              new DataColumn("Year",typeof(Int32)),  
                              new DataColumn("Title",typeof(String)),  
                              new DataColumn("Credits",typeof(Int32)),  
                              new DataColumn("DepartmentID",typeof(Int32))};  
      course.Columns.AddRange(cols);  
  
      course.PrimaryKey = new DataColumn[] { course.Columns["CourseID"], course.Columns["Year"] };  
  
      return course;  
   }  
  
   static DataTable CreateDepartment() {  
      DataTable department = new DataTable("Department");  
      DataColumn[] cols = {   
                                new DataColumn("DepartmentID", typeof(Int32)),  
                                new DataColumn("Name",typeof(String)),  
                                new DataColumn("Budget",typeof(Decimal)),  
                                new DataColumn("StartDate",typeof(DateTime)),  
                                new DataColumn("Administrator",typeof(Int32))};  
      department.Columns.AddRange(cols);  
  
      department.PrimaryKey = new DataColumn[] { department.Columns["DepartmentID"] };  
  
      return department;  
   }  
  
   static void InsertDepartments(DataTable department) {  
      Object[] rows = {   
                            new Object[]{1,"Engineering",350000.00,new DateTime(2007,9,1),2},  
                            new Object[]{2,"English",120000.00,new DateTime(2007,9,1),6},  
                            new Object[]{4,"Economics",200000.00,new DateTime(2007,9,1),4},  
                            new Object[]{7,"Mathematics",250024.00,new DateTime(2007,9,1),3}};  
  
      foreach (Object[] row in rows) {  
         department.Rows.Add(row);  
      }  
   }  
  
   static void InsertCourses(DataTable course) {  
      Object[] rows ={  
                               new Object[]{"C1045",2012,"Calculus",4,7},  
                               new Object[]{"C1061",2012,"Physics",4,1},  
                               new Object[]{"C2021",2012,"Composition",3,2},  
                               new Object[]{"C2042",2012,"Literature",4,2}};  
  
      foreach (Object[] row in rows) {  
         course.Rows.Add(row);  
      }  
   }  
  
   // Display the results of inferring schema from four types of XML structures  
   private static void InferDataSetSchemaFromXml() {  
      String[] xmlFileNames = {   
  
                                    @"ElementsWithOnlyAttributes.xml",   
                                    @"ElementsWithAttributes.xml",  
                                    @"RepeatingElements.xml",   
                                    @"ElementsWithChildElements.xml" };  
  
      foreach (String xmlFileName in xmlFileNames) {  
         Console.WriteLine("Result of {0}", Path.GetFileNameWithoutExtension(xmlFileName));  
         DataSet newSchool = new DataSet();  
         newSchool.InferXmlSchema(xmlFileName, null);  
         DataTableHelper.ShowDataSetSchema(newSchool);  
         Console.WriteLine();  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-325">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-325">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSchema">
      <MemberSignature Language="C#" Value="public string GetXmlSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXmlSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXmlSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlSchema () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXmlSchema();" />
      <MemberSignature Language="F#" Value="member this.GetXmlSchema : unit -&gt; string" Usage="dataSet.GetXmlSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-326"><see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現の XML スキーマを返します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-326">Returns the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-327"><see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現の XML スキーマである文字列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-327">String that is the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-328">呼び出すことと同じではこのメソッドを呼び出す<xref:System.Data.DataSet.WriteXmlSchema%2A>プライマリ スキーマのみが書き込まれることを除いて、します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-328">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.</span></span>  
  
 <span data-ttu-id="1ccb9-329"><xref:System.Data.DataSet.GetXmlSchema%2A> 以上のオーバーヘッドを必要し、なる XML を文字列として返します<xref:System.Data.DataSet.WriteXmlSchema%2A>に XML をファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-329"><xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="1ccb9-330">ビルドする場合、<xref:System.Data.DataSet>スキーマの推論を使用して、シリアル化および XML または Web サービスを使用して列の順序変更可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-330">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-331">次の例では、作成、<xref:System.Data.DataSet>と<xref:System.Data.DataTable>、し、スキーマを XML 形式で表示します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-331">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-332">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-332">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="HasChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-333"><see cref="T:System.Data.DataSet" /> に新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-333">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-334">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-334">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges();" />
      <MemberSignature Language="F#" Value="member this.HasChanges : unit -&gt; bool" Usage="dataSet.HasChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-335"><see cref="T:System.Data.DataSet" /> に新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-335">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-336"><see cref="T:System.Data.DataSet" /> に変更がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-336"><see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ccb9-337">次の例では、<xref:System.Data.DataSet.GetChanges%2A>秒を作成するメソッドを<xref:System.Data.DataSet>オブジェクト データ ソースを更新するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-337">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-338">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-338">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges (rowStates As DataRowState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.HasChanges : System.Data.DataRowState -&gt; bool" Usage="dataSet.HasChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><span data-ttu-id="1ccb9-339"><see cref="T:System.Data.DataRowState" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-339">One of the <see cref="T:System.Data.DataRowState" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-340"><see cref="T:System.Data.DataSet" /> に <see cref="T:System.Data.DataRowState" /> でフィルター処理された新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-340">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows, filtered by <see cref="T:System.Data.DataRowState" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-341"><see cref="T:System.Data.DataSet" /> に変更がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-341"><see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-342">確認、<xref:System.Data.DataSet.HasChanges%2A>のプロパティ、`DataSet`を呼び出す前に、<xref:System.Data.DataSet.GetChanges%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-342">Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-343">次の例では、<xref:System.Data.DataSet.GetChanges%2A>秒を作成するメソッドを<xref:System.Data.DataSet>オブジェクトは、データ ソースを更新するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-343">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-344">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-344">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasErrors : bool" Usage="System.Data.DataSet.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetHasErrorsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-345">この <see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> オブジェクトのいずれかにエラーがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-345">Gets a value indicating whether there are errors in any of the <see cref="T:System.Data.DataTable" /> objects within this <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-346"><see langword="true" /> 任意のテーブルには、エラーが含まれている場合それ以外の場合、<see langword="false" />します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-346"><see langword="true" /> if any table contains an error; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-347">各<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>もが、<xref:System.Data.DataTable.HasErrors%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-347">Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property.</span></span> <span data-ttu-id="1ccb9-348">使用して、`HasErrors`のプロパティ、`DataSet`に個別に確認する前に、エラーがある任意のテーブルか、最初<xref:System.Data.DataTable>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-348">Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects.</span></span> <span data-ttu-id="1ccb9-349">場合、 `DataTable` 、エラーが発生した、<xref:System.Data.DataTable.GetErrors%2A>メソッドの配列を返します<xref:System.Data.DataRow>エラーを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-349">If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-350">次の例では、<xref:System.Data.DataSet.HasErrors%2A>プロパティを確認するかどうかを<xref:System.Data.DataSet>オブジェクトには、エラーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-350">The following example uses the <xref:System.Data.DataSet.HasErrors%2A> property to determine whether a <xref:System.Data.DataSet> object contains errors.</span></span> <span data-ttu-id="1ccb9-351">場合は、各エラー<xref:System.Data.DataRow>各<xref:System.Data.DataTable>が出力されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-351">If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-352">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-352">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-353">XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-353">Applies XML schema to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-354">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-354">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.Stream stream, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::Stream ^ stream, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.Stream * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (stream, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1ccb9-355">スキーマの読み出し元の <see langword="Stream" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-355">The <see langword="Stream" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="1ccb9-356">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-356">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="1ccb9-357">指定した <see cref="T:System.IO.Stream" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-357">Applies the XML schema from the specified <see cref="T:System.IO.Stream" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-358">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-358">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.TextReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As TextReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::TextReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.TextReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-359">スキーマの読み出し元の <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-359">The <see langword="TextReader" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="1ccb9-360">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-360">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="1ccb9-361">指定した <see cref="T:System.IO.TextReader" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-361">Applies the XML schema from the specified <see cref="T:System.IO.TextReader" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-362">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-362">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(string fileName, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (fileName As String, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::String ^ fileName, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : string * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (fileName, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1ccb9-363">スキーマの読み込み元の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-363">The name of the file (including the path) from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="1ccb9-364">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-364">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="1ccb9-365">指定したファイルの XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-365">Applies the XML schema from the specified file to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="1ccb9-366"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-366"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="1ccb9-367">ファイルを読み書きします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-367">For reading and writing files.</span></span> <span data-ttu-id="1ccb9-368"><see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="1ccb9-368">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-369">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-369">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.Xml.XmlReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As XmlReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::Xml::XmlReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.Xml.XmlReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-370">スキーマの読み出し元の <see langword="XMLReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-370">The <see langword="XMLReader" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="1ccb9-371">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-371">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="1ccb9-372">指定した <see cref="T:System.Xml.XmlReader" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-372">Applies the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-373">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-373">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.ISupportInitializeNotification.Initialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-374"><see cref="T:System.Data.DataSet" /> が初期化された後に発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-374">Occurs after the <see cref="T:System.Data.DataSet" /> is initialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-375">詳細については、「<xref:System.Data.DataSet.IsInitialized%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-375">For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-376">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-376">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InitializeDerivedDataSet">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDerivedDataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDerivedDataSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InitializeDerivedDataSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDerivedDataSet ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDerivedDataSet();" />
      <MemberSignature Language="F#" Value="abstract member InitializeDerivedDataSet : unit -&gt; unit&#xA;override this.InitializeDerivedDataSet : unit -&gt; unit" Usage="dataSet.InitializeDerivedDataSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-377">バイナリまたは XML ストリームからデータセットのすべてのテーブル データを逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-377">Deserialize all of the tables data of the DataSet from the binary or XML stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinarySerialized">
      <MemberSignature Language="C#" Value="protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsBinarySerialized(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsBinarySerialized (info As SerializationInfo, context As StreamingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsBinarySerialized(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.IsBinarySerialized : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; bool" Usage="dataSet.IsBinarySerialized (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="1ccb9-378"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-378">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="1ccb9-379"><see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-379">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span></span></param>
        <summary><span data-ttu-id="1ccb9-380"><see langword="DataSet" /> のシリアル化された表現の形式を検査します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-380">Inspects the format of the serialized representation of the <see langword="DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-381">指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> がバイナリ形式でシリアル化された <see langword="true" /> を表す場合は <see langword="DataSet" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-381"><see langword="true" /> if the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> represents a <see langword="DataSet" /> serialized in its binary format, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-382">このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-382">This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Data.DataSet.IsInitialized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.ISupportInitializeNotification.IsInitialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-383"><see cref="T:System.Data.DataSet" /> が初期化されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-383">Gets a value that indicates whether the <see cref="T:System.Data.DataSet" /> is initialized.</span></span></summary>
        <value><span data-ttu-id="1ccb9-384">コンポーネントの初期化が完了していることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-384"><see langword="true" /> to indicate the component has completed initialization; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-385">状態を返し、<xref:System.Data.DataSet>ことによって作成される、たとえば Visual Studio の中にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-385">Returns the status of the <xref:System.Data.DataSet> while it's being constructed, for instance by Visual Studio.</span></span> <span data-ttu-id="1ccb9-386"><xref:System.Data.DataSet.BeginInit%2A>メソッドに設定`false`と<xref:System.Data.DataSet.EndInit%2A>メソッドに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-386">The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-387">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-387">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-388">指定された <see cref="T:System.Data.DataSet" /> を使用し、<see cref="T:System.Data.IDataReader" /> にデータ ソースからの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-388">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-389"><xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得されたデータ、<xref:System.Data.IDataReader>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-389">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="1ccb9-390">複数の結果セットを読み込むことは、このメソッドは、同じ機能を提供しますが、`IDataReader`内で複数のテーブルに、`DataSet`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-390">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
 <span data-ttu-id="1ccb9-391">`DataSet` が既に行を含んでいる場合、データ ソースからの受信データは既存の行にマージされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-391">If the `DataSet` already contains rows, the incoming data from the data source is merged with the existing rows.</span></span>  
  
 <span data-ttu-id="1ccb9-392">`Load`メソッドは、指定したデータ ソースからデータを取得し、現在のデータ コンテナーに追加することをすべて中央揃え、いくつかの一般的なシナリオで使用できます (ここで、 `DataSet`)。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-392">The `Load` method can be used in several common scenarios, all centered around getting data from a specified data source and adding it to the current data container (in this case, a `DataSet`).</span></span> <span data-ttu-id="1ccb9-393">これらのシナリオの標準の使用状況の説明、`DataSet`その更新プログラムを記述する方法、および動作をマージします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-393">These scenarios describe standard usage for a `DataSet`, describing its update and merge behavior.</span></span>  
  
 <span data-ttu-id="1ccb9-394">A`DataSet`により同期または 1 つのプライマリ データ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-394">A `DataSet` synchronizes or updates with a single primary data source.</span></span> <span data-ttu-id="1ccb9-395">`DataSet`プライマリ データ ソースとの同期を許可する、変更を追跡します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-395">The `DataSet` tracks changes, allowing synchronization with the primary data source.</span></span> <span data-ttu-id="1ccb9-396">さらに、 `DataSet` 1 つまたは複数のセカンダリ データ ソースからデータの増分を受け入れることができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-396">In addition, a `DataSet` can accept incremental data from one or more secondary data sources.</span></span> <span data-ttu-id="1ccb9-397">`DataSet`セカンダリ データ ソースと同期できるようにするために変更を追跡する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-397">The `DataSet` isn't responsible for tracking changes in order to allow synchronization with the secondary data source.</span></span>  
  
 <span data-ttu-id="1ccb9-398">これら 2 つの架空のデータ ソースを指定するには、ユーザーは、次の動作のいずれかが必要な可能性。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-398">Given these two hypothetical data sources, a user is likely to require one of the following behaviors:</span></span>  
  
-   <span data-ttu-id="1ccb9-399">初期化`DataSet`プライマリ データ ソースから。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-399">Initialize `DataSet` from a primary data source.</span></span> <span data-ttu-id="1ccb9-400">このシナリオで、ユーザーが、空の初期化が`DataSet`をプライマリ データ ソースの値。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-400">In this scenario, the user wants to initialize an empty `DataSet` with values from the primary data source.</span></span> <span data-ttu-id="1ccb9-401">1 つまたは複数の DataTable の内容が変更されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-401">One or more DataTable's contents are modified.</span></span> <span data-ttu-id="1ccb9-402">後で、ユーザーは、プライマリ データ ソースに変更を反映する予定です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-402">Later the user intends to propagate changes back to the primary data source.</span></span>  
  
-   <span data-ttu-id="1ccb9-403">変更を保持し、プライマリ データ ソースから再同期します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-403">Preserve changes and re-synchronize from the primary data source.</span></span> <span data-ttu-id="1ccb9-404">このシナリオで、ユーザーが実行する、`DataSet`で行われた変更を維持し、プライマリ データ ソースと、増分同期を行い、前のシナリオで入力、`DataSet`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-404">In this scenario, the user wants to take the `DataSet` filled in the previous scenario and perform an incremental synchronization with the primary data source, preserving modifications made in the `DataSet`.</span></span>  
  
-   <span data-ttu-id="1ccb9-405">セカンダリ データ ソースからの増分データ フィードです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-405">Incremental data feed from secondary data sources.</span></span> <span data-ttu-id="1ccb9-406">このシナリオでは、ユーザーは、1 つまたは複数のセカンダリ データ ソースからの変更をマージし、プライマリ データ ソースに戻るには、その変更を反映するがします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-406">In this scenario, the user wants to merge changes from one or more secondary data sources, and propagate those changes back to the primary data source.</span></span>  
  
 <span data-ttu-id="1ccb9-407">`Load`メソッドにより、これらすべてのシナリオが可能です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-407">The `Load` method makes all these scenarios possible.</span></span> <span data-ttu-id="1ccb9-408">このメソッドでは、読み込みのオプション パラメーターを指定できます。 を示す方法に既に含まれて、<xref:System.Data.DataTable>読み込まれる行と結合します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-408">This method allows you to specify a load option parameter, indicating how rows already in a <xref:System.Data.DataTable> combine with rows being loaded.</span></span> <span data-ttu-id="1ccb9-409">次の表に、次の 3 つの負荷で提供されるオプション、<xref:System.Data.LoadOption>列挙体。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-409">The following table describes the three load options provided by the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="1ccb9-410">各ケースでは、説明は、着信データの行の主キーには、既存の行の主キーが一致する場合に、動作を示します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-410">In each case, the description indicates the behavior when the primary key of a row in the incoming data matches the primary key of an existing row.</span></span>  
  
|<span data-ttu-id="1ccb9-411">読み込みオプション</span><span class="sxs-lookup"><span data-stu-id="1ccb9-411">Load Option</span></span>|<span data-ttu-id="1ccb9-412">説明</span><span class="sxs-lookup"><span data-stu-id="1ccb9-412">Description</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="1ccb9-413">`PreserveChanges` (既定値)</span><span class="sxs-lookup"><span data-stu-id="1ccb9-413">`PreserveChanges` (default)</span></span>|<span data-ttu-id="1ccb9-414">受信した行の値を持つ行の元のバージョンを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-414">Updates the original version of the row with the value of the incoming row.</span></span>|  
|`OverwriteChanges`|<span data-ttu-id="1ccb9-415">受信した行の値を持つ行の現在と元のバージョンを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-415">Updates the current and original versions of the row with the value of the incoming row.</span></span>|  
|`Upsert`|<span data-ttu-id="1ccb9-416">受信した行の値を持つ行の現在のバージョンを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-416">Updates the current version of the row with the value of the incoming row.</span></span>|  
  
 <span data-ttu-id="1ccb9-417">一般に、`PreserveChanges`と`OverwriteChanges`オプションは、ユーザーが同期のシナリオを意図しています、`DataSet`とプライマリ データ ソースを変更します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-417">In general, the `PreserveChanges` and `OverwriteChanges` options are intended for scenarios in which the user needs to synchronize the `DataSet` and its changes with the primary data source.</span></span> <span data-ttu-id="1ccb9-418">`Upsert`オプションが 1 つまたは複数のセカンダリ データ ソースから集計の変更を容易になります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-418">The `Upsert` option facilitates aggregating changes from one or more secondary data sources.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-419">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-419">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-420">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-420">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="1ccb9-421"><see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-421">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="tables"><span data-ttu-id="1ccb9-422"><see cref="T:System.Data.DataTable" /> メソッドが名前と名前空間の情報を取得する、<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-422">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> method retrieves name and namespace information.</span></span> <span data-ttu-id="1ccb9-423">これらのテーブルは、この <see cref="T:System.Data.DataTableCollection" /> に格納されている <see cref="T:System.Data.DataSet" /> のメンバーである必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-423">Each of these tables must be a member of the <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-424">指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、<see cref="T:System.Data.DataTable" /> インスタンスの配列を使用してスキーマ情報と名前空間情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-424">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-425"><xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得されたデータ、<xref:System.Data.IDataReader>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-425">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="1ccb9-426">複数の結果セットを読み込むことは、このメソッドは、同じ機能を提供しますが、<xref:System.Data.IDataReader>内で複数のテーブルに、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-426">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-427">読み込み操作は失敗し、<xref:System.InvalidOperationException>場合は、入力方向の変換元データ列のいずれかの`reader`は計算列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-427">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="1ccb9-428">`loadOption`パラメーターでは、インポートされたデータを既存のデータと対話して、値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-428">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="1ccb9-429">ドキュメントを参照して、 <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-429">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="1ccb9-430">`tables`パラメーターの配列を指定できます。<xref:System.Data.DataTable>設定、リーダーから読み込まれた各結果に対応するテーブルの順序を示すインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-430">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="1ccb9-431"><xref:System.Data.DataSet.Load%2A>メソッド塗りつぶし各提供<xref:System.Data.DataTable>のデータ ソースのデータ リーダーから 1 つの結果を使用してインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-431">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="1ccb9-432">各結果セットの後、<xref:System.Data.DataSet.Load%2A>メソッド次の結果が結果セットがなくなるまで、リーダー内セットに移動します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-432">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="1ccb9-433">このメソッドの名前解決スキームが続くと同じ、<xref:System.Data.Common.DbDataAdapter.Fill%2A>のメソッド、<xref:System.Data.Common.DbDataAdapter>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-433">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-434">次の例では、作成、新しい<xref:System.Data.DataSet>、2 つ追加します<xref:System.Data.DataTable>インスタンスを<xref:System.Data.DataSet>と入力し、<xref:System.Data.DataSet>を使用して、<xref:System.Data.DataSet.Load%2A>からデータを取得するメソッド、 <xref:System.Data.DataTableReader> 2 つの結果セットを格納しています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-434">The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.Load%2A> method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets.</span></span> <span data-ttu-id="1ccb9-435">最後に、コンソール ウィンドウで、テーブルの内容を表示します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-435">Finally, the example displays the contents of the tables in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-436">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-436">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params string[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, string[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::String ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * string[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.String[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-437">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-437">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="1ccb9-438"><see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see langword="DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-438">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see langword="DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="tables"><span data-ttu-id="1ccb9-439"><see langword="Load" /> メソッドがテーブル名の情報を取得する、文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-439">An array of strings, from which the <see langword="Load" /> method retrieves table name information.</span></span></param>
        <summary><span data-ttu-id="1ccb9-440">指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、文字列の配列を使用して <see langword="DataSet" /> 内のテーブルの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-440">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of strings to supply the names for the tables within the <see langword="DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-441"><xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得されたデータ、<xref:System.Data.IDataReader>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-441">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="1ccb9-442">複数の結果セットを読み込むことは、このメソッドは、同じ機能を提供しますが、`IDataReader`内で複数のテーブルに、`DataSet`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-442">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-443">読み込み操作は失敗し、<xref:System.InvalidOperationException>場合は、入力方向の変換元データ列のいずれかの`reader`は計算列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-443">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="1ccb9-444">`loadOption`パラメーターでは、インポートされたデータを既存のデータと対話して、値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-444">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="1ccb9-445">ドキュメントを参照して、<xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-445">See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="1ccb9-446">`tables`パラメーターでは、設定したリーダーから読み込まれた各結果に対応するテーブルの順序を示す、テーブル名の配列を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-446">The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="1ccb9-447">`Load`メソッド内のテーブルの検索を試みます、`DataSet`の順序でのテーブル名の配列で見つかった名前に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-447">The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order.</span></span> <span data-ttu-id="1ccb9-448">一致するテーブルが見つかった場合は、現在の結果セットのコンテンツを含むテーブルが読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-448">If a matching table is found, that table is loaded with the content of the current result set.</span></span> <span data-ttu-id="1ccb9-449">一致するテーブルが見つからない場合は、テーブル名の配列で指定された名前を使用してテーブルを作成し、結果セットから新しいテーブルのスキーマを推論します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-449">If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set.</span></span> <span data-ttu-id="1ccb9-450">各結果セットの後、`Load`メソッド次の結果が結果セットがなくなるまで、リーダー内セットに移動します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-450">After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="1ccb9-451">既定の名前空間に関連付けられている`DataSet`のいずれかが新しく作成された各に関連付けられている場合は、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-451">The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`.</span></span> <span data-ttu-id="1ccb9-452">このメソッドの名前解決スキームが続くと同じ、<xref:System.Data.Common.DbDataAdapter.Fill%2A>のメソッド、<xref:System.Data.Common.DbDataAdapter>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-452">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-453">次のコンソール アプリケーションの例は、まずテーブルを作成しに、リーダーからデータを読み込む、<xref:System.Data.DataSet>を使用して、`Load`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-453">The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method.</span></span> <span data-ttu-id="1ccb9-454">例では、テーブルを追加し、<xref:System.Data.DataSet>からデータをテーブルに入力して、<xref:System.Data.DataTableReader>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-454">The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="1ccb9-455">この例で、パラメーターが渡されるため、`Load`メソッドが存在しない場合、テーブル名を示す、`Load`メソッドがパラメーターとして渡された名前と一致する新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-455">In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter.</span></span> <span data-ttu-id="1ccb9-456">データが読み込まれると、例では、コンソール ウィンドウで、そのすべてのテーブルの内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-456">Once the data has been loaded, the example displays the contents of all its tables in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-457">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-457">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit&#xA;override this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, errorHandler, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-458">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-458">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="1ccb9-459"><see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-459">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="errorHandler"><span data-ttu-id="1ccb9-460">データの読み込み中にエラーが発生した場合に呼び出される <see cref="T:System.Data.FillErrorEventHandler" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-460">A <see cref="T:System.Data.FillErrorEventHandler" /> delegate to call when an error occurs while loading data.</span></span></param>
        <param name="tables"><span data-ttu-id="1ccb9-461"><see cref="T:System.Data.DataTable" /> メソッドが名前と名前空間の情報を取得する、<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-461">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> method retrieves name and namespace information.</span></span></param>
        <summary><span data-ttu-id="1ccb9-462">指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、<see cref="T:System.Data.DataTable" /> インスタンスの配列を使用してスキーマ情報と名前空間情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-462">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-463"><xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得されたデータ、<xref:System.Data.IDataReader>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-463">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="1ccb9-464">複数の結果セットを読み込むことは、このメソッドは、同じ機能を提供しますが、<xref:System.Data.IDataReader>内で複数のテーブルに、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-464">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-465">読み込み操作は失敗し、<xref:System.InvalidOperationException>場合は、入力方向の変換元データ列のいずれかの`reader`は計算列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-465">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="1ccb9-466">`loadOption`パラメーターでは、インポートされたデータを既存のデータと対話して、値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-466">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="1ccb9-467">ドキュメントを参照して、 <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-467">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="1ccb9-468">`errorHandler`パラメーターは、<xref:System.Data.FillErrorEventHandler>データの読み込み中にエラーが発生したときに呼び出されるプロシージャを参照するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-468">The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data.</span></span> <span data-ttu-id="1ccb9-469"><xref:System.Data.FillErrorEventArgs>プロシージャに渡されるパラメーターは、発生したエラー、データの現在の行に関する情報を取得するためのプロパティを提供し、<xref:System.Data.DataTable>に指定されています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-469">The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled.</span></span> <span data-ttu-id="1ccb9-470">このデリゲートのメカニズムを使用して、単純な try/catch ブロックではなく、エラーを確認することができます状況の処理し、必要な場合の処理を続行します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-470">Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</span></span> <span data-ttu-id="1ccb9-471"><xref:System.Data.FillErrorEventArgs>パラメーターを提供、<xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティ: このプロパティを設定`true`処理を続行してエラーを処理したことを示すプロパティを設定`false`処理を停止することを示す。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-471">The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing.</span></span> <span data-ttu-id="1ccb9-472">注意してくださいそのプロパティを設定する`false`コードが例外をスローする問題を発生させた。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-472">Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.</span></span>  
  
 <span data-ttu-id="1ccb9-473">`tables`パラメーターの配列を指定できます。<xref:System.Data.DataTable>設定、リーダーから読み込まれた各結果に対応するテーブルの順序を示すインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-473">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="1ccb9-474"><xref:System.Data.DataSet.Load%2A>メソッド塗りつぶし各提供<xref:System.Data.DataTable>のデータ ソースのデータ リーダーから 1 つの結果を使用してインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-474">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="1ccb9-475">各結果セットの後、<xref:System.Data.DataSet.Load%2A>メソッド次の結果が結果セットがなくなるまで、リーダー内セットに移動します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-475">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="1ccb9-476">このメソッドの名前解決スキームが続くと同じ、<xref:System.Data.Common.DbDataAdapter.Fill%2A>のメソッド、<xref:System.Data.Common.DbDataAdapter>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-476">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-477">次の例は、テーブルを追加、 <xref:System.Data.DataSet>、使用しようと、<xref:System.Data.DataSet.Load%2A>からデータを読み込むメソッドを<xref:System.Data.DataTableReader>互換性のないスキーマを格納しています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-477">The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the <xref:System.Data.DataSet.Load%2A> method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema.</span></span> <span data-ttu-id="1ccb9-478">この例では、エラーをトラップするのではなく、<xref:System.Data.FillErrorEventHandler>調査し、エラーを処理するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-478">Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error.</span></span> <span data-ttu-id="1ccb9-479">出力がコンソール ウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-479">The output is displayed in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-480">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-480">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Locale : System.Globalization.CultureInfo with get, set" Usage="System.Data.DataSet.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetLocaleDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-481">テーブル内の文字列の比較に使用するロケール情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-481">Gets or sets the locale information used to compare strings within the table.</span></span></summary>
        <value><span data-ttu-id="1ccb9-482">ユーザーのコンピューターのロケールについてのデータが格納されている <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-482">A <see cref="T:System.Globalization.CultureInfo" /> that contains data about the user's machine locale.</span></span> <span data-ttu-id="1ccb9-483">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-483">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-484"><xref:System.Data.DataSet.Locale%2A>プロパティは、ロケールを指定する並べ替えを適用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-484">The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies.</span></span>  
  
 <span data-ttu-id="1ccb9-485">既定の設定によって、<xref:System.Data.DataSet.Locale%2A>の<xref:System.Data.DataSet>も設定、<xref:System.Data.DataSet.Locale%2A>各<xref:System.Data.DataTable>を内のオブジェクト`DataSet`同じ値にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-485">By default, setting the <xref:System.Data.DataSet.Locale%2A> for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataSet.Locale%2A> for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-486">式を指定する列で、<xref:System.StringComparison.InvariantCulture>使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-486">In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used.</span></span> <span data-ttu-id="1ccb9-487"><xref:System.StringComparison.CurrentCulture>は無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-487">The <xref:System.StringComparison.CurrentCulture> is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-488">次の例では、取得、<xref:System.Globalization.CultureInfo>の<xref:System.Data.DataSet>出力、<xref:System.Globalization.CultureInfo.DisplayName%2A>と<xref:System.Globalization.CultureInfo.EnglishName%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-488">The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-489">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-489">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-490">指定した <see cref="T:System.Data.DataSet" /> か <see cref="T:System.Data.DataTable" />、または <see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see langword="DataSet" /> または <see langword="DataTable" /> にマージします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-490">Merges a specified <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" />, or array of <see cref="T:System.Data.DataRow" /> objects into the current <see langword="DataSet" /> or <see langword="DataTable" />.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-491">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-491">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] -&gt; unit" Usage="dataSet.Merge rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="1ccb9-492"><see langword="DataRow" /> にマージされる <see langword="DataSet" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-492">The array of <see langword="DataRow" /> objects to be merged into the <see langword="DataSet" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-493"><see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see cref="T:System.Data.DataSet" /> にマージします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-493">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-494"><xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-494">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="1ccb9-495">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-495">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-496">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-496">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="1ccb9-497"><xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-497">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-498">クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-498">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-499">このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-499">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="1ccb9-500">2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-500">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="1ccb9-501">この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-501">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-502">このサブセットは一般に小さいため、中間層のコンポーネントにより効率的によく渡されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-502">This subset is generally smaller and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-503">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-503">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="1ccb9-504">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-504">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="1ccb9-505">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-505">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-506">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-506">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="1ccb9-507">たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-507">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="1ccb9-508">場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-508">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="1ccb9-509">その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-509">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="1ccb9-510">スキーマをマージ後に、データに結合されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-510">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="1ccb9-511">新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-511">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="1ccb9-512">ソースを持つ行を<xref:System.Data.DataRowState>の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-512">Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="1ccb9-513">マージ中に制約が無効になります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-513">During a merge, constraints are disabled.</span></span> <span data-ttu-id="1ccb9-514">場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-514">If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="1ccb9-515">ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-515">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="1ccb9-516">リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-516">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-517">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-517">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet -&gt; unit" Usage="dataSet.Merge dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1ccb9-518">データとスキーマをマージする対象の <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-518">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <summary><span data-ttu-id="1ccb9-519">指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-519">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-520"><xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-520">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="1ccb9-521">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-521">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-522">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-522">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="1ccb9-523"><xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-523">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-524">クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-524">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-525">このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-525">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="1ccb9-526">2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-526">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="1ccb9-527">この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-527">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-528">このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-528">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-529">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-529">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="1ccb9-530">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-530">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="1ccb9-531">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-531">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-532">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-532">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="1ccb9-533">たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-533">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="1ccb9-534">場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-534">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="1ccb9-535">その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-535">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="1ccb9-536">スキーマをマージ後に、データに結合されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-536">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="1ccb9-537">新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-537">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="1ccb9-538">ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-538">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="1ccb9-539">マージ中に制約が無効になります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-539">During a merge, constraints are disabled.</span></span> <span data-ttu-id="1ccb9-540">場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-540">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="1ccb9-541">ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-541">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="1ccb9-542">リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-542">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-543">次の例では、 <xref:System.Data.DataSet.GetChanges%2A>、Update、および<xref:System.Data.DataSet.Merge%2A>メソッド、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-543">The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and <xref:System.Data.DataSet.Merge%2A> methods on a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException"><span data-ttu-id="1ccb9-544">1 つ以上の制約を有効にできません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-544">One or more constraints cannot be enabled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ccb9-545"><paramref name="dataSet" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-545">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="M:System.Data.DataSet.GetChanges" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-546">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-546">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable -&gt; unit" Usage="dataSet.Merge table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="1ccb9-547">データとスキーマをマージする対象の <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-547">The <see cref="T:System.Data.DataTable" /> whose data and schema will be merged.</span></span></param>
        <summary><span data-ttu-id="1ccb9-548">指定した <see cref="T:System.Data.DataTable" /> およびそのスキーマを現在の <see cref="T:System.Data.DataSet" /> にマージします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-548">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-549"><xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-549">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="1ccb9-550">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-550">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-551">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-551">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="1ccb9-552"><xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-552">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-553">クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-553">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-554">このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-554">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="1ccb9-555">2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-555">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="1ccb9-556">この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-556">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-557">このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-557">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-558">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-558">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="1ccb9-559">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-559">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="1ccb9-560">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-560">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-561">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-561">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="1ccb9-562">たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-562">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="1ccb9-563">場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-563">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="1ccb9-564">その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-564">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="1ccb9-565">スキーマをマージ後に、データに結合されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-565">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="1ccb9-566">新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-566">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="1ccb9-567">ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-567">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="1ccb9-568">マージ中に制約が無効になります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-568">During a merge, constraints are disabled.</span></span> <span data-ttu-id="1ccb9-569">場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-569">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="1ccb9-570">ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-570">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="1ccb9-571">リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-571">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-572">次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-572">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-573">1 秒あたり<xref:System.Data.DataTable>に作成された最初と同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-573">A second <xref:System.Data.DataTable> is created that is identical to the first.</span></span> <span data-ttu-id="1ccb9-574">2 つの行にマージし、2 番目のテーブルに追加されます、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-574">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ccb9-575"><paramref name="table" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-575">The <paramref name="table" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-576">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-576">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1ccb9-577">データとスキーマをマージする対象の <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-577">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="1ccb9-578">現在の <see langword="DataSet" /> に対して行われた変更を保持するには <see langword="true" />。保持しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-578"><see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-579">指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。この <see langword="DataSet" /> に対して行われた変更は、指定した引数に従って保持または破棄します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-579">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />, preserving or discarding any changes in this <see langword="DataSet" /> according to the given argument.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-580"><xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-580">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="1ccb9-581">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-581">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-582">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-582">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="1ccb9-583"><xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-583">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-584">クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-584">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-585">このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-585">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="1ccb9-586">2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-586">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="1ccb9-587">この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-587">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-588">このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-588">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-589">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-589">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="1ccb9-590">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-590">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="1ccb9-591">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-591">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-592">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-592">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="1ccb9-593">たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-593">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="1ccb9-594">場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-594">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="1ccb9-595">その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-595">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="1ccb9-596">スキーマをマージ後に、データに結合されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-596">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="1ccb9-597">新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-597">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="1ccb9-598">ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-598">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="1ccb9-599">マージ中に制約が無効になります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-599">During a merge, constraints are disabled.</span></span> <span data-ttu-id="1ccb9-600">場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-600">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="1ccb9-601">ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-601">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="1ccb9-602">リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-602">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-603">次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-603">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-604">10 行を追加すると、2 つの値が変更され、1 つの行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-604">After adding ten rows, two values are changed, and one row is added.</span></span> <span data-ttu-id="1ccb9-605">使用して、変更されたデータのサブセットを作成、<xref:System.Data.DataSet.GetChanges%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-605">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="1ccb9-606">エラーを解決した後、サブセット データは、元にマージ<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-606">After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-607">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-607">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (rows, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="1ccb9-608"><see cref="T:System.Data.DataRow" /> にマージされる <see langword="DataSet" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-608">The array of <see cref="T:System.Data.DataRow" /> objects to be merged into the <see langword="DataSet" />.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="1ccb9-609"><see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-609"><see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="1ccb9-610"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-610">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-611"><see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see cref="T:System.Data.DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-611">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-612"><xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-612">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="1ccb9-613">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-613">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-614">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-614">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="1ccb9-615"><xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-615">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-616">クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-616">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-617">このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-617">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="1ccb9-618">2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-618">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="1ccb9-619">この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-619">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-620">このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-620">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-621">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-621">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="1ccb9-622">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-622">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="1ccb9-623">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-623">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-624">説明を容易にするために、<xref:System.Data.DataSet.Merge%2A>メソッドを使用して「ターゲット」を示し、現在<xref:System.Data.DataSet>とに 2 つ目の (パラメーター) の名前を付けるには、"source"<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-624">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-625">ターゲット<xref:System.Data.DataSet>名前は、これはアクション (マージ) が発生しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-625">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="1ccb9-626">2 番目の<xref:System.Data.DataSet>含まれる情報は変更されませんが、代わりに、現在にマージされますので、「ソース」と呼びます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-626">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-627">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-627">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="1ccb9-628">たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-628">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="1ccb9-629">場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-629">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="1ccb9-630">その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-630">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="1ccb9-631">スキーマをマージ後に、データに結合されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-631">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="1ccb9-632">新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-632">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="1ccb9-633">ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-633">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="1ccb9-634">マージ中に制約が無効になります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-634">During a merge, constraints are disabled.</span></span> <span data-ttu-id="1ccb9-635">場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-635">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="1ccb9-636">ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-636">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="1ccb9-637">リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-637">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-638">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-638">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1ccb9-639">データとスキーマをマージする対象の <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-639">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="1ccb9-640">現在の <see langword="DataSet" /> に対して行われた変更を保持するには <see langword="true" />。保持しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-640"><see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="1ccb9-641"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-641">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-642">指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-642">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema with the current <see langword="DataSet" />, preserving or discarding changes in the current <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-643"><xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-643">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="1ccb9-644">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-644">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-645">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-645">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="1ccb9-646"><xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-646">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-647">クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-647">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-648">このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-648">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="1ccb9-649">2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-649">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="1ccb9-650">この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-650">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-651">このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-651">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-652">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-652">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="1ccb9-653">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-653">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="1ccb9-654">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-654">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-655">説明を容易にするために、<xref:System.Data.DataSet.Merge%2A>メソッドを使用して「ターゲット」を示し、現在<xref:System.Data.DataSet>とに 2 つ目の (パラメーター) の名前を付けるには、"source"<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-655">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-656">ターゲット<xref:System.Data.DataSet>名前は、これはアクション (マージ) が発生しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-656">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="1ccb9-657">2 番目の<xref:System.Data.DataSet>含まれる情報は変更されませんが、代わりに、現在にマージされますので、「ソース」と呼びます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-657">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-658">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-658">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="1ccb9-659">たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-659">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="1ccb9-660">場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-660">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="1ccb9-661">その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-661">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="1ccb9-662">スキーマをマージ後に、データに結合されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-662">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="1ccb9-663">新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-663">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="1ccb9-664">ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-664">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="1ccb9-665">マージ中に制約が無効になります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-665">During a merge, constraints are disabled.</span></span> <span data-ttu-id="1ccb9-666">場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-666">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="1ccb9-667">ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-667">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="1ccb9-668">リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-668">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-669">次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-669">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-670">2 つの値が変更され、1 つの行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-670">Two values are changed, and one row is added.</span></span> <span data-ttu-id="1ccb9-671">使用して、変更されたデータのサブセットを作成、<xref:System.Data.DataSet.GetChanges%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-671">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="1ccb9-672">エラーを解決した後、新しい列は、スキーマを変更する、サブセットに追加されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-672">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="1ccb9-673">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドを呼び出すと、`missingSchemaAction`に設定`MissingSchemaAction.Add`、元に新しい列が追加<xref:System.Data.DataSet>オブジェクトのスキーマ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-673">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ccb9-674"><paramref name="dataSet" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-674">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-675">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-675">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (table, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="1ccb9-676">データとスキーマをマージする対象の <see langword="DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-676">The <see langword="DataTable" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="1ccb9-677"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-677">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="1ccb9-678"><see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-678"><see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-679">指定した <see cref="T:System.Data.DataTable" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-679">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see langword="DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-680"><xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-680">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="1ccb9-681">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-681">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-682">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-682">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="1ccb9-683"><xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-683">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-684">イオン クライアント アプリケーションでは、1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-684">iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-685">このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-685">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="1ccb9-686">2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-686">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="1ccb9-687">この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-687">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-688">このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-688">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="1ccb9-689">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-689">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="1ccb9-690">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-690">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="1ccb9-691">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-691">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-692">ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-692">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="1ccb9-693">たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-693">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="1ccb9-694">場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-694">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="1ccb9-695">その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-695">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="1ccb9-696">スキーマをマージ後に、データに結合されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-696">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="1ccb9-697">新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-697">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="1ccb9-698">ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-698">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="1ccb9-699">マージ中に制約が無効になります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-699">During a merge, constraints are disabled.</span></span> <span data-ttu-id="1ccb9-700">場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-700">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="1ccb9-701">ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-701">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="1ccb9-702">リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-702">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-703">次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-703">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-704">1 秒あたり<xref:System.Data.DataTable>に作成された最初とほぼ同じことを除いて新しい`DataColumn`テーブルに追加されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-704">A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table.</span></span> <span data-ttu-id="1ccb9-705">2 つの行にマージし、2 番目のテーブルに追加されます、<xref:System.Data.DataSet>で、`preserveChanges`引数に設定`false`、および`missingSchemaAction`引数に設定`MissingSchemaAction.Add`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-705">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ccb9-706"><paramref name="dataSet" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-706">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-707">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-707">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MergeFailed">
      <MemberSignature Language="C#" Value="public event System.Data.MergeFailedEventHandler MergeFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.MergeFailedEventHandler MergeFailed" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.MergeFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MergeFailed As MergeFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::MergeFailedEventHandler ^ MergeFailed;" />
      <MemberSignature Language="F#" Value="member this.MergeFailed : System.Data.MergeFailedEventHandler " Usage="member this.MergeFailed : System.Data.MergeFailedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetMergeFailedDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MergeFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-708">ターゲットとソースの <see cref="T:System.Data.DataRow" /> に同じ主キー値が格納されていて、<see cref="P:System.Data.DataSet.EnforceConstraints" /> が true に設定されているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-708">Occurs when a target and source <see cref="T:System.Data.DataRow" /> have the same primary key value, and <see cref="P:System.Data.DataSet.EnforceConstraints" /> is set to true.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-709">イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-709">For more information about how to handle events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-710">次の例では、使用、<xref:System.Data.DataSet.MergeFailed>イベント。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-710">The following example demonstrates the use of the <xref:System.Data.DataSet.MergeFailed> event.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-711">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-711">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Data.DataSet.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetNamespaceDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-712"><see cref="T:System.Data.DataSet" /> の名前空間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-712">Gets or sets the namespace of the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-713"><see cref="T:System.Data.DataSet" /> の名前空間。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-713">The namespace of the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-714"><xref:System.Data.DataSet.Namespace%2A>にドキュメントの XML を読み書きするときに、プロパティが使用される、<xref:System.Data.DataSet>を使用して、 <xref:System.Data.DataSet.ReadXml%2A>、 <xref:System.Data.DataSet.WriteXml%2A>、 <xref:System.Data.DataSet.ReadXmlSchema%2A>、または<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-714">The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.</span></span>  
  
 <span data-ttu-id="1ccb9-715">XML 属性と要素の読み取り時にスコープする XML ドキュメントの名前空間が使用される、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-715">The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-716">たとえば場合、<xref:System.Data.DataSet>スキーマを含む"myCompany、"名前空間を持つドキュメントから読み取られたと別の名前空間を持つドキュメントからのみデータを読み取るしようとしましたが、既存のスキーマに対応していないすべてのデータは無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-716">For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace "myCompany," and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-717">次の例のセット、<xref:System.Data.DataSet.Prefix%2A>呼び出す前に、<xref:System.Data.DataSet.ReadXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-717">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1ccb9-718">この名前空間には既にデータが格納されています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-718">The namespace already has data.</span></span></exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-719">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-719">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="dataSet.OnPropertyChanging pcevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent"><span data-ttu-id="1ccb9-720">イベント データを格納している <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-720">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="1ccb9-721"><see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-721">Raises the <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-722">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-722">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="1ccb9-723">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-723">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1ccb9-724">オーバーライドするときに<see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />、派生クラスで基底クラスを呼び出すことを確認する<see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-724">When overriding <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> in a derived class, be sure to call the base class' <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> method.</span></span></para></block>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-725">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-725">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveRelation">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveRelation (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveRelation(class System.Data.DataRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveRelation (relation As DataRelation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveRelation(System::Data::DataRelation ^ relation);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveRelation : System.Data.DataRelation -&gt; unit&#xA;override this.OnRemoveRelation : System.Data.DataRelation -&gt; unit" Usage="dataSet.OnRemoveRelation relation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation"><span data-ttu-id="1ccb9-726">削除する <see cref="T:System.Data.DataRelation" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-726">The <see cref="T:System.Data.DataRelation" /> being removed.</span></span></param>
        <summary><span data-ttu-id="1ccb9-727"><see cref="T:System.Data.DataRelation" /> から <see cref="T:System.Data.DataTable" /> オブジェクトが削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-727">Occurs when a <see cref="T:System.Data.DataRelation" /> object is removed from a <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-728">このメソッドは、テーブルの削除を制限するサブクラスによってオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-728">This method should be overridden by subclasses to restrict tables being removed</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-729">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-729">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveTable">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRemoveTable (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRemoveTable (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveTable : System.Data.DataTable -&gt; unit&#xA;override this.OnRemoveTable : System.Data.DataTable -&gt; unit" Usage="dataSet.OnRemoveTable table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="1ccb9-730">削除する <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-730">The <see cref="T:System.Data.DataTable" /> being removed.</span></span></param>
        <summary><span data-ttu-id="1ccb9-731"><see cref="T:System.Data.DataTable" /> から <see cref="T:System.Data.DataSet" /> が削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-731">Occurs when a <see cref="T:System.Data.DataTable" /> is removed from a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-732">このメソッドは、削除されるテーブルを制限するサブクラスによってオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-732">This method can be overridden by subclasses to restrict tables from being removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-733">次の例から派生したクラスを示しています、<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.OnRemoveTable%2A>メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-733">The following example shows a class derived from the <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.OnRemoveTable%2A> method overridden.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-734">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-734">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string with get, set" Usage="System.Data.DataSet.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetPrefixDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-735"><see cref="T:System.Data.DataSet" /> の名前空間に別名を付ける XML プリフィックスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-735">Gets or sets an XML prefix that aliases the namespace of the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-736"><see cref="T:System.Data.DataSet" /> 名前空間の XML プリフィックス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-736">The XML prefix for the <see cref="T:System.Data.DataSet" /> namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-737"><xref:System.Data.DataSet.Prefix%2A>プロパティが XML ドキュメント全体での名前空間に属している要素を識別するために使用される、<xref:System.Data.DataSet>オブジェクト (設定によって、<xref:System.Data.DataSet.Namespace%2A>プロパティ)。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-737">The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-738">次の例のセット、<xref:System.Data.DataSet.Prefix%2A>呼び出す前に、<xref:System.Data.DataSet.ReadXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-738">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-739">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-739">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.RaisePropertyChanging : string -&gt; unit" Usage="dataSet.RaisePropertyChanging name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="1ccb9-740">これから変更されるプロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-740">The name of the property that is about to change.</span></span></param>
        <summary><span data-ttu-id="1ccb9-741">指定した <see cref="T:System.Data.DataSet" /> プロパティがこれから変更されるという通知を送信します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-741">Sends a notification that the specified <see cref="T:System.Data.DataSet" /> property is about to change.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-742">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-742">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-743">XML スキーマとデータを <see cref="T:System.Data.DataSet" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-743">Reads XML schema and data into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-744">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-744">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1ccb9-745"><see cref="T:System.IO.Stream" /> から派生するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-745">An object that derives from <see cref="T:System.IO.Stream" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-746">指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.Stream" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-746">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-747">データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-747">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-748"><xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-748">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="1ccb9-749">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-749">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-750">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-750">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-751">XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-751">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="1ccb9-752">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-752">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-753"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-753">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="1ccb9-754">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-754">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="1ccb9-755">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-755">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="1ccb9-756">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-756">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="1ccb9-757">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-757">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-758">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-758">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="1ccb9-759">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-759">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="1ccb9-760">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-760">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="1ccb9-761">場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-761">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="1ccb9-762">修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-762">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema, as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-763">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-763">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="1ccb9-764">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-764">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-765">次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-765">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-766"><xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-766">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="1ccb9-767">1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-767">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
        <altmember cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
        <altmember cref="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-768">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-768">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-769">スキーマおよびデータの読み出し元の <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-769">The <see langword="TextReader" /> from which to read the schema and data.</span></span></param>
        <summary><span data-ttu-id="1ccb9-770">指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.TextReader" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-770">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-771">データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-771">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-772"><xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-772">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="1ccb9-773">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-773">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-774">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-774">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-775">XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-775">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="1ccb9-776">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-776">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-777"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-777">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="1ccb9-778">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-778">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="1ccb9-779">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-779">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="1ccb9-780">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-780">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="1ccb9-781">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-781">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-782">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-782">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="1ccb9-783">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-783">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="1ccb9-784">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-784">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="1ccb9-785">場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-785">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="1ccb9-786">修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-786">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="1ccb9-787">継承するクラス、<xref:System.IO.TextReader>クラスが含まれて、<xref:System.IO.StreamReader>と<xref:System.IO.StringReader>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-787">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-788">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-788">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="1ccb9-789">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-789">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-790">次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-790">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-791"><xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-791">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="1ccb9-792">1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-792">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-793">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-793">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1ccb9-794">読み込み元の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-794">The filename (including the path) from which to read.</span></span></param>
        <summary><span data-ttu-id="1ccb9-795">指定したファイルを使用して、XML スキーマとデータを <see cref="T:System.Data.DataSet" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-795">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-796">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-796">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-797"><xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-797">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="1ccb9-798">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-798">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-799">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-799">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-800">XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-800">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="1ccb9-801">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-801">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-802"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-802">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="1ccb9-803">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-803">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="1ccb9-804">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-804">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="1ccb9-805">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-805">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="1ccb9-806">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-806">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-807">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-807">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="1ccb9-808">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-808">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="1ccb9-809">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-809">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="1ccb9-810">場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-810">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="1ccb9-811">修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-811">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-812">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-812">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="1ccb9-813">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-813">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-814">次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-814">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-815"><xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-815">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="1ccb9-816">1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-816">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="1ccb9-817"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-817"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="1ccb9-818">ファイルを読み書きします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-818">for reading and writing files.</span></span> <span data-ttu-id="1ccb9-819">関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="1ccb9-819">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-820">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-820">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-821">読み取り元の <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-821">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="1ccb9-822">指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.Xml.XmlReader" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-822">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-823">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-823">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-824"><xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-824">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="1ccb9-825">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-825">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-826">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-826">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-827">XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-827">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="1ccb9-828">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-828">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-829"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-829">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="1ccb9-830">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-830">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="1ccb9-831">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-831">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="1ccb9-832">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-832">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="1ccb9-833">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-833">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-834">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-834">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="1ccb9-835">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-835">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="1ccb9-836">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-836">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="1ccb9-837">場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-837">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="1ccb9-838">修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-838">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="1ccb9-839"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> は <xref:System.Xml.XmlReader>を継承します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-839"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> inherits from <xref:System.Xml.XmlReader>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-840">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-840">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="1ccb9-841">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-841">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-842">次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-842">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-843"><xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-843">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="1ccb9-844">1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-844">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-845">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-845">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1ccb9-846">読み取り元の <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-846">The <see cref="T:System.IO.Stream" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="1ccb9-847"><see cref="T:System.Data.XmlReadMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-847">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-848">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.Stream" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-848">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-849">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-849">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-850"><xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-850">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="1ccb9-851">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-851">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-852">場合も同様、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-852">The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-853">XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-853">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="1ccb9-854">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-854">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-855">使用すると<xref:System.Data.DataSet.ReadXml%2A>を設定して<xref:System.Data.XmlReadMode>に`Diffgram`、ターゲットのコンテンツ`DataSet`とオリジナル`DataSet`diffgram の生成および処理の方法により異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-855">When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed.</span></span> <span data-ttu-id="1ccb9-856">Diffgram の詳細については、次を参照してください。 [Diffgram](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md)します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-856">For more information on diffgrams, see [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-857"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-857">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="1ccb9-858">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-858">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="1ccb9-859">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-859">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="1ccb9-860">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-860">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="1ccb9-861">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-861">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-862">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-862">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="1ccb9-863">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-863">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="1ccb9-864">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-864">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="1ccb9-865">場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-865">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="1ccb9-866">修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-866">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-867">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-867">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="1ccb9-868">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-868">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-869">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-869">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-870">読み取り元の <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-870">The <see cref="T:System.IO.TextReader" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="1ccb9-871"><see cref="T:System.Data.XmlReadMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-871">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-872">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.TextReader" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-872">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-873">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-873">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-874"><xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-874">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="1ccb9-875">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-875">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-876">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-876">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-877">XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-877">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="1ccb9-878">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-878">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-879"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-879">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="1ccb9-880">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-880">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="1ccb9-881">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-881">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="1ccb9-882">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-882">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="1ccb9-883">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-883">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-884">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-884">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="1ccb9-885">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-885">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="1ccb9-886">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-886">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="1ccb9-887">場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-887">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="1ccb9-888">修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-888">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-889">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-889">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="1ccb9-890">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-890">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-891">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-891">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1ccb9-892">読み込み元の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-892">The filename (including the path) from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="1ccb9-893"><see cref="T:System.Data.XmlReadMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-893">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-894">指定したファイルと <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-894">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-895">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-895">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-896"><xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-896">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="1ccb9-897">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-897">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-898">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-898">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-899">XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-899">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="1ccb9-900">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-900">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-901"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-901">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="1ccb9-902">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-902">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="1ccb9-903">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-903">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="1ccb9-904">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-904">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="1ccb9-905">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-905">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-906">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-906">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="1ccb9-907">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-907">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="1ccb9-908">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-908">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="1ccb9-909">場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-909">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="1ccb9-910">修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-910">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-911">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-911">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="1ccb9-912">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-912">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="1ccb9-913"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-913"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="1ccb9-914">ファイルを読み書きします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-914">for reading and writing files.</span></span> <span data-ttu-id="1ccb9-915">関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="1ccb9-915">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-916">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-916">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-917">読み取り元の <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-917">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="1ccb9-918"><see cref="T:System.Data.XmlReadMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-918">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-919">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Xml.XmlReader" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-919">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-920">データを読み込むために使用する <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-920">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-921"><xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-921">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="1ccb9-922">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-922">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-923">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-923">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-924">XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-924">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="1ccb9-925">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-925">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-926"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-926">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="1ccb9-927">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-927">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="1ccb9-928">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-928">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="1ccb9-929">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-929">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="1ccb9-930">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-930">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-931">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-931">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="1ccb9-932">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-932">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="1ccb9-933">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-933">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="1ccb9-934">場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-934">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="1ccb9-935">修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-935">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-936">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-936">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="1ccb9-937">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-937">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-938">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-938">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-939">XML スキーマを <see cref="T:System.Data.DataSet" /> に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-939">Reads an XML schema into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-940">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-940">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.ReadXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1ccb9-941">読み取り元の <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-941">The <see cref="T:System.IO.Stream" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="1ccb9-942">指定した <see cref="T:System.IO.Stream" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-942">Reads the XML schema from the specified <see cref="T:System.IO.Stream" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-943">使用して、<xref:System.Data.DataSet.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-943">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-944">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-944">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="1ccb9-945">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-945">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-946">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-946">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-947">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-947">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="1ccb9-948">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-948">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="1ccb9-949"><xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドを呼び出す前に一般的に、<xref:System.Data.DataSet.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-949">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-950">派生するクラス、<xref:System.IO.Stream>クラスが含まれて<xref:System.IO.BufferedStream>、 <xref:System.IO.FileStream>、 <xref:System.IO.MemoryStream>、および<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-950">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-951">場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされますが、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXmlSchema%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-951">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="1ccb9-952">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-952">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-953">次の例では、作成、<xref:System.IO.FileStream>オブジェクトを使用すると、XML スキーマを読み取るし、呼び出す、<xref:System.Data.DataSet.ReadXmlSchema%2A>オブジェクトとメソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-953">The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-954">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-954">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.TextReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-955">読み取り元の <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-955">The <see cref="T:System.IO.TextReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="1ccb9-956">指定した <see cref="T:System.IO.TextReader" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-956">Reads the XML schema from the specified <see cref="T:System.IO.TextReader" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-957">使用して、<xref:System.Data.DataSet.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-957">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-958">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-958">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="1ccb9-959">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-959">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-960">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-960">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-961">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-961">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="1ccb9-962">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-962">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="1ccb9-963"><xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドを呼び出す前に一般的に、<xref:System.Data.DataSet.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-963">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-964">継承するクラス、<xref:System.IO.TextReader>クラスが含まれて、<xref:System.IO.StreamReader>と<xref:System.IO.StringReader>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-964">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-965">場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされますが、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXmlSchema%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-965">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="1ccb9-966">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-966">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-967">次の例では、作成、<xref:System.IO.StreamReader>オブジェクトを使用すると、スキーマを読み取るし、呼び出す、<xref:System.Data.DataSet.ReadXmlSchema%2A>オブジェクトとメソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-967">The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-968">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-968">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : string -&gt; unit" Usage="dataSet.ReadXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1ccb9-969">読み込み元の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-969">The file name (including the path) from which to read.</span></span></param>
        <summary><span data-ttu-id="1ccb9-970">指定したファイルから <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-970">Reads the XML schema from the specified file into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-971">使用して、<xref:System.Data.DataSet.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-971">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-972">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-972">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="1ccb9-973">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-973">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-974">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-974">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-975">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-975">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="1ccb9-976">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-976">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="1ccb9-977"><xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドを呼び出す前に一般的に、<xref:System.Data.DataSet.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-977">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-978">場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXmlSchema%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-978">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="1ccb9-979">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-979">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="1ccb9-980"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-980"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="1ccb9-981">ファイルを読み書きします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-981">for reading and writing files.</span></span> <span data-ttu-id="1ccb9-982">関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="1ccb9-982">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-983">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-983">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-984">読み取り元の <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-984">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="1ccb9-985">指定した <see cref="T:System.Xml.XmlReader" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-985">Reads the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-986">使用して、<xref:System.Data.DataSet.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-986">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1ccb9-987">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-987">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="1ccb9-988">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-988">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-989">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-989">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="1ccb9-990">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-990">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="1ccb9-991"><xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドを呼び出す前に一般的に、<xref:System.Data.DataSet.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-991">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-992"><xref:System.Xml.XmlReader?displayProperty=nameWithType>クラスが抽象クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-992">The <xref:System.Xml.XmlReader?displayProperty=nameWithType> class is abstract.</span></span> <span data-ttu-id="1ccb9-993">継承するクラス、`XmlReader`は、<xref:System.Xml.XmlTextReader?displayProperty=nameWithType>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-993">A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-994">場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされますが、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXmlSchema%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-994">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="1ccb9-995">.NET Framework version 1.0 を使用している場合は、この例外は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-995">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-996">次の例では、作成、新しい<xref:System.Data.DataSet>と<xref:System.IO.FileStream?displayProperty=nameWithType>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-996">The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="1ccb9-997"><xref:System.IO.FileStream>ファイルのパスとファイル名で作成されたオブジェクトの作成に使用する<xref:System.Xml.XmlTextReader?displayProperty=nameWithType>への引数として渡される、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-997">The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> that is passed as an argument to the <xref:System.Data.DataSet.ReadXmlSchema%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-998">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-998">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXmlSerializable : System.Xml.XmlReader -&gt; unit&#xA;override this.ReadXmlSerializable : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSerializable reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-999">指定された XML リーダー。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-999">The specified XML reader.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1000">属性を無視して、空のデータセットを返します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1000">Ignores attributes and returns an empty DataSet.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public virtual void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RejectChanges();" />
      <MemberSignature Language="F#" Value="abstract member RejectChanges : unit -&gt; unit&#xA;override this.RejectChanges : unit -&gt; unit" Usage="dataSet.RejectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-1001">この <see cref="T:System.Data.DataSet" /> を作成するか、前回 <see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更をロールバックします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1001">Rolls back all the changes made to the <see cref="T:System.Data.DataSet" /> since it was created, or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1002">呼び出す、<xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType>を呼び出す、<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>メソッドをすべて<xref:System.Data.DataTable>オブジェクトに含まれる、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1002">Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1ccb9-1003"><xref:System.Data.DataRow> オブジェクトに含まれる、<xref:System.Data.DataSet>ごとに設定できる編集モードを呼び出すことによって、<xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1003"><xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1ccb9-1004">呼び出した後、<xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType>メソッドを呼び出すことによって変更が拒否されること、<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>上、<xref:System.Data.DataTable>を<xref:System.Data.DataRow>オブジェクトが属しています。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1004">After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.</span></span>  
  
 <span data-ttu-id="1ccb9-1005">ときに、<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>メソッドが呼び出されると、まだ編集モードでは、行の編集をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1005">When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method is called, any rows still in edit-mode cancel their edits.</span></span> <span data-ttu-id="1ccb9-1006">新しい行が削除されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1006">New rows are removed.</span></span> <span data-ttu-id="1ccb9-1007">変更および削除された行が元の状態を返す (`DataRowState.Unchanged`)。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1007">Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).</span></span>  
  
 <span data-ttu-id="1ccb9-1008">Acceptchange と Rejectchange にのみ適用<xref:System.Data.DataRow>に関連する変更 (つまり、 `Add`、 `Remove`、 `Delete`、および`Modify`)。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1008">AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`).</span></span> <span data-ttu-id="1ccb9-1009">これらは、スキーマまたは構造の変更を適用できません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1009">They are not applicable to schema or structural changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1010">次の例から派生したクラス、<xref:System.Data.DataSet>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1010">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="1ccb9-1011"><xref:System.Data.DataSet.RejectChanges%2A>イベントは、関数内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1011">The <xref:System.Data.DataSet.RejectChanges%2A> event is invoked from within a function.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1012">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1012">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Relations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection Relations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection Relations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Relations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Relations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ Relations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Relations : System.Data.DataRelationCollection" Usage="System.Data.DataSet.Relations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetRelationsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-1013">テーブルをリンクし、親テーブルから子テーブルへ移動できるようにするリレーションシップのコレクションが取得されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1013">Gets the collection of relations that link tables and allow navigation from parent tables to child tables.</span></span></summary>
        <value><span data-ttu-id="1ccb9-1014"><see cref="T:System.Data.DataRelationCollection" /> オブジェクトのコレクションを格納している <see cref="T:System.Data.DataRelation" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1014">A <see cref="T:System.Data.DataRelationCollection" /> that contains a collection of <see cref="T:System.Data.DataRelation" /> objects.</span></span> <span data-ttu-id="1ccb9-1015"><see cref="T:System.Data.DataRelation" /> オブジェクトが存在しない場合、空のコレクションが返されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1015">An empty collection is returned if no <see cref="T:System.Data.DataRelation" /> objects exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ccb9-1016">次の例の出力からのすべての子テーブルの列名、<xref:System.Data.DataSet.Relations%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1016">The following example prints the column name of all child tables through the <xref:System.Data.DataSet.Relations%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1017">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1017">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.RemotingFormat : System.Data.SerializationFormat with get, set" Usage="System.Data.DataSet.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-1018">リモート処理中に使用される <see cref="T:System.Data.SerializationFormat" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1018">Gets or sets a <see cref="T:System.Data.SerializationFormat" /> for the <see cref="T:System.Data.DataSet" /> used during remoting.</span></span></summary>
        <value><span data-ttu-id="1ccb9-1019"><see cref="T:System.Data.SerializationFormat" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1019">A <see cref="T:System.Data.SerializationFormat" /> object.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1020">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1020">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dataSet.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-1021">すべてのテーブルをクリアし、<see cref="T:System.Data.DataSet" />からすべての関係、外部の制約、テーブルを削除します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1021">Clears all tables and removes all relations, foreign constraints, and tables from the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="1ccb9-1022">サブクラスが <see cref="M:System.Data.DataSet.Reset" /> をオーバーライドして <see cref="T:System.Data.DataSet" /> を元の状態に戻す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1022">Subclasses should override <see cref="M:System.Data.DataSet.Reset" /> to restore a <see cref="T:System.Data.DataSet" /> to its original state.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1023">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1023">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SchemaSerializationMode">
      <MemberSignature Language="C#" Value="public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SchemaSerializationMode SchemaSerializationMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.SchemaSerializationMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SchemaSerializationMode As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::SchemaSerializationMode SchemaSerializationMode { System::Data::SchemaSerializationMode get(); void set(System::Data::SchemaSerializationMode value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSerializationMode : System.Data.SchemaSerializationMode with get, set" Usage="System.Data.DataSet.SchemaSerializationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-1024"><see cref="T:System.Data.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1024">Gets or sets a <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-1025"><see cref="T:System.Data.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1025">A <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1026">A <xref:System.Data.DataSet> Web サービスとリモート処理のシナリオでは既定のスキーマとインスタンス データをシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1026">A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios.</span></span> <span data-ttu-id="1ccb9-1027">設定、<xref:System.Data.DataSet.SchemaSerializationMode%2A>プロパティの型指定された`DataSet`に<xref:System.Data.SchemaSerializationMode.ExcludeSchema>によりシリアル化のペイロードから除外するスキーマ情報。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1027">Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload.</span></span>  
  
 <span data-ttu-id="1ccb9-1028"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 型指定されたに対してのみ`DataSet`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1028"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`.</span></span> <span data-ttu-id="1ccb9-1029">型指定のされていないため`DataSet`このプロパティにのみ設定できます<xref:System.Data.SchemaSerializationMode.IncludeSchema>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1029">For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="1ccb9-1030"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 基になるスキーマについては、型指定されている場合のみ使用する必要があります`DataTables`、`DataRelations`と`Constraints`は変更されていません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1030"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified.</span></span> <span data-ttu-id="1ccb9-1031">変更が必要で、完全なスキーマ情報をシリアル化する必要があります<xref:System.Data.SchemaSerializationMode.IncludeSchema>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1031">If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="1ccb9-1032"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> バージョン 2.0 以降の .NET Framework でサポートされます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1032"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later.</span></span>  
  
 <span data-ttu-id="1ccb9-1033">ときに<xref:System.Data.SchemaSerializationMode.ExcludeSchema>設定は、上に存在する最上位レベルのランタイム プロパティのみ、<xref:System.Data.DataSet>はシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1033">When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized.</span></span> <span data-ttu-id="1ccb9-1034">さらに、開催される、既定値と異なる場合にのみ、シリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1034">In addition, they are serialized only if they happen to be different from the default values.</span></span> <span data-ttu-id="1ccb9-1035">いずれ、 `Tables`、`Relations`または`Constraints`はシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1035">None of the `Tables`, `Relations` or `Constraints` are serialized.</span></span> <span data-ttu-id="1ccb9-1036">ランタイム シリアル化されたプロパティが含まれます<xref:System.Data.DataSet.DataSetName%2A>、 <xref:System.Data.DataSet.Namespace%2A>、 <xref:System.Data.DataSet.Prefix%2A>、 <xref:System.Data.DataSet.Locale%2A>、 <xref:System.Data.DataSet.EnforceConstraints%2A>、および<xref:System.Data.DataSet.CaseSensitive%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1036">The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>.</span></span> <span data-ttu-id="1ccb9-1037">これらのプロパティは、全体のランタイム データの整合性を保持するかどうかを確認するシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1037">These properties are serialized to make sure that overall runtime data integrity is preserved.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1038">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1038">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeRelations">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeRelations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeRelations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeRelations" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeRelations () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeRelations();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeRelations : unit -&gt; bool&#xA;override this.ShouldSerializeRelations : unit -&gt; bool" Usage="dataSet.ShouldSerializeRelations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-1039"><see cref="P:System.Data.DataSet.Relations" /> プロパティを永続化する必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1039">Gets a value indicating whether <see cref="P:System.Data.DataSet.Relations" /> property should be persisted.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-1040">プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1040"><see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1041">いずれかのデザイナーを作成する場合は通常このメソッドを使用する、 <xref:System.Data.DataSet>、またはコントロールを組み込む独自に作成、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1041">You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1042">次の例から派生したクラス、<xref:System.Data.DataSet>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1042">The following examples show a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="1ccb9-1043"><xref:System.Data.DataSet.Reset%2A>と<xref:System.Data.DataSet.ShouldSerializeRelations%2A>メソッドは、派生クラス内の関数内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1043">The <xref:System.Data.DataSet.Reset%2A> and <xref:System.Data.DataSet.ShouldSerializeRelations%2A> methods are invoked from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1044">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1044">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTables">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTables () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTables();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeTables : unit -&gt; bool&#xA;override this.ShouldSerializeTables : unit -&gt; bool" Usage="dataSet.ShouldSerializeTables " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-1045"><see cref="P:System.Data.DataSet.Tables" /> プロパティを永続化する必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1045">Gets a value indicating whether <see cref="P:System.Data.DataSet.Tables" /> property should be persisted.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-1046">プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1046"><see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1047">いずれかのデザイナーを作成する場合にのみ通常このメソッドを使用する、 <xref:System.Data.DataSet>、またはコントロールを組み込む独自に作成、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1047">You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1048">次の例から派生したクラス、<xref:System.Data.DataSet>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1048">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="1ccb9-1049"><xref:System.Data.DataSet.ShouldSerializeTables%2A>派生クラスの関数内からメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1049">The <xref:System.Data.DataSet.ShouldSerializeTables%2A> method is called from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1050">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1050">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Data.DataSet.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-1051"><see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1051">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-1052"><see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1052">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1053">サイト バインドを<xref:System.ComponentModel.Component>を<xref:System.ComponentModel.Container>と、それらの間の通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1053">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1054">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1054">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-1055">このメンバーの説明については、<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1055">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-1056">このメンバーの説明については、<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1056">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1057">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1057">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1ccb9-1058">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1058">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-1059">このメンバーの説明については、<see cref="M:System.ComponentModel.IListSource.GetList" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1059">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-1060">このメンバーの説明については、<see cref="M:System.ComponentModel.IListSource.GetList" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1060">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1061">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1061">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1ccb9-1062">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1062">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="1ccb9-1063">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1063">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="1ccb9-1064">このシリアル化のシリアル化先 (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1064">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1065">シリアル化情報オブジェクトを、<see cref="T:System.Data.DataSet" /> のシリアル化に必要なデータで事前設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1065">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ccb9-1066">このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1066">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span></span></summary>
        <returns><span data-ttu-id="1ccb9-1067">このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1067">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1068">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1068">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1ccb9-1069">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1069">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ccb9-1070"><see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1070">A <see cref="T:System.Xml.XmlReader" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1071">このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1071">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1072">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1072">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1ccb9-1073">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1073">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1074"><see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1074">A <see cref="T:System.Xml.XmlWriter" />.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1075">このメンバーの説明については、<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1075">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1076">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1076">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1ccb9-1077">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1077">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Data.DataTableCollection Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTableCollection Tables" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As DataTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTableCollection ^ Tables { System::Data::DataTableCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Data.DataTableCollection" Usage="System.Data.DataSet.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetTablesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ccb9-1078"><see cref="T:System.Data.DataSet" /> に格納されているテーブルのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1078">Gets the collection of tables contained in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="1ccb9-1079">この <see cref="T:System.Data.DataTableCollection" /> に格納されている <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1079">The <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="1ccb9-1080"><see cref="T:System.Data.DataTable" /> オブジェクトが存在しない場合、空のコレクションが返されます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1080">An empty collection is returned if no <see cref="T:System.Data.DataTable" /> objects exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1081">コレクションにテーブルを追加するには使用<xref:System.Data.DataTableCollection.Add%2A>のメソッド、<xref:System.Data.DataTableCollection>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1081">To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>.</span></span> <span data-ttu-id="1ccb9-1082">テーブルを削除するには、使用、<xref:System.Data.DataTableCollection.Remove%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1082">To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1083">次の例を返します、<xref:System.Data.DataSet>オブジェクトの<xref:System.Data.DataTableCollection>、各テーブルで行および列を出力します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1083">The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1084">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1084">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-1085"><see cref="T:System.Data.DataSet" /> から XML データを書き込みます。オプションでスキーマも書き込むことができます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1085">Writes XML data, and optionally the schema, from the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1086">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1086">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1ccb9-1087">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1087">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1088">指定した <see cref="T:System.Data.DataSet" /> を使用して <see cref="T:System.IO.Stream" /> の現在のデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1088">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1089">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1089">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="1ccb9-1090">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`mode`パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1090">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-1091">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1091">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-1092">XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1092">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="1ccb9-1093">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1093">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-1094"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1094">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1095">次の例では、作成、<xref:System.IO.FileStream?displayProperty=nameWithType>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1095">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="1ccb9-1096">オブジェクトを使用して、 <xref:System.Data.DataSet.WriteXml%2A> XML ドキュメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1096">The object is then used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1097">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1097">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1098">書き込む対象の <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1098">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1099">指定した <see cref="T:System.Data.DataSet" /> を使用して <see cref="T:System.IO.TextWriter" /> の現在のデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1099">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1100">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1100">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="1ccb9-1101">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`mode`パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1101">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-1102">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1102">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-1103">XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1103">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="1ccb9-1104">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1104">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-1105"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1105">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1106">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1106">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string -&gt; unit" Usage="dataSet.WriteXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1ccb9-1107">書き込み先の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1107">The file name (including the path) to which to write.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1108">指定したファイルに、<see cref="T:System.Data.DataSet" /> の現在のデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1108">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1109">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1109">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="1ccb9-1110">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`mode`パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1110">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-1111">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1111">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-1112">XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1112">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="1ccb9-1113">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1113">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-1114"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1114">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="1ccb9-1115"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1115"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="1ccb9-1116">ファイルを読み書きします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1116">for reading and writing files.</span></span> <span data-ttu-id="1ccb9-1117">関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="1ccb9-1117">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1118">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1118">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1119">書き込みに使用する <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1119">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1120">指定した <see cref="T:System.Data.DataSet" /> に、<see cref="T:System.Xml.XmlWriter" /> の現在のデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1120">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1121">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1121">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="1ccb9-1122">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`mode`パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1122">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-1123">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1123">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-1124">XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1124">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="1ccb9-1125">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1125">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-1126"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1126">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1127">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1127">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1ccb9-1128">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1128">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <param name="mode"><span data-ttu-id="1ccb9-1129"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1129">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1130">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.Stream" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1130">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="1ccb9-1131">スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1131">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1132">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1132">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="1ccb9-1133">データとスキーマの両方を作成するには、設定、`mode`パラメーター`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1133">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-1134">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1134">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-1135">XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1135">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="1ccb9-1136">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1136">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-1137"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1137">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1138">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1138">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1139">ドキュメントの書き込みに使用する <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1139">A <see cref="T:System.IO.TextWriter" /> object used to write the document.</span></span></param>
        <param name="mode"><span data-ttu-id="1ccb9-1140"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1140">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1141">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.TextWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1141">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="1ccb9-1142">スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1142">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1143">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1143">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="1ccb9-1144">データとスキーマの両方を作成するには、設定、`mode`パラメーター`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1144">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-1145">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1145">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-1146">XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1146">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="1ccb9-1147">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1147">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-1148"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1148">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1149">次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1149">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="1ccb9-1150"><xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1150">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="1ccb9-1151">1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1151">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1152">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1152">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1ccb9-1153">書き込み先の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1153">The file name (including the path) to which to write.</span></span></param>
        <param name="mode"><span data-ttu-id="1ccb9-1154"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1154">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1155">指定した <see cref="T:System.Data.DataSet" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを、指定したファイルに書き込みます。オプションでスキーマを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1155">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="1ccb9-1156">スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1156">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1157">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1157">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="1ccb9-1158">データとスキーマの両方を作成するには、設定、`mode`パラメーター`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1158">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-1159">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1159">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-1160">XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1160">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="1ccb9-1161">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1161">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-1162"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1162">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1163">次の例では、 <xref:System.Data.DataSet.WriteXml%2A> XML ドキュメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1163">The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="1ccb9-1164"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1164"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="1ccb9-1165">ファイルを読み書きします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1165">for reading and writing files.</span></span> <span data-ttu-id="1ccb9-1166">関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="1ccb9-1166">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1167">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1167">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1168">書き込みに使用する <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1168">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span></span></param>
        <param name="mode"><span data-ttu-id="1ccb9-1169"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1169">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1170">指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Xml.XmlWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1170">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="1ccb9-1171">スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1171">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1172">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1172">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="1ccb9-1173">データとスキーマの両方を作成するには、設定、`mode`パラメーター`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1173">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="1ccb9-1174">True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1174">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="1ccb9-1175">XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1175">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="1ccb9-1176">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1176">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ccb9-1177"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1177">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1178">次の例では、作成、<xref:System.IO.FileStream?displayProperty=nameWithType>オブジェクトを新規作成に使用される<xref:System.Xml.XmlTextWriter>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1178">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object that is used to create a new <xref:System.Xml.XmlTextWriter>.</span></span> <span data-ttu-id="1ccb9-1179"><xref:System.Xml.XmlTextWriter>オブジェクトでは、使用して、 <xref:System.Data.DataSet.WriteXml%2A> XML ドキュメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1179">The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1180">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1180">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ccb9-1181"><see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1181">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1182">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1182">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1ccb9-1183">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1183">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1184">XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.Stream" /> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1184">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1185">使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataSet> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1185">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="1ccb9-1186">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1186">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="1ccb9-1187">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1187">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-1188">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1188">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="1ccb9-1189">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1189">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-1190">派生するクラス、<xref:System.IO.Stream>クラスが含まれて<xref:System.IO.BufferedStream>、 <xref:System.IO.FileStream>、 <xref:System.IO.MemoryStream>、および<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1190">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1191">次の例では、作成、新しい<xref:System.IO.FileStream>オブジェクトに渡される、<xref:System.Data.DataSet.WriteXmlSchema%2A>にスキーマをディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1191">The following example creates a new <xref:System.IO.FileStream> object that is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema to disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1192">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1192">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1193">書き込む対象の <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1193">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1194">XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.TextWriter" /> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1194">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1195">使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataSet> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1195">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="1ccb9-1196">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1196">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="1ccb9-1197">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1197">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-1198">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1198">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="1ccb9-1199">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1199">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-1200">クラスから派生、<xref:System.IO.TextWriter?displayProperty=nameWithType>クラスが含まれて、 <xref:System.Web.HttpWriter?displayProperty=nameWithType>、 <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>、 <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>、 <xref:System.IO.StreamWriter?displayProperty=nameWithType>、および<xref:System.IO.StringWriter?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1200">Classes the derive from the <xref:System.IO.TextWriter?displayProperty=nameWithType> class include the <xref:System.Web.HttpWriter?displayProperty=nameWithType>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>, <xref:System.IO.StreamWriter?displayProperty=nameWithType>, and <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1201">次の例では、作成、<xref:System.Text.StringBuilder?displayProperty=nameWithType>にオブジェクトを新規作成に使用されます<xref:System.IO.StringWriter?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1201">The following example creates a <xref:System.Text.StringBuilder?displayProperty=nameWithType> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1ccb9-1202"><xref:System.IO.StringWriter>に渡される、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、および結果の文字列がコンソール ウィンドウに出力します。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1202">The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1203">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1203">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string -&gt; unit" Usage="dataSet.WriteXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1ccb9-1204">書き込み先の (パスを含む) ファイル名。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1204">The file name (including the path) to which to write.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1205"><see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとしてファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1205">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1206">使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataSet> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1206">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="1ccb9-1207">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1207">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="1ccb9-1208">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1208">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-1209">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1209">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="1ccb9-1210">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1210">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="1ccb9-1211"><see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1211"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="1ccb9-1212">ファイルを読み書きします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1212">for reading and writing files.</span></span> <span data-ttu-id="1ccb9-1213">関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="1ccb9-1213">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1214">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1214">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1215">書き込み先の <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1215">The <see cref="T:System.Xml.XmlWriter" /> to write to.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1216"><see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとして <see cref="T:System.Xml.XmlWriter" /> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1216">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to an <see cref="T:System.Xml.XmlWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ccb9-1217">使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataSet> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1217">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="1ccb9-1218">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1218">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="1ccb9-1219">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1219">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-1220">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1220">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="1ccb9-1221">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1221">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="1ccb9-1222">1 つのクラスから継承する、<xref:System.Xml.XmlWriter?displayProperty=nameWithType>クラスは、<xref:System.Xml.XmlTextWriter>クラス。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1222">One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=nameWithType> class is the <xref:System.Xml.XmlTextWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ccb9-1223">次の例では、作成、新しい<xref:System.IO.FileStream?displayProperty=nameWithType>指定したパスのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1223">The following example creates a new <xref:System.IO.FileStream?displayProperty=nameWithType> object with the specified path.</span></span> <span data-ttu-id="1ccb9-1224"><xref:System.IO.FileStream>オブジェクトの作成に使用する<xref:System.Xml.XmlTextWriter>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1224">The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XmlTextWriter> object.</span></span> <span data-ttu-id="1ccb9-1225"><xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドが、呼び出されると、<xref:System.Xml.XmlTextWriter>にスキーマをディスクに書き込むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1225">The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md"><span data-ttu-id="1ccb9-1226">ADO.NET でのデータセットの使用</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1226">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (stream, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1ccb9-1227">書き込み先の <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1227">A <see cref="T:System.IO.Stream" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="1ccb9-1228"><see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1228">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1229">XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.Stream" /> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1229">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1230">書き込み先の <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1230">A <see cref="T:System.IO.TextWriter" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="1ccb9-1231"><see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1231">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1232">指定した <see cref="T:System.Data.DataSet" /> に対し、<see cref="T:System.IO.TextWriter" /> 構造体を XML スキーマとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1232">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (fileName, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1ccb9-1233">書き込み先のファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1233">The name of the file to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="1ccb9-1234"><see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1234">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1235"><see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとしてファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1235">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ccb9-1236">書き込み先の <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1236">A <see cref="T:System.Xml.XmlWriter" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="1ccb9-1237"><see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1237">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="1ccb9-1238">指定した <see cref="T:System.Data.DataSet" /> に対し、<see cref="T:System.Xml.XmlWriter" /> 構造体を XML スキーマとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="1ccb9-1238">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>