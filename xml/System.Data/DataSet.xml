<Type Name="DataSet" FullName="System.Data.DataSet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="90351397491a239c122190dd82c7d221c7fd69d3" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48689839" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataSet" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, ISupportInitializeNotification, IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultProperty("DataSetName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Xml.Serialization.XmlRoot("DataSet")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データのメモリ内キャッシュを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>ADO.NET のアーキテクチャの主要なコンポーネントは、これは、データ ソースから取得したデータのメモリ内キャッシュで、します。 <xref:System.Data.DataSet>のコレクションから成る<xref:System.Data.DataTable>で互いに関連付けることができるオブジェクト<xref:System.Data.DataRelation>オブジェクト。 データの整合性を適用することもできます、<xref:System.Data.DataSet>を使用して、<xref:System.Data.UniqueConstraint>と<xref:System.Data.ForeignKeyConstraint>オブジェクト。 使用に関する詳細については<xref:System.Data.DataSet>、オブジェクトを参照してください[Dataset、Datatable、および Dataview](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md)します。  
  
 一方<xref:System.Data.DataTable>オブジェクトは、データを含む、<xref:System.Data.DataRelationCollection>がテーブルの階層構造を移動することができます。 テーブルが含まれている、<xref:System.Data.DataTableCollection>経由でアクセス、<xref:System.Data.DataSet.Tables%2A>プロパティ。 アクセスするときに<xref:System.Data.DataTable>オブジェクトでは、条件付きで大文字小文字が区別されることに注意してください。 たとえば、1 つ<xref:System.Data.DataTable>"mydatatable"という名前し"Mydatatable"という 2 つは、1 つのテーブルの検索に使用される文字列は大文字と小文字を区別見なされます。 ただし、"mydatatable"が存在し、"Mydatatable"は、検索文字列は、大文字と小文字を区別しない見なされます。 操作の詳細については<xref:System.Data.DataTable>、オブジェクトを参照してください[DataTable の作成](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)です。  
  
 A<xref:System.Data.DataSet>読み取ってデータとスキーマを XML ドキュメントとして記述できます。 データとスキーマが HTTP で転送し、XML が有効な任意のプラットフォーム上の任意のアプリケーションで使用します。 XML スキーマとしてスキーマを保存することができます、<xref:System.Data.DataSet.WriteXmlSchema%2A>を使用して、メソッド、およびスキーマとデータの両方を保存できる、<xref:System.Data.DataSet.WriteXml%2A>メソッド。 スキーマとデータの両方を含む XML ドキュメントを読み取り、使用、<xref:System.Data.DataSet.ReadXml%2A>メソッド。  
  
 一般的な複数層の実装を作成および更新するための手順で、 <xref:System.Data.DataSet>、し、さらには、元のデータを更新しています。  
  
1.  ビルドし、各<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>を使用してデータ ソースからデータを<xref:System.Data.Common.DataAdapter>します。  
  
2.  個々 のデータが変更<xref:System.Data.DataTable>オブジェクトを追加、更新、または削除<xref:System.Data.DataRow>オブジェクト。  
  
3.  呼び出す、<xref:System.Data.DataSet.GetChanges%2A>秒を作成するメソッドを<xref:System.Data.DataSet>データへの変更のみの機能です。  
  
4.  呼び出す、<xref:System.Data.Common.DataAdapter.Update%2A>のメソッド、 <xref:System.Data.Common.DataAdapter>、もう 1 つを渡す<xref:System.Data.DataSet>を引数として。  
  
5.  呼び出す、<xref:System.Data.DataSet.Merge%2A>メソッドは、2 番目の変更をマージする<xref:System.Data.DataSet>最初にします。  
  
6.  呼び出す、<xref:System.Data.DataSet.AcceptChanges%2A>上、<xref:System.Data.DataSet>します。 またを呼び出して<xref:System.Data.DataSet.RejectChanges%2A>変更を取り消します。  
  
> [!NOTE]
>  <xref:System.Data.DataSet>と<xref:System.Data.DataTable>オブジェクトから継承<xref:System.ComponentModel.MarshalByValueComponent>、およびサポート、<xref:System.Runtime.Serialization.ISerializable>リモート処理用のインターフェイス。 これらは、リモート処理ができる唯一の ADO.NET オブジェクトです。  
  
> [!NOTE]
>  継承されたクラス<xref:System.Data.DataSet>でファイナライザーが中止されたため、ガベージ コレクターによって、ファイナライズいない<xref:System.Data.DataSet>します。 派生クラスで呼び出すことができます、<xref:System.GC.ReRegisterForFinalize%2A>メソッド、クラス、ガベージ コレクターによって完了するを許可するコンス トラクター内。  
  
   
  
## Examples  
 次の例は、いくつかの方法を組み合わせることで構成されていますし、作成し、入力、<xref:System.Data.DataSet>から、 **Northwind**データベース。  
  
 [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型は、マルチ スレッドの読み取り操作も安全です。 書き込み操作を同期する必要があります。</threadsafe>
    <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装の<xref:System.Data.DataSet>コンス トラクターが、パラメーターを受け取らないし、新しいインスタンスの既定の名前では、"NewDataSet、"を作成します。  
  
 名前、<xref:System.Data.DataSet>の XML 表現することを確認するために必要な<xref:System.Data.DataSet>常にスキーマ定義内の最上位レベルの要素は、ドキュメントの要素の名前を持ちます。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:System.Data.DataSet>、し、2 つ追加<xref:System.Data.DataTable>オブジェクト。  
  
 [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet (string dataSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataSetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet(System::String ^ dataSetName);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : string -&gt; System.Data.DataSet" Usage="new System.Data.DataSet dataSetName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetName">
          <see cref="T:System.Data.DataSet" /> の名前。</param>
        <summary>指定した名前で <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前、<xref:System.Data.DataSet>の XML 表現することを確認するために必要な<xref:System.Data.DataSet>常にスキーマ定義で最上位レベルの要素は、ドキュメントの要素の名前を持ちます。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:System.Data.DataSet>、2 つに<xref:System.Data.DataTable>オブジェクトが追加されます。  
  
 [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataSet.DataSetName" />
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
        <param name="context">指定したシリアル化ストリームの転送元と転送先。</param>
        <summary>指定されたシリアル化情報とコンテキストを持つ <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, bool ConstructSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext, ConstructSchema As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext * bool -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context, ConstructSchema)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
        <Parameter Name="ConstructSchema" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
        <param name="ConstructSchema">ブール値。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="dataSet.AcceptChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.DataSet" /> の読み込み、または前回の <see cref="M:System.Data.DataSet.AcceptChanges" /> の呼び出し以降にこのデータセットに対して行われたすべての変更をコミットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 両方の<xref:System.Data.DataRow>と<xref:System.Data.DataTable>クラスが<xref:System.Data.DataSet.AcceptChanges%2A>メソッド。 呼び出す<xref:System.Data.DataTable.AcceptChanges%2A>で、<xref:System.Data.DataTable>レベルのエラーの原因、<xref:System.Data.DataRow.AcceptChanges%2A>メソッドごとに<xref:System.Data.DataRow>呼び出されます。 同様に、呼び出す<xref:System.Data.DataSet.AcceptChanges%2A>上、<xref:System.Data.DataSet>により<xref:System.Data.DataTable.AcceptChanges%2A>内の各テーブルに呼び出される、<xref:System.Data.DataSet>します。 この方法では、複数レベルのメソッドを呼び出すことができますがあります。 呼び出す、<xref:System.Data.DataSet.AcceptChanges%2A>の<xref:System.Data.DataSet>すると、1 回の呼び出しですべての下位オブジェクト (たとえば、テーブルと行) でメソッドを呼び出すことができます。  
  
 呼び出すと`AcceptChanges`上、 `DataSet`、any<xref:System.Data.DataRow>まだ編集モードでのオブジェクトが編集内容を正常に終了します。 <xref:System.Data.DataRow.RowState%2A>の各プロパティ<xref:System.Data.DataRow>も変更します。`Added`と`Modified`になる行`Unchanged`、および`Deleted`行が削除されます。  
  
 場合、`DataSet`が含まれています<xref:System.Data.ForeignKeyConstraint>オブジェクトを呼び出し、`AcceptChanges`メソッドとも、<xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A>を適用します。  
  
> [!NOTE]
>  `AcceptChanges` `RejectChanges`にのみ適用`DataRow`に関連する変更 (つまり、Add、Remove、Delete、および変更)。 これらは、スキーマまたは構造の変更を適用できません。  
>   
>  AcceptChanges を呼び出すことはレプリケートされませんこれらの変更データ ソース、データ アダプターを使用して、データセットに格納された場合。 そのような状況で呼び出す<xref:System.Data.Common.DataAdapter.Update%2A>代わりにします。 参照してください[Dataadapter によるデータ ソースを更新](http://msdn.microsoft.com/library/33y2221y.aspx)詳細についてはします。  
  
   
  
## Examples  
 次の例では、追加、<xref:System.Data.DataRow>を<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>します。 <xref:System.Data.DataSet.AcceptChanges%2A>に対してメソッドを呼び出すし、 <xref:System.Data.DataSet>、すべてにどの連鎖<xref:System.Data.DataTable>それに含まれるオブジェクト。  
  
 [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="dataSet.BeginInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataSet" /> の初期化を開始します。 初期化は実行時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Studio .NET のデザイン環境では、このメソッドを使用して、フォームまたはその他のコンポーネントで使用するコンポーネントの初期化を開始します。 <xref:System.Data.DataSet.EndInit%2A>メソッドは、初期化を終了します。 使用して、<xref:System.Data.DataSet.BeginInit%2A>と<xref:System.Data.DataSet.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CaseSensitive : bool with get, set" Usage="System.Data.DataSet.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetCaseSensitiveDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataTable" /> オブジェクト内の文字列比較で大文字と小文字を区別するかどうかを示す値を取得または設定します。</summary>
        <value>文字列比較で大文字と小文字を区別する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.CaseSensitive%2A>プロパティごとに並べ替え、検索、およびフィルター操作を実行する方法に影響する<xref:System.Data.DataTable>に含まれるオブジェクトを<xref:System.Data.DataSet>を使用する場合、<xref:System.Data.DataTable.Select%2A>メソッド。  
  
 既定の設定によって、<xref:System.Data.DataSet.CaseSensitive%2A>プロパティを<xref:System.Data.DataSet>設定も、<xref:System.Data.DataTable.CaseSensitive%2A>関連付けられているそれぞれのプロパティ<xref:System.Data.DataTable>同じ値にします。  
  
   
  
## Examples  
 次の例を切り替えます、<xref:System.Data.DataSet.CaseSensitive%2A>プロパティ。  
  
 [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="dataSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのテーブル内のすべての行を削除して、データの <see cref="T:System.Data.DataSet" /> を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Data.DataSet>にバインドされて、<xref:System.Xml.XmlDataDocument>を呼び出すと、<xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType>または<xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType>発生させる、<xref:System.NotSupportedException>します。 このような状況を避けるためには、各テーブルは、一度に 1 行ずつを削除するを走査します。  
  
   
  
## Examples  
 次の例では、クリア、<xref:System.Data.DataSet>のすべてのテーブルのすべての行。  
  
 [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataSet Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataSet ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Data.DataSet&#xA;override this.Clone : unit -&gt; System.Data.DataSet" Usage="dataSet.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべての <see cref="T:System.Data.DataSet" /> スキーマ、リレーションシップ、および制約を含め <see cref="T:System.Data.DataTable" /> の構造体をコピーします。 データのコピーは行いません。</summary>
        <returns>現在の <see cref="T:System.Data.DataSet" /> と同じスキーマを持つが、データが格納されていない新しい <see cref="T:System.Data.DataSet" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  これらのクラスがサブクラス化されている場合、クローンは同じサブクラスがあります。  
  
   
  
## Examples  
 次の例のクローンを作成する、<xref:System.Data.DataSet>オブジェクトのスキーマ。  
  
 [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Copy" />
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataSet Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Data.DataSet" Usage="dataSet.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.DataSet" /> の構造体だけでなくデータもコピーします。</summary>
        <returns>この <see cref="T:System.Data.DataSet" /> と同じ構造体 (テーブル スキーマ、リレーションシップ、および制約) とデータを持つ新しい <see cref="T:System.Data.DataSet" />。  
  
 <block subset="none" type="note"><para>  
 これらのクラスがサブクラス化されている場合は、コピーも同じサブクラスになります。  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、 <xref:System.Data.DataSet.Copy%2A> 、元のコピーを作成するメソッド<xref:System.Data.DataSet>します。  
  
 [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Clone" />
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDataReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataTableReader" /> ごとに 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。順序は、<see cref="P:System.Data.DataSet.Tables" /> コレクション内のテーブルでの出現順序と同じです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内で、返された結果セットの順序を保証するために<xref:System.Data.DataTableReader>場合、<xref:System.Data.DataTable>内、<xref:System.Data.DataSet>が空では表すことがによって空の結果セット内で、返された`DataTableReader`。  
  
   
  
## Examples  
 この例では、コンソール アプリケーションを作成します 3<xref:System.Data.DataTable>インスタンスし、それぞれに追加します、<xref:System.Data.DataSet>します。 例では、<xref:System.Data.DataSet.CreateDataReader%2A>メソッドと、返された内容を表示<xref:System.Data.DataTableReader>します。 結果の順序の設定に注意してください、`DataTableReader`の順序では、制御、`DataTable`パラメーターとして渡されたインスタンス。  
  
> [!NOTE]
>  この例は、のいずれかのオーバー ロードされたバージョンを使用する方法を示します`CreateDataReader`します。 使用可能な可能性があるその他の例は、個々 のオーバー ロードのトピックを参照してください。  
  
 [!code-csharp[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/VB/source.vb#1)]  
  
 例では、コンソール ウィンドウに次のコードが表示されます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : unit -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.DataTableReader" /> ごとに 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。順序は、<see cref="P:System.Data.DataSet.Tables" /> コレクション内のテーブルでの出現順序と同じです。</summary>
        <returns>ソースの <see cref="T:System.Data.DataTableReader" /> 内に格納されている <see cref="T:System.Data.DataTable" /> インスタンスに対応する結果セットを 1 つ以上格納している <see cref="T:System.Data.DataSet" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内で、返された結果セットの順序を保証するために<xref:System.Data.DataTableReader>場合を<xref:System.Data.DataTable>内、<xref:System.Data.DataSet>が空で、これで表される空の結果セット内で、返された`DataTableReader`します。  
  
   
  
## Examples  
 次の例では、作成 3<xref:System.Data.DataTable>インスタンス、およびそれぞれに追加します、 <xref:System.Data.DataSet>。 渡します、塗りつぶされた`DataSet`を呼び出すプロシージャに、<xref:System.Data.DataSet.CreateDataReader%2A>メソッド、および内に含まれるすべての結果セットを反復処理する処理の進行状況、<xref:System.Data.DataTableReader>します。 例では、コンソール ウィンドウに結果が表示されます。  
  
 [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader (params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader (ParamArray dataTables As DataTable()) As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader(... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : System.Data.DataTable[] -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader dataTables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataTables">
          <see cref="T:System.Data.DataTableReader" /> で返される結果セットの順序を示す、DataTable の配列。</param>
        <summary>1 つの <see cref="T:System.Data.DataTableReader" /> につき 1 つの結果セットを含む <see cref="T:System.Data.DataTable" /> を返します。</summary>
        <returns>ソースの <see cref="T:System.Data.DataTableReader" /> 内に格納されている <see cref="T:System.Data.DataTable" /> インスタンスに対応する結果セットを 1 つ以上格納している <see cref="T:System.Data.DataSet" />。 返される結果セットの順序は、<paramref name="dataTables" /> パラメーターにより指定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返された内の結果の順序を設定することを確認するには<xref:System.Data.DataTableReader>場合を<xref:System.Data.DataTable>内で、<xref:System.Data.DataSet>が空で、これで表される空の結果セット内で、返された`DataTableReader`。 このオーバー ロードされたバージョンでは、一覧を指定できます。 ため`DataTable`パラメーターとしてインスタンス内で、返された結果セットが表示される順序を指定できます`DataTableReader`します。  
  
   
  
## Examples  
 この例では、コンソール アプリケーションを作成します 3<xref:System.Data.DataTable>インスタンスし、それぞれに追加します、<xref:System.Data.DataSet>します。 例では、<xref:System.Data.DataSet.CreateDataReader%2A>メソッドと、返された内容を表示<xref:System.Data.DataTableReader>します。 結果の順序の設定に注意してください、`DataTableReader`の順序では、制御、`DataTable`パラメーターとして渡されたインスタンス。 例では、コンソール ウィンドウに結果が表示されます。  
  
 [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="DataSetName">
      <MemberSignature Language="C#" Value="public string DataSetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DataSetName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataSetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSetName : string with get, set" Usage="System.Data.DataSet.DataSetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDataSetNameDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Data.DataSet" /> の名前を取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.DataSet" /> の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、作成、新しい<xref:System.Data.DataSet>で、指定された<xref:System.Data.DataSet.DataSetName%2A>します。  
  
 [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultViewManager">
      <MemberSignature Language="C#" Value="public System.Data.DataViewManager DefaultViewManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataViewManager DefaultViewManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DefaultViewManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultViewManager As DataViewManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataViewManager ^ DefaultViewManager { System::Data::DataViewManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultViewManager : System.Data.DataViewManager" Usage="System.Data.DataSet.DefaultViewManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDefaultViewDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataViewManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カスタム <see cref="T:System.Data.DataSet" /> を使用してフィルター処理、検索、移動の各操作を行うことができる、<see cref="T:System.Data.DataViewManager" /> に格納されているデータのカスタム ビューを取得します。</summary>
        <value>
          <see cref="T:System.Data.DataViewManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataViewManager>によって返される、<xref:System.Data.DataSet.DefaultViewManager%2A>プロパティでは、カスタムの設定を作成できます。<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>します。  
  
 取得する場合、<xref:System.Data.DataView>から、 <xref:System.Data.DataTable>、フィルター処理、並べ替え順序と<xref:System.Data.DataViewRowState>設定に従って構成されて、<xref:System.Data.DataSet.DefaultViewManager%2A>プロパティ。  
  
   
  
## Examples  
 次の例は、既定値を取得します。<xref:System.Data.DataViewManager>の、 <xref:System.Data.DataSet>、し、追加、<xref:System.Data.DataTable>を、<xref:System.Data.DataTableCollection>します。  
  
 [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DetermineSchemaSerializationMode">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型指定された逆シリアル化時にこのメソッドを呼び出すことが<xref:System.Data.DataSet>をその<xref:System.Data.DataSet.SchemaSerializationMode%2A>します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (reader As XmlReader) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Xml.XmlReader -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> の逆シリアル化の際に渡される <see cref="T:System.Data.DataSet" /> インスタンス。</param>
        <summary>
          <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</summary>
        <returns>ペイロードのスキーマ情報が省略されているかどうかを示す、<see cref="T:System.Data.SchemaSerializationMode" /> 列挙体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型指定された逆シリアル化時にこのメソッドを呼び出すことが<xref:System.Data.DataSet>をその<xref:System.Data.DataSet.SchemaSerializationMode%2A>します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (info As SerializationInfo, context As StreamingContext) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">リモート処理の際に、逆シリアル化の実行中に <see langword="DataSet" /> の保護されたコンストラクター <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を起動するために使用される <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</param>
        <param name="context">リモート処理の際に、逆シリアル化の実行中に <see langword="DataSet" /> の保護されたコンストラクター <see cref="T:System.Runtime.Serialization.StreamingContext" /> を起動するために使用される <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</param>
        <summary>
          <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を判別します。</summary>
        <returns>ペイロードのスキーマ情報が省略されているかどうかを示す、<see cref="T:System.Data.SchemaSerializationMode" /> 列挙体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型指定された逆シリアル化時にこのメソッドを呼び出すことが<xref:System.Data.DataSet>をその<xref:System.Data.DataSet.SchemaSerializationMode%2A>します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="dataSet.EndInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataSet" /> の初期化を終了します。 初期化は実行時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Studio .NET のデザイン環境では、このメソッドを使用して、フォームまたはその他のコンポーネントで使用するコンポーネントの初期化を終了します。 <xref:System.Data.DataSet.BeginInit%2A>メソッドは、初期化を開始します。 使用して、<xref:System.Data.DataSet.BeginInit%2A>と<xref:System.Data.DataSet.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="EnforceConstraints">
      <MemberSignature Language="C#" Value="public bool EnforceConstraints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnforceConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.EnforceConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Property EnforceConstraints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnforceConstraints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnforceConstraints : bool with get, set" Usage="System.Data.DataSet.EnforceConstraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetEnforceConstraintsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作を試みたときに操作が制約規則に従っているかどうかを示す値を取得または設定します。</summary>
        <value>規則が適用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 制約が設定されて、<xref:System.Data.DataTable>レベル (<xref:System.Data.DataTable.Constraints%2A>プロパティ)。 制約の作成の詳細については、次を参照してください。 [DataTable の制約](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)します。  
  
   
  
## Examples  
 次の例では、作成、 <xref:System.Data.DataSet> 1 つのテーブル、1 つの列、5 つの行および 1 つで<xref:System.Data.UniqueConstraint>します。 <xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`し、各行の値が同じ値に設定されます。 ときに、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティをリセット`true`、<xref:System.Data.ConstraintException>が生成されます。  
  
 [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException">1 つ以上の制約を適用できません。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProperties : System.Data.PropertyCollection" Usage="System.Data.DataSet.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("ExtendedPropertiesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="DataSet" /> に関連付けられている、カスタマイズされたユーザー情報のコレクションを取得します。</summary>
        <value>すべてのカスタム ユーザー情報が含まれる <see cref="T:System.Data.PropertyCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ExtendedProperties%2A>プロパティでは、カスタム情報を格納することができます、`DataSet`します。 たとえば、データを更新する場合、時刻を格納可能性があります。  
  
 型の拡張プロパティがある必要があります<xref:System.String>場合は、永続化すると、<xref:System.Data.DataSet>は XML として書き込まれます。  
  
   
  
## Examples  
 次の例では、カスタム プロパティを<xref:System.Data.PropertyCollection>によって返される、<xref:System.Data.DataColumn.ExtendedProperties%2A>プロパティ。 2 番目の例では、カスタム プロパティを取得します。  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges();" />
      <MemberSignature Language="F#" Value="member this.GetChanges : unit -&gt; System.Data.DataSet" Usage="dataSet.GetChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</summary>
        <returns>この <see cref="T:System.Data.DataSet" /> の変更内容のコピー。これに対してアクションを実行した後、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> を使って元のデータにマージできます。 変更された行が見つからない場合、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新たに作成<xref:System.Data.DataSet>、元のすべての行のコピーを格納している<xref:System.Data.DataSet>保留中の変更があります。 リレーションシップの制限が原因で、新規に追加する追加の変更されていない行<xref:System.Data.DataSet>変更されていない行が変更された行の外部キーに対応する主キーを含めるかどうか。 メソッドを返します`null`は元の行がない場合<xref:System.Data.DataSet>保留中の変更があります。  
  
   
  
## Examples  
 次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。 2 つの値が変更され、1 つの行が追加されます。 使用して、変更されたデータのサブセットを作成、<xref:System.Data.DataSet.GetChanges%2A>メソッド。 エラーを解決した後、新しい列は、スキーマを変更する、サブセットに追加されます。 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドを呼び出すと、`missingSchemaAction`に設定`MissingSchemaAction.Add`、元に新しい列が追加<xref:System.Data.DataSet>オブジェクトのスキーマ。  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.HasChanges" />
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.GetChanges : System.Data.DataRowState -&gt; System.Data.DataSet" Usage="dataSet.GetChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">
          <see cref="T:System.Data.DataRowState" /> 値のいずれか 1 つ。</param>
        <summary>前回 <see cref="T:System.Data.DataSet" /> を読み取るか、<see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを、<see cref="T:System.Data.DataRowState" /> によってフィルター処理した後で取得します。</summary>
        <returns>アクションを実行した後、<see cref="T:System.Data.DataSet" /> を使用して元のデータセットにマージするために使用できる、<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> のフィルター処理後のコピー。 必要な <see cref="T:System.Data.DataRowState" /> の行が見つからない場合、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.GetChanges%2A>メソッドは、1 秒あたりに生成するために使用<xref:System.Data.DataSet>元に導入された変更のみを格納するオブジェクト。 使用して、`rowStates`新しいオブジェクトを含める必要があります変更の種類を指定する引数。  
  
 これは、コピーはこの元に戻すでマージする設計されています。 返される<xref:System.Data.DataSet>します。 リレーションシップの制約がマークされている親行あります`Unchanged`にインクルードします。 場合、目的の行<xref:System.Data.DataRowState>がある、<xref:System.Data.DataSet.GetChanges%2A>メソッドを返します。`null`します。  
  
   
  
## Examples  
 次の例では、<xref:System.Data.DataSet.GetChanges%2A>秒を作成するメソッドを<xref:System.Data.DataSet>オブジェクトは、データ ソースを更新するために使用されます。  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="GetDataSetSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataSetSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataSetSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberSignature Language="F#" Value="static member GetDataSetSchema : System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaComplexType" Usage="System.Data.DataSet.GetDataSetSchema schemaSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemaSet">指定されたスキーマ セット。</param>
        <summary>データセットの <see cref="T:System.Xml.Schema.XmlSchemaSet" /> のコピーを取得します。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> のコピー。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> と関連付けるシリアル化データを保持する <see cref="T:System.Data.DataSet" />。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けるシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Data.DataSet" />。</param>
        <summary>シリアル化情報オブジェクトを、<see cref="T:System.Data.DataSet" /> のシリアル化に必要なデータで事前設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaSerializable">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchemaSerializable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSchemaSerializable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchemaSerializable () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchemaSerializable();" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.GetSchemaSerializable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>シリアル化することができる <see cref="T:System.Xml.Schema.XmlSchema" /> インスタンスを返します。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> インスタンス。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializationData">
      <MemberSignature Language="C#" Value="protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetSerializationData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GetSerializationData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetSerializationData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.GetSerializationData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetSerializationData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンス。</param>
        <param name="context">ストリーム コンテキスト。</param>
        <summary>バイナリまたは XML ストリームからテーブル データを逆シリアル化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public string GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; string" Usage="dataSet.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現を返します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> に格納されているデータの表現である文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出すことと同じではこのメソッドを呼び出す<xref:System.Data.DataSet.WriteXml%2A>で<xref:System.Data.XmlWriteMode>設定<xref:System.Data.XmlWriteMode.IgnoreSchema>します。  
  
 <xref:System.Data.DataSet.GetXml%2A> 以上のオーバーヘッドを必要し、なる XML を文字列として返します<xref:System.Data.DataSet.WriteXml%2A>に XML をファイルに書き込めません。  
  
 ビルドする場合、<xref:System.Data.DataSet>スキーマの推論を使用して、シリアル化および XML または Web サービスを使用して列の順序変更可能性があります。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Data.DataSet>と<xref:System.Data.DataTable>、サンプル データを追加し、XML 形式でデータを表示します。  
  
 [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  
  
 このサンプルでは、データセットからデータを XML ファイルを書き込むし、XML からのデータセットにデータを読み取る方法を示します。 このサンプルは 2 つのテーブルの 1 つのデータセットの作成、データセットを XML ファイル (WriteXml および GetXml) にエクスポートする 2 つの方法を使用し、(ReadXml および InferXmlSchema) データセットを XML ファイルからインポートする 2 つの方法を使用します。  
  
 コンパイルして、サンプルを実行する前に、サンプル ディレクトリに 4 つの XML ファイルを作成する必要があります。 まず、ElementsWithAttributes.xml を作成します。  
  
```xml  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7">New</Course>  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3">Cancelled</Department>  
</MySchool>  
```  
  
 次に、ElementsWithChildElementsxml.xml を作成します。  
  
```xml  
<MySchool>  
  <Course>  
    <CourseID>C1045</CourseID>  
    <Year>2012</Year>  
    <Title>Calculus</Title>  
    <Credits>4</Credits>  
    <DepartmentID>7</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C1061</CourseID>  
    <Year>2012</Year>  
    <Title>Physics</Title>  
    <Credits>4</Credits>  
    <DepartmentID>1</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2021</CourseID>  
    <Year>2012</Year>  
    <Title>Composition</Title>  
    <Credits>3</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2042</CourseID>  
    <Year>2012</Year>  
    <Title>Literature</Title>  
    <Credits>4</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Department>  
    <DepartmentID>1</DepartmentID>  
    <Name>Engineering</Name>  
    <Budget>350000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>2</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>2</DepartmentID>  
    <Name>English</Name>  
    <Budget>120000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>6</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>4</DepartmentID>  
    <Name>Economics</Name>  
    <Budget>200000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>4</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>7</DepartmentID>  
    <Name>Mathematics</Name>  
    <Budget>250024</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>3</Administrator>  
  </Department>  
</MySchool>  
```  
  
 ElementsWithOnlyAttributes.xml を作成します。  
  
```  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7" />  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3" />  
</MySchool>  
```  
  
 RepeatingElements.xml を最後に、作成します。  
  
```  
<MySchool>  
  <Course>C1045</Course>  
  <Course>C1061</Course>  
  <Department>Engineering</Department>   
  <Department>Mathematics</Department>  
</MySchool>  
```  
  
 これでコンパイルして、次のソース コードを実行することができます。  [XML ファイルのデータセットのデータのストア方法](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3)はこのサンプルの Visual Basic および c# のプロジェクトがあります。  
  
```  
using System;  
using System.Data;  
using System.IO;  
using System.Text;  
using System.Xml;  
  
// Use WriteXml method to export the dataset.  
static class DataTableHelper {  
   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  
      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  
         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  
            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  
            Console.WriteLine("Write {0} to the File {1}.", dataset.DataSetName, xmlFileName);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use GetXml method to get the XML data of the dataset and then export to the file.  
   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  
      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  
         writer.WriteLine(dataset.GetXml());  
         Console.WriteLine("Get Xml data from {0} and write to the File {1}.", dataset.DataSetName, xmlFileName);  
         Console.WriteLine();  
      }  
   }  
  
   // Use ReadXml method to import the dataset from the dataset.  
   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  
      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  
         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  
            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  
         }  
      }  
   }  
  
   // Display the columns and value of DataSet.  
   public static void ShowDataSet(DataSet dataset) {  
      foreach (DataTable table in dataset.Tables) {  
         Console.WriteLine("Table {0}:", table.TableName);  
         ShowDataTable(table);  
      }  
   }  
  
   // Display the columns and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
               }  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col]);  
               }  
            }  
         }  
         Console.WriteLine("{0,-14}", "");  
      }  
   }  
  
   // Display the columns of DataSet.  
   public static void ShowDataSetSchema(DataSet dataSet) {  
      Console.WriteLine("{0} contains the following tables:", dataSet.DataSetName);  
      foreach (DataTable table in dataSet.Tables) {  
         Console.WriteLine("   Table {0} contains the following columns:", table.TableName);  
         ShowDataTableSchema(table);  
      }  
   }  
  
   // Display the columns of DataTable  
   private static void ShowDataTableSchema(DataTable table) {  
      String columnString = "";  
      foreach (DataColumn col in table.Columns) {  
         columnString += col.ColumnName + "   ";  
      }  
      Console.WriteLine(columnString);  
   }  
}  
  
class Program {  
   static void Main(string[] args) {  
      // Create the DataSet  
      DataSet school = new DataSet("MySchool");  
      DataTable course = CreateCourse();  
      DataTable department = CreateDepartment();  
      school.Tables.Add(course);  
      school.Tables.Add(department);  
  
      // Define the constraint between the tables.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      InsertDepartments(department);  
      InsertCourses(course);  
  
      // Export the dataset to the XML file.  
      Console.WriteLine("Data of the whole DataSet {0}", school.DataSetName);  
      DataTableHelper.ShowDataSet(school);  
  
      String xmlWithSchemaFileName = "WriterXMLWithSchema.xml";  
      String xmlGetDataFileName = "GetXML.xml";  
  
      // Use two ways to export the dataset to the Xml file.  
      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  
      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  
  
      // Import the dataset from the XML file.  
      // Use two ways to import the dataset from the Xml file.  
      Console.WriteLine("Read Xml document into a new DataSet:");  
      DataSet newSchool = new DataSet("NewSchool");  
      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  
      DataTableHelper.ShowDataSetSchema(newSchool);  
      Console.WriteLine();  
  
      Console.WriteLine("Infer a schema for a DataSet from an XML document:");  
      InferDataSetSchemaFromXml();  
  
      Console.WriteLine("Press any key to exit.");  
      Console.ReadKey();  
   }  
  
   static DataTable CreateCourse() {  
      DataTable course = new DataTable("Course");  
      DataColumn[] cols ={  
                              new DataColumn("CourseID",typeof(String)),  
                              new DataColumn("Year",typeof(Int32)),  
                              new DataColumn("Title",typeof(String)),  
                              new DataColumn("Credits",typeof(Int32)),  
                              new DataColumn("DepartmentID",typeof(Int32))};  
      course.Columns.AddRange(cols);  
  
      course.PrimaryKey = new DataColumn[] { course.Columns["CourseID"], course.Columns["Year"] };  
  
      return course;  
   }  
  
   static DataTable CreateDepartment() {  
      DataTable department = new DataTable("Department");  
      DataColumn[] cols = {   
                                new DataColumn("DepartmentID", typeof(Int32)),  
                                new DataColumn("Name",typeof(String)),  
                                new DataColumn("Budget",typeof(Decimal)),  
                                new DataColumn("StartDate",typeof(DateTime)),  
                                new DataColumn("Administrator",typeof(Int32))};  
      department.Columns.AddRange(cols);  
  
      department.PrimaryKey = new DataColumn[] { department.Columns["DepartmentID"] };  
  
      return department;  
   }  
  
   static void InsertDepartments(DataTable department) {  
      Object[] rows = {   
                            new Object[]{1,"Engineering",350000.00,new DateTime(2007,9,1),2},  
                            new Object[]{2,"English",120000.00,new DateTime(2007,9,1),6},  
                            new Object[]{4,"Economics",200000.00,new DateTime(2007,9,1),4},  
                            new Object[]{7,"Mathematics",250024.00,new DateTime(2007,9,1),3}};  
  
      foreach (Object[] row in rows) {  
         department.Rows.Add(row);  
      }  
   }  
  
   static void InsertCourses(DataTable course) {  
      Object[] rows ={  
                               new Object[]{"C1045",2012,"Calculus",4,7},  
                               new Object[]{"C1061",2012,"Physics",4,1},  
                               new Object[]{"C2021",2012,"Composition",3,2},  
                               new Object[]{"C2042",2012,"Literature",4,2}};  
  
      foreach (Object[] row in rows) {  
         course.Rows.Add(row);  
      }  
   }  
  
   // Display the results of inferring schema from four types of XML structures  
   private static void InferDataSetSchemaFromXml() {  
      String[] xmlFileNames = {   
  
                                    @"ElementsWithOnlyAttributes.xml",   
                                    @"ElementsWithAttributes.xml",  
                                    @"RepeatingElements.xml",   
                                    @"ElementsWithChildElements.xml" };  
  
      foreach (String xmlFileName in xmlFileNames) {  
         Console.WriteLine("Result of {0}", Path.GetFileNameWithoutExtension(xmlFileName));  
         DataSet newSchool = new DataSet();  
         newSchool.InferXmlSchema(xmlFileName, null);  
         DataTableHelper.ShowDataSetSchema(newSchool);  
         Console.WriteLine();  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSchema">
      <MemberSignature Language="C#" Value="public string GetXmlSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXmlSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXmlSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlSchema () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXmlSchema();" />
      <MemberSignature Language="F#" Value="member this.GetXmlSchema : unit -&gt; string" Usage="dataSet.GetXmlSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現の XML スキーマを返します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> に格納されているデータの XML 表現の XML スキーマである文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出すことと同じではこのメソッドを呼び出す<xref:System.Data.DataSet.WriteXmlSchema%2A>プライマリ スキーマのみが書き込まれることを除いて、します。  
  
 <xref:System.Data.DataSet.GetXmlSchema%2A> 以上のオーバーヘッドを必要し、なる XML を文字列として返します<xref:System.Data.DataSet.WriteXmlSchema%2A>に XML をファイルに書き込めません。  
  
 ビルドする場合、<xref:System.Data.DataSet>スキーマの推論を使用して、シリアル化および XML または Web サービスを使用して列の順序変更可能性があります。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Data.DataSet>と<xref:System.Data.DataTable>、し、スキーマを XML 形式で表示します。  
  
 [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="HasChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> に新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges();" />
      <MemberSignature Language="F#" Value="member this.HasChanges : unit -&gt; bool" Usage="dataSet.HasChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> に新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> に変更がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Data.DataSet.GetChanges%2A>秒を作成するメソッドを<xref:System.Data.DataSet>オブジェクト データ ソースを更新するために使用されます。  
  
 [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges (rowStates As DataRowState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.HasChanges : System.Data.DataRowState -&gt; bool" Usage="dataSet.HasChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">
          <see cref="T:System.Data.DataRowState" /> 値のいずれか 1 つ。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> に <see cref="T:System.Data.DataRowState" /> でフィルター処理された新しい行、削除された行、変更された行などの変更があるかどうかを示す値を取得します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> に変更がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 確認、<xref:System.Data.DataSet.HasChanges%2A>のプロパティ、`DataSet`を呼び出す前に、<xref:System.Data.DataSet.GetChanges%2A>メソッド。  
  
   
  
## Examples  
 次の例では、<xref:System.Data.DataSet.GetChanges%2A>秒を作成するメソッドを<xref:System.Data.DataSet>オブジェクトは、データ ソースを更新するために使用されます。  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasErrors : bool" Usage="System.Data.DataSet.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetHasErrorsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> オブジェクトのいずれかにエラーがあるかどうかを示す値を取得します。</summary>
        <value>いずれかのテーブルにエラーがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>もが、<xref:System.Data.DataTable.HasErrors%2A>プロパティ。 使用して、`HasErrors`のプロパティ、`DataSet`に個別に確認する前に、エラーがある任意のテーブルか、最初<xref:System.Data.DataTable>オブジェクト。 場合、 `DataTable` 、エラーが発生した、<xref:System.Data.DataTable.GetErrors%2A>メソッドの配列を返します<xref:System.Data.DataRow>エラーを含むオブジェクト。  
  
   
  
## Examples  
 次の例では、<xref:System.Data.DataSet.HasErrors%2A>プロパティを確認するかどうかを<xref:System.Data.DataSet>オブジェクトには、エラーが含まれています。 場合は、各エラー<xref:System.Data.DataRow>各<xref:System.Data.DataTable>が出力されます。  
  
 [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.Stream stream, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::Stream ^ stream, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.Stream * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (stream, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="stream">スキーマの読み出し元の <see langword="Stream" />。</param>
        <param name="nsArray">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</param>
        <summary>指定した <see cref="T:System.IO.Stream" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.TextReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As TextReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::TextReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.TextReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader">スキーマの読み出し元の <see langword="TextReader" />。</param>
        <param name="nsArray">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</param>
        <summary>指定した <see cref="T:System.IO.TextReader" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(string fileName, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (fileName As String, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::String ^ fileName, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : string * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (fileName, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fileName">スキーマの読み込み元の (パスを含む) ファイル名。</param>
        <param name="nsArray">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</param>
        <summary>指定したファイルの XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを読み書きします。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> (関連する列挙体)</permission>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.Xml.XmlReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As XmlReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::Xml::XmlReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.Xml.XmlReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader">スキーマの読み出し元の <see langword="XMLReader" />。</param>
        <param name="nsArray">スキーマ推論から除外する名前空間 URI (Uniform Resource Identifier) 文字列の配列。</param>
        <summary>指定した <see cref="T:System.Xml.XmlReader" /> の XML スキーマを <see cref="T:System.Data.DataSet" /> に適用します。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> が初期化された後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、「<xref:System.Data.DataSet.IsInitialized%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeDerivedDataSet">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDerivedDataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDerivedDataSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InitializeDerivedDataSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDerivedDataSet ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDerivedDataSet();" />
      <MemberSignature Language="F#" Value="abstract member InitializeDerivedDataSet : unit -&gt; unit&#xA;override this.InitializeDerivedDataSet : unit -&gt; unit" Usage="dataSet.InitializeDerivedDataSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バイナリまたは XML ストリームからデータセットのすべてのテーブル データを逆シリアル化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinarySerialized">
      <MemberSignature Language="C#" Value="protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsBinarySerialized(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsBinarySerialized (info As SerializationInfo, context As StreamingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsBinarySerialized(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.IsBinarySerialized : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; bool" Usage="dataSet.IsBinarySerialized (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
        <summary>
          <see langword="DataSet" /> のシリアル化された表現の形式を検査します。</summary>
        <returns>指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> がバイナリ形式でシリアル化された <see langword="true" /> を表す場合は <see langword="DataSet" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Data.DataSet.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> が初期化されているかどうかを示す値を取得します。</summary>
        <value>コンポーネントが初期化を完了したことを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 状態を返し、<xref:System.Data.DataSet>ことによって作成される、たとえば Visual Studio の中にします。 <xref:System.Data.DataSet.BeginInit%2A>メソッドに設定`false`と<xref:System.Data.DataSet.EndInit%2A>メソッドに設定`true`します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された <see cref="T:System.Data.DataSet" /> を使用し、<see cref="T:System.Data.IDataReader" /> にデータ ソースからの値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得されたデータ、<xref:System.Data.IDataReader>インスタンス。 複数の結果セットを読み込むことは、このメソッドは、同じ機能を提供しますが、`IDataReader`内で複数のテーブルに、`DataSet`します。  
  
 `DataSet` が既に行を含んでいる場合、データ ソースからの受信データは既存の行にマージされます。  
  
 `Load`メソッドは、指定したデータ ソースからデータを取得し、現在のデータ コンテナーに追加することをすべて中央揃え、いくつかの一般的なシナリオで使用できます (ここで、 `DataSet`)。 これらのシナリオの標準の使用状況の説明、`DataSet`その更新プログラムを記述する方法、および動作をマージします。  
  
 A`DataSet`により同期または 1 つのプライマリ データ ソースを更新します。 `DataSet`プライマリ データ ソースとの同期を許可する、変更を追跡します。 さらに、 `DataSet` 1 つまたは複数のセカンダリ データ ソースからデータの増分を受け入れることができます。 `DataSet`セカンダリ データ ソースと同期できるようにするために変更を追跡する必要はありません。  
  
 これら 2 つの架空のデータ ソースを指定するには、ユーザーは、次の動作のいずれかが必要な可能性。  
  
-   初期化`DataSet`プライマリ データ ソースから。 このシナリオで、ユーザーが、空の初期化が`DataSet`をプライマリ データ ソースの値。 1 つまたは複数の DataTable の内容が変更されます。 後で、ユーザーは、プライマリ データ ソースに変更を反映する予定です。  
  
-   変更を保持し、プライマリ データ ソースから再同期します。 このシナリオで、ユーザーが実行する、`DataSet`で行われた変更を維持し、プライマリ データ ソースと、増分同期を行い、前のシナリオで入力、`DataSet`します。  
  
-   セカンダリ データ ソースからの増分データ フィードです。 このシナリオでは、ユーザーは、1 つまたは複数のセカンダリ データ ソースからの変更をマージし、プライマリ データ ソースに戻るには、その変更を反映するがします。  
  
 `Load`メソッドにより、これらすべてのシナリオが可能です。 このメソッドでは、読み込みのオプション パラメーターを指定できます。 を示す方法に既に含まれて、<xref:System.Data.DataTable>読み込まれる行と結合します。 次の表に、次の 3 つの負荷で提供されるオプション、<xref:System.Data.LoadOption>列挙体。 各ケースでは、説明は、着信データの行の主キーには、既存の行の主キーが一致する場合に、動作を示します。  
  
|読み込みオプション|説明|  
|-----------------|-----------------|  
|`PreserveChanges` (既定値)|受信した行の値を持つ行の元のバージョンを更新します。|  
|`OverwriteChanges`|受信した行の値を持つ行の現在と元のバージョンを更新します。|  
|`Upsert`|受信した行の値を持つ行の現在のバージョンを更新します。|  
  
 一般に、`PreserveChanges`と`OverwriteChanges`オプションは、ユーザーが同期のシナリオを意図しています、`DataSet`とプライマリ データ ソースを変更します。 `Upsert`オプションが 1 つまたは複数のセカンダリ データ ソースから集計の変更を容易になります。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="tables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</param>
        <param name="loadOption">
          <see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</param>
        <param name="tables">
          <see cref="T:System.Data.DataTable" /> メソッドが名前と名前空間の情報を取得する、<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> インスタンスの配列。 これらのテーブルは、この <see cref="T:System.Data.DataTableCollection" /> に格納されている <see cref="T:System.Data.DataSet" /> のメンバーである必要があります。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、<see cref="T:System.Data.DataTable" /> インスタンスの配列を使用してスキーマ情報と名前空間情報を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得されたデータ、<xref:System.Data.IDataReader>インスタンス。 複数の結果セットを読み込むことは、このメソッドは、同じ機能を提供しますが、<xref:System.Data.IDataReader>内で複数のテーブルに、<xref:System.Data.DataSet>します。  
  
> [!NOTE]
>  読み込み操作は失敗し、<xref:System.InvalidOperationException>場合は、入力方向の変換元データ列のいずれかの`reader`は計算列。  
  
 `loadOption`パラメーターでは、インポートされたデータを既存のデータと対話して、値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体。 ドキュメントを参照して、 <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します。  
  
 `tables`パラメーターの配列を指定できます。<xref:System.Data.DataTable>設定、リーダーから読み込まれた各結果に対応するテーブルの順序を示すインスタンス。 <xref:System.Data.DataSet.Load%2A>メソッド塗りつぶし各提供<xref:System.Data.DataTable>のデータ ソースのデータ リーダーから 1 つの結果を使用してインスタンス。 各結果セットの後、<xref:System.Data.DataSet.Load%2A>メソッド次の結果が結果セットがなくなるまで、リーダー内セットに移動します。  
  
 このメソッドの名前解決スキームが続くと同じ、<xref:System.Data.Common.DbDataAdapter.Fill%2A>のメソッド、<xref:System.Data.Common.DbDataAdapter>クラス。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:System.Data.DataSet>、2 つ追加します<xref:System.Data.DataTable>インスタンスを<xref:System.Data.DataSet>と入力し、<xref:System.Data.DataSet>を使用して、<xref:System.Data.DataSet.Load%2A>からデータを取得するメソッド、 <xref:System.Data.DataTableReader> 2 つの結果セットを格納しています。 最後に、コンソール ウィンドウで、テーブルの内容を表示します。  
  
 [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params string[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, string[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::String ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * string[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="tables" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</param>
        <param name="loadOption">
          <see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see langword="DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</param>
        <param name="tables">
          <see langword="Load" /> メソッドがテーブル名の情報を取得する、文字列の配列。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、文字列の配列を使用して <see langword="DataSet" /> 内のテーブルの名前を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得されたデータ、<xref:System.Data.IDataReader>インスタンス。 複数の結果セットを読み込むことは、このメソッドは、同じ機能を提供しますが、`IDataReader`内で複数のテーブルに、`DataSet`します。  
  
> [!NOTE]
>  読み込み操作は失敗し、<xref:System.InvalidOperationException>場合は、入力方向の変換元データ列のいずれかの`reader`は計算列。  
  
 `loadOption`パラメーターでは、インポートされたデータを既存のデータと対話して、値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体。 ドキュメントを参照して、<xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します。  
  
 `tables`パラメーターでは、設定したリーダーから読み込まれた各結果に対応するテーブルの順序を示す、テーブル名の配列を指定することができます。 `Load`メソッド内のテーブルの検索を試みます、`DataSet`の順序でのテーブル名の配列で見つかった名前に一致します。 一致するテーブルが見つかった場合は、現在の結果セットのコンテンツを含むテーブルが読み込まれます。 一致するテーブルが見つからない場合は、テーブル名の配列で指定された名前を使用してテーブルを作成し、結果セットから新しいテーブルのスキーマを推論します。 各結果セットの後、`Load`メソッド次の結果が結果セットがなくなるまで、リーダー内セットに移動します。  
  
 既定の名前空間に関連付けられている`DataSet`のいずれかが新しく作成された各に関連付けられている場合は、`DataTable`します。 このメソッドの名前解決スキームが続くと同じ、<xref:System.Data.Common.DbDataAdapter.Fill%2A>のメソッド、<xref:System.Data.Common.DbDataAdapter>クラス。  
  
   
  
## Examples  
 次のコンソール アプリケーションの例は、まずテーブルを作成しに、リーダーからデータを読み込む、<xref:System.Data.DataSet>を使用して、`Load`メソッド。 例では、テーブルを追加し、<xref:System.Data.DataSet>からデータをテーブルに入力して、<xref:System.Data.DataTableReader>します。 この例で、パラメーターが渡されるため、`Load`メソッドが存在しない場合、テーブル名を示す、`Load`メソッドがパラメーターとして渡された名前と一致する新しいテーブルを作成します。 データが読み込まれると、例では、コンソール ウィンドウで、そのすべてのテーブルの内容が表示されます。  
  
 [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit&#xA;override this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, errorHandler, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
        <Parameter Name="tables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">1 つ以上の結果セットを含む <see cref="T:System.Data.IDataReader" />。</param>
        <param name="loadOption">
          <see cref="T:System.Data.LoadOption" /> 列挙体の値。<see cref="T:System.Data.DataTable" /> 内の <see cref="T:System.Data.DataSet" /> インスタンスに既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</param>
        <param name="errorHandler">データの読み込み中にエラーが発生した場合に呼び出される <see cref="T:System.Data.FillErrorEventHandler" /> デリゲート。</param>
        <param name="tables">
          <see cref="T:System.Data.DataTable" /> メソッドが名前と名前空間の情報を取得する、<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> インスタンスの配列。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用するデータ ソースの値を <see cref="T:System.Data.IDataReader" /> に格納し、<see cref="T:System.Data.DataTable" /> インスタンスの配列を使用してスキーマ情報と名前空間情報を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得されたデータ、<xref:System.Data.IDataReader>インスタンス。 複数の結果セットを読み込むことは、このメソッドは、同じ機能を提供しますが、<xref:System.Data.IDataReader>内で複数のテーブルに、<xref:System.Data.DataSet>します。  
  
> [!NOTE]
>  読み込み操作は失敗し、<xref:System.InvalidOperationException>場合は、入力方向の変換元データ列のいずれかの`reader`は計算列。  
  
 `loadOption`パラメーターでは、インポートされたデータを既存のデータと対話して、値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体。 ドキュメントを参照して、 <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します。  
  
 `errorHandler`パラメーターは、<xref:System.Data.FillErrorEventHandler>データの読み込み中にエラーが発生したときに呼び出されるプロシージャを参照するデリゲート。 <xref:System.Data.FillErrorEventArgs>プロシージャに渡されるパラメーターは、発生したエラー、データの現在の行に関する情報を取得するためのプロパティを提供し、<xref:System.Data.DataTable>に指定されています。 このデリゲートのメカニズムを使用して、単純な try/catch ブロックではなく、エラーを確認することができます状況の処理し、必要な場合の処理を続行します。 <xref:System.Data.FillErrorEventArgs>パラメーターを提供、<xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティ: このプロパティを設定`true`処理を続行してエラーを処理したことを示すプロパティを設定`false`処理を停止することを示す。 注意してくださいそのプロパティを設定する`false`コードが例外をスローする問題を発生させた。  
  
 `tables`パラメーターの配列を指定できます。<xref:System.Data.DataTable>設定、リーダーから読み込まれた各結果に対応するテーブルの順序を示すインスタンス。 <xref:System.Data.DataSet.Load%2A>メソッド塗りつぶし各提供<xref:System.Data.DataTable>のデータ ソースのデータ リーダーから 1 つの結果を使用してインスタンス。 各結果セットの後、<xref:System.Data.DataSet.Load%2A>メソッド次の結果が結果セットがなくなるまで、リーダー内セットに移動します。  
  
 このメソッドの名前解決スキームが続くと同じ、<xref:System.Data.Common.DbDataAdapter.Fill%2A>のメソッド、<xref:System.Data.Common.DbDataAdapter>クラス。  
  
   
  
## Examples  
 次の例は、テーブルを追加、 <xref:System.Data.DataSet>、使用しようと、<xref:System.Data.DataSet.Load%2A>からデータを読み込むメソッドを<xref:System.Data.DataTableReader>互換性のないスキーマを格納しています。 この例では、エラーをトラップするのではなく、<xref:System.Data.FillErrorEventHandler>調査し、エラーを処理するデリゲート。 出力がコンソール ウィンドウに表示されます。  
  
 [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Locale : System.Globalization.CultureInfo with get, set" Usage="System.Data.DataSet.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetLocaleDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テーブル内の文字列の比較に使用するロケール情報を取得または設定します。</summary>
        <value>ユーザーのコンピューターのロケールについてのデータが格納されている <see cref="T:System.Globalization.CultureInfo" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Locale%2A>プロパティは、ロケールを指定する並べ替えを適用します。  
  
 既定の設定によって、<xref:System.Data.DataSet.Locale%2A>の<xref:System.Data.DataSet>も設定、<xref:System.Data.DataSet.Locale%2A>各<xref:System.Data.DataTable>を内のオブジェクト`DataSet`同じ値にします。  
  
> [!NOTE]
>  式を指定する列で、<xref:System.StringComparison.InvariantCulture>使用されます。 <xref:System.StringComparison.CurrentCulture>は無視されます。  
  
   
  
## Examples  
 次の例では、取得、<xref:System.Globalization.CultureInfo>の<xref:System.Data.DataSet>出力、<xref:System.Globalization.CultureInfo.DisplayName%2A>と<xref:System.Globalization.CultureInfo.EnglishName%2A>プロパティ。  
  
 [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Data.DataSet" /> か <see cref="T:System.Data.DataTable" />、または <see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see langword="DataSet" /> または <see langword="DataTable" /> にマージします。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] -&gt; unit" Usage="dataSet.Merge rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">
          <see langword="DataRow" /> にマージされる <see langword="DataSet" /> オブジェクトの配列。</param>
        <summary>
          <see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see cref="T:System.Data.DataSet" /> にマージします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。 既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。 これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。  
  
 <xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。  
  
 クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。 このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。 この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。 このサブセットは一般に小さいため、中間層のコンポーネントにより効率的によく渡されます。 中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。  
  
 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。 たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。 その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。  
  
 スキーマをマージ後に、データに結合されます。  
  
 新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。 ソースを持つ行を<xref:System.Data.DataRowState>の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。  
  
 マージ中に制約が無効になります。 場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。 ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。 リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet -&gt; unit" Usage="dataSet.Merge dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">データとスキーマをマージする対象の <see langword="DataSet" />。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。 既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。 これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。  
  
 <xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。  
  
 クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。 このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。 この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。 このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。 中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。  
  
 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。 たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。 その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。  
  
 スキーマをマージ後に、データに結合されます。  
  
 新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。 ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。  
  
 マージ中に制約が無効になります。 場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。 ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。 リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。  
  
   
  
## Examples  
 次の例では、 <xref:System.Data.DataSet.GetChanges%2A>、Update、および<xref:System.Data.DataSet.Merge%2A>メソッド、<xref:System.Data.DataSet>します。  
  
 [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException">1 つ以上の制約を有効にできません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataSet" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="M:System.Data.DataSet.GetChanges" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable -&gt; unit" Usage="dataSet.Merge table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">データとスキーマをマージする対象の <see cref="T:System.Data.DataTable" />。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> およびそのスキーマを現在の <see cref="T:System.Data.DataSet" /> にマージします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。 既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。 これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。  
  
 <xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。  
  
 クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。 このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。 この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。 このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。 中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。  
  
 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。 たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。 その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。  
  
 スキーマをマージ後に、データに結合されます。  
  
 新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。 ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。  
  
 マージ中に制約が無効になります。 場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。 ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。 リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。  
  
   
  
## Examples  
 次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。 1 秒あたり<xref:System.Data.DataTable>に作成された最初と同じです。 2 つの行にマージし、2 番目のテーブルに追加されます、<xref:System.Data.DataSet>します。  
  
 [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="table" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSet">データとスキーマをマージする対象の <see langword="DataSet" />。</param>
        <param name="preserveChanges">現在の <see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。この <see langword="DataSet" /> に対して行われた変更は、指定した引数に従って保持または破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。 既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。 これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。  
  
 <xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。  
  
 クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。 このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。 この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。 このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。 中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。  
  
 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。 たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。 その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。  
  
 スキーマをマージ後に、データに結合されます。  
  
 新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。 ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。  
  
 マージ中に制約が無効になります。 場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。 ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。 リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。  
  
   
  
## Examples  
 次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。 10 行を追加すると、2 つの値が変更され、1 つの行が追加されます。 使用して、変更されたデータのサブセットを作成、<xref:System.Data.DataSet.GetChanges%2A>メソッド。 エラーを解決した後、サブセット データは、元にマージ<xref:System.Data.DataSet>します。  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (rows, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="rows">
          <see cref="T:System.Data.DataRow" /> にマージされる <see langword="DataSet" /> オブジェクトの配列。</param>
        <param name="preserveChanges">
          <see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</param>
        <param name="missingSchemaAction">
          <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
        <summary>
          <see cref="T:System.Data.DataRow" /> オブジェクトの配列を現在の <see cref="T:System.Data.DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。 既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。 これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。  
  
 <xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。  
  
 クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。 このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。 この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。 このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。 中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。  
  
 説明を容易にするために、<xref:System.Data.DataSet.Merge%2A>メソッドを使用して「ターゲット」を示し、現在<xref:System.Data.DataSet>とに 2 つ目の (パラメーター) の名前を付けるには、"source"<xref:System.Data.DataSet>します。 ターゲット<xref:System.Data.DataSet>名前は、これはアクション (マージ) が発生しているオブジェクト。 2 番目の<xref:System.Data.DataSet>含まれる情報は変更されませんが、代わりに、現在にマージされますので、「ソース」と呼びます<xref:System.Data.DataSet>します。  
  
 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。 たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。 その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。  
  
 スキーマをマージ後に、データに結合されます。  
  
 新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。 ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。  
  
 マージ中に制約が無効になります。 場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。 ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。 リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="dataSet">データとスキーマをマージする対象の <see langword="DataSet" />。</param>
        <param name="preserveChanges">現在の <see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</param>
        <param name="missingSchemaAction">
          <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。 既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。 これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。  
  
 <xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。  
  
 クライアント アプリケーションが 1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。 このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。 この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。 このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。 中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。  
  
 説明を容易にするために、<xref:System.Data.DataSet.Merge%2A>メソッドを使用して「ターゲット」を示し、現在<xref:System.Data.DataSet>とに 2 つ目の (パラメーター) の名前を付けるには、"source"<xref:System.Data.DataSet>します。 ターゲット<xref:System.Data.DataSet>名前は、これはアクション (マージ) が発生しているオブジェクト。 2 番目の<xref:System.Data.DataSet>含まれる情報は変更されませんが、代わりに、現在にマージされますので、「ソース」と呼びます<xref:System.Data.DataSet>します。  
  
 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。 たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。 その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。  
  
 スキーマをマージ後に、データに結合されます。  
  
 新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。 ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。  
  
 マージ中に制約が無効になります。 場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。 ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。 リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。  
  
   
  
## Examples  
 次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。 2 つの値が変更され、1 つの行が追加されます。 使用して、変更されたデータのサブセットを作成、<xref:System.Data.DataSet.GetChanges%2A>メソッド。 エラーを解決した後、新しい列は、スキーマを変更する、サブセットに追加されます。 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドを呼び出すと、`missingSchemaAction`に設定`MissingSchemaAction.Add`、元に新しい列が追加<xref:System.Data.DataSet>オブジェクトのスキーマ。  
  
 [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataSet" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (table, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table">データとスキーマをマージする対象の <see langword="DataTable" />。</param>
        <param name="preserveChanges">
          <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</param>
        <param name="missingSchemaAction">
          <see langword="true" /> に対して行われた変更を保持するには <see langword="DataSet" />。保持しない場合は <see langword="false" />。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> およびそのスキーマを現在の <see langword="DataSet" /> にマージします。指定した引数に従って、この <see langword="DataSet" /> に行われた変更を保持または破棄し、互換性のないスキーマを処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A>メソッドを使用して、2 つのマージを<xref:System.Data.DataSet>ほぼ同じスキーマを含むオブジェクト。 既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataSet>します。 これにより、クライアント アプリケーションを更新して<xref:System.Data.DataSet>データ ソースから最新のデータにします。  
  
 <xref:System.Data.DataSet.Merge%2A>メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataSet>します。  
  
 イオン クライアント アプリケーションでは、1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために一般的です。 このシナリオで、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化します。 この 1 秒間<xref:System.Data.DataSet>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataSet>します。 このサブセットは一般的に小さくし、そのための詳細は中間層のコンポーネントに渡される効率的にします。 中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataSet> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataSet>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド。  
  
 ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです。 たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。 その場合は、マージされた<xref:System.Data.DataSet>に追加されたスキーマとデータが含まれています。  
  
 スキーマをマージ後に、データに結合されます。  
  
 新しいソースをマージするときに<xref:System.Data.DataSet>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。 ソースを持つ行を`DataRowState`の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。  
  
 マージ中に制約が無効になります。 場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、マージされたデータは保持されます。 ここで、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されて`false`、され有効でないすべての行がエラーでマークされます。 リセットを試みる前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`します。  
  
   
  
## Examples  
 次の例では、単純な<xref:System.Data.DataSet>1 つのテーブル、2 つの列と 10 行にします。 1 秒あたり<xref:System.Data.DataTable>に作成された最初とほぼ同じことを除いて新しい`DataColumn`テーブルに追加されます。 2 つの行にマージし、2 番目のテーブルに追加されます、<xref:System.Data.DataSet>で、`preserveChanges`引数に設定`false`、および`missingSchemaAction`引数に設定`MissingSchemaAction.Add`します。  
  
 [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataSet" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="MergeFailed">
      <MemberSignature Language="C#" Value="public event System.Data.MergeFailedEventHandler MergeFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.MergeFailedEventHandler MergeFailed" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.MergeFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MergeFailed As MergeFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::MergeFailedEventHandler ^ MergeFailed;" />
      <MemberSignature Language="F#" Value="member this.MergeFailed : System.Data.MergeFailedEventHandler " Usage="member this.MergeFailed : System.Data.MergeFailedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetMergeFailedDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MergeFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ターゲットとソースの <see cref="T:System.Data.DataRow" /> に同じ主キー値が格納されていて、<see cref="P:System.Data.DataSet.EnforceConstraints" /> が true に設定されているときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.Data.DataSet.MergeFailed>イベント。  
  
 [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Data.DataSet.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetNamespaceDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> の名前空間を取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.DataSet" /> の名前空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Namespace%2A>にドキュメントの XML を読み書きするときに、プロパティが使用される、<xref:System.Data.DataSet>を使用して、 <xref:System.Data.DataSet.ReadXml%2A>、 <xref:System.Data.DataSet.WriteXml%2A>、 <xref:System.Data.DataSet.ReadXmlSchema%2A>、または<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。  
  
 XML 属性と要素の読み取り時にスコープする XML ドキュメントの名前空間が使用される、<xref:System.Data.DataSet>します。 たとえば場合、<xref:System.Data.DataSet>スキーマを含む"myCompany、"名前空間を持つドキュメントから読み取られたと別の名前空間を持つドキュメントからのみデータを読み取るしようとしましたが、既存のスキーマに対応していないすべてのデータは無視されます。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Data.DataSet.Prefix%2A>呼び出す前に、<xref:System.Data.DataSet.ReadXml%2A>メソッド。  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">この名前空間には既にデータが格納されています。</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="dataSet.OnPropertyChanging pcevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">イベント データを格納している <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
        <summary>
          <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />、派生クラスで基底クラスを呼び出すことを確認する<see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />メソッド。</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveRelation">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveRelation (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveRelation(class System.Data.DataRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveRelation (relation As DataRelation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveRelation(System::Data::DataRelation ^ relation);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveRelation : System.Data.DataRelation -&gt; unit&#xA;override this.OnRemoveRelation : System.Data.DataRelation -&gt; unit" Usage="dataSet.OnRemoveRelation relation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation">削除する <see cref="T:System.Data.DataRelation" />。</param>
        <summary>
          <see cref="T:System.Data.DataRelation" /> から <see cref="T:System.Data.DataTable" /> オブジェクトが削除されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、テーブルの削除を制限するサブクラスによってオーバーライドする必要があります。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveTable">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRemoveTable (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRemoveTable (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveTable : System.Data.DataTable -&gt; unit&#xA;override this.OnRemoveTable : System.Data.DataTable -&gt; unit" Usage="dataSet.OnRemoveTable table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">削除する <see cref="T:System.Data.DataTable" />。</param>
        <summary>
          <see cref="T:System.Data.DataTable" /> から <see cref="T:System.Data.DataSet" /> が削除されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、削除されるテーブルを制限するサブクラスによってオーバーライドできます。  
  
   
  
## Examples  
 次の例から派生したクラスを示しています、<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.OnRemoveTable%2A>メソッドをオーバーライドします。  
  
 [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string with get, set" Usage="System.Data.DataSet.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetPrefixDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> の名前空間に別名を付ける XML プリフィックスを取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.DataSet" /> 名前空間の XML プリフィックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Prefix%2A>プロパティが XML ドキュメント全体での名前空間に属している要素を識別するために使用される、<xref:System.Data.DataSet>オブジェクト (設定によって、<xref:System.Data.DataSet.Namespace%2A>プロパティ)。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Data.DataSet.Prefix%2A>呼び出す前に、<xref:System.Data.DataSet.ReadXml%2A>メソッド。  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.RaisePropertyChanging : string -&gt; unit" Usage="dataSet.RaisePropertyChanging name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">これから変更されるプロパティの名前。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> プロパティがこれから変更されるという通知を送信します。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XML スキーマとデータを <see cref="T:System.Data.DataSet" /> に読み込みます。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> から派生するオブジェクト。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.Stream" /> に読み込みます。</summary>
        <returns>データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。 スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。 競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。  
  
> [!NOTE]
>  `DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。 XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。  
  
 場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
   
  
## Examples  
 次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。 <xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。 1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。  
  
 [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
        <altmember cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
        <altmember cref="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">スキーマおよびデータの読み出し元の <see langword="TextReader" />。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.IO.TextReader" /> に読み込みます。</summary>
        <returns>データを読み込むために使用する <see cref="T:System.Data.XmlReadMode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。 スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。 競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。  
  
> [!NOTE]
>  `DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。 XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。  
  
 場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 継承するクラス、<xref:System.IO.TextReader>クラスが含まれて、<xref:System.IO.StreamReader>と<xref:System.IO.StringReader>クラス。  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
   
  
## Examples  
 次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。 <xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。 1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">読み込み元の (パスを含む) ファイル名。</param>
        <summary>指定したファイルを使用して、XML スキーマとデータを <see cref="T:System.Data.DataSet" /> に読み込みます。</summary>
        <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。 スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。 競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。  
  
> [!NOTE]
>  `DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。 XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。  
  
 場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
   
  
## Examples  
 次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。 <xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。 1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。  
  
 [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを読み書きします。 関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.Xml.XmlReader" /> に読み込みます。</summary>
        <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。 スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。 競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。  
  
> [!NOTE]
>  `DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。 XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。  
  
 場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> は <xref:System.Xml.XmlReader> を継承します。  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
   
  
## Examples  
 次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。 <xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。 1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。  
  
 [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="stream">読み取り元の <see cref="T:System.IO.Stream" />。</param>
        <param name="mode">
          <see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.Stream" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</summary>
        <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。  
  
 場合も同様、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。 スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。  
  
> [!NOTE]
>  使用すると<xref:System.Data.DataSet.ReadXml%2A>を設定して<xref:System.Data.XmlReadMode>に`Diffgram`、ターゲットのコンテンツ`DataSet`とオリジナル`DataSet`diffgram の生成および処理の方法により異なる場合があります。 Diffgram の詳細については、次を参照してください。 [Diffgram](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md)します。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。 競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。  
  
> [!NOTE]
>  `DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。 XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。  
  
 場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader">読み取り元の <see cref="T:System.IO.TextReader" />。</param>
        <param name="mode">
          <see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.TextReader" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</summary>
        <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。 スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。 競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。  
  
> [!NOTE]
>  `DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。 XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。  
  
 場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="fileName">読み込み元の (パスを含む) ファイル名。</param>
        <param name="mode">
          <see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つ。</param>
        <summary>指定したファイルと <see cref="T:System.Data.DataSet" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</summary>
        <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。 スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。 競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。  
  
> [!NOTE]
>  `DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。 XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。  
  
 場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを読み書きします。 関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="mode">
          <see cref="T:System.Data.XmlReadMode" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Xml.XmlReader" /> を使用して、XML スキーマとデータを <see cref="T:System.Data.XmlReadMode" /> に読み込みます。</summary>
        <returns>データを読み込むために使用する <see langword="XmlReadMode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet> 、XML ドキュメントからは、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`mode`パラメーター、その値に設定し、 `ReadSchema`。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッド。 スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。 競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。  
  
> [!NOTE]
>  `DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。 XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。  
  
 場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、`targetNamespace`データが読み取られず、呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`等しいを"qualified"に XML スキーマで次の例に示すよう。  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XML スキーマを <see cref="T:System.Data.DataSet" /> に読み込みます。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.ReadXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">読み取り元の <see cref="T:System.IO.Stream" />。</param>
        <summary>指定した <see cref="T:System.IO.Stream" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataSet.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataSet>します。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。 XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。  
  
 XML スキーマでは、XSD 標準を使用して書き込まれます。  
  
> [!NOTE]
>  データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。 例外はスローされません。  
  
 <xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドを呼び出す前に一般的に、<xref:System.Data.DataSet.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataSet>します。  
  
 派生するクラス、<xref:System.IO.Stream>クラスが含まれて<xref:System.IO.BufferedStream>、 <xref:System.IO.FileStream>、 <xref:System.IO.MemoryStream>、および<xref:System.Net.Sockets.NetworkStream>します。  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされますが、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXmlSchema%2A>します。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.IO.FileStream>オブジェクトを使用すると、XML スキーマを読み取るし、呼び出す、<xref:System.Data.DataSet.ReadXmlSchema%2A>オブジェクトとメソッド。  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.TextReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">読み取り元の <see cref="T:System.IO.TextReader" />。</param>
        <summary>指定した <see cref="T:System.IO.TextReader" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataSet.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataSet>します。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。 XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。  
  
 XML スキーマでは、XSD 標準を使用して書き込まれます。  
  
> [!NOTE]
>  データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。 例外はスローされません。  
  
 <xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドを呼び出す前に一般的に、<xref:System.Data.DataSet.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataSet>します。  
  
 継承するクラス、<xref:System.IO.TextReader>クラスが含まれて、<xref:System.IO.StreamReader>と<xref:System.IO.StringReader>クラス。  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされますが、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXmlSchema%2A>します。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.IO.StreamReader>オブジェクトを使用すると、スキーマを読み取るし、呼び出す、<xref:System.Data.DataSet.ReadXmlSchema%2A>オブジェクトとメソッド。  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : string -&gt; unit" Usage="dataSet.ReadXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">読み込み元の (パスを含む) ファイル名。</param>
        <summary>指定したファイルから <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataSet.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataSet>します。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。 XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。  
  
 XML スキーマでは、XSD 標準を使用して書き込まれます。  
  
> [!NOTE]
>  データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。 例外はスローされません。  
  
 <xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドを呼び出す前に一般的に、<xref:System.Data.DataSet.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataSet>します。  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされます、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXmlSchema%2A>します。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> に設定されていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを読み書きします。 関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>指定した <see cref="T:System.Xml.XmlReader" /> から <see cref="T:System.Data.DataSet" /> に XML スキーマを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataSet.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataSet>します。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。  
  
 XML スキーマでは、XSD 標準を使用して書き込まれます。  
  
> [!NOTE]
>  データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。 例外はスローされません。  
  
 <xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドを呼び出す前に一般的に、<xref:System.Data.DataSet.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataSet>します。  
  
 <xref:System.Xml.XmlReader?displayProperty=nameWithType>クラスが抽象クラス。 継承するクラス、`XmlReader`は、<xref:System.Xml.XmlTextReader?displayProperty=nameWithType>クラス。  
  
> [!NOTE]
>  場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間のさまざまな種類の例外がスローされますが、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXmlSchema%2A>します。 .NET Framework version 1.0 を使用している場合は、この例外は発生しません。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:System.Data.DataSet>と<xref:System.IO.FileStream?displayProperty=nameWithType>オブジェクト。 <xref:System.IO.FileStream>ファイルのパスとファイル名で作成されたオブジェクトの作成に使用する<xref:System.Xml.XmlTextReader?displayProperty=nameWithType>への引数として渡される、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド。  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXmlSerializable : System.Xml.XmlReader -&gt; unit&#xA;override this.ReadXmlSerializable : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSerializable reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">指定された XML リーダー。</param>
        <summary>属性を無視して、空のデータセットを返します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public virtual void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RejectChanges();" />
      <MemberSignature Language="F#" Value="abstract member RejectChanges : unit -&gt; unit&#xA;override this.RejectChanges : unit -&gt; unit" Usage="dataSet.RejectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.DataSet" /> を作成するか、前回 <see cref="M:System.Data.DataSet.AcceptChanges" /> を呼び出した以降にこのデータセットに対して行われたすべての変更をロールバックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType>を呼び出す、<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>メソッドをすべて<xref:System.Data.DataTable>オブジェクトに含まれる、<xref:System.Data.DataSet>します。  
  
 <xref:System.Data.DataRow> オブジェクトに含まれる、<xref:System.Data.DataSet>ごとに設定できる編集モードを呼び出すことによって、<xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType>メソッド。 呼び出した後、<xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType>メソッドを呼び出すことによって変更が拒否されること、<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>上、<xref:System.Data.DataTable>を<xref:System.Data.DataRow>オブジェクトが属しています。  
  
 ときに、<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>メソッドが呼び出されると、まだ編集モードでは、行の編集をキャンセルします。 新しい行が削除されます。 変更および削除された行が元の状態を返す (`DataRowState.Unchanged`)。  
  
 Acceptchange と Rejectchange にのみ適用<xref:System.Data.DataRow>に関連する変更 (つまり、 `Add`、 `Remove`、 `Delete`、および`Modify`)。 これらは、スキーマまたは構造の変更を適用できません。  
  
   
  
## Examples  
 次の例から派生したクラス、<xref:System.Data.DataSet>クラス。 <xref:System.Data.DataSet.RejectChanges%2A>イベントは、関数内から呼び出されます。  
  
 [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Relations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection Relations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection Relations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Relations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Relations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ Relations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Relations : System.Data.DataRelationCollection" Usage="System.Data.DataSet.Relations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetRelationsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テーブルをリンクし、親テーブルから子テーブルへ移動できるようにするリレーションシップのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Data.DataRelationCollection" /> オブジェクトのコレクションを格納している <see cref="T:System.Data.DataRelation" />。 <see cref="T:System.Data.DataRelation" /> オブジェクトが存在しない場合、空のコレクションが返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例の出力からのすべての子テーブルの列名、<xref:System.Data.DataSet.Relations%2A>プロパティ。  
  
 [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.RemotingFormat : System.Data.SerializationFormat with get, set" Usage="System.Data.DataSet.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リモート処理中に使用される <see cref="T:System.Data.SerializationFormat" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.SerializationFormat" /> オブジェクト。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dataSet.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのテーブルをクリアし、<see cref="T:System.Data.DataSet" />からすべての関係、外部の制約、テーブルを削除します。 サブクラスが <see cref="M:System.Data.DataSet.Reset" /> をオーバーライドして <see cref="T:System.Data.DataSet" /> を元の状態に戻す必要があります。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="SchemaSerializationMode">
      <MemberSignature Language="C#" Value="public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SchemaSerializationMode SchemaSerializationMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.SchemaSerializationMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SchemaSerializationMode As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::SchemaSerializationMode SchemaSerializationMode { System::Data::SchemaSerializationMode get(); void set(System::Data::SchemaSerializationMode value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSerializationMode : System.Data.SchemaSerializationMode with get, set" Usage="System.Data.DataSet.SchemaSerializationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.SchemaSerializationMode" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Data.DataSet> Web サービスとリモート処理のシナリオでは既定のスキーマとインスタンス データをシリアル化します。 設定、<xref:System.Data.DataSet.SchemaSerializationMode%2A>プロパティの型指定された`DataSet`に<xref:System.Data.SchemaSerializationMode.ExcludeSchema>によりシリアル化のペイロードから除外するスキーマ情報。  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> 型指定されたに対してのみ`DataSet`します。 型指定のされていないため`DataSet`このプロパティにのみ設定できます<xref:System.Data.SchemaSerializationMode.IncludeSchema>します。  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> 基になるスキーマについては、型指定されている場合のみ使用する必要があります`DataTables`、`DataRelations`と`Constraints`は変更されていません。 変更が必要で、完全なスキーマ情報をシリアル化する必要があります<xref:System.Data.SchemaSerializationMode.IncludeSchema>します。  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> バージョン 2.0 以降の .NET Framework でサポートされます。  
  
 ときに<xref:System.Data.SchemaSerializationMode.ExcludeSchema>設定は、上に存在する最上位レベルのランタイム プロパティのみ、<xref:System.Data.DataSet>はシリアル化されます。 さらに、開催される、既定値と異なる場合にのみ、シリアル化されます。 いずれ、 `Tables`、`Relations`または`Constraints`はシリアル化されます。 ランタイム シリアル化されたプロパティが含まれます<xref:System.Data.DataSet.DataSetName%2A>、 <xref:System.Data.DataSet.Namespace%2A>、 <xref:System.Data.DataSet.Prefix%2A>、 <xref:System.Data.DataSet.Locale%2A>、 <xref:System.Data.DataSet.EnforceConstraints%2A>、および<xref:System.Data.DataSet.CaseSensitive%2A>します。 これらのプロパティは、全体のランタイム データの整合性を保持するかどうかを確認するシリアル化されます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeRelations">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeRelations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeRelations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeRelations" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeRelations () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeRelations();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeRelations : unit -&gt; bool&#xA;override this.ShouldSerializeRelations : unit -&gt; bool" Usage="dataSet.ShouldSerializeRelations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Data.DataSet.Relations" /> プロパティを永続化する必要があるかどうかを示す値を取得します。</summary>
        <returns>プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 いずれかのデザイナーを作成する場合は通常このメソッドを使用する、 <xref:System.Data.DataSet>、またはコントロールを組み込む独自に作成、<xref:System.Data.DataSet>します。  
  
   
  
## Examples  
 次の例から派生したクラス、<xref:System.Data.DataSet>クラス。 <xref:System.Data.DataSet.Reset%2A>と<xref:System.Data.DataSet.ShouldSerializeRelations%2A>メソッドは、派生クラス内の関数内から呼び出されます。  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTables">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTables () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTables();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeTables : unit -&gt; bool&#xA;override this.ShouldSerializeTables : unit -&gt; bool" Usage="dataSet.ShouldSerializeTables " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Data.DataSet.Tables" /> プロパティを永続化する必要があるかどうかを示す値を取得します。</summary>
        <returns>プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 いずれかのデザイナーを作成する場合にのみ通常このメソッドを使用する、 <xref:System.Data.DataSet>、またはコントロールを組み込む独自に作成、<xref:System.Data.DataSet>します。  
  
   
  
## Examples  
 次の例から派生したクラス、<xref:System.Data.DataSet>クラス。 <xref:System.Data.DataSet.ShouldSerializeTables%2A>派生クラスの関数内からメソッドが呼び出されました。  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Data.DataSet.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataSet" /> を取得または設定します。</summary>
        <value>
          <see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataSet" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サイト バインドを<xref:System.ComponentModel.Component>を<xref:System.ComponentModel.Container>と、それらの間の通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理する方法を提供します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />」をご覧ください。</summary>
        <value>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />」をご覧ください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IListSource.GetList" />」をご覧ください。</summary>
        <returns>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IListSource.GetList" />」をご覧ください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」をご覧ください。</summary>
        <returns>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」をご覧ください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Data.DataTableCollection Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTableCollection Tables" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As DataTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTableCollection ^ Tables { System::Data::DataTableCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Data.DataTableCollection" Usage="System.Data.DataSet.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetTablesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> に格納されているテーブルのコレクションを取得します。</summary>
        <value>この <see cref="T:System.Data.DataTableCollection" /> に格納されている <see cref="T:System.Data.DataSet" />。 <see cref="T:System.Data.DataTable" /> オブジェクトが存在しない場合、空のコレクションが返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コレクションにテーブルを追加するには使用<xref:System.Data.DataTableCollection.Add%2A>のメソッド、<xref:System.Data.DataTableCollection>します。 テーブルを削除するには、使用、<xref:System.Data.DataTableCollection.Remove%2A>メソッド。  
  
   
  
## Examples  
 次の例を返します、<xref:System.Data.DataSet>オブジェクトの<xref:System.Data.DataTableCollection>、各テーブルで行および列を出力します。  
  
 [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> から XML データを書き込みます。オプションでスキーマも書き込むことができます。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して <see cref="T:System.IO.Stream" /> の現在のデータを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`mode`パラメーターに値を設定および`WriteSchema`します。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.IO.FileStream?displayProperty=nameWithType>オブジェクト。 オブジェクトを使用して、 <xref:System.Data.DataSet.WriteXml%2A> XML ドキュメントを書き込みます。  
  
 [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">書き込む対象の <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して <see cref="T:System.IO.TextWriter" /> の現在のデータを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`mode`パラメーターに値を設定および`WriteSchema`します。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string -&gt; unit" Usage="dataSet.WriteXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">書き込み先の (パスを含む) ファイル名。</param>
        <summary>指定したファイルに、<see cref="T:System.Data.DataSet" /> の現在のデータを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`mode`パラメーターに値を設定および`WriteSchema`します。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを読み書きします。 関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">書き込みに使用する <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> に、<see cref="T:System.Xml.XmlWriter" /> の現在のデータを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`mode`パラメーターに値を設定および`WriteSchema`します。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</param>
        <param name="mode">
          <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.Stream" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 データとスキーマの両方を作成するには、設定、`mode`パラメーター`WriteSchema`します。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">ドキュメントの書き込みに使用する <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
        <param name="mode">
          <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.IO.TextWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 データとスキーマの両方を作成するには、設定、`mode`パラメーター`WriteSchema`します。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
   
  
## Examples  
 次の例は、単純なをまず作成<xref:System.Data.DataSet>いずれかで<xref:System.Data.DataTable>、2 つの列、および 10 個の行。 <xref:System.Data.DataSet>スキーマとデータは、呼び出すことによってディスクに書き込まれます、<xref:System.Data.DataSet.WriteXml%2A>メソッド。 1 秒あたり<xref:System.Data.DataSet>が作成されると<xref:System.Data.DataSet.ReadXml%2A>メソッドを使用して、スキーマとデータを格納します。  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName">書き込み先の (パスを含む) ファイル名。</param>
        <param name="mode">
          <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを、指定したファイルに書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 データとスキーマの両方を作成するには、設定、`mode`パラメーター`WriteSchema`します。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
   
  
## Examples  
 次の例では、 <xref:System.Data.DataSet.WriteXml%2A> XML ドキュメントを書き込みます。  
  
 [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを読み書きします。 関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">書き込みに使用する <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="mode">
          <see cref="T:System.Data.XmlWriteMode" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Xml.XmlWriter" /> を使用して、<see cref="T:System.Data.XmlWriteMode" /> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。 スキーマを書き込むには、<paramref name="mode" /> パラメーターの値を <see langword="WriteSchema" /> に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataSet> XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 データとスキーマの両方を作成するには、設定、`mode`パラメーター`WriteSchema`します。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドでは、それぞれします。 XML データ、または両方のスキーマとにデータを読み取る、`DataSet`を使用して、`ReadXml`メソッド。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.IO.FileStream?displayProperty=nameWithType>オブジェクトを新規作成に使用される<xref:System.Xml.XmlTextWriter>します。 <xref:System.Xml.XmlTextWriter>オブジェクトでは、使用して、 <xref:System.Data.DataSet.WriteXml%2A> XML ドキュメントを書き込みます。  
  
 [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとして書き込みます。</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">ファイルに書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</param>
        <summary>XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.Stream" /> オブジェクトに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataSet> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。 XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。  
  
 XML スキーマでは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド。  
  
 派生するクラス、<xref:System.IO.Stream>クラスが含まれて<xref:System.IO.BufferedStream>、 <xref:System.IO.FileStream>、 <xref:System.IO.MemoryStream>、および<xref:System.Net.Sockets.NetworkStream>します。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:System.IO.FileStream>オブジェクトに渡される、<xref:System.Data.DataSet.WriteXmlSchema%2A>にスキーマをディスクに書き込みます。  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">書き込む対象の <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
        <summary>XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.TextWriter" /> オブジェクトに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataSet> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。 XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。  
  
 XML スキーマでは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド。  
  
 クラスから派生、<xref:System.IO.TextWriter?displayProperty=nameWithType>クラスが含まれて、 <xref:System.Web.HttpWriter?displayProperty=nameWithType>、 <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>、 <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>、 <xref:System.IO.StreamWriter?displayProperty=nameWithType>、および<xref:System.IO.StringWriter?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Text.StringBuilder?displayProperty=nameWithType>にオブジェクトを新規作成に使用されます<xref:System.IO.StringWriter?displayProperty=nameWithType>します。 <xref:System.IO.StringWriter>に渡される、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、および結果の文字列がコンソール ウィンドウに出力します。  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string -&gt; unit" Usage="dataSet.WriteXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">書き込み先の (パスを含む) ファイル名。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとしてファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataSet> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。 XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。  
  
 XML スキーマでは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Security.Permissions.FileIOPermission" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> に設定されていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを読み書きします。 関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">書き込み先の <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとして <see cref="T:System.Xml.XmlWriter" /> オブジェクトに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataSet> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。 XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド。  
  
 XML スキーマでは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド。  
  
 1 つのクラスから継承する、<xref:System.Xml.XmlWriter?displayProperty=nameWithType>クラスは、<xref:System.Xml.XmlTextWriter>クラス。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:System.IO.FileStream?displayProperty=nameWithType>指定したパスのオブジェクト。 <xref:System.IO.FileStream>オブジェクトの作成に使用する<xref:System.Xml.XmlTextWriter>オブジェクト。 <xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドが、呼び出されると、<xref:System.Xml.XmlTextWriter>にスキーマをディスクに書き込むオブジェクト。  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/6d4c4b69-8919-4224-8a65-6cca1c61b48f">ADO.NET でのデータセットの使用</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (stream, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="stream">書き込み先の <see cref="T:System.IO.Stream" /> オブジェクト。</param>
        <param name="multipleTargetConverter">
          <see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</param>
        <summary>XML スキーマとして <see cref="T:System.Data.DataSet" /> 構造体を指定した <see cref="T:System.IO.Stream" /> オブジェクトに書き込みます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">書き込み先の <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
        <param name="multipleTargetConverter">
          <see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> に対し、<see cref="T:System.IO.TextWriter" /> 構造体を XML スキーマとして書き込みます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (fileName, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="fileName">書き込み先のファイルの名前。</param>
        <param name="multipleTargetConverter">
          <see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 構造体を XML スキーマとしてファイルに書き込みます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">書き込み先の <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
        <param name="multipleTargetConverter">
          <see cref="T:System.Type" /> を文字列に変換するために使用するデリゲート。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> に対し、<see cref="T:System.Xml.XmlWriter" /> 構造体を XML スキーマとして書き込みます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>