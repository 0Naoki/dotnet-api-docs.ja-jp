<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eb2acee0ac49f203ce99088dd7b97e323a75cb0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69122426" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Data.DataTable" /> クラスの拡張メソッドを定義します。 <see cref="T:System.Data.DataTableExtensions" /> は静的クラスです。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="table">LINQ 対応の <see cref="T:System.Data.DataTable" /> を作成する元となる <see cref="T:System.Data.DataView" />。</param>
        <summary>LINQ 対応の <see cref="T:System.Data.DataView" /> オブジェクトを作成して返します。</summary>
        <returns>LINQ 対応の <see cref="T:System.Data.DataView" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView>とのデータバインディングシナリオを[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]有効にし、型指定された<xref:System.Data.DataTable>または型指定されていないから作成できるため、そのテーブルの既定のビューが提供されます。 <xref:System.Data.DataView> から <xref:System.Data.DataTable> を作成した後、フィルターおよび並べ替えを設定できます。 次<xref:System.Data.DataView>に、は、 <xref:System.Windows.Forms.DataGrid>や<xref:System.Windows.Forms.DataGridView>などの UI コントロールにバインドされ、単純なデータバインディングモデルを提供します。  
  
 詳細と例については、「 [DataView オブジェクトの作成](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)」を参照してください。  
  
   
  
## Examples  
 次の例では<xref:System.Data.DataView> 、SalesOrderDetail テーブルからを作成し、それを<xref:System.Windows.Forms.BindingSource>オブジェクトのデータソースとして設定します。これ<xref:System.Windows.Forms.DataGridView>は、コントロールのプロキシとして機能します。  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
        <param name="source">LINQ 対応の <see cref="T:System.Data.DataView" /> を作成する元となる [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] クエリ。</param>
        <summary>[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] クエリを表す LINQ 対応の <see cref="T:System.Data.DataView" /> オブジェクトを作成して返します。</summary>
        <returns>LINQ 対応の <see cref="T:System.Data.DataView" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView>およびの[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]データバインディングシナリオを有効にし、 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]クエリから作成できます。 はクエリ自体を表し、クエリの上のビューではありません。<xref:System.Data.DataView> 新しく作成さ<xref:System.Data.DataView>れたは、作成元のクエリからのフィルター処理と並べ替えの情報を推測します。 次<xref:System.Data.DataView>に、は、 <xref:System.Windows.Forms.DataGrid>や<xref:System.Windows.Forms.DataGridView>などの UI コントロールにバインドされ、単純なデータバインディングモデルを提供します。  
  
 入力パラメーター `T` `source`のパラメーターには、型<xref:System.Data.DataRow>またはから<xref:System.Data.DataRow>派生した型のみを指定できます。  
  
 次のクエリ演算子は、の作成<xref:System.Data.DataView>に使用されるクエリでのみサポートされています。  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 詳細と例については、「 [DataView オブジェクトの作成](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)」を参照してください。  
  
   
  
## Examples  
 次の例では<xref:System.Data.DataView> 、合計について注文したオンライン注文のを作成します。  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">列挙可能にする対象のソース <see cref="T:System.Data.DataTable" />。</param>
        <summary><see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトを返します。ここで、ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataRow" /> です。 このオブジェクトは、[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 式またはメソッド クエリで使用できます。</summary>
        <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。ここで、ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataRow" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]<xref:System.Collections.Generic.IEnumerable%601> クエリ<xref:System.Linq.IQueryable>は、インターフェイスまたはインターフェイスを実装するデータソースに対して機能します。  クラス<xref:System.Data.DataTable>はどちらのインターフェイスも実装していないため、 <xref:System.Data.DataTableExtensions.AsEnumerable%2A> [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]クエリの`From`句で<xref:System.Data.DataTable>をソースとして使用するには、メソッドを呼び出す必要があります。 オブジェクト<xref:System.Collections.Generic.IEnumerable%601>を返すことによって、などのドメイン固有の<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>カスタム演算子を取得することもできます。  
  
 <xref:System.Data.DataTableExtensions.AsEnumerable%2A>メソッドによって返さ<xref:System.Data.DataTable>れる列挙可能なオブジェクトは、それを生成したに永続的にバインドされます。 <xref:System.Data.DataTableExtensions.AsEnumerable%2A>メソッドを複数回呼び出すと、ソース<xref:System.Data.DataTable>にバインドされている、独立した複数のクエリ可能なオブジェクトが返されます。  
  
   
  
## Examples  
 次の例では、 `DisplayProducts`メソッドは、という`ProductName`DataColumn を含む DataTable を受け取り、 `ProductName`値を抽出して、値を出力します。  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">ソース <see cref="T:System.Data.DataTable" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した入力 <see cref="T:System.Data.DataTable" /> オブジェクトに応じて、<see cref="T:System.Data.DataRow" /> オブジェクトのコピーを格納する <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
        <param name="source">ソース <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンス。</param>
        <summary>指定した入力 <see cref="T:System.Data.DataTable" /> オブジェクトに応じて (ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataRow" />)、<see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトのコピーを格納する <see cref="T:System.Data.DataRow" /> を返します。</summary>
        <returns><see cref="T:System.Data.DataTable" /> オブジェクト型の入力シーケンスを格納する <see cref="T:System.Data.DataRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 入力パラメーター `T` `source`のパラメーターには、型<xref:System.Data.DataRow>またはから<xref:System.Data.DataRow>派生した型のみを指定できます。  
  
 入力シーケンスは、クエリや<xref:System.Collections.Generic.IEnumerable%601>に<xref:System.Data.DataTable>対するクエリだけでなく、任意のソースにすることができます。 ソースシーケンスがクエリの場合、この演算子を呼び出すと即時実行が強制されることに注意してください。 ソースシーケンスを列挙すると、例外がスローされる場合もあります。  
  
 コピー先テーブルのスキーマは、ソースシーケンスの最初<xref:System.Data.DataRow>の行のスキーマに基づいています。 テーブルのメタデータは、 <xref:System.Data.DataRow> <xref:System.Data.DataRow>メタデータとテーブルの値からの列の値から抽出されます。 型を指定<xref:System.Data.DataTable>した場合、型は保持されません。 データとスキーマは転送されますが、出力テーブルの結果の行は型指定<xref:System.Data.DataRow>された型ではありません。 ソース<xref:System.Data.DataRow.RowState%2A> <xref:System.Data.DataRow.RowError%2A> から返さ<xref:System.Data.DataTable>れたへのコピー中に、プロパティとプロパティは保持されません。 <xref:System.Data.DataRow>  
  
 値が**null**で<xref:System.Data.DataRow>ある**null**参照または null 許容型がソースで見つかった場合、このメソッドは、変換先<xref:System.Data.DataTable>の値をの<xref:System.DBNull.Value>値に置き換えます。  
  
 メソッドによって返される生成されたテーブルには、既定のテーブル名が付いています。 に名前を付け<xref:System.Data.DataTable>たり、 <xref:System.Data.DataSet>にアタッチしたり、その他の特定の<xref:System.Data.DataTable>操作を実行したりする場合は、テーブルを作成して返す必要があります。  
  
 詳細については、「[クエリからの DataTable の作成](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、2001年8月8日以降に SalesOrderHeader テーブルに対し<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>てクエリを実行<xref:System.Data.DataTable>し、メソッドを使用してそのクエリからを作成します。 次に、<xref:System.Data.DataTable> が <xref:System.Windows.Forms.BindingSource> にバインドされます。これは <xref:System.Windows.Forms.DataGridView> のプロキシとして機能します。  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">ソース <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンスが <see langword="null" /> で、新しいテーブルは作成できません。</exception>
        <exception cref="T:System.InvalidOperationException">ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see cref="F:System.Data.DataRowState.Deleted" /> の状態です。  
  
ソース シーケンスに <see cref="T:System.Data.DataRow" /> オブジェクトは格納されていません。  
  
ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
        <param name="source">ソース <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンス。</param>
        <param name="table">コピー先の <see cref="T:System.Data.DataTable" />。</param>
        <param name="options"><see cref="T:System.Data.LoadOption" /> 読み込みオプションを指定する <see cref="T:System.Data.DataTable" /> 列挙体。</param>
        <summary>指定した入力 <see cref="T:System.Data.DataRow" /> オブジェクトに応じて (ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataTable" />)、指定した <see cref="T:System.Collections.Generic.IEnumerable`1" /> に <see cref="T:System.Data.DataRow" /> オブジェクトをコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 入力パラメーター `T` `source`のパラメーターには、型<xref:System.Data.DataRow>、またはから<xref:System.Data.DataRow>派生した型のみを指定できます。  
  
 入力シーケンスは、に<xref:System.Collections.Generic.IEnumerable%601> <xref:System.Data.DataTable>対するクエリだけでなく、任意のソースにすることができます。 ソースシーケンスがクエリの場合、この演算子を呼び出すと即時実行が強制されることに注意してください。 ソースシーケンスを列挙すると、例外がスローされる場合もあります。  
  
 コピー先テーブルのスキーマは、ソースシーケンスの最初<xref:System.Data.DataRow>の行のスキーマに基づいています。 テーブルのメタデータは、 <xref:System.Data.DataRow> <xref:System.Data.DataRow>メタデータとテーブルの値からの列の値から抽出されます。 型を指定<xref:System.Data.DataTable>した場合、型は保持されません。 データとスキーマは転送されますが、出力テーブルの結果の行は型指定<xref:System.Data.DataRow>された型ではありません。 ソース<xref:System.Data.DataRow.RowState%2A> <xref:System.Data.DataRow.RowError%2A> から返さ<xref:System.Data.DataTable>れたへのコピー中に、プロパティとプロパティは保持されません。 <xref:System.Data.DataRow>  
  
 値が**null**で<xref:System.Data.DataRow>ある**null**参照または null 許容型がソースで見つかった場合、このメソッドは、変換先<xref:System.Data.DataTable>の値をの<xref:System.DBNull.Value>値に置き換えます。  
  
 メソッドによって返される生成されたテーブルには、既定のテーブル名が付いています。 に名前を付け<xref:System.Data.DataTable>たり、 <xref:System.Data.DataSet>にアタッチしたり、その他の特定の<xref:System.Data.DataTable>操作を実行したりする場合は、テーブルを作成して返す必要があります。  
  
 詳細については、「[クエリからの DataTable の作成](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">コピーされた <see cref="T:System.Data.DataRow" /> オブジェクトが、転送先の <see cref="T:System.Data.DataTable" /> のスキーマに適合しません。</exception>
        <exception cref="T:System.ArgumentNullException">転送元の <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンスが <see langword="null" />、または転送先の <see cref="T:System.Data.DataTable" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see cref="F:System.Data.DataRowState.Deleted" /> の状態です。  
  
ソース シーケンスに <see cref="T:System.Data.DataRow" /> オブジェクトは格納されていません。  
  
ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
        <param name="source">ソース <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンス。</param>
        <param name="table">コピー先の <see cref="T:System.Data.DataTable" />。</param>
        <param name="options"><see cref="T:System.Data.LoadOption" /> 読み込みオプションを指定する <see cref="T:System.Data.DataTable" /> 列挙体。</param>
        <param name="errorHandler">エラーを処理するメソッドを表す <see cref="T:System.Data.FillErrorEventHandler" /> デリゲート。</param>
        <summary>指定した入力 <see cref="T:System.Data.DataRow" /> オブジェクトに応じて (ジェネリック パラメーター <paramref name="T" /> は <see cref="T:System.Data.DataTable" />)、指定した <see cref="T:System.Collections.Generic.IEnumerable`1" /> に <see cref="T:System.Data.DataRow" /> オブジェクトをコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 入力パラメーター `T` `source`のパラメーターには、型<xref:System.Data.DataRow>、またはから<xref:System.Data.DataRow>派生した型のみを指定できます。  
  
 入力シーケンスは、に<xref:System.Collections.Generic.IEnumerable%601> <xref:System.Data.DataTable>対するクエリだけでなく、任意のソースにすることができます。 ソースシーケンスがクエリの場合、この演算子を呼び出すと即時実行が強制されることに注意してください。 ソースシーケンスを列挙すると、例外がスローされる場合もあります。  
  
 コピー先テーブルのスキーマは、ソースシーケンスの最初<xref:System.Data.DataRow>の行のスキーマに基づいています。 テーブルのメタデータは、 <xref:System.Data.DataRow> <xref:System.Data.DataRow>メタデータとテーブルの値からの列の値から抽出されます。 型を指定<xref:System.Data.DataTable>した場合、型は保持されません。 データとスキーマは転送されますが、出力テーブルの結果の行は型指定<xref:System.Data.DataRow>された型ではありません。 ソース<xref:System.Data.DataRow.RowState%2A> <xref:System.Data.DataRow.RowError%2A> から返さ<xref:System.Data.DataTable>れたへのコピー中に、プロパティとプロパティは保持されません。 <xref:System.Data.DataRow>  
  
 値が**null**で<xref:System.Data.DataRow>ある**null**参照または null 許容型がソースで見つかった場合、このメソッドは、変換先<xref:System.Data.DataTable>の値をの<xref:System.DBNull.Value>値に置き換えます。  
  
 メソッドによって返される生成されたテーブルには、既定のテーブル名が付いています。 に名前を付け<xref:System.Data.DataTable>たり、 <xref:System.Data.DataSet>にアタッチしたり、その他の特定の<xref:System.Data.DataTable>操作を実行したりする場合は、テーブルを作成して返す必要があります。  
  
 制約の例外`errorHandler`など、データ行のコピー中に例外がスローされた場合は、デリゲートが呼び出されます。 は、次の値`errorHandler`を使用してデリゲートに渡されます。<xref:System.Data.FillErrorEventArgs>  
  
-   <xref:System.Data.FillErrorEventArgs.Values%2A>プロパティは、ソースデータのコピーに設定されます。  
  
-   プロパティは、ターゲット<xref:System.Data.DataTable>に設定されます。 <xref:System.Data.FillErrorEventArgs.DataTable%2A>  
  
-   <xref:System.Data.FillErrorEventArgs.Errors%2A>プロパティは、キャッチされた例外に設定されます。  
  
 <xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティは、デリゲート呼び出しから制御が戻った後に読み取られます。 <xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティが`true`の場合、ソースシーケンスは引き続き列挙され、データテーブルに読み込まれます。 プロパティが`false`の場合は、 <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>メソッドから元の例外がスローされます。 <xref:System.Data.FillErrorEventArgs.Continue%2A>  
  
 詳細については、「[クエリからの DataTable の作成](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">コピーされた <see cref="T:System.Data.DataRow" /> オブジェクトが、転送先の <see cref="T:System.Data.DataTable" /> のスキーマに適合しません。</exception>
        <exception cref="T:System.ArgumentNullException">転送元の <see cref="T:System.Collections.Generic.IEnumerable`1" /> シーケンスが <see langword="null" />、または転送先の <see cref="T:System.Data.DataTable" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see cref="F:System.Data.DataRowState.Deleted" /> の状態です。  
  
- または - 
ソース シーケンスに <see cref="T:System.Data.DataRow" /> オブジェクトは格納されていません。  
  
- または - 
ソース シーケンス内の <see cref="T:System.Data.DataRow" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
