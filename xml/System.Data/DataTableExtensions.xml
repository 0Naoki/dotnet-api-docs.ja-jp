<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="446598705e8ab9ef4cbd69e50be68bc6cd6f4d97" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006331" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>拡張メソッドを定義、<see cref="T:System.Data.DataTable" />クラス。 <see cref="T:System.Data.DataTableExtensions" /> は静的クラスです。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="table">ソース<see cref="T:System.Data.DataTable" />元となる LINQ 対応<see cref="T:System.Data.DataView" />が作成されます。</param>
        <summary>作成して返しますが、LINQ が有効な<see cref="T:System.Data.DataView" />オブジェクト。</summary>
        <returns>LINQ 対応<see cref="T:System.Data.DataView" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> データ バインディング シナリオを実現できます[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]から作成することと、型指定された、または型指定されていない<xref:System.Data.DataTable>、そのテーブルの既定のビューを提供します。 <xref:System.Data.DataView> から <xref:System.Data.DataTable> を作成した後、フィルターおよび並べ替えを設定できます。 <xref:System.Data.DataView>など、UI コントロールにバインドし、<xref:System.Windows.Forms.DataGrid>または<xref:System.Windows.Forms.DataGridView>、単純なデータ バインディング モデルを提供します。  
  
 詳細と例については、次を参照してください。 [DataView オブジェクトを作成する](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)します。  
  
   
  
## Examples  
 次の例では、作成、 <xref:System.Data.DataView> 、SalesOrderDetail からテーブルし、のデータ ソースとして設定、<xref:System.Windows.Forms.BindingSource>のプロキシとして機能するには、オブジェクト、<xref:System.Windows.Forms.DataGridView>コントロール。  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
        <param name="source">ソース[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]元となるクエリ LINQ 対応<see cref="T:System.Data.DataView" />が作成されます。</param>
        <summary>作成して返しますが、LINQ が有効な<see cref="T:System.Data.DataView" />オブジェクトを表す、[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]クエリ。</summary>
        <returns>LINQ 対応<see cref="T:System.Data.DataView" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> データ バインディング シナリオを実現できます[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]から作成することと、[!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]クエリ。 <xref:System.Data.DataView>クエリ自体を表し、クエリに基づくビューではありません。 新しく作成された<xref:System.Data.DataView>推論、フィルターおよび並べ替え情報をクエリから作成されます。 <xref:System.Data.DataView>など、UI コントロールにバインドし、<xref:System.Windows.Forms.DataGrid>または<xref:System.Windows.Forms.DataGridView>、単純データ バインディング モデルを提供します。  
  
 パラメーター`T`入力パラメーターの`source`型であることができます<xref:System.Data.DataRow>から派生した型または<xref:System.Data.DataRow>します。  
  
 次のクエリ演算子は、作成に使用するクエリでサポートされますのみ、 <xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 詳細と例については、次を参照してください。 [DataView オブジェクトを作成する](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)します。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Data.DataView>のオンライン注文の合計支払額順。  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">ソース<see cref="T:System.Data.DataTable" />列挙可能にします。</param>
        <summary>返します、<see cref="T:System.Collections.Generic.IEnumerable`1" />オブジェクト、場所、ジェネリック パラメーター<paramref name="T" />は<see cref="T:System.Data.DataRow" />します。 このオブジェクトは、[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 式またはメソッド クエリで使用できます。</summary>
        <returns><see cref="T:System.Collections.Generic.IEnumerable`1" />オブジェクト、場所、ジェネリック パラメーター<paramref name="T" />は<see cref="T:System.Data.DataRow" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] 実装するデータ ソースに対してクエリが動作、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスまたは<xref:System.Linq.IQueryable>インターフェイス。  <xref:System.Data.DataTable>クラスがいずれかのインターフェイスを実装していませんので、呼び出す必要があります、<xref:System.Data.DataTableExtensions.AsEnumerable%2A>メソッドを使用して、<xref:System.Data.DataTable>でソースとして、`From`の句、[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]クエリ。 など、独自のカスタム ドメインに固有の演算子を取得することもできます。 <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>、返すことによって、<xref:System.Collections.Generic.IEnumerable%601>オブジェクト。  
  
 によって返される列挙可能なオブジェクト、<xref:System.Data.DataTableExtensions.AsEnumerable%2A>メソッドに完全にバインドされている、<xref:System.Data.DataTable>結果を生成します。 複数回の呼び出し、<xref:System.Data.DataTableExtensions.AsEnumerable%2A>クエリ可能なオブジェクトが独立した戻り値の倍数はすべて、ソースにバインドするメソッドは<xref:System.Data.DataTable>します。  
  
   
  
## Examples  
 次の例で、`DisplayProducts`メソッドは、DataColumn という名前を含む DataTable を受け取ります`ProductName`、抽出、`ProductName`値し、値を出力します。  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">ソース<see cref="T:System.Data.DataTable" />は<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返します、<see cref="T:System.Data.DataTable" />のコピーを格納する、<see cref="T:System.Data.DataRow" />オブジェクト、指定した入力<see cref="T:System.Collections.Generic.IEnumerable`1" />オブジェクト。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
        <param name="source">ソース<see cref="T:System.Collections.Generic.IEnumerable`1" />シーケンス。</param>
        <summary>返します、<see cref="T:System.Data.DataTable" />のコピーを格納する、<see cref="T:System.Data.DataRow" />オブジェクト、指定した入力<see cref="T:System.Collections.Generic.IEnumerable`1" />オブジェクト、ジェネリック パラメーター<paramref name="T" />は<see cref="T:System.Data.DataRow" />します。</summary>
        <returns>A<see cref="T:System.Data.DataTable" />の型として入力シーケンスを格納している<see cref="T:System.Data.DataRow" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター`T`入力パラメーターの`source`型であることができます<xref:System.Data.DataRow>から派生した型または<xref:System.Data.DataRow>します。  
  
 入力シーケンスには、<xref:System.Collections.Generic.IEnumerable%601>ソース、クエリまたはクエリのだけでなく、<xref:System.Data.DataTable>します。 ソース シーケンスがクエリの場合は、この演算子を呼び出して強制的に即時実行に注意してください。 ソース シーケンスを列挙すると、例外がスローされることもあります。  
  
 レプリケーション先テーブルのスキーマは、最初のスキーマに基づいて<xref:System.Data.DataRow>ソース シーケンス内の行。 テーブルのメタデータがから抽出された、<xref:System.Data.DataRow>メタデータと、テーブルの列の値から値を<xref:System.Data.DataRow>します。 型指定された<xref:System.Data.DataTable>型は保持されません。 データとスキーマが転送されるが、出力テーブルの結果の行は、型指定された<xref:System.Data.DataRow>型。 <xref:System.Data.DataRow.RowState%2A>と<xref:System.Data.DataRow.RowError%2A>プロパティは、ソースからのコピー中に保持されません<xref:System.Data.DataRow>に返された<xref:System.Data.DataTable>します。  
  
 ときに、 **null**参照または null 許容型の値を持つ**null**がソースで見つかった<xref:System.Data.DataRow>、このメソッドは、宛先の値を置き換えます<xref:System.Data.DataTable>の値を持つ<xref:System.DBNull.Value>します。  
  
 メソッドによって返される生成されたテーブルには、既定のテーブル名があります。 名前を付ける場合、 <xref:System.Data.DataTable>、アタッチ先、 <xref:System.Data.DataSet>、またはその他の実行<xref:System.Data.DataTable>、特定の操作を行う必要があります、テーブルが作成され、返された後です。  
  
 詳細については、次を参照してください。 [、クエリからのデータ テーブルを作成する](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)します。  
  
   
  
## Examples  
 次の例は、2001 年 8 月 8 日後に、SalesOrderHeader テーブルの注文に対してクエリを実行しを使用して、<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>を作成する方法、<xref:System.Data.DataTable>からクエリを実行します。 次に、<xref:System.Data.DataTable> が <xref:System.Windows.Forms.BindingSource> にバインドされます。これは <xref:System.Windows.Forms.DataGridView> のプロキシとして機能します。  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">ソース<see cref="T:System.Collections.Generic.IEnumerable`1" />シーケンスが<see langword="null" />新しいテーブルを作成することはできません。</exception>
        <exception cref="T:System.InvalidOperationException">A<see cref="T:System.Data.DataRow" />ソース シーケンスが状態<see cref="F:System.Data.DataRowState.Deleted" />します。  
  
ソース シーケンスが含まれない<see cref="T:System.Data.DataRow" />オブジェクト。  
  
A <see cref="T:System.Data.DataRow" /> 、ソース シーケンスが<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
        <param name="source">ソース<see cref="T:System.Collections.Generic.IEnumerable`1" />シーケンス。</param>
        <param name="table">コピー先 <see cref="T:System.Data.DataTable" />。</param>
        <param name="options">A<see cref="T:System.Data.LoadOption" />列挙型を指定する、<see cref="T:System.Data.DataTable" />ロード オプション。</param>
        <summary>コピー<see cref="T:System.Data.DataRow" />を指定したオブジェクト<see cref="T:System.Data.DataTable" />、指定した入力<see cref="T:System.Collections.Generic.IEnumerable`1" />オブジェクト、ジェネリック パラメーター<paramref name="T" />は<see cref="T:System.Data.DataRow" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター`T`入力パラメーターの`source`型であることができます<xref:System.Data.DataRow>から派生した型または<xref:System.Data.DataRow>します。  
  
 入力シーケンスには、いずれかを指定できる<xref:System.Collections.Generic.IEnumerable%601>ソース、クエリだけでなく経由で、<xref:System.Data.DataTable>します。 ソース シーケンスがクエリの場合は、この演算子を呼び出して強制的に即時実行に注意してください。 ソース シーケンスを列挙すると、例外がスローされることもあります。  
  
 レプリケーション先テーブルのスキーマは、最初のスキーマに基づいて<xref:System.Data.DataRow>ソース シーケンス内の行。 テーブルのメタデータがから抽出された、<xref:System.Data.DataRow>メタデータと、テーブルの列の値から値を<xref:System.Data.DataRow>します。 型指定された<xref:System.Data.DataTable>型は保持されません。 データとスキーマが転送されるが、出力テーブルの結果の行は、型指定された<xref:System.Data.DataRow>型。 <xref:System.Data.DataRow.RowState%2A>と<xref:System.Data.DataRow.RowError%2A>プロパティは、ソースからのコピー中に保持されません<xref:System.Data.DataRow>に返された<xref:System.Data.DataTable>します。  
  
 ときに、 **null**参照または null 許容型の値を持つ**null**がソースで見つかった<xref:System.Data.DataRow>、このメソッドは、宛先の値を置き換えます<xref:System.Data.DataTable>の値を持つ<xref:System.DBNull.Value>します。  
  
 メソッドによって返される生成されたテーブルには、既定のテーブル名があります。 名前を付ける場合、 <xref:System.Data.DataTable>、アタッチ先、 <xref:System.Data.DataSet>、またはその他の実行<xref:System.Data.DataTable>、特定の操作を行う必要があります、テーブルが作成され、返された後です。  
  
 詳細については、次を参照してください。 [、クエリからのデータ テーブルを作成する](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">先ほどコピーした<see cref="T:System.Data.DataRow" />オブジェクトには、変換先のスキーマが収まらない<see cref="T:System.Data.DataTable" />します。</exception>
        <exception cref="T:System.ArgumentNullException">ソース<see cref="T:System.Collections.Generic.IEnumerable`1" />シーケンスが<see langword="null" />または転送先<see cref="T:System.Data.DataTable" />は<see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">A<see cref="T:System.Data.DataRow" />ソース シーケンスが状態<see cref="F:System.Data.DataRowState.Deleted" />します。  
  
ソース シーケンスが含まれない<see cref="T:System.Data.DataRow" />オブジェクト。  
  
A <see cref="T:System.Data.DataRow" /> 、ソース シーケンスが<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">ソース シーケンスのオブジェクトの型 (通常は <see cref="T:System.Data.DataRow" />)。</typeparam>
        <param name="source">ソース<see cref="T:System.Collections.Generic.IEnumerable`1" />シーケンス。</param>
        <param name="table">コピー先 <see cref="T:System.Data.DataTable" />。</param>
        <param name="options">A<see cref="T:System.Data.LoadOption" />列挙型を指定する、<see cref="T:System.Data.DataTable" />ロード オプション。</param>
        <param name="errorHandler">A<see cref="T:System.Data.FillErrorEventHandler" />エラーを処理するメソッドを表すデリゲート。</param>
        <summary>コピー<see cref="T:System.Data.DataRow" />を指定したオブジェクト<see cref="T:System.Data.DataTable" />、指定した入力<see cref="T:System.Collections.Generic.IEnumerable`1" />オブジェクト、ジェネリック パラメーター<paramref name="T" />は<see cref="T:System.Data.DataRow" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター`T`入力パラメーターの`source`型であることができます<xref:System.Data.DataRow>から派生した型または<xref:System.Data.DataRow>します。  
  
 入力シーケンスには、いずれかを指定できる<xref:System.Collections.Generic.IEnumerable%601>ソース、クエリだけでなく経由で、<xref:System.Data.DataTable>します。 ソース シーケンスがクエリの場合は、この演算子を呼び出して強制的に即時実行に注意してください。 ソース シーケンスを列挙すると、例外がスローされることもあります。  
  
 レプリケーション先テーブルのスキーマは、最初のスキーマに基づいて<xref:System.Data.DataRow>ソース シーケンス内の行。 テーブルのメタデータがから抽出された、<xref:System.Data.DataRow>メタデータと、テーブルの列の値から値を<xref:System.Data.DataRow>します。 型指定された<xref:System.Data.DataTable>型は保持されません。 データとスキーマが転送されるが、出力テーブルの結果の行は、型指定された<xref:System.Data.DataRow>型。 <xref:System.Data.DataRow.RowState%2A>と<xref:System.Data.DataRow.RowError%2A>プロパティは、ソースからのコピー中に保持されません<xref:System.Data.DataRow>に返された<xref:System.Data.DataTable>します。  
  
 ときに、 **null**参照または null 許容型の値を持つ**null**がソースで見つかった<xref:System.Data.DataRow>、このメソッドは、宛先の値を置き換えます<xref:System.Data.DataTable>の値を持つ<xref:System.DBNull.Value>します。  
  
 メソッドによって返される生成されたテーブルには、既定のテーブル名があります。 名前を付ける場合、 <xref:System.Data.DataTable>、アタッチ先、 <xref:System.Data.DataSet>、またはその他の実行<xref:System.Data.DataTable>、特定の操作を行う必要があります、テーブルが作成され、返された後です。  
  
 制約の例外など、対象テーブルへのデータ行のコピー中に例外がスローされた場合、`errorHandler`デリゲートが呼び出されます。 A<xref:System.Data.FillErrorEventArgs>に渡される、`errorHandler`次の値を持つデリゲートします。  
  
-   <xref:System.Data.FillErrorEventArgs.Values%2A>プロパティが、ソース データのコピーに設定します。  
  
-   <xref:System.Data.FillErrorEventArgs.DataTable%2A>プロパティがターゲット<xref:System.Data.DataTable>します。  
  
-   <xref:System.Data.FillErrorEventArgs.Errors%2A>プロパティがキャッチされた例外に設定します。  
  
 <xref:System.Data.FillErrorEventArgs.Continue%2A>デリゲートの呼び出しが返された後に、プロパティは読み取り専用です。 場合、<xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティは`true`が列挙され、データ テーブルに読み込まれる、ソース シーケンスが続行されます。 場合、<xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティは`false`から、元の例外がスローされる、<xref:System.Data.DataTableExtensions.CopyToDataTable%2A>メソッド。  
  
 詳細については、次を参照してください。 [、クエリからのデータ テーブルを作成する](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">先ほどコピーした<see cref="T:System.Data.DataRow" />オブジェクトには、変換先のスキーマが収まらない<see cref="T:System.Data.DataTable" />します。</exception>
        <exception cref="T:System.ArgumentNullException">ソース<see cref="T:System.Collections.Generic.IEnumerable`1" />シーケンスが<see langword="null" />または転送先<see cref="T:System.Data.DataTable" />は<see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">A<see cref="T:System.Data.DataRow" />ソース シーケンスが状態<see cref="F:System.Data.DataRowState.Deleted" />します。  
  
- または - 
ソース シーケンスが含まれない<see cref="T:System.Data.DataRow" />オブジェクト。  
  
- または - 
A <see cref="T:System.Data.DataRow" /> 、ソース シーケンスが<see langword="null" />します。</exception>
      </Docs>
    </Member>
  </Members>
</Type>