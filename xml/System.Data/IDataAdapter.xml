<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c3ba188b4aa23926c517bdb170261648720c47e6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37668919" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ef570-101">オブジェクトが DataAdapter を実装できるようにします。<see cref="T:System.Data.DataSet" /> の格納と更新およびデータ ソースの更新に使用するメソッドとマップ アクション関連プロパティのセットを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ef570-101">Allows an object to implement a DataAdapter, and represents a set of methods and mapping action-related properties that are used to fill and update a <see cref="T:System.Data.DataSet" /> and update a data source.</span>
      </span>
      <span data-ttu-id="ef570-102">
        <see cref="T:System.Data.IDbDataAdapter" /> インスタンスは、テキスト コマンド (例: Transact-SQL) を入力するリレーショナル データベースのデータ ソース (またはそれに類似したもの) で、<see cref="T:System.Data.IDataAdapter" /> インスタンスは任意の型のデータ ソースに使用できます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ef570-102">
          <see cref="T:System.Data.IDbDataAdapter" /> instances are for data sources that are (or resemble) relational databases with textual commands (like Transact-SQL), while <see cref="T:System.Data.IDataAdapter" /> instances could can use any type of data source.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef570-103"><xref:System.Data.IDataAdapter>インターフェイスをデータ ソース間のブリッジを表す DataAdapter クラスを実装するために、継承したクラスを使用して、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-103">The <xref:System.Data.IDataAdapter> interface allows an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="ef570-104">DataAdapter クラスの詳細については、次を参照してください。 [DataAdapter からの Dataset](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)します。</span><span class="sxs-lookup"><span data-stu-id="ef570-104">For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).</span></span>  
  
 <span data-ttu-id="ef570-105">アプリケーションがのインスタンスを作成していない、<xref:System.Data.IDataAdapter>インターフェイスを直接が継承するクラスのインスタンスを実装する<xref:System.Data.IDataAdapter>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-105">An application does not create an instance of the <xref:System.Data.IDataAdapter> interface directly, but implements an instance of a class that inherits <xref:System.Data.IDataAdapter>.</span></span>  
  
 <span data-ttu-id="ef570-106">クラスを継承する<xref:System.Data.IDataAdapter>継承されたメンバーを実装し、通常プロバイダー固有の機能を追加するための追加メンバーを定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ef570-106">Classes that inherit <xref:System.Data.IDataAdapter> must implement the inherited members, and they typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="ef570-107">たとえば、<xref:System.Data.IDataAdapter>インターフェイスを定義、<xref:System.Data.IDataAdapter.Fill%2A>を受け取るメソッドを<xref:System.Data.DataSet>をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="ef570-107">For example, the <xref:System.Data.IDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataSet> as a parameter.</span></span> <span data-ttu-id="ef570-108">さらに、<xref:System.Data.OleDb.OleDbDataAdapter>クラスの継承、<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドの 2 つの追加オーバー ロードを定義して、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> ADO レコード セット オブジェクトをパラメーターとして取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="ef570-108">In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef570-109">次のコードの例では、派生クラスでは、 <xref:System.Data.SqlClient.SqlCommand>、 <xref:System.Data.SqlClient.SqlDataAdapter>、および<xref:System.Data.SqlClient.SqlConnection>、データベースからレコードを選択します。</span><span class="sxs-lookup"><span data-stu-id="ef570-109">The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database.</span></span> <span data-ttu-id="ef570-110">塗りつぶされた<xref:System.Data.DataSet>が返されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-110">The filled <xref:System.Data.DataSet> is then returned.</span></span> <span data-ttu-id="ef570-111">これを行うには、メソッドを初期化に渡される<xref:System.Data.DataSet>、接続文字列では、および TRANSACT-SQL SELECT ステートメントであるクエリ文字列。</span><span class="sxs-lookup"><span data-stu-id="ef570-111">To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="ef570-112">
        <para>フォームの継承クラスの名前を .NET Framework データ プロバイダーの間で整合性を高める<paramref name="Prv" />DataAdapter 場所<paramref name="Prv" />は特定の .NET Framework データ プロバイダー名前空間のすべてのクラスに指定された uniform プレフィックスです。たとえば、<paramref name="Sql" />のプレフィックスは、<see cref="T:System.Data.SqlClient.SqlDataAdapter" />クラス、<see langword="System.Data.SqlClient" />名前空間。継承する場合、<see cref="T:System.Data.IDataAdapter" />インターフェイスでは、次のコンス トラクターを実装する必要があります: <list type="table"><listheader><term>項目</term><description>説明</description></listheader><item><term> PrvDataAdapter() </term><description> PrvDataAdapter クラスの新しいインスタンスを初期化します。</description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) </term><description>指定した SQL SELECT ステートメントを使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。</description></item><item><term> (文字列 selectCommandText、文字列 selectConnectionString) PrvDataAdapter </term><description> SQL SELECT ステートメントと接続文字列を使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。</description></item><item><term> (文字列 selectCommandText、PrvConnection selectConnection) PrvDataAdapter </term><description> SQL SELECT ステートメントと PrvConnection オブジェクトを使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。  </description></item></list></para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="ef570-112">
          <para>To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> DataAdapter where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace. For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the <see langword="System.Data.SqlClient" /> namespace.  When you inherit from the <see cref="T:System.Data.IDataAdapter" /> interface, you should implement the following constructors:  <list type="table"><listheader><term> Item  </term><description> Description  </description></listheader><item><term> PrvDataAdapter()  </term><description> Initializes a new instance of the PrvDataAdapter class.  </description></item><item><term> PrvDataAdapter(PrvCommand selectCommand)  </term><description> Initializes a new instance of the PrvDataAdapter class by using the specified SQL SELECT statement.  </description></item><item><term> PrvDataAdapter(string selectCommandText, string selectConnectionString)  </term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a connection string.  </description></item><item><term> PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)  </term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a PrvConnection object.  </description></item></list></para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="ef570-113">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-113">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef570-114">
            <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。また、Table という名前の <see cref="T:System.Data.DataTable" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-114">Adds or updates rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> name, and creates a <see cref="T:System.Data.DataTable" /> named "Table".</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef570-115">
            <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-115">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="ef570-116">これには、行を返さないステートメントの影響を受ける行は含まれません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-116">This does not include rows affected by statements that do not return rows.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef570-117"><xref:System.Data.IDataAdapter.Fill%2A> 関連付けられている指定された SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="ef570-117"><xref:System.Data.IDataAdapter.Fill%2A> retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="ef570-118">SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="ef570-118">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="ef570-119">前に、接続が閉じられた場合<xref:System.Data.IDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。</span><span class="sxs-lookup"><span data-stu-id="ef570-119">If the connection is closed before <xref:System.Data.IDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="ef570-120">接続が前に開いている場合は<xref:System.Data.IDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="ef570-120">If the connection is open before <xref:System.Data.IDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="ef570-121"><xref:System.Data.IDataAdapter.Fill%2A>操作し、先に行を追加します<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうか、まだ存在しません。</span><span class="sxs-lookup"><span data-stu-id="ef570-121">The <xref:System.Data.IDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="ef570-122">作成するときに<xref:System.Data.DataTable>、オブジェクト、<xref:System.Data.IDataAdapter.Fill%2A>操作は通常、列名のメタデータのみを作成します。</span><span class="sxs-lookup"><span data-stu-id="ef570-122">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.IDataAdapter.Fill%2A> operation usually creates only column name metadata.</span></span> <span data-ttu-id="ef570-123">ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されて`AddWithKey`、適切な主キーと制約も作成されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-123">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="ef570-124">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="ef570-124">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="ef570-125">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ef570-125">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="ef570-126">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)します。</span><span class="sxs-lookup"><span data-stu-id="ef570-126">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
 <span data-ttu-id="ef570-127">場合、<xref:System.Data.IDataAdapter>設定中に重複する列を検出すると、<xref:System.Data.DataTable>パターン"columnname1"、"columnname2"、"columnname3"などを使用して、連続する列の名前を生成します。</span><span class="sxs-lookup"><span data-stu-id="ef570-127">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="ef570-128">格納されますが、受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。</span><span class="sxs-lookup"><span data-stu-id="ef570-128">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="ef570-129">複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>、各結果セットが別のテーブルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-129">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="ef570-130">整数値を指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に追加することでは、追加の結果セットがという名前です。</span><span class="sxs-lookup"><span data-stu-id="ef570-130">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="ef570-131">アプリケーションは、列とテーブルの名前を使用して、これらの名前付けパターンとの競合が発生しないことを確認する場合、注意を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ef570-131">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="ef570-132">ときに設定するために使用する SELECT ステートメント、<xref:System.Data.DataSet>複数の結果を返すバッチ SQL ステートメントなど、エラーが含まれる結果のいずれかの場合連続するすべての結果はスキップされに追加されません、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-132">When the SELECT statement that is used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, if one of the results contains an error, all successive results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="ef570-133">使用することができます、<xref:System.Data.IDataAdapter.Fill%2A>複数回の同じメソッド<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-133">You can use the <xref:System.Data.IDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="ef570-134">主キーが存在する場合は、受信行が既に存在する行と一致するとマージされます。</span><span class="sxs-lookup"><span data-stu-id="ef570-134">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="ef570-135">受信した行を追加、主キーが存在しない場合、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-135">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef570-136">実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.IDataAdapter.Fill%2A>と<xref:System.Data.IDataAdapter.FillSchema%2A>の .NET Framework データ プロバイダーは、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="ef570-136">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.IDataAdapter.Fill%2A> and <xref:System.Data.IDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="ef570-137">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-137">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</span>
          </span>
        </param>
        <param name="schemaType">
          <span data-ttu-id="ef570-138">
            <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-138">One of the <see cref="T:System.Data.SchemaType" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef570-139">"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-139">Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef570-140">データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-140">An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef570-141"><xref:System.Data.IDataAdapter.FillSchema%2A>メソッドを使用して、データ ソースからスキーマを取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-141">The <xref:System.Data.IDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="ef570-142">接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが。</span><span class="sxs-lookup"><span data-stu-id="ef570-142">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="ef570-143">前に、接続が閉じられた場合<xref:System.Data.IDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。</span><span class="sxs-lookup"><span data-stu-id="ef570-143">If the connection is closed before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="ef570-144">接続が前に開いている場合は<xref:System.Data.IDataAdapter.FillSchema%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="ef570-144">If the connection is open before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="ef570-145">A<xref:System.Data.IDataAdapter.FillSchema%2A>操作を追加、<xref:System.Data.DataTable>先に<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-145">A <xref:System.Data.IDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="ef570-146">列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>し、次の構成を<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。</span><span class="sxs-lookup"><span data-stu-id="ef570-146">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable> and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="ef570-147"><xref:System.Data.DataColumn.AutoIncrement%2A>。</span><span class="sxs-lookup"><span data-stu-id="ef570-147"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="ef570-148">設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。</span><span class="sxs-lookup"><span data-stu-id="ef570-148">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="ef570-149"><xref:System.Data.IDataAdapter.FillSchema%2A> 構成も、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に従って、次の規則のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="ef570-149"><xref:System.Data.IDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="ef570-150">1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-150">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="ef570-151">主キー列が返されない場合は、一意の列、一意のすべての列が null 非許容の場合、一意の列が主キーとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-151">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if all the unique columns are non-nullable.</span></span> <span data-ttu-id="ef570-152">Null を許容すると、任意の列がある場合、<xref:System.Data.UniqueConstraint>に追加されます、<xref:System.Data.ConstraintCollection>が、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティは設定されません。</span><span class="sxs-lookup"><span data-stu-id="ef570-152">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="ef570-153">主キー列として、主キー列が使用される主キー列と一意の列の両方が返された場合、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-153">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="ef570-154">主キーと一意制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前の規則が、その他の制約に従って、型は追加されません。</span><span class="sxs-lookup"><span data-stu-id="ef570-154">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the previous rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="ef570-155">一意クラスター化された場合、または SQL Server テーブルの複数の列にインデックスが定義されているし、クラスター化インデックスの列の名前が返されます、別の列のセットで主キー制約が定義されています。</span><span class="sxs-lookup"><span data-stu-id="ef570-155">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="ef570-156">主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。</span><span class="sxs-lookup"><span data-stu-id="ef570-156">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="ef570-157">クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="ef570-157">For more information about how to specify query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="ef570-158">場合、<xref:System.Data.IDataAdapter>設定中に重複する列を検出すると、<xref:System.Data.DataTable>パターン"columnname1"、"columnname2"、"columnname3"などを使用して、連続する列の名前を生成します。</span><span class="sxs-lookup"><span data-stu-id="ef570-158">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="ef570-159">格納されますが、受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。</span><span class="sxs-lookup"><span data-stu-id="ef570-159">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="ef570-160">複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>、各結果セットが別のテーブルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-160">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="ef570-161">整数値を指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に追加することでは、追加の結果セットがという名前です。</span><span class="sxs-lookup"><span data-stu-id="ef570-161">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="ef570-162">アプリケーションは、列とテーブルの名前を使用して、これらの名前付けパターンとの競合が発生しないことを確認する場合、注意を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ef570-162">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="ef570-163"><xref:System.Data.IDataAdapter.FillSchema%2A> 行を返しません。</span><span class="sxs-lookup"><span data-stu-id="ef570-163"><xref:System.Data.IDataAdapter.FillSchema%2A> returns no rows.</span></span> <span data-ttu-id="ef570-164">使用して、<xref:System.Data.IDataAdapter.Fill%2A>行を追加する方法、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-164">Use the <xref:System.Data.IDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef570-165">SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-165">Gets the parameters set by the user when executing an SQL SELECT statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef570-166">ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-166">An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credit]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef570-167">割り当てられていないソース テーブルまたはソース列をソース名で渡して、フィルター処理するか、エラーを発生させるかどうかを指示または指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-167">Indicates or specifies whether unmapped source tables or columns are passed with their source names in order to be filtered or to raise an error.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef570-168">
            <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-168">One of the <see cref="T:System.Data.MissingMappingAction" /> values.</span>
          </span>
          <span data-ttu-id="ef570-169">既定値は、<see langword="Passthrough" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-169">The default is <see langword="Passthrough" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef570-170"><xref:System.Data.IDataAdapter.TableMappings%2A>プロパティは、返されるレコードの間のマスター マップを提供し、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-170">The <xref:System.Data.IDataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef570-171">設定された値が <see cref="T:System.Data.MissingMappingAction" /> 値の 1 つではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-171">The value set is not one of the <see cref="T:System.Data.MissingMappingAction" /> values.</span>
          </span>
        </exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef570-172">存在しないソース テーブル、ソース列、それらのリレーションシップをデータセット スキーマに追加するか、無視するか、またはエラーを発生させるかを表示または指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-172">Indicates or specifies whether missing source tables, columns, and their relationships are added to the dataset schema, ignored, or cause an error to be raised.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef570-173">
            <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-173">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          </span>
          <span data-ttu-id="ef570-174">既定値は、<see langword="Add" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-174">The default is <see langword="Add" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef570-175">設定された値が <see cref="T:System.Data.MissingSchemaAction" /> 値の 1 つではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-175">The value set is not one of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          </span>
        </exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef570-176">ソース テーブルをデータセット テーブルに割り当てる方法を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-176">Indicates how a source table is mapped to a dataset table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef570-177">返されたレコードと <see cref="T:System.Data.DataSet" /> との間のマスター マップを提供するコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-177">A collection that provides the master mapping between the returned records and the <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="ef570-178">既定値は空のコレクションです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-178">The default value is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef570-179"><xref:System.Data.IDataAdapter> "Table"という名前のソース テーブルのマッピングのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="ef570-179">The <xref:System.Data.IDataAdapter> uses only the mappings for the source table named "Table".</span></span> <span data-ttu-id="ef570-180">すべて選択 INSERT、DELETE、および UPDATE ステートメントがデータを返す必要がありますを使って行う一貫性のある列の名前付けします。</span><span class="sxs-lookup"><span data-stu-id="ef570-180">All SELECT, INSERT, DELETE, and UPDATE statements returning data must do so using consistent column naming.</span></span> <span data-ttu-id="ef570-181">レコードで返される列名は一意である必要があります、重複する名前の列が以前のデータを上書きするそれ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="ef570-181">The column names returned in the records must be unique, otherwise columns with duplicate names overwrite previous data.</span></span> <span data-ttu-id="ef570-182"><xref:System.Data.IDataAdapter.Update%2A>、"Table"という名前のソース テーブルにマップされているテーブルの調整、その変更はだけです。</span><span class="sxs-lookup"><span data-stu-id="ef570-182">On <xref:System.Data.IDataAdapter.Update%2A>, only the table mapped to the source table named "Table" will have its changes reconciled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="ef570-183">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-183">The <see cref="T:System.Data.DataSet" /> used to update the data source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef570-184">指定された <see cref="T:System.Data.DataSet" /> 内の Table という名前の <see cref="T:System.Data.DataTable" /> に含まれる挿入行、更新行、または削除行に対して、INSERT、UPDATE、または DELETE ステートメントを個別に呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-184">Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" /> from a <see cref="T:System.Data.DataTable" /> named "Table".</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef570-185">
            <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-185">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef570-186">アプリケーションを呼び出すと、<xref:System.Data.IDataAdapter.Update%2A>メソッド、<xref:System.Data.IDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティ、で構成されているインデックスの順序に基づいて、各行の繰り返し必要なINSERT、UPDATE、またはDELETEステートメントを実行し、<xref:System.Data.DataSet>.</span><span class="sxs-lookup"><span data-stu-id="ef570-186">When an application calls the <xref:System.Data.IDataAdapter.Update%2A> method, the <xref:System.Data.IDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="ef570-187">たとえば、<xref:System.Data.IDataAdapter.Update%2A>内の行の順序付けのため、DELETE ステートメントの後に、INSERT ステートメントとし、もう 1 つの DELETE ステートメントを実行、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-187">For example, <xref:System.Data.IDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, because of the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="ef570-188">これらのステートメントがバッチ処理として実行されないことに注意してください。各行は個別に更新されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-188">Be aware that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="ef570-189">アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>メソッドの場合は、一連のステートメントの種類 (たとえば、更新する前に挿入) を制御する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ef570-189">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method if you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="ef570-190">詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)します。</span><span class="sxs-lookup"><span data-stu-id="ef570-190">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="ef570-191">かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DataAdapter.Update%2A>メソッドは例外を生成します。</span><span class="sxs-lookup"><span data-stu-id="ef570-191">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="ef570-192">ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの単一テーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="ef570-192">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="ef570-193">次に、設定しない追加の SQL ステートメントは、CommandBuilder によって生成されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-193">Then, any additional SQL statements that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="ef570-194">この生成ロジックではキー列の情報に含まれる、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-194">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="ef570-195">詳細については、次を参照してください。 [Commandbuilder でのコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)します。</span><span class="sxs-lookup"><span data-stu-id="ef570-195">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="ef570-196"><xref:System.Data.Common.DataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に、最初のマッピングを示す表から行を取得します。</span><span class="sxs-lookup"><span data-stu-id="ef570-196">The <xref:System.Data.Common.DataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="ef570-197"><xref:System.Data.Common.DataAdapter.Update%2A>の値を使用して行を更新し、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="ef570-197">The <xref:System.Data.Common.DataAdapter.Update%2A> then updates the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="ef570-198">返されるその他の行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-198">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="ef570-199">すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーは、検査、調整できるようにする<xref:System.Data.DataSet>行と、コマンドによって返されるパラメーターを出力します。</span><span class="sxs-lookup"><span data-stu-id="ef570-199">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="ef570-200">行が正常に更新した後、その行に対する変更が受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="ef570-200">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="ef570-201">使用する場合<xref:System.Data.IDataAdapter.Update%2A>実行の順序は、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="ef570-201">When using <xref:System.Data.IDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="ef570-202">内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-202">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="ef570-203"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="ef570-203">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="ef570-204">コマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="ef570-204">The command executes.</span></span>  
  
4.  <span data-ttu-id="ef570-205">コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に配置し、<xref:System.Data.DataRow>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-205">If the command is set to `FirstReturnedRecord`, then the first returned result is put in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="ef570-206">格納されますが、出力パラメーターがある場合、<xref:System.Data.DataRow>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-206">If there are output parameters, they are put in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="ef570-207"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="ef570-207">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="ef570-208"><xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。</span><span class="sxs-lookup"><span data-stu-id="ef570-208"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="ef570-209">各コマンドに関連付けられている、<xref:System.Data.IDataAdapter>関連付けられているパラメーターのコレクションを持ちます。</span><span class="sxs-lookup"><span data-stu-id="ef570-209">Each command associated with the <xref:System.Data.IDataAdapter> usually has a parameter collection associated with it.</span></span> <span data-ttu-id="ef570-210">パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラス。</span><span class="sxs-lookup"><span data-stu-id="ef570-210">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="ef570-211">`SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.IDataAdapter>参照を現在の行のパラメーターの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="ef570-211">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.IDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="ef570-212">`SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を参照します。</span><span class="sxs-lookup"><span data-stu-id="ef570-212">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="ef570-213">場合`SourceColumn`参照を存在しない列に、実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。</span><span class="sxs-lookup"><span data-stu-id="ef570-213">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="ef570-214">列挙値</span><span class="sxs-lookup"><span data-stu-id="ef570-214">Enumeration Value</span></span>|<span data-ttu-id="ef570-215">実行されるアクション</span><span class="sxs-lookup"><span data-stu-id="ef570-215">Action Taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="ef570-216">ソース列名とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="ef570-216">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="ef570-217">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-217">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="ef570-218">マッピングが明示的に設定すると、入力パラメーターのマッピングがないは通常のエラーによって発生します。</span><span class="sxs-lookup"><span data-stu-id="ef570-218">When the mappings are explicitly set, a missing mapping for an input parameter is usually caused by an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="ef570-219">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-219">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="ef570-220">`SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターを`DataSet`します。</span><span class="sxs-lookup"><span data-stu-id="ef570-220">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="ef570-221">存在しない列を参照する場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-221">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="ef570-222">`SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラスを使用するかどうかを決定、 `Original`、 `Current`、または`Proposed`列の値のバージョン。</span><span class="sxs-lookup"><span data-stu-id="ef570-222">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the `Original`, `Current`, or `Proposed` version of the column value.</span></span> <span data-ttu-id="ef570-223">この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="ef570-223">This capability is frequently used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef570-224">行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。</span><span class="sxs-lookup"><span data-stu-id="ef570-224">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="ef570-225">更新操作を続行すると、エラーが発生した場合に例外を生成せず、設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-225">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="ef570-226">内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベント。</span><span class="sxs-lookup"><span data-stu-id="ef570-226">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="ef570-227">内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-227">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef570-228">次の例は、派生クラスでは、<xref:System.Data.OleDb.OleDbDataAdapter>を<xref:System.Data.Common.DataAdapter.Update%2A>データ ソース。</span><span class="sxs-lookup"><span data-stu-id="ef570-228">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source.</span></span> <span data-ttu-id="ef570-229">この例では、作成した、<xref:System.Data.OleDb.OleDbDataAdapter>と<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="ef570-229">This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">
          <span data-ttu-id="ef570-230">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef570-230">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>