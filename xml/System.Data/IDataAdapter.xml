<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04acc5f938041cbe186142d2bbb5fe676f37af4c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70720337" /></Metadata><TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>オブジェクトが DataAdapter を実装できるようにします。<see cref="T:System.Data.DataSet" /> の格納と更新およびデータ ソースの更新に使用するメソッドとマップ アクション関連プロパティのセットを表します。  
  
 <see cref="T:System.Data.IDbDataAdapter" /> インスタンスは、テキスト コマンド (例: Transact-SQL) を入力するリレーショナル データベースのデータ ソース (またはそれに類似したもの) で、<see cref="T:System.Data.IDataAdapter" /> インスタンスは任意の型のデータ ソースに使用できます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インターフェイスを使用すると、継承クラスは、データソースとの<xref:System.Data.DataSet>間のブリッジを表す DataAdapter クラスを実装できます。 <xref:System.Data.IDataAdapter> DataAdapter クラスの詳細については、「 [dataadapter からのデータセットの読み込み](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)」を参照してください。  
  
 アプリケーションは、 <xref:System.Data.IDataAdapter>インターフェイスのインスタンスを直接作成するのではなく、を継承<xref:System.Data.IDataAdapter>するクラスのインスタンスを実装します。  
  
 継承<xref:System.Data.IDataAdapter>するクラスは、継承されたメンバーを実装する必要があり、通常は、プロバイダー固有の機能を追加するための追加メンバーを定義します。 たとえば、インターフェイスは<xref:System.Data.IDataAdapter>を<xref:System.Data.DataSet>パラメーターと<xref:System.Data.IDataAdapter.Fill%2A>して受け取るメソッドを定義します。 次に、クラス<xref:System.Data.OleDb.OleDbDataAdapter>は<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドを継承し、ADO レコードセットオブジェクトをパラメーター <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>として受け取るメソッドの2つの追加のオーバーロードも定義します。  
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.SqlClient.SqlCommand> <xref:System.Data.SqlClient.SqlDataAdapter>、、、 <xref:System.Data.SqlClient.SqlConnection>およびを使用して、データベースからレコードを選択します。 次に<xref:System.Data.DataSet> 、入力されたが返されます。 これを行うには、メソッドに、初期<xref:System.Data.DataSet>化された、接続文字列、および transact-sql SELECT ステートメントであるクエリ文字列が渡されます。  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>.NET Framework データプロバイダー間の一貫性を高めるには、 <paramref name="Prv" /> <paramref name="Prv" /> DataAdapter という形式で継承クラスに名前を付けます。は、特定の .NET Framework データプロバイダーの名前空間のすべてのクラスに指定された一様なプレフィックスです。 たとえば、 <paramref name="Sql" />は<see langword="System.Data.SqlClient" />名前空間の<see cref="T:System.Data.SqlClient.SqlDataAdapter" />クラスのプレフィックスです。  
  
<see cref="T:System.Data.IDataAdapter" />インターフェイスから継承する場合は、次のコンストラクターを実装する必要があります。 
 <list type="table"><listheader><term> アイテム 
 </term><description> 説明 
 </description></listheader><item><term> PrvDataAdapter() 
 </term><description> PrvDataAdapter クラスの新しいインスタンスを初期化します。  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) 
 </term><description> 指定した SQL SELECT ステートメントを使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。  
  
 </description></item><item><term> PrvDataAdapter (string selectCommandText、string Selectcommandtext) 
 </term><description> SQL SELECT ステートメントと接続文字列を使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。  
  
 </description></item><item><term> PrvDataAdapter (string selectCommandText, PrvConnection Selectcommandtext) 
 </term><description> SQL SELECT ステートメントと PrvConnection オブジェクトを使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <summary><see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。また、Table という名前の <see cref="T:System.Data.DataTable" /> を作成します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A>関連付けられている<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティによって指定された select ステートメントを使用して、データソースから行を取得します。 SELECT ステートメントに関連付けられている接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.IDataAdapter.Fill%2A>接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。 が呼び出される前に<xref:System.Data.IDataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 次に、の<xref:System.Data.DataTable> <xref:System.Data.DataSet>変換先オブジェクトに行を追加し、オブジェクト<xref:System.Data.DataTable>がまだ存在しない場合は作成します。 <xref:System.Data.IDataAdapter.Fill%2A> オブジェクトを<xref:System.Data.DataTable>作成する場合<xref:System.Data.IDataAdapter.Fill%2A> 、操作では通常、列名のメタデータのみが作成されます。 ただし、プロパティが<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>に`AddWithKey`設定されている場合は、適切な主キーと制約も作成されます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。 詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。  
  
 がの設定中に<xref:System.Data.DataTable>重複する列を検出すると、"columnname1"、"columnname2"、"columnname3" などのパターンを使用して、連続した列の名前が生成されます。 <xref:System.Data.IDataAdapter> 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに格納されます。 複数の<xref:System.Data.DataSet>結果セットがに追加されると、それぞれの結果セットが個別のテーブルに格納されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 アプリケーションでは、列名とテーブル名を使用して、これらの命名パターンとの競合が発生しないように注意する必要があります。  
  
 にデータを設定<xref:System.Data.DataSet>するために使用される SELECT ステートメントが複数の結果 (バッチ SQL ステートメントなど) を返す場合、結果の1つにエラーが含まれていると、後続の結果はすべてスキップされ、には<xref:System.Data.DataSet>追加されません。  
  
 <xref:System.Data.IDataAdapter.Fill%2A> 同じ <xref:System.Data.DataTable> でメソッドを複数回使用できます。 主キーが存在する場合、受信した行は、既に存在する一致する行とマージされます。 主キーが存在しない場合は、受信した<xref:System.Data.DataTable>行がに追加されます。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.IDataAdapter.Fill%2A> .NET Framework <xref:System.Data.IDataAdapter.FillSchema%2A>データプロバイダーのとの実装では、最初の結果のみのスキーマ情報を取得します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
        <summary>"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</summary>
        <returns>データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.IDataAdapter.FillSchema%2A>は、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用して、データソースからスキーマを取得します。 に関連付けられて<xref:System.Data.IDbDataAdapter.SelectCommand%2A>いる接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.IDataAdapter.FillSchema%2A>接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。 が呼び出される前に<xref:System.Data.IDataAdapter.FillSchema%2A>接続が開いている場合は、開いたままになります。  
  
 操作<xref:System.Data.IDataAdapter.FillSchema%2A>は、を<xref:System.Data.DataTable>変換先<xref:System.Data.DataSet>に追加します。 次に、 <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>のに列を追加し、データソース<xref:System.Data.DataColumn>に次のプロパティが存在する場合はそれを構成します。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 とを<xref:System.Data.DataColumn.AutoIncrementStep%2A> <xref:System.Data.DataColumn.AutoIncrementSeed%2A>個別に設定する必要があります。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A>また、は<xref:System.Data.DataTable.PrimaryKey%2A> 、 <xref:System.Data.DataTable.Constraints%2A>次の規則に従ってプロパティとプロパティを構成します。  
  
-   1つ以上の主キー列がによって<xref:System.Data.IDbDataAdapter.SelectCommand%2A>返された場合は、の主キー列<xref:System.Data.DataTable>として使用されます。  
  
-   主キー列が返されず、一意の列がの場合は、一意の列が null 非許容である場合、その一意の列が主キーとして使用されます。 Null 値を許容<xref:System.Data.UniqueConstraint>する列がある場合は、がに追加<xref:System.Data.ConstraintCollection>され<xref:System.Data.DataTable.PrimaryKey%2A>ますが、プロパティは設定されません。  
  
-   主キー列と一意の列の両方が返された場合、主キー列がの主キー列<xref:System.Data.DataTable>として使用されます。  
  
 前の規則に従って、主キーと一意<xref:System.Data.ConstraintCollection>の制約がに追加されることに注意してください。ただし、その他の制約の種類は追加されません。  
  
 SQL Server テーブルの1つまたは複数の列に一意のクラスター化インデックスが定義されていて、primary key 制約が別の列のセットに対して定義されている場合、クラスター化インデックス内の列の名前が返されます。 主キー列の名前または名前を取得するには、主キーインデックスの名前を指定する SELECT ステートメントでクエリヒントを使用します。 クエリヒントを指定する方法の詳細については、「[クエリヒント (transact-sql)](https://msdn.microsoft.com/library/ms181714.aspx)」を参照してください。  
  
 がの設定中に<xref:System.Data.DataTable>重複する列を検出すると、"columnname1"、"columnname2"、"columnname3" などのパターンを使用して、連続した列の名前が生成されます。 <xref:System.Data.IDataAdapter> 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに格納されます。 複数の<xref:System.Data.DataSet>結果セットがに追加されると、それぞれの結果セットが個別のテーブルに格納されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 アプリケーションでは、列名とテーブル名を使用して、これらの命名パターンとの競合が発生しないように注意する必要があります。  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A>行を返しません。 に行<xref:System.Data.IDataAdapter.Fill%2A>を追加するには、メソッドを使用します。 <xref:System.Data.DataTable>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</summary>
        <returns>ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectionString) {  
           using (SqlConnection conn = new SqlConnection(connectionString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits";   
              SqlParameter year = new SqlParameter("@Year", 2012);   
              SqlParameter credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");   
              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   
              command.Parameters.Add(year);   
              command.Parameters.Add(credits);   
              IDbDataAdapter mySchool = new SqlDataAdapter(command);   
              IDataParameter[] parameters = mySchool.GetFillParameters();  
              Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");   
              foreach (IDataParameter parameter in parameters) {   
                 Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   
              }  
           }  
        }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>割り当てられていないソース テーブルまたはソース列をソース名で渡して、フィルター処理するか、エラーを発生させるかどうかを指示または指定します。</summary>
        <value><see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。 既定値は、<see langword="Passthrough" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Data.IDataAdapter.TableMappings%2A>は、返されるレコードとの<xref:System.Data.DataSet>間のマスターマッピングを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定された値が <see cref="T:System.Data.MissingMappingAction" /> 値の 1 つではありません。</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存在しないソース テーブル、ソース列、それらのリレーションシップをデータセット スキーマに追加するか、無視するか、またはエラーを発生させるかを表示または指定します。</summary>
        <value><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。 既定値は、<see langword="Add" /> です。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">設定された値が <see cref="T:System.Data.MissingSchemaAction" /> 値の 1 つではありません。</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソース テーブルをデータセット テーブルに割り当てる方法を示します。</summary>
        <value>返されたレコードと <see cref="T:System.Data.DataSet" /> との間のマスター マップを提供するコレクション。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 では、"table" という名前のソーステーブルのマッピングのみが使用されます。 <xref:System.Data.IDataAdapter> すべての SELECT、INSERT、DELETE、および UPDATE ステートメントでは、一貫性のある列名を使用してデータを返す必要があります。 レコードで返される列名は一意である必要があります。そうでない場合、名前が重複している列は前のデータを上書きします。 で<xref:System.Data.IDataAdapter.Update%2A>は、"table" という名前のソーステーブルにマップされたテーブルだけが、その変更を調整します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</param>
        <summary>指定された <see cref="T:System.Data.DataSet" /> 内の Table という名前の <see cref="T:System.Data.DataTable" /> に含まれる挿入行、更新行、または削除行に対して、INSERT、UPDATE、または DELETE ステートメントを個別に呼び出します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが<xref:System.Data.IDataAdapter.Update%2A>メソッドを呼び出すと、 <xref:System.Data.IDataAdapter>は<xref:System.Data.DataRow.RowState%2A>プロパティを調べ、必要な INSERT、UPDATE、または DELETE ステートメントを各行に対して <xref:System.Data.DataSet> 繰り返し実行します。. たとえば<xref:System.Data.IDataAdapter.Update%2A> 、では<xref:System.Data.DataTable>、の行が順序付けられているので、delete ステートメントを実行した後に INSERT ステートメントを実行してから、別の delete ステートメントを実行できます。  
  
 これらのステートメントはバッチ処理として実行されないことに注意してください。各行は個別に更新されます。 ステートメントの種類 (更新<xref:System.Data.DataSet.GetChanges%2A>前の挿入など) のシーケンスを制御する必要がある場合は、アプリケーションでメソッドを呼び出すことができます。 詳細については、「 [dataadapter を使用したデータソースの更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)」を参照してください。  
  
 INSERT、UPDATE、または DELETE ステートメントが指定されてい<xref:System.Data.Common.DataAdapter.Update%2A>ない場合、メソッドは例外を生成します。 ただし、.NET Framework データプロバイダーの<xref:System.Data.SqlClient.SqlCommandBuilder> `SelectCommand`プロパティ<xref:System.Data.OleDb.OleDbCommandBuilder>を設定した場合は、単一テーブルの更新の SQL ステートメントを自動的に生成するオブジェクトまたはオブジェクトを作成できます。 その後、設定していない追加の SQL ステートメントは、CommandBuilder によって生成されます。 この生成ロジックでは、にキー列情報が存在<xref:System.Data.DataSet>している必要があります。 詳細については、「 [CommandBuilders を使用したコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)」を参照してください。  
  
 メソッド<xref:System.Data.Common.DataAdapter.Update%2A>は、更新を実行する前に、最初のマッピングに記載されているテーブルから行を取得します。 次<xref:System.Data.Common.DataAdapter.Update%2A>に、は、 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティの値を使用して行を更新します。 返されたその他の行は無視されます。  
  
 データがに読み込ま<xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>れると、イベントが発生します。これにより、 <xref:System.Data.DataSet>ユーザーは、一致した行とコマンドによって返された出力パラメーターを調べることができます。 行が正常に更新されると、その行に対する変更が受け入れられます。  
  
 を使用<xref:System.Data.IDataAdapter.Update%2A>する場合、実行の順序は次のようになります。  
  
1.  の<xref:System.Data.DataRow>値は、パラメーター値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドが実行されます。  
  
4.  コマンドがに`FirstReturnedRecord`設定されている場合、最初に返された結果<xref:System.Data.DataRow>がに格納されます。  
  
5.  出力パラメーターがある場合は、 <xref:System.Data.DataRow>に格納されます。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼び出されます。  
  
 に関連付けられ<xref:System.Data.IDataAdapter>た各コマンドには、通常、パラメーターコレクションが関連付けられています。 パラメーターは、.NET Framework データプロバイダーの`SourceColumn` `Parameter`クラスのプロパティ`SourceVersion`とプロパティを使用して、現在の行にマップされます。 `SourceColumn`現在の行<xref:System.Data.DataTable>のパラメーター値<xref:System.Data.IDataAdapter>を取得するためにが参照する列を参照します。  
  
 `SourceColumn`テーブルマッピングが適用される前に、マップされていない列名を参照します。 が`SourceColumn`存在しない列を参照している場合、実行されるアクション<xref:System.Data.MissingMappingAction>は次のいずれかの値に依存します。  
  
|列挙値|実行されたアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|マッピングが存在しない場合は、 <xref:System.Data.DataSet>でソース列の名前とテーブル名を使用します。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>が生成されます。 マッピングが明示的に設定されている場合、入力パラメーターのマッピングが不足していると、通常はエラーが発生します。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>が生成されます。|  
  
 プロパティは、 `DataSet`出力パラメーターまたは入出力パラメーターの値をにマップするためにも使用されます。 `SourceColumn` 存在しない列を参照している場合は、例外が生成されます。  
  
 .NET Framework `SourceVersion`データプロバイダーの`Parameter`クラスのプロパティは`Original`、列の値の、 `Current`、または`Proposed`バージョンを使用するかどうかを決定します。 この機能は、オプティミスティック同時実行制御違反を確認するために、UPDATE ステートメントの WHERE 句に元の値を含めるために頻繁に使用されます。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新の実行が中止されます。 エラーが発生したときに例外を生成せずに更新操作を<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>続行する`true`には<xref:System.Data.Common.DbDataAdapter.Update%2A>、を呼び出す前にプロパティをに設定します。 また、DataAdapter の`RowUpdated`イベント内で、行ごとにエラーに対応することもできます。 `RowUpdated`イベント内で例外を生成せずに更新操作を続行するに<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>は<xref:System.Data.Common.RowUpdatedEventArgs> 、のプロパティ<xref:System.Data.UpdateStatus.Continue>をに設定します。  
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.OleDb.OleDbDataAdapter>をデータ<xref:System.Data.Common.DataAdapter.Update%2A>ソースに使用します。 この例では、 <xref:System.Data.OleDb.OleDbDataAdapter> <xref:System.Data.DataSet>とが作成されていることを前提としています。  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
