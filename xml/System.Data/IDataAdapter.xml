<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1fcd0-101">オブジェクトが DataAdapter を実装できるようにします。<see cref="T:System.Data.DataSet" /> の格納と更新およびデータ ソースの更新に使用するメソッドとマップ アクション関連プロパティのセットを表します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-101">Allows an object to implement a DataAdapter, and represents a set of methods and mapping action-related properties that are used to fill and update a <see cref="T:System.Data.DataSet" /> and update a data source.</span></span>  
  
 <span data-ttu-id="1fcd0-102"><see cref="T:System.Data.IDbDataAdapter" /> インスタンスは、テキスト コマンド (例: Transact-SQL) を入力するリレーショナル データベースのデータ ソース (またはそれに類似したもの) で、<see cref="T:System.Data.IDataAdapter" /> インスタンスは任意の型のデータ ソースに使用できます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-102"><see cref="T:System.Data.IDbDataAdapter" /> instances are for data sources that are (or resemble) relational databases with textual commands (like Transact-SQL), while <see cref="T:System.Data.IDataAdapter" /> instances could can use any type of data source.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fcd0-103"><xref:System.Data.IDataAdapter>インターフェイスが継承するクラスをデータ ソース間のブリッジを表す DataAdapter クラスを実装することにより、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-103">The <xref:System.Data.IDataAdapter> interface allows an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1fcd0-104">DataAdapter クラスの詳細については、次を参照してください。 [DataAdapter からの DataSet の読み込み](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-104">For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).</span></span>  
  
 <span data-ttu-id="1fcd0-105">アプリケーションがのインスタンスを作成していない、<xref:System.Data.IDataAdapter>インターフェイスを直接が継承するクラスのインスタンスを実装して<xref:System.Data.IDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-105">An application does not create an instance of the <xref:System.Data.IDataAdapter> interface directly, but implements an instance of a class that inherits <xref:System.Data.IDataAdapter>.</span></span>  
  
 <span data-ttu-id="1fcd0-106">継承するクラス<xref:System.Data.IDataAdapter>継承されたメンバーを実装し、通常プロバイダー固有の機能を追加するための追加メンバーを定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-106">Classes that inherit <xref:System.Data.IDataAdapter> must implement the inherited members, and they typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="1fcd0-107">たとえば、<xref:System.Data.IDataAdapter>インターフェイスを定義、<xref:System.Data.IDataAdapter.Fill%2A>を受け取るメソッド、<xref:System.Data.DataSet>をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-107">For example, the <xref:System.Data.IDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataSet> as a parameter.</span></span> <span data-ttu-id="1fcd0-108">さらに、<xref:System.Data.OleDb.OleDbDataAdapter>クラスは継承、<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッド定義のオーバー ロードを 2 つ追加して、<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>を ADO レコード セット オブジェクトをパラメーターとして受け取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-108">In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fcd0-109">次の例は、派生クラスを使用して<xref:System.Data.SqlClient.SqlCommand>、 <xref:System.Data.SqlClient.SqlDataAdapter>、および<xref:System.Data.SqlClient.SqlConnection>、データベースからレコードを選択します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-109">The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database.</span></span> <span data-ttu-id="1fcd0-110">塗りつぶされた<xref:System.Data.DataSet>次が返されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-110">The filled <xref:System.Data.DataSet> is then returned.</span></span> <span data-ttu-id="1fcd0-111">これを行うには、メソッドが渡される初期化された<xref:System.Data.DataSet>、接続文字列、およびクエリ文字列では、TRANSACT-SQL SELECT ステートメント。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-111">To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="1fcd0-112">.NET Framework データ プロバイダー間の整合性を高める形式で継承するクラスの名前を<paramref name="Prv" />DataAdapter 場所<paramref name="Prv" />は、特定の .NET Framework データ プロバイダー名前空間のすべてのクラスに指定された uniform プレフィックス。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-112">To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> DataAdapter where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace.</span></span> <span data-ttu-id="1fcd0-113">たとえば、<paramref name="Sql" />のプレフィックス、<see cref="T:System.Data.SqlClient.SqlDataAdapter" />クラス内で、<see langword="System.Data.SqlClient" />名前空間。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-113">For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the <see langword="System.Data.SqlClient" /> namespace.</span></span>  
  
 <span data-ttu-id="1fcd0-114">継承する場合、<see cref="T:System.Data.IDataAdapter" />インターフェイスでは、次のコンス トラクターを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-114">When you inherit from the <see cref="T:System.Data.IDataAdapter" /> interface, you should implement the following constructors:</span></span>  
  
 <span data-ttu-id="1fcd0-115"><list type="table"><listheader><term> 項目</span><span class="sxs-lookup"><span data-stu-id="1fcd0-115"><list type="table"><listheader><term> Item</span></span>  
  
 <span data-ttu-id="1fcd0-116"></term><description>説明</span><span class="sxs-lookup"><span data-stu-id="1fcd0-116"></term><description> Description</span></span>  
  
 <span data-ttu-id="1fcd0-117"></description></listheader><item><term> PrvDataAdapter()</span><span class="sxs-lookup"><span data-stu-id="1fcd0-117"></description></listheader><item><term> PrvDataAdapter()</span></span>  
  
 <span data-ttu-id="1fcd0-118"></term><description> PrvDataAdapter クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-118"></term><description> Initializes a new instance of the PrvDataAdapter class.</span></span>  
  
 <span data-ttu-id="1fcd0-119"></description></item><item><term> PrvDataAdapter (PrvCommand selectCommand)</span><span class="sxs-lookup"><span data-stu-id="1fcd0-119"></description></item><item><term> PrvDataAdapter(PrvCommand selectCommand)</span></span>  
  
 <span data-ttu-id="1fcd0-120"></term><description> 指定した SQL SELECT ステートメントを使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-120"></term><description> Initializes a new instance of the PrvDataAdapter class by using the specified SQL SELECT statement.</span></span>  
  
 <span data-ttu-id="1fcd0-121"></description></item><item><term> PrvDataAdapter (文字列 selectCommandText、文字列 selectConnectionString)</span><span class="sxs-lookup"><span data-stu-id="1fcd0-121"></description></item><item><term> PrvDataAdapter(string selectCommandText, string selectConnectionString)</span></span>  
  
 <span data-ttu-id="1fcd0-122"></term><description> SQL SELECT ステートメントと接続文字列を使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-122"></term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a connection string.</span></span>  
  
 <span data-ttu-id="1fcd0-123"></description></item><item><term> PrvDataAdapter (文字列 selectCommandText、PrvConnection selectConnection)</span><span class="sxs-lookup"><span data-stu-id="1fcd0-123"></description></item><item><term> PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)</span></span>  
  
 <span data-ttu-id="1fcd0-124"></term><description> SQL SELECT ステートメントおよび PrvConnection オブジェクトを使用して、PrvDataAdapter クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-124"></term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a PrvConnection object.</span></span>  
  
 </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1fcd0-125">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-125">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span></span></param>
        <summary><span data-ttu-id="1fcd0-126"><see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。また、Table という名前の <see cref="T:System.Data.DataTable" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-126">Adds or updates rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> name, and creates a <see cref="T:System.Data.DataTable" /> named "Table".</span></span></summary>
        <returns><span data-ttu-id="1fcd0-127"><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-127">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="1fcd0-128">これには、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-128">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fcd0-129"><xref:System.Data.IDataAdapter.Fill%2A> 関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-129"><xref:System.Data.IDataAdapter.Fill%2A> retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="1fcd0-130">SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-130">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="1fcd0-131">前に、接続が閉じられた場合<xref:System.Data.IDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-131">If the connection is closed before <xref:System.Data.IDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="1fcd0-132">接続が開いている場合の前に<xref:System.Data.IDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-132">If the connection is open before <xref:System.Data.IDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="1fcd0-133"><xref:System.Data.IDataAdapter.Fill%2A>操作は、先に行を追加する<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは、まだ存在しません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-133">The <xref:System.Data.IDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="1fcd0-134">作成するときに<xref:System.Data.DataTable>、オブジェクト、<xref:System.Data.IDataAdapter.Fill%2A>操作は、通常のみの列名のメタデータを作成します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-134">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.IDataAdapter.Fill%2A> operation usually creates only column name metadata.</span></span> <span data-ttu-id="1fcd0-135">ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-135">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="1fcd0-136">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-136">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="1fcd0-137">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-137">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="1fcd0-138">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-138">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
 <span data-ttu-id="1fcd0-139">場合、<xref:System.Data.IDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>パターン"columnname1"、"columnname2"、"columnname3"などを使用して、連続した列の名前が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-139">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="1fcd0-140">配置されますが、受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-140">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="1fcd0-141">複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>、各結果セットが別のテーブルに格納します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-141">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="1fcd0-142">追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に整数値を追加してという名前です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-142">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="1fcd0-143">アプリケーションは、列やテーブルの名前を使用して、これらの名前付けパターンとの競合が発生しないことを確認する場合、注意を使用してください。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-143">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="1fcd0-144">ときに設定するために使用する SELECT ステートメント、<xref:System.Data.DataSet>複数の結果を返すバッチの SQL ステートメントなど、エラーが含まれる結果のいずれかの場合連続するすべての結果はスキップされには追加されません、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-144">When the SELECT statement that is used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, if one of the results contains an error, all successive results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="1fcd0-145">使用することができます、<xref:System.Data.IDataAdapter.Fill%2A>で複数回、同じメソッド<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-145">You can use the <xref:System.Data.IDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="1fcd0-146">主キーが存在する場合は、受信した行が既に存在する行と一致すると共にマージされます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-146">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="1fcd0-147">主キーがない場合、受信行が、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-147">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1fcd0-148">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.IDataAdapter.Fill%2A>と<xref:System.Data.IDataAdapter.FillSchema%2A>の .NET Framework データ プロバイダーが最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-148">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.IDataAdapter.Fill%2A> and <xref:System.Data.IDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1fcd0-149">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-149">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</span></span></param>
        <param name="schemaType"><span data-ttu-id="1fcd0-150"><see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-150">One of the <see cref="T:System.Data.SchemaType" /> values.</span></span></param>
        <summary><span data-ttu-id="1fcd0-151">"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-151">Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</span></span></summary>
        <returns><span data-ttu-id="1fcd0-152">データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-152">An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fcd0-153"><xref:System.Data.IDataAdapter.FillSchema%2A>メソッドを使用してデータ ソースからスキーマを取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-153">The <xref:System.Data.IDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="1fcd0-154">接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが、します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-154">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="1fcd0-155">前に、接続が閉じられた場合<xref:System.Data.IDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-155">If the connection is closed before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="1fcd0-156">接続が開いている場合の前に<xref:System.Data.IDataAdapter.FillSchema%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-156">If the connection is open before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="1fcd0-157">A<xref:System.Data.IDataAdapter.FillSchema%2A>操作は追加、<xref:System.Data.DataTable>変換先に<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-157">A <xref:System.Data.IDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1fcd0-158">これは、後、列を追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、次の構成と<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-158">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable> and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="1fcd0-159"><xref:System.Data.DataColumn.AutoIncrement%2A>。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-159"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="1fcd0-160">設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-160">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="1fcd0-161"><xref:System.Data.IDataAdapter.FillSchema%2A> 構成も行います、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に応じて、次の規則のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-161"><xref:System.Data.IDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="1fcd0-162">1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-162">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="1fcd0-163">主キー列は返されませんが、一意の列は場合、は、すべての一意の列が null 非許容の場合は、主キーとしての一意の列が使用されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-163">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if all the unique columns are non-nullable.</span></span> <span data-ttu-id="1fcd0-164">任意の列は null を許容すると場合、<xref:System.Data.UniqueConstraint>に追加、 <xref:System.Data.ConstraintCollection>、ですが、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-164">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="1fcd0-165">主キー列としての主キー列が使用される主キー列と一意の列の両方が返される場合は、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-165">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="1fcd0-166">主キーと一意の制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>以前の規則が、その他の制約に従って、型は追加されません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-166">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the previous rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="1fcd0-167">一意のクラスター化または SQL Server テーブルに複数の列にインデックスを定義し、主キー制約は、個別の列のセットで、クラスター化インデックス内の列の名前が返されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-167">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="1fcd0-168">主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-168">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="1fcd0-169">クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-169">For more information about how to specify query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="1fcd0-170">場合、<xref:System.Data.IDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>パターン"columnname1"、"columnname2"、"columnname3"などを使用して、連続した列の名前が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-170">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="1fcd0-171">配置されますが、受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-171">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="1fcd0-172">複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>、各結果セットが別のテーブルに格納します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-172">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="1fcd0-173">追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に整数値を追加してという名前です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-173">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="1fcd0-174">アプリケーションは、列やテーブルの名前を使用して、これらの名前付けパターンとの競合が発生しないことを確認する場合、注意を使用してください。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-174">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="1fcd0-175"><xref:System.Data.IDataAdapter.FillSchema%2A> 行を返しません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-175"><xref:System.Data.IDataAdapter.FillSchema%2A> returns no rows.</span></span> <span data-ttu-id="1fcd0-176">使用して、<xref:System.Data.IDataAdapter.Fill%2A>行を追加する方法、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-176">Use the <xref:System.Data.IDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1fcd0-177">SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-177">Gets the parameters set by the user when executing an SQL SELECT statement.</span></span></summary>
        <returns><span data-ttu-id="1fcd0-178">ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-178">An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits";   
              SqlParameter year = new SqlParameter("@Year", 2012);   
              SqlParameter credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");   
              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   
              command.Parameters.Add(year);   
              command.Parameters.Add(credits);   
              IDbDataAdapter mySchool = new SqlDataAdapter(command);   
              IDataParameter[] parameters = mySchool.GetFillParameters();  
              Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");   
              foreach (IDataParameter parameter in parameters) {   
                 Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   
              }  
           }  
        }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1fcd0-179">割り当てられていないソース テーブルまたはソース列をソース名で渡して、フィルター処理するか、エラーを発生させるかどうかを指示または指定します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-179">Indicates or specifies whether unmapped source tables or columns are passed with their source names in order to be filtered or to raise an error.</span></span></summary>
        <value><span data-ttu-id="1fcd0-180"><see cref="T:System.Data.MissingMappingAction" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-180">One of the <see cref="T:System.Data.MissingMappingAction" /> values.</span></span> <span data-ttu-id="1fcd0-181">既定値は、<see langword="Passthrough" /> です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-181">The default is <see langword="Passthrough" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fcd0-182"><xref:System.Data.IDataAdapter.TableMappings%2A>プロパティは返されたレコードの間のマスター マッピングを提供し、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-182">The <xref:System.Data.IDataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1fcd0-183">設定された値が <see cref="T:System.Data.MissingMappingAction" /> 値の 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-183">The value set is not one of the <see cref="T:System.Data.MissingMappingAction" /> values.</span></span></exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1fcd0-184">存在しないソース テーブル、ソース列、それらのリレーションシップをデータセット スキーマに追加するか、無視するか、またはエラーを発生させるかを表示または指定します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-184">Indicates or specifies whether missing source tables, columns, and their relationships are added to the dataset schema, ignored, or cause an error to be raised.</span></span></summary>
        <value><span data-ttu-id="1fcd0-185"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-185">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span> <span data-ttu-id="1fcd0-186">既定値は、<see langword="Add" /> です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-186">The default is <see langword="Add" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1fcd0-187">設定された値が <see cref="T:System.Data.MissingSchemaAction" /> 値の 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-187">The value set is not one of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1fcd0-188">ソース テーブルをデータセット テーブルに割り当てる方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-188">Indicates how a source table is mapped to a dataset table.</span></span></summary>
        <value><span data-ttu-id="1fcd0-189">返されたレコードと <see cref="T:System.Data.DataSet" /> との間のマスター マップを提供するコレクション。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-189">A collection that provides the master mapping between the returned records and the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="1fcd0-190">既定値は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-190">The default value is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fcd0-191"><xref:System.Data.IDataAdapter> "Table"という名前のソース テーブルのマッピングのみが使用されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-191">The <xref:System.Data.IDataAdapter> uses only the mappings for the source table named "Table".</span></span> <span data-ttu-id="1fcd0-192">すべてを選択して、データの値を返すステートメントの INSERT、DELETE、および更新する必要がありますは一貫性のある列の名前付けを使用しています。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-192">All SELECT, INSERT, DELETE, and UPDATE statements returning data must do so using consistent column naming.</span></span> <span data-ttu-id="1fcd0-193">レコードで返される列名は一意である必要があります、重複する名前の列が以前のデータを上書きするそれ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-193">The column names returned in the records must be unique, otherwise columns with duplicate names overwrite previous data.</span></span> <span data-ttu-id="1fcd0-194"><xref:System.Data.IDataAdapter.Update%2A>、"Table"という名前のソース テーブルにマップされているテーブルの変更を調整する必要がのみです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-194">On <xref:System.Data.IDataAdapter.Update%2A>, only the table mapped to the source table named "Table" will have its changes reconciled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="1fcd0-195">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-195">The <see cref="T:System.Data.DataSet" /> used to update the data source.</span></span></param>
        <summary><span data-ttu-id="1fcd0-196">指定された <see cref="T:System.Data.DataSet" /> 内の Table という名前の <see cref="T:System.Data.DataTable" /> に含まれる挿入行、更新行、または削除行に対して、INSERT、UPDATE、または DELETE ステートメントを個別に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-196">Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" /> from a <see cref="T:System.Data.DataTable" /> named "Table".</span></span></summary>
        <returns><span data-ttu-id="1fcd0-197"><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-197">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fcd0-198">アプリケーションを呼び出すと、<xref:System.Data.IDataAdapter.Update%2A>メソッド、<xref:System.Data.IDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティで構成されているインデックスの順序に基づいて、各行の繰り返し、必要な INSERT、UPDATE、または DELETE ステートメントを実行し、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-198">When an application calls the <xref:System.Data.IDataAdapter.Update%2A> method, the <xref:System.Data.IDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1fcd0-199">たとえば、<xref:System.Data.IDataAdapter.Update%2A>内の行の順序付けのため、DELETE ステートメントの後に、INSERT ステートメント、およびし、もう 1 つの DELETE ステートメントの実行可能性があります、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-199">For example, <xref:System.Data.IDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, because of the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="1fcd0-200">これらのステートメントは、バッチ処理としては実行されないことに注意してください。各行が個別に更新されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-200">Be aware that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="1fcd0-201">アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>メソッドの場合は、一連のステートメントの種類 (たとえば、更新する前に挿入) を制御する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-201">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method if you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="1fcd0-202">詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-202">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="1fcd0-203">かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DataAdapter.Update%2A>メソッドが例外を生成します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-203">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="1fcd0-204">ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの 1 つのテーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-204">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="1fcd0-205">次に、設定しない追加の SQL ステートメントは、CommandBuilder によって生成されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-205">Then, any additional SQL statements that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="1fcd0-206">この生成ロジックで内に存在するキー列について、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-206">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="1fcd0-207">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-207">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="1fcd0-208"><xref:System.Data.Common.DataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-208">The <xref:System.Data.Common.DataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="1fcd0-209"><xref:System.Data.Common.DataAdapter.Update%2A>の値を使用して行を更新、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-209">The <xref:System.Data.Common.DataAdapter.Update%2A> then updates the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="1fcd0-210">返されるその他の行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-210">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="1fcd0-211">すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーが、調整を検査できるように<xref:System.Data.DataSet>行とその出力、コマンドによって返されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-211">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="1fcd0-212">行が正常に更新される、その行に対する変更が受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-212">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="1fcd0-213">使用する場合<xref:System.Data.IDataAdapter.Update%2A>実行の順序は、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-213">When using <xref:System.Data.IDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="1fcd0-214">内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-214">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="1fcd0-215"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-215">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="1fcd0-216">コマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-216">The command executes.</span></span>  
  
4.  <span data-ttu-id="1fcd0-217">コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-217">If the command is set to `FirstReturnedRecord`, then the first returned result is put in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="1fcd0-218">出力パラメーターがある場合配置されます、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-218">If there are output parameters, they are put in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="1fcd0-219"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-219">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="1fcd0-220"><xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-220"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="1fcd0-221">各コマンドに関連付けられている、<xref:System.Data.IDataAdapter>関連付けられているパラメーターのコレクションを持ちます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-221">Each command associated with the <xref:System.Data.IDataAdapter> usually has a parameter collection associated with it.</span></span> <span data-ttu-id="1fcd0-222">パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-222">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="1fcd0-223">`SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.IDataAdapter>参照を現在の行のパラメーターの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-223">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.IDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="1fcd0-224">`SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を指します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-224">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="1fcd0-225">場合`SourceColumn`は存在しない列に実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-225">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="1fcd0-226">列挙値</span><span class="sxs-lookup"><span data-stu-id="1fcd0-226">Enumeration Value</span></span>|<span data-ttu-id="1fcd0-227">実行されるアクション</span><span class="sxs-lookup"><span data-stu-id="1fcd0-227">Action Taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="1fcd0-228">ソース列の名前とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-228">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="1fcd0-229">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-229">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="1fcd0-230">マッピングが明示的に設定されている入力パラメーターのマッピングが欠落は通常、エラーによって発生します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-230">When the mappings are explicitly set, a missing mapping for an input parameter is usually caused by an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="1fcd0-231">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-231">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="1fcd0-232">`SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターにバックアップ、`DataSet`です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-232">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="1fcd0-233">存在しない列を参照する場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-233">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="1fcd0-234">`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスかどうかを使用する、 `Original`、 `Current`、または`Proposed`列の値のバージョン。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-234">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the `Original`, `Current`, or `Proposed` version of the column value.</span></span> <span data-ttu-id="1fcd0-235">この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含める頻繁に使用します。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-235">This capability is frequently used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1fcd0-236">行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-236">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="1fcd0-237">エラーが発生したときに例外を生成せず、更新操作を続行するには設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-237">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="1fcd0-238">内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-238">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="1fcd0-239">内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-239">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fcd0-240">次の例は、派生クラスを使用して<xref:System.Data.OleDb.OleDbDataAdapter>を<xref:System.Data.Common.DataAdapter.Update%2A>データ ソース。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-240">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source.</span></span> <span data-ttu-id="1fcd0-241">この例では、作成した、<xref:System.Data.OleDb.OleDbDataAdapter>と<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-241">This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="1fcd0-242">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</span><span class="sxs-lookup"><span data-stu-id="1fcd0-242">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>