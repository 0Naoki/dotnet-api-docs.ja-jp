<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3927e5f538dc55d18189c8b487fc273c69d4094d" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39981998" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <TypeSignature Language="F#" Value="type IsolationLevel = " />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="77294-101">接続のトランザクション ロック動作を指定します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="77294-101">Specifies the transaction locking behavior for the connection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77294-102"><xref:System.Data.IsolationLevel>値は、トランザクションを実行するときに、.NET Framework データ プロバイダーによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="77294-102">The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction.</span></span>  
  
 <span data-ttu-id="77294-103"><xref:System.Data.IsolationLevel>は明示的に有効にするまで変更しますが、いつでも変更できます。</span><span class="sxs-lookup"><span data-stu-id="77294-103">The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time.</span></span> <span data-ttu-id="77294-104">新しい値は、解析時ではない、実行時に使用されます。</span><span class="sxs-lookup"><span data-stu-id="77294-104">The new value is used at execution time, not parse time.</span></span> <span data-ttu-id="77294-105">トランザクション中に変更された場合、サーバーの予期される動作は、残りのすべてのステートメントに、新しいレベルのロックを適用します。</span><span class="sxs-lookup"><span data-stu-id="77294-105">If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77294-106">このアプリケーションを使用する方法を示して<xref:System.Data.IsolationLevel>で<xref:System.Data.Common.DbTransaction>します。</span><span class="sxs-lookup"><span data-stu-id="77294-106">This application demonstrates how to use <xref:System.Data.IsolationLevel> in <xref:System.Data.Common.DbTransaction>.</span></span> <span data-ttu-id="77294-107">サンプルは、別の分離レベルでは、次の動作のうちは許可を示しています。</span><span class="sxs-lookup"><span data-stu-id="77294-107">The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:</span></span>  
  
-   <span data-ttu-id="77294-108">ダーティ リードです。</span><span class="sxs-lookup"><span data-stu-id="77294-108">Dirty reads.</span></span>  
  
-   <span data-ttu-id="77294-109">非繰り返しを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="77294-109">Non-repeatable reads.</span></span>  
  
-   <span data-ttu-id="77294-110">ファントムです。</span><span class="sxs-lookup"><span data-stu-id="77294-110">Phantoms.</span></span>  
  
 <span data-ttu-id="77294-111">このアプリケーションは、次の分離レベルで実行されます。</span><span class="sxs-lookup"><span data-stu-id="77294-111">This application will execute in the following isolation levels:</span></span>  
  
-   <span data-ttu-id="77294-112">ReadUncommitted</span><span class="sxs-lookup"><span data-stu-id="77294-112">ReadUncommitted</span></span>  
  
-   <span data-ttu-id="77294-113">ReadCommitted</span><span class="sxs-lookup"><span data-stu-id="77294-113">ReadCommitted</span></span>  
  
-   <span data-ttu-id="77294-114">RepeatableRead</span><span class="sxs-lookup"><span data-stu-id="77294-114">RepeatableRead</span></span>  
  
-   <span data-ttu-id="77294-115">シリアル化可能です</span><span class="sxs-lookup"><span data-stu-id="77294-115">Serializable</span></span>  
  
-   <span data-ttu-id="77294-116">スナップショット</span><span class="sxs-lookup"><span data-stu-id="77294-116">Snapshot</span></span>  
  
 <span data-ttu-id="77294-117">PhantomReadThreads クラスは、特定のトランザクションが、ファントム読み取りの動作を示します。</span><span class="sxs-lookup"><span data-stu-id="77294-117">The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior.</span></span> <span data-ttu-id="77294-118">トランザクションは、動作を許可している場合、スレッドは、次の順序で動作します。</span><span class="sxs-lookup"><span data-stu-id="77294-118">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="77294-119">最初のスレッドで、products(All) を選択します。</span><span class="sxs-lookup"><span data-stu-id="77294-119">In first thread, select the products(All).</span></span>  
  
-   <span data-ttu-id="77294-120">2 番目のスレッドでは、新しい製品を挿入します。</span><span class="sxs-lookup"><span data-stu-id="77294-120">In the second thread, insert a new product.</span></span>  
  
-   <span data-ttu-id="77294-121">2 番目のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-121">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="77294-122">製品をもう一度選択します。</span><span class="sxs-lookup"><span data-stu-id="77294-122">Select the products again.</span></span>  
  
-   <span data-ttu-id="77294-123">最初のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-123">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="77294-124">トランザクションは、動作を許可している場合、2 つの Select 操作には異なる結果が得られます。</span><span class="sxs-lookup"><span data-stu-id="77294-124">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="77294-125">NonrepeatableReadThreads クラスは、特定のトランザクションが、反復不能読み取りの動作を示します。</span><span class="sxs-lookup"><span data-stu-id="77294-125">The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior.</span></span> <span data-ttu-id="77294-126">トランザクションは、動作を許可している場合、スレッドは、次の順序で動作します。</span><span class="sxs-lookup"><span data-stu-id="77294-126">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="77294-127">最初のスレッドで、product(ProductId=1) を選択します。</span><span class="sxs-lookup"><span data-stu-id="77294-127">In first thread, select the product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="77294-128">2 番目のスレッドでは、数量 value(ProductId=1) を更新します。</span><span class="sxs-lookup"><span data-stu-id="77294-128">In the second thread, update the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="77294-129">2 番目のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-129">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="77294-130">製品をもう一度選択します。</span><span class="sxs-lookup"><span data-stu-id="77294-130">Select the product again.</span></span>  
  
-   <span data-ttu-id="77294-131">最初のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-131">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="77294-132">トランザクションは、動作を許可している場合、2 つの Select 操作には異なる結果が得られます。</span><span class="sxs-lookup"><span data-stu-id="77294-132">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="77294-133">ExchangeValuesThreads クラスは、Serializable、およびスナップショット トランザクションの間の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="77294-133">The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction.</span></span> <span data-ttu-id="77294-134">シリアル化可能なトランザクションでは、スレッドは、次の順序で動作します。</span><span class="sxs-lookup"><span data-stu-id="77294-134">For the Serializable transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="77294-135">最初のスレッドでは、変数に product(ProductId=2) およびストアの価格を取得します。</span><span class="sxs-lookup"><span data-stu-id="77294-135">In first thread, get the Price of product(ProductId=2) and store in the variable.</span></span>  
  
-   <span data-ttu-id="77294-136">最初のスレッドでは、product(ProductId=2) の価格 product(ProductId=1) の価格を更新します。</span><span class="sxs-lookup"><span data-stu-id="77294-136">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="77294-137">最初のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-137">Commit the transaction in first thread.</span></span>  
  
-   <span data-ttu-id="77294-138">2 番目のスレッドでは、変数に product(ProductId=1) およびストアの価格を取得します。</span><span class="sxs-lookup"><span data-stu-id="77294-138">In second thread, get the Price of product(ProductId=1) and store in the variable.</span></span>  
  
-   <span data-ttu-id="77294-139">2 番目のスレッドでは、product(ProductId=1) の価格 product(ProductId=2) の価格を更新します。</span><span class="sxs-lookup"><span data-stu-id="77294-139">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="77294-140">2 番目のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-140">Commit the transaction in second thread.</span></span>  
  
 <span data-ttu-id="77294-141">価格の値のようになりました (ProductId = 1、ProductId = 2) と、元の価格 Product(ProductId=2) と同じです。</span><span class="sxs-lookup"><span data-stu-id="77294-141">Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).</span></span>  
  
 <span data-ttu-id="77294-142">スナップショット トランザクションでは、スレッドは、次の順序で動作します。</span><span class="sxs-lookup"><span data-stu-id="77294-142">For the Snapshot transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="77294-143">最初のスレッドで変数内の product(ProductId=2) およびストアの価格を取得します。</span><span class="sxs-lookup"><span data-stu-id="77294-143">In first thread, get the Price of product(ProductId=2) and store in the variable;</span></span>  
  
-   <span data-ttu-id="77294-144">最初のスレッドでは、product(ProductId=2) の価格 product(ProductId=1) の価格を更新します。</span><span class="sxs-lookup"><span data-stu-id="77294-144">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="77294-145">2 番目のスレッドでは、スナップショットから product(ProductId=1) の価格を取得し、変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="77294-145">In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.</span></span>  
  
-   <span data-ttu-id="77294-146">2 番目のスレッドでは、product(ProductId=1) の価格 product(ProductId=2) の価格を更新します。</span><span class="sxs-lookup"><span data-stu-id="77294-146">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="77294-147">2 番目のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-147">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="77294-148">最初のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-148">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="77294-149">製品の価格を交換するようになりました (ProductId = 1、ProductId = 2)。</span><span class="sxs-lookup"><span data-stu-id="77294-149">Now exchange the Price of products(ProductId=1 and ProductId=2).</span></span>  
  
 <span data-ttu-id="77294-150">DirtyReadThreads クラスは、特定のトランザクションが、ダーティ リードの動作を示します。</span><span class="sxs-lookup"><span data-stu-id="77294-150">The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior.</span></span> <span data-ttu-id="77294-151">トランザクションは、動作を許可している場合、スレッドは、次の順序で動作します。</span><span class="sxs-lookup"><span data-stu-id="77294-151">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="77294-152">最初のスレッドでは、トランザクションを開始し、数量 value(ProductId=1) を追加します。</span><span class="sxs-lookup"><span data-stu-id="77294-152">In first thread, begin a transaction and add the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="77294-153">2 番目のスレッドでは、数量の値を読み取るし、値をもう一度追加します。</span><span class="sxs-lookup"><span data-stu-id="77294-153">In the second thread, read the Quantity value and add the value again.</span></span>  
  
-   <span data-ttu-id="77294-154">2 番目のスレッドでのトランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="77294-154">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="77294-155">最初のスレッドで、トランザクションをロールバックします。</span><span class="sxs-lookup"><span data-stu-id="77294-155">Roll back the transaction in first thread.</span></span>  
  
 <span data-ttu-id="77294-156">トランザクションでは、動作、数量の値が 2 回追加されます。</span><span class="sxs-lookup"><span data-stu-id="77294-156">If the transaction allows the behavior, the Quantity value will be added twice.</span></span>  
  
 <span data-ttu-id="77294-157">このコード サンプルの c# および Visual Basic プロジェクトで確認できます[開発者コード サンプル](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4)します。</span><span class="sxs-lookup"><span data-stu-id="77294-157">C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span></span>  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberSignature Language="F#" Value="Chaos = 16" Usage="System.Data.IsolationLevel.Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="77294-158">これより分離性の高いトランザクションからの保留中の変更に対しては上書きできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-158">The pending changes from more highly isolated transactions cannot be overwritten.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberSignature Language="F#" Value="ReadCommitted = 4096" Usage="System.Data.IsolationLevel.ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="77294-159">データが読み込まれている間、ダーティ読み込みを防ぐために共有ロックが保持されますが、トランザクションが終了する前にデータを変更できます。このため、読み込みは繰り返されません。また実際には存在しないデータを生成できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-159">Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberSignature Language="F#" Value="ReadUncommitted = 256" Usage="System.Data.IsolationLevel.ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="77294-160">ダーティ読み込みができます。つまり、共有ロックが発行されておらず、排他ロックが有効ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-160">A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberSignature Language="F#" Value="RepeatableRead = 65536" Usage="System.Data.IsolationLevel.RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="77294-161">他のユーザーがデータを更新できないようにするために、クエリで使用するすべてのデータをロックします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-161">Locks are placed on all data that is used in a query, preventing other users from updating the data.</span>
          </span>
          <span data-ttu-id="77294-162">繰り返し不能読み込みはできませんが、実際には存在しない行を生成できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-162">Prevents non-repeatable reads but phantom rows are still possible.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberSignature Language="F#" Value="Serializable = 1048576" Usage="System.Data.IsolationLevel.Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="77294-163">
            <see cref="T:System.Data.DataSet" /> にレンジ ロックがかけられ、トランザクションが完了するまで、他のユーザーは行を更新したりデータセットに行を挿入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-163">A range lock is placed on the <see cref="T:System.Data.DataSet" />, preventing other users from updating or inserting rows into the dataset until the transaction is complete.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberSignature Language="F#" Value="Snapshot = 16777216" Usage="System.Data.IsolationLevel.Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="77294-164">あるアプリケーションで変更中のデータを他のアプリケーションから読み取ることができるように、そのデータのバージョンを保存して、ブロッキングを減らします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-164">Reduces blocking by storing a version of data that one application can read while another is modifying the same data.</span>
          </span>
          <span data-ttu-id="77294-165">この場合、クエリを再実行しても、あるトランザクションで加えられた変更を、他のトランザクションで表示できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-165">Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberSignature Language="F#" Value="Unspecified = -1" Usage="System.Data.IsolationLevel.Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="77294-166">指定した分離レベルとは異なる分離レベルが使用されていますが、レベルを確認できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77294-166">A different isolation level than the one specified is being used, but the level cannot be determined.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77294-167">使用する場合<xref:System.Data.Odbc.OdbcTransaction>を設定しない場合は、<xref:System.Data.IsolationLevel>設定することも<xref:System.Data.IsolationLevel>に`Unspecified`トランザクションが使用されているドライバーによって決定される分離レベルに従って実行します。</span><span class="sxs-lookup"><span data-stu-id="77294-167">When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.IsolationLevel> or you set <xref:System.Data.IsolationLevel> to `Unspecified`, the transaction executes according to the isolation level that is determined by the driver that is being used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>