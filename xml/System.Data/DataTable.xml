<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DataTable.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51ca059a55e7219b43068a0a701adfb187f239dc3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ca059a55e7219b43068a0a701adfb187f239dc3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Represents one table of in-memory data.</source>
          <target state="translated">メモリ内データの 1 つのテーブルを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is a central object in the ADO.NET library.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> ADO.NET ライブラリ内のサーバーの全体のオブジェクトです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Other objects that use the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> include the <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> and the <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>.</source>
          <target state="translated">その他のオブジェクトを使用する、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>含める、<ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>When accessing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects, note that they are conditionally case sensitive.</source>
          <target state="translated">アクセスするときに<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクト、条件付きで大文字小文字が区別されることに注意してください。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For example, if one <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</source>
          <target state="translated">たとえば、1 つ<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>"mydatatable"の名前は"Mydatatable"という名前別と、テーブルのいずれかの検索に使用される文字列は大文字と小文字を区別見なされます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</source>
          <target state="translated">ただし、"mydatatable"が存在する"Mydatatable"がない場合は、検索文字列が見なされると大文字小文字を区別しません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>A <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> can contain two <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects that have the same <ph id="ph3">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph> property value but different <ph id="ph4">&lt;xref:System.Data.DataTable.Namespace%2A&gt;</ph> property values.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> 2 つを含めることができます<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>が同じであるオブジェクト<ph id="ph3">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph>プロパティの値が異なる<ph id="ph4">&lt;xref:System.Data.DataTable.Namespace%2A&gt;</ph>プロパティの値。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For more information about working with <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects, see <bpt id="p1">[</bpt>Creating a DataTable<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)</ept>.</source>
          <target state="translated">操作の詳細については<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、オブジェクトを参照してください<bpt id="p1">[</bpt>DataTable の作成<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>If you are creating a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> programmatically, you must first define its schema by adding <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects to the <ph id="ph3">&lt;xref:System.Data.DataColumnCollection&gt;</ph> (accessed through the <ph id="ph4">&lt;xref:System.Data.DataTable.Columns%2A&gt;</ph> property).</source>
          <target state="translated">作成する場合は、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>プログラムでは、最初に定義してそのスキーマを追加して<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>オブジェクトを<ph id="ph3">&lt;xref:System.Data.DataColumnCollection&gt;</ph>(を使用してアクセス、<ph id="ph4">&lt;xref:System.Data.DataTable.Columns%2A&gt;</ph>プロパティ)。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For more information about adding <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> objects, see <bpt id="p1">[</bpt>Adding Columns to a DataTable<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)</ept>.</source>
          <target state="translated">追加の詳細については<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>、オブジェクトを参照してください<bpt id="p1">[</bpt>DataTable に列の追加<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To add rows to a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, you must first use the <ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method to return a new <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> object.</source>
          <target state="translated">行を追加する、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、最初に使用する必要があります、<ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>を返す新しいメソッドを<ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method returns a row with the schema of the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>, as it is defined by the table's <ph id="ph3">&lt;xref:System.Data.DataColumnCollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>メソッドのスキーマを持つ行を返します、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>テーブルの定義されているように、<ph id="ph3">&lt;xref:System.Data.DataColumnCollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The maximum number of rows that a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> can store is 16,777,216.</source>
          <target state="translated">最大数の行を<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>できるストアは 16,777, 216 です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For more information, see <bpt id="p1">[</bpt>Adding Data to a DataTable<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-data-to-a-datatable.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable にデータを追加する<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-data-to-a-datatable.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> also contains a collection of <ph id="ph2">&lt;xref:System.Data.Constraint&gt;</ph> objects that can be used to ensure the integrity of the data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>ものコレクションを含む<ph id="ph2">&lt;xref:System.Data.Constraint&gt;</ph>データの整合性を確保するために使用するオブジェクト。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For more information, see <bpt id="p1">[</bpt>DataTable Constraints<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable の制約<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>There are many <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> events that can be used to determine when changes are made to a table.</source>
          <target state="translated">多数ある<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>決定をテーブルに変更があったときに使用できるイベントです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>These include <ph id="ph1">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.DataTable.RowDeleting&gt;</ph>, and <ph id="ph4">&lt;xref:System.Data.DataTable.RowDeleted&gt;</ph>.</source>
          <target state="translated">これには、<ph id="ph1">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph>、<ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph>、<ph id="ph3">&lt;xref:System.Data.DataTable.RowDeleting&gt;</ph>、および <ph id="ph4">&lt;xref:System.Data.DataTable.RowDeleted&gt;</ph> が含まれます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For more information about the events that can be used with a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
          <target state="translated">使用できるイベントの詳細については、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を参照してください<bpt id="p1">[</bpt>DataTable イベントの処理<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>When an instance of <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is created, some of the read/write properties are set to initial values.</source>
          <target state="translated">インスタンス<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>作成されると、いくつか読み取り/書き込みのプロパティは初期値に設定されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For a list of these values, see the <ph id="ph1">&lt;xref:System.Data.DataTable.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor topic.</source>
          <target state="translated">これらの値の一覧は、次を参照してください。、<ph id="ph1">&lt;xref:System.Data.DataTable.%23ctor%2A?displayProperty=nameWithType&gt;</ph>コンス トラクターのトピックです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects inherit from <ph id="ph3">&lt;xref:System.ComponentModel.MarshalByValueComponent&gt;</ph>, and support the <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface for .NET Framework remoting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクトから継承<ph id="ph3">&lt;xref:System.ComponentModel.MarshalByValueComponent&gt;</ph>、およびサポート、 <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> .NET Framework リモート処理用のインターフェイスです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>These are the only ADO.NET objects that you can use for .NET Framework remoting.</source>
          <target state="translated">これらは、.NET Framework リモート処理のために使用できる唯一の ADO.NET オブジェクトです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The following example creates two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects and one <ph id="ph2">&lt;xref:System.Data.DataRelation&gt;</ph> object, and adds the new objects to a <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
          <target state="translated">次の例では、2 つ作成されます<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクトと 1 つ<ph id="ph2">&lt;xref:System.Data.DataRelation&gt;</ph>オブジェクト、および新しいオブジェクトを追加、<ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The tables are then displayed in a <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control.</source>
          <target state="translated">テーブルが表示されます、<ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>This sample demonstrates how to create a DataTable manually with specific schema definitions:</source>
          <target state="translated">このサンプルでは、特定のスキーマ定義を含む DataTable を手動で作成する方法を示します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Create multiple DataTables and define the initial columns.</source>
          <target state="translated">複数のデータ テーブルを作成し、最初の列を定義します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Create the table constraints.</source>
          <target state="translated">テーブルの制約を作成します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Insert the values and display the tables.</source>
          <target state="translated">値を挿入し、テーブルを表示します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Create the expression columns and display the tables.</source>
          <target state="translated">式列を作成し、テーブルを表示します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>C# and Visual Basic projects with this code sample can be found on <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914)</ept>.</source>
          <target state="translated">このサンプル コードで c# および Visual Basic のプロジェクトにある <bpt id="p1">[</bpt>開発者コード サンプル<ept id="p1">](http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914)</ept>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>This type is safe for multithreaded read operations.</source>
          <target state="translated">この型は、マルチ スレッドの読み取り操作に対して安全です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>You must synchronize any write operations.</source>
          <target state="translated">すべての書き込み操作を同期する必要があります。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> class with no arguments.</source>
          <target state="translated">引数を指定せずに、<ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>The constructor sets initial values for all properties of the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object.</source>
          <target state="translated">このコンス トラクターのすべてのプロパティの初期値の設定、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>The following table shows the properties and their default values.</source>
          <target state="translated">次の表は、プロパティとその既定値を示します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>When an instance of <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is created, the following read/write properties are set to initial values.</source>
          <target state="translated">インスタンス<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>作成されると、次読み取り/書き込みプロパティの初期値に設定されます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>Default value</source>
          <target state="translated">既定値</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source><bpt id="p1">**</bpt>CaseSensitive<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>CaseSensitive<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>Same as the parent <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>, if it belongs to one.</source>
          <target state="translated">親と同じ<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>いずれかに属している場合は、します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>Otherwise, <ph id="ph1">`false`</ph>.</source>
          <target state="translated">それ以外の場合は <ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source><bpt id="p1">**</bpt>DisplayExpression<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>DisplayExpression<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>Empty string ("")</source>
          <target state="translated">空の文字列 ("")</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source><bpt id="p1">**</bpt>Locale<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>ロケール<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>Same as the parent <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> object's <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> (returned by the <ph id="ph3">&lt;xref:System.Data.DataSet.Locale%2A&gt;</ph> property); if no parent exists, the default is the current system <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph>.</source>
          <target state="translated">親と同じ<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>オブジェクトの<ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph>(によって返される、<ph id="ph3">&lt;xref:System.Data.DataSet.Locale%2A&gt;</ph>プロパティ) 以外の場合は親が存在しない場合、既定では、現在のシステム<ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source><bpt id="p1">**</bpt>MinimumCapacity<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>MinimumCapacity<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>50 rows.</source>
          <target state="translated">50 行です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>You can change the value for any of these properties through a separate call to the property.</source>
          <target state="translated">プロパティに別個の呼び出しでこれらのプロパティのいずれかの値を変更することができます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph>, and displays it in a <ph id="ph4">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control.</source>
          <target state="translated">次の例は、新しい作成<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>で<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph>で表示、<ph id="ph4">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.String)">
          <source>The name to give the table.</source>
          <target state="translated">テーブルに付ける名前。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>tableName<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or an empty string, a default name is given when added to the <ph id="ph2">&lt;see cref="T:System.Data.DataTableCollection" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>tableName<ept id="p1">&lt;/c&gt;</ept> が <ph id="ph1">&lt;see langword="null" /&gt;</ph> または空の文字列の場合は、<ph id="ph2">&lt;see cref="T:System.Data.DataTableCollection" /&gt;</ph> に追加したときに既定の名前が付けられます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> class with the specified table name.</source>
          <target state="translated">指定したテーブル名を使用して <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor(System.String)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and displays it in a <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>で表示、<ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The data needed to serialize or deserialize an object.</source>
          <target state="translated">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The source and destination of a given serialized stream.</source>
          <target state="translated">指定したシリアル化ストリームの転送元と転送先。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> class with the <ph id="ph2">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> and the <ph id="ph3">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> と <ph id="ph2">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> を使用して、<ph id="ph3">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This implementation of the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> constructor is required for <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>.</source>
          <target state="translated">この実装、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>コンス トラクターが必要<ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.String,System.String)">
          <source>The name to give the table.</source>
          <target state="translated">テーブルに付ける名前。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.String,System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>tableName<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or an empty string, a default name is given when added to the <ph id="ph2">&lt;see cref="T:System.Data.DataTableCollection" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>tableName<ept id="p1">&lt;/c&gt;</ept> が <ph id="ph1">&lt;see langword="null" /&gt;</ph> または空の文字列の場合は、<ph id="ph2">&lt;see cref="T:System.Data.DataTableCollection" /&gt;</ph> に追加したときに既定の名前が付けられます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.String,System.String)">
          <source>The namespace for the XML representation of the data stored in the <ph id="ph1">&lt;see langword="DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="DataTable" /&gt;</ph> に格納されているデータの XML 表現の名前空間。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> class using the specified table name and namespace.</source>
          <target state="translated">指定したテーブル名と名前空間を使用して、<ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.AcceptChanges">
          <source>Commits all the changes made to this table since the last time <ph id="ph1">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> was called.</source>
          <target state="translated">前回 <ph id="ph1">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> を呼び出した以降にこのテーブルに対して行われたすべての変更をコミットします。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.AcceptChanges">
          <source>When <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> is called, any <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> object still in edit mode successfully ends its edits.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph>が呼び出されると、いずれかの<ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>まだ編集モードでのオブジェクトは、その編集を正常に終了します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.AcceptChanges">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> also changes: all <ph id="ph2">`Added`</ph> and <ph id="ph3">`Modified`</ph> rows become <ph id="ph4">`Unchanged`</ph>, and <ph id="ph5">`Deleted`</ph> rows are removed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph>も変更: すべて<ph id="ph2">`Added`</ph>と<ph id="ph3">`Modified`</ph>になる行<ph id="ph4">`Unchanged`</ph>、および<ph id="ph5">`Deleted`</ph>行が削除されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.AcceptChanges">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> method is generally called on a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> after you attempt to update the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> using the <ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph>でメソッドが呼び出された一般に、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>更新を試行した後、<ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>を使用して、<ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.AcceptChanges">
          <source>The following example tests each table for errors.</source>
          <target state="translated">次の例では、各テーブルにエラーをテストします。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.AcceptChanges">
          <source>If the table's errors can be reconciled (by passing it to an undefined function), <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> is called; otherwise, <ph id="ph2">&lt;xref:System.Data.DataTable.RejectChanges%2A&gt;</ph> is called.</source>
          <target state="translated">(を渡すことによって、未定義の関数を)、テーブルのエラーを調整することができる場合<ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph>が呼び出された場合<ph id="ph2">&lt;xref:System.Data.DataTable.RejectChanges%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.BeginInit">
          <source>Begins the initialization of a <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> that is used on a form or used by another component.</source>
          <target state="translated">フォームまたは別のコンポーネントで使用する <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の初期化を開始します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.BeginInit">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初期化は実行時に発生します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.BeginInit">
          <source>The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</source>
          <target state="translated">Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用するコンポーネントの初期化を開始します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.BeginInit">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph> method ends the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph>メソッドが初期化を終了します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.BeginInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph>メソッド使用されないように、コントロールが完全に初期化される前にします。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.BeginLoadData">
          <source>Turns off notifications, index maintenance, and constraints while loading data.</source>
          <target state="translated">データを読み込む間、通知、インデックスの維持、および制約をオフにします。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.BeginLoadData">
          <source>Use <ph id="ph1">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph>と共に<ph id="ph2">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.CaseSensitive">
          <source>Indicates whether string comparisons within the table are case-sensitive.</source>
          <target state="translated">テーブル内の文字列比較で大文字と小文字を区別するかどうかを示します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.CaseSensitive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the comparison is case-sensitive; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">比較で大文字と小文字を区別する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.CaseSensitive">
          <source>The default is set to the parent <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> object's <ph id="ph2">&lt;see cref="P:System.Data.DataSet.CaseSensitive" /&gt;</ph> property, or <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the <ph id="ph4">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> was created independently of a <ph id="ph5">&lt;see cref="T:System.Data.DataSet" /&gt;</ph>.</source>
          <target state="translated">既定値は親 <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> オブジェクトの <ph id="ph2">&lt;see cref="P:System.Data.DataSet.CaseSensitive" /&gt;</ph> プロパティに設定します。<ph id="ph4">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> とは独立して <ph id="ph5">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> を作成した場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.CaseSensitive">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.CaseSensitive%2A&gt;</ph> property affects string comparisons in sorting, searching, and filtering.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.CaseSensitive%2A&gt;</ph>プロパティは、並べ替え、検索、およびフィルター処理で文字列を比較に影響します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.CaseSensitive">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph> method twice on a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>メソッドに 2 回、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.CaseSensitive">
          <source>The first time, the <ph id="ph1">&lt;xref:System.Data.DataTable.CaseSensitive%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the second, to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">最初に、<ph id="ph1">&lt;xref:System.Data.DataTable.CaseSensitive%2A&gt;</ph>プロパティに設定されている<ph id="ph2">`false`</ph>に、2 番目<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.ChildRelations">
          <source>Gets the collection of child relations for this <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の子リレーションシップのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRelationCollection" /&gt;</ph> that contains the child relations for the table.</source>
          <target state="translated">テーブルの子リレーションを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataRelationCollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>An empty collection is returned if no <ph id="ph1">&lt;see cref="T:System.Data.DataRelation" /&gt;</ph> objects exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRelation" /&gt;</ph> オブジェクトが存在しない場合、空のコレクションが返されます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>A <ph id="ph1">&lt;xref:System.Data.DataRelation&gt;</ph> defines the relationship between two tables.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.DataRelation&gt;</ph> 2 つのテーブル間のリレーションシップを定義します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>Typically, two tables are linked through a single field that contains the same data.</source>
          <target state="translated">通常、2 つのテーブルは、同じデータを含む単一のフィールドでリンクされます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>For example, a table which contains address data may have a single field containing codes that represent countries/regions.</source>
          <target state="translated">たとえば、アドレス データを格納するテーブルには、国/地域を表すコードを含む 1 つのフィールドがあります。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table.</source>
          <target state="translated">国/地域のデータが含まれる 2 番目のテーブルには、国/地域を識別するコードを含む 1 つのフィールドを持つし、このコードは、対応するフィールドの最初のテーブルに挿入することができます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>A <ph id="ph1">&lt;xref:System.Data.DataRelation&gt;</ph>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.DataRelation&gt;</ph>、次に、少なくとも 4 つ情報にはが含まれています: (1) 最初のテーブルの名前、(2) の最初のテーブル内の列名、(3) 2 番目のテーブルの名前および (4) 2 番目のテーブル内の列名。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataTable.ChildRelations%2A&gt;</ph> property to return each child <ph id="ph2">&lt;xref:System.Data.DataRelation&gt;</ph> in a <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Data.DataTable.ChildRelations%2A&gt;</ph>をそれぞれの子を返すプロパティ<ph id="ph2">&lt;xref:System.Data.DataRelation&gt;</ph>で、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>Each relation is then used as an argument in the <ph id="ph1">&lt;xref:System.Data.DataRow.GetChildRows%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> to return an array of rows.</source>
          <target state="translated">引数としてそれぞれのリレーションを使用して、<ph id="ph1">&lt;xref:System.Data.DataRow.GetChildRows%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>行の配列を返します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ChildRelations">
          <source>The value of each column in the row is then printed.</source>
          <target state="translated">行の各列の値が出力されます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Clear">
          <source>Clears the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> of all data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> からすべてのデータを消去します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clear">
          <source>All rows in all tables are removed.</source>
          <target state="translated">すべてのテーブルのすべての行が削除されます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clear">
          <source>An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.</source>
          <target state="translated">表に、子行が孤立するを原因となるすべての適用されている子リレーションシップがある場合、例外が生成されます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clear">
          <source>If the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> is bound to an <ph id="ph2">&lt;xref:System.Xml.XmlDataDocument&gt;</ph>, calling <ph id="ph3">&lt;xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph4">&lt;xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType&gt;</ph> raises the <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>にバインドされて、 <ph id="ph2">&lt;xref:System.Xml.XmlDataDocument&gt;</ph>、呼び出し元<ph id="ph3">&lt;xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph4">&lt;xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType&gt;</ph>を生成、<ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clear">
          <source>To avoid this situation, traverse each table, removing each row one at a time.</source>
          <target state="translated">このような状況を避けるためには、テーブルごとに、一度に 1 行ずつの削除を走査します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clear">
          <source>When you use <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> to create new rows, the rows must be processed before you call <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>.</source>
          <target state="translated">使用すると<ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>を呼び出す前に新しい行を作成する、行を処理する必要があります<ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clear">
          <source>The following example clears the table of all data.</source>
          <target state="translated">次の例では、すべてのデータのテーブルを消去します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Clone">
          <source>Clones the structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>, including all <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> schemas and constraints.</source>
          <target state="translated">すべての <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> スキーマおよび制約を含め <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の構造体のクローンを作成します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Clone">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with the same schema as the current <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> と同じスキーマを持つ新しい <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>If these classes have been derived, the clone will also be of the same derived classes.</source>
          <target state="translated">これらのクラスが派生されている場合、複製が同じ派生クラスにもなります。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>Clone creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the same structure as the original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>, but does not copy any data (the new <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph> will not contain any <ph id="ph4">`DataRows`</ph>).</source>
          <target state="translated">新しい複製を作成<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>元と同じ構造を持つ<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>、任意のデータはコピーされませんが、(新しい<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>は含められません<ph id="ph4">`DataRows`</ph>)。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>To copy both the structure and data into a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, use <ph id="ph2">&lt;xref:System.Data.DataTable.Copy%2A&gt;</ph>.</source>
          <target state="translated">新しい構造とデータの両方をコピーする<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を使用して<ph id="ph2">&lt;xref:System.Data.DataTable.Copy%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>The following sample demonstrates how to update the structure and constraints of the destination table after you execute DataTable.Clone.</source>
          <target state="translated">次の例では、DataTable.Clone を実行した後、構造と対象テーブルの制約を更新する方法を示します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>The ClonedDataTable class will return a destination table and includes all the updating events.</source>
          <target state="translated">ClonedDataTable クラスは、コピー先のテーブルを返すし、すべての更新イベントが含まれています。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>After the clone, structure changes in the source table won’t be reflected in the destination table.</source>
          <target state="translated">クローン後のソース テーブルの構造の変更は、コピー先のテーブルに反映されません。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>Specifically, this sample will:</source>
          <target state="translated">具体的には、このサンプルを行います。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>Update the changes of the columns in source table.</source>
          <target state="translated">ソース テーブルの列の変更を更新します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>Update the changes of the UniqueConstraint in source table.</source>
          <target state="translated">ソース テーブルの一意の制約の変更を更新します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>Update the changes of the ForeignKeyConstraint in source table.</source>
          <target state="translated">ソース テーブルの外部キーの変更を更新します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>C# and Visual Basic projects with this code sample can be found on <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&amp;f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable)</ept>.</source>
          <target state="translated">このサンプル コードで c# および Visual Basic のプロジェクトにある <bpt id="p1">[</bpt>開発者コード サンプル<ept id="p1">](http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&amp;f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable)</ept>です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>This sample shows how to modify data in a DataTable and update the data source.</source>
          <target state="translated">このサンプルでは、DataTable にデータを変更し、データ ソースを更新する方法を示します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>First, create a database:</source>
          <target state="translated">まず、データベースを作成します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source>You can now compile and run the sample.</source>
          <target state="translated">コンパイルして、サンプルを実行することができますようになりました。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Clone">
          <source><bpt id="p1">[</bpt>How to modify data in DataTable and update to the data source<ept id="p1">](http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4)</ept> has Visual Basic and C# projects of this sample.</source>
          <target state="translated"><bpt id="p1">[</bpt>データ ソースに更新して DataTable 内のデータを変更する方法<ept id="p1">](http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4)</ept>はこのサンプルの Visual Basic および c# のプロジェクトがあります。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.ColumnChanged">
          <source>Occurs after a value has been changed for the specified <ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> in a <ph id="ph2">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> 内の指定した <ph id="ph2">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> の値が変更された後に発生します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.ColumnChanged">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable イベントの処理<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.ColumnChanging">
          <source>Occurs when a value is being changed for the specified <ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> in a <ph id="ph2">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> 内の指定した <ph id="ph2">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> の値が変更されているときに発生します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.ColumnChanging">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable イベントの処理<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.Columns">
          <source>Gets the collection of columns that belong to this table.</source>
          <target state="translated">このテーブルに属する列のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Columns">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataColumnCollection" /&gt;</ph> that contains the collection of <ph id="ph2">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> objects for the table.</source>
          <target state="translated">テーブルの <ph id="ph1">&lt;see cref="T:System.Data.DataColumnCollection" /&gt;</ph> オブジェクトのコレクションを格納している <ph id="ph2">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Columns">
          <source>An empty collection is returned if no <ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> objects exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> オブジェクトが存在しない場合、空のコレクションが返されます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Columns">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumnCollection&gt;</ph> determines the schema of a table by defining the data type of each column.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataColumnCollection&gt;</ph>各列のデータ型を定義することによって、テーブルのスキーマを決定します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Columns">
          <source>The following example prints each value of each row in a table using the <ph id="ph1">&lt;xref:System.Data.DataTable.Columns%2A&gt;</ph> property.</source>
          <target state="translated">次の例を使用してテーブル内の各行の値ごとの出力、<ph id="ph1">&lt;xref:System.Data.DataTable.Columns%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>The expression to compute.</source>
          <target state="translated">計算する式。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>The filter to limit the rows that evaluate in the expression.</source>
          <target state="translated">式で評価される行を制限するフィルター。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>Computes the given expression on the current rows that pass the filter criteria.</source>
          <target state="translated">フィルター基準を満たしている現在の行で指定した式を計算します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, set to the result of the computation.</source>
          <target state="translated">計算の結果に設定された <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>If the expression evaluates to null, the return value will be <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph>.</source>
          <target state="translated">式が null に評価された場合、戻り値は <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>The <ph id="ph1">`expression`</ph> parameter requires an aggregate function.</source>
          <target state="translated"><ph id="ph1">`expression`</ph>パラメーターには、集計関数が必要です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>For example, the following is a legal expression:</source>
          <target state="translated">たとえば、次に示します有効な式。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>But this expression is not:</source>
          <target state="translated">この式ではありません。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>If you must perform an operation on two or more columns, you should create a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>, set its <ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property to an appropriate expression, and use an aggregate expression on the resulting column.</source>
          <target state="translated">作成する必要がある場合は、次の 2 つ以上の列に対して操作を実行する必要があります、<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>設定、その<ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph>プロパティを適切な式と、結果の列に集計式を使用します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>In that case, given a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> with the name "total", and the <ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property set to this:</source>
          <target state="translated">その場合は、指定された、<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>名前「合計」、および<ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph>プロパティにこの設定。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>The expression argument for the <ph id="ph1">&lt;xref:System.Data.DataTable.Compute%2A&gt;</ph> method would then be this:</source>
          <target state="translated">Expression 引数、<ph id="ph1">&lt;xref:System.Data.DataTable.Compute%2A&gt;</ph>メソッドできるようになりますこの。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>The second parameter, <ph id="ph1">`filter`</ph>, determines which rows are used in the expression.</source>
          <target state="translated">2 番目のパラメーターでは、<ph id="ph1">`filter`</ph>式で使用する行を決定します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>For example, if the table contains a date column named "colDate", you could limit the rows with the following expression:</source>
          <target state="translated">たとえば、テーブル"colDate"という名前の日付列が含まれている場合、次の式を持つ行を制限します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>For rules on creating expressions for both parameters, see the <ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">両方のパラメーターの式を作成する規則について、次を参照してください。、<ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Compute(System.String,System.String)">
          <source>The following example sums the values of a column named "Total", for the salesperson whose identification number is five.</source>
          <target state="translated">次の例では、販売員の識別番号が 5 つの「合計」をという名前の列の値を合計します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.Constraints">
          <source>Gets the collection of constraints maintained by this table.</source>
          <target state="translated">このテーブルに保持されている制約のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.ConstraintCollection" /&gt;</ph> that contains the collection of <ph id="ph2">&lt;see cref="T:System.Data.Constraint" /&gt;</ph> objects for the table.</source>
          <target state="translated">テーブルの <ph id="ph1">&lt;see cref="T:System.Data.ConstraintCollection" /&gt;</ph> オブジェクトのコレクションを格納している <ph id="ph2">&lt;see cref="T:System.Data.Constraint" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>An empty collection is returned if no <ph id="ph1">&lt;see cref="T:System.Data.Constraint" /&gt;</ph> objects exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Constraint" /&gt;</ph> オブジェクトが存在しない場合、空のコレクションが返されます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>A <ph id="ph1">&lt;xref:System.Data.ForeignKeyConstraint&gt;</ph> restricts the action performed when a value in a column (or columns) is either deleted or updated.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.ForeignKeyConstraint&gt;</ph> (または複数) の列の値を削除または更新されたときの動作を制限します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>Such a constraint is intended to be used with primary key columns.</source>
          <target state="translated">このような制約は主キー列で使用するためのものです。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.</source>
          <target state="translated">2 つのテーブル間の親子関係、親テーブルから値を削除することができますに影響を与える子行で、次の方法のいずれか。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>The child rows can also be deleted (a cascading action).</source>
          <target state="translated">子行がすることもできます (連鎖動作) を削除します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>The values in the child column (or columns) can be set to null values.</source>
          <target state="translated">子の列 (列または列) の値は、null 値に設定できます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>The values in the child column (or columns) can be set to default values.</source>
          <target state="translated">子の列 (列または列) の値は、既定値に設定できます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>An exception can be generated.</source>
          <target state="translated">例外を生成できます。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>A <ph id="ph1">&lt;xref:System.Data.UniqueConstraint&gt;</ph> becomes active when attempting to set a value in a primary key to a non-unique value.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Data.UniqueConstraint&gt;</ph>一意でない値に主キーの値を設定しようとするときにアクティブになります。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Constraints">
          <source>The following example adds a <ph id="ph1">&lt;xref:System.Data.ForeignKeyConstraint&gt;</ph> to the collection of constraints.</source>
          <target state="translated">次の例では追加、<ph id="ph1">&lt;xref:System.Data.ForeignKeyConstraint&gt;</ph>制約のコレクションにします。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Copy">
          <source>Copies both the structure and data for this <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の構造体だけでなくデータもコピーします。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Copy">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with the same structure (table schemas and constraints) and data as this <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> と同じ構造体 (テーブル スキーマおよび制約) とデータを持つ新しい <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Copy">
          <source>If these classes have been derived, the copy will also be of the same derived classes.</source>
          <target state="translated">これらのクラスが派生されている場合は、コピーも同じ派生クラスになります。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Copy">
          <source><ph id="ph1">&lt;see cref="M:System.Data.DataTable.Copy" /&gt;</ph> creates a new <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with the same structure and data as the original <ph id="ph3">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Data.DataTable.Copy" /&gt;</ph> は、新しい <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を元の <ph id="ph3">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> と同じ構造とデータで作成します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Copy">
          <source>To copy the structure to a new <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>, but not the data, use <ph id="ph2">&lt;see cref="M:System.Data.DataTable.Clone" /&gt;</ph>.</source>
          <target state="translated">構造体を新しい <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> にコピーし、データをコピーしない場合は、<ph id="ph2">&lt;see cref="M:System.Data.DataTable.Clone" /&gt;</ph> を使用します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Copy">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataTable.Copy%2A&gt;</ph> method to create a copy of the original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">次の例では、 <ph id="ph1">&lt;xref:System.Data.DataTable.Copy%2A&gt;</ph> 、元のコピーを作成するメソッド<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Copy">
          <source>The namespace name is not retained if it is inherited from a parent <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
          <target state="translated">名前空間の名前が親から継承されている場合は保持されない<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>または<ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.CreateDataReader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Data.DataTableReader" /&gt;</ph> corresponding to the data within this <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Data.DataTableReader" /&gt;</ph> 内のデータに対応する <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.CreateDataReader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataTableReader" /&gt;</ph> containing one result set, corresponding to the source <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> instance.</source>
          <target state="translated">1 つの結果セットを格納した <ph id="ph1">&lt;see cref="T:System.Data.DataTableReader" /&gt;</ph>。ソース インスタンスである <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に対応します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.CreateDataReader">
          <source>The following console application creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> インスタンスを作成するコンソール アプリケーションの例を次に示します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.CreateDataReader">
          <source>The example then passes the filled <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> to a procedure that calls the <ph id="ph2">&lt;xref:System.Data.DataTable.CreateDataReader%2A&gt;</ph> method, which iterates through the results contained within the <ph id="ph3">&lt;xref:System.Data.DataTableReader&gt;</ph>.</source>
          <target state="translated">渡します、塗りつぶされた<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を呼び出すプロシージャに、<ph id="ph2">&lt;xref:System.Data.DataTable.CreateDataReader%2A&gt;</ph>内に含まれる結果を反復処理するメソッド、<ph id="ph3">&lt;xref:System.Data.DataTableReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.CreateDataReader">
          <source>The example displays the following output in the console window:</source>
          <target state="translated">この例では、次の出力がコンソール ウィンドウに表示されます。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.CreateInstance">
          <source>Creates a new instance of <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.CreateInstance">
          <source>The new expression.</source>
          <target state="translated">新しい式。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.DataSet">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> to which this table belongs.</source>
          <target state="translated">このテーブルが属する <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.DataSet">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> to which this table belongs.</source>
          <target state="translated">このテーブルが属する <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.DataSet">
          <source>If a control is data bound to a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, and the table belongs to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, you can get to the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> through this property.</source>
          <target state="translated">コントロールがデータにバインドされて、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、このテーブルに所属し、<ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>を取得する、<ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>このプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.DataSet">
          <source>The following example returns the parent <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> of a given table through the <ph id="ph2">&lt;xref:System.Data.DataTable.DataSet%2A&gt;</ph> property.</source>
          <target state="translated">次の例は、親を返します<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>を介して特定のテーブルの<ph id="ph2">&lt;xref:System.Data.DataTable.DataSet%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.DefaultView">
          <source>Gets a customized view of the table that may include a filtered view, or a cursor position.</source>
          <target state="translated">フィルター処理されたビューまたはカーソル位置を含むことがある、テーブルのカスタマイズされたビューを取得します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.DefaultView">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.DataView" /&gt;</ph> associated with the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataView" /&gt;</ph> に関連付けられている <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.DefaultView">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.DefaultView%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> you can use to sort, filter, and search a <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.DefaultView%2A&gt;</ph>プロパティから返される、<ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph>並べ替え、フィルター、および検索に使用することができます、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.DefaultView">
          <source>The following example sets a property of the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object's <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> through the <ph id="ph3">&lt;xref:System.Data.DataTable.DefaultView%2A&gt;</ph> property.</source>
          <target state="translated">次の例のプロパティの設定、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクトの<ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph>を通じて、<ph id="ph3">&lt;xref:System.Data.DataTable.DefaultView%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.DefaultView">
          <source>The example also shows the binding of a <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control to a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> named "Suppliers" that includes a column named "CompanyName."</source>
          <target state="translated">バインドも示します、<ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>コントロールを<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>"CompanyName"という名前の列を含む"Suppliers"という名前</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.DisplayExpression">
          <source>Gets or sets the expression that returns a value used to represent this table in the user interface.</source>
          <target state="translated">ユーザー インターフェイスにこのテーブルを表示するために使用する値を返す式を取得または設定します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.DisplayExpression">
          <source>The <ph id="ph1">&lt;see langword="DisplayExpression" /&gt;</ph> property lets you display the name of this table in a user interface.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="DisplayExpression" /&gt;</ph> プロパティを使用すると、ユーザー インターフェイスにこのテーブルの名前が表示されます。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.DisplayExpression">
          <source>A display string.</source>
          <target state="translated">表示文字列。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.EndInit">
          <source>Ends the initialization of a <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> that is used on a form or used by another component.</source>
          <target state="translated">フォームまたは別のコンポーネントで使用する <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の初期化を終了します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.EndInit">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初期化は実行時に発生します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.EndInit">
          <source>The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</source>
          <target state="translated">Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用するコンポーネントの初期化を終了します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.EndInit">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph> method starts the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph>メソッドは、初期化を開始します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.EndInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph>メソッド使用されないように、コントロールが完全に初期化される前にします。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.EndLoadData">
          <source>Turns on notifications, index maintenance, and constraints after loading data.</source>
          <target state="translated">データを読み込んだ後、通知、インデックスの維持、および制約をオンにします。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.EndLoadData">
          <source>Use <ph id="ph1">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph>.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>と共に<ph id="ph2">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.ExtendedProperties">
          <source>Gets the collection of customized user information.</source>
          <target state="translated">カスタマイズされたユーザー情報のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ExtendedProperties">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.PropertyCollection" /&gt;</ph> that contains custom user information.</source>
          <target state="translated">カスタム ユーザー情報が格納された <ph id="ph1">&lt;see cref="T:System.Data.PropertyCollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ExtendedProperties">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ExtendedProperties%2A&gt;</ph> to add custom information to a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.ExtendedProperties%2A&gt;</ph>にカスタム情報を追加する、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ExtendedProperties">
          <source>Add information with the <ph id="ph1">`Add`</ph> method.</source>
          <target state="translated">情報を追加、<ph id="ph1">`Add`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ExtendedProperties">
          <source>Retrieve information with the <ph id="ph1">`Item`</ph> method.</source>
          <target state="translated">情報を取得、<ph id="ph1">`Item`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ExtendedProperties">
          <source>Extended properties must be of type <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">拡張プロパティが型でなければなりません<ph id="ph1">&lt;xref:System.String&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ExtendedProperties">
          <source>Properties that are not of type String are not persisted when the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is written as XML.</source>
          <target state="translated">文字列型ではないプロパティは保持されないときに、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>は XML として書き込まれます。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ExtendedProperties">
          <source>The following example adds a timestamp value to the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> through the <ph id="ph2">&lt;xref:System.Data.DataTable.ExtendedProperties%2A&gt;</ph> property.</source>
          <target state="translated">次の例では、タイムスタンプ値を<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を通じて、<ph id="ph2">&lt;xref:System.Data.DataTable.ExtendedProperties%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="F:System.Data.DataTable.fInitInProgress">
          <source>Checks whether initialization is in progress.</source>
          <target state="translated">初期化処理中かどうかをチェックします。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="F:System.Data.DataTable.fInitInProgress">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初期化は実行時に発生します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Gets a copy of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> containing all changes made to it since it was last loaded, or since <ph id="ph2">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> was called.</source>
          <target state="translated">前回 <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を読み取るか、<ph id="ph2">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetChanges">
          <source>Gets a copy of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> that contains all changes made to it since it was loaded or <ph id="ph2">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> was last called.</source>
          <target state="translated">前回 <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を読み取るか、<ph id="ph2">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを取得します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetChanges">
          <source>A copy of the changes from this <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no changes are found.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> からの変更のコピー。変更がない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetChanges">
          <source>Creates a new <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> containing a copy of all rows in the original <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> that have pending changes.</source>
          <target state="translated">新たに作成<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>、元のすべての行のコピーを含む<ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>保留中の変更があります。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetChanges">
          <source>Relationship constraints can cause additional unchanged rows to be added to the new <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</source>
          <target state="translated">リレーションシップの制限が原因で、新規に追加するその他の変更されていない行<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>変更されていない行が変更された行の外部キーに対応する主キーを含めるかどうか。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetChanges">
          <source>The method returns <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic) if there are no rows in the original <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> with pending changes.</source>
          <target state="translated">メソッドを返します<ph id="ph1">`null`</ph>(<ph id="ph2">`Nothing`</ph> Visual Basic で) 元の行が存在しない場合<ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>で保留中の変更。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.DataRowState" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRowState" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
          <source>Gets a copy of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> containing all changes made to it since it was last loaded, or since <ph id="ph2">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> was called, filtered by <ph id="ph3">&lt;see cref="T:System.Data.DataRowState" /&gt;</ph>.</source>
          <target state="translated">前回 <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を読み取るか、<ph id="ph2">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> を呼び出した以降にこのデータセットに対して行われたすべての変更が格納されているこのデータセットのコピーを、<ph id="ph3">&lt;see cref="T:System.Data.DataRowState" /&gt;</ph> によってフィルター処理した後で取得します。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
          <source>A filtered copy of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> that can have actions performed on it, and later be merged back in the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using <ph id="ph3">&lt;see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /&gt;</ph>.</source>
          <target state="translated">アクションを実行した後、<ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して元の <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> にマージするために使用できる、<ph id="ph3">&lt;see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /&gt;</ph> のフィルター処理後のコピー。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
          <source>If no rows of the desired <ph id="ph1">&lt;see cref="T:System.Data.DataRowState" /&gt;</ph> are found, the method returns <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">必要な <ph id="ph1">&lt;see cref="T:System.Data.DataRowState" /&gt;</ph> の行が見つからない場合、このメソッドは <ph id="ph2">&lt;see langword="null" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method is used to produce a second <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> object that contains only the changes introduced into the original.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph>メソッドが 1 秒あたりに生成するために使用される<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>を元の変更のみを格納しているオブジェクトが導入されました。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
          <source>Use the <ph id="ph1">`rowStates`</ph> argument to specify the type of changes the new object should include.</source>
          <target state="translated">使用して、<ph id="ph1">`rowStates`</ph>新しいオブジェクトを含める必要があります変更の種類を指定する引数。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
          <source>Relationship constraints may cause unchanged parent rows to be included.</source>
          <target state="translated">リレーションシップの制約が含まれるように変更されていない親行をあります。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> インスタンス。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
          <source>This method returns an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> instance containing the Web Services Description Language (WSDL) that describes the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> for Web Services.</source>
          <target state="translated">このメソッドは、Web サービスの <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> を記述する Web サービス記述言語 (WSDL) を含む <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> インスタンスを返します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> インスタンス。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetErrors">
          <source>Gets an array of <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects that contain errors.</source>
          <target state="translated">エラーが含まれる <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列を取得します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetErrors">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects that have errors.</source>
          <target state="translated">エラーが含まれる <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetErrors">
          <source>Returns the list of <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> objects that have <ph id="ph2">&lt;xref:System.Data.DataRow.RowError%2A&gt;</ph> set.</source>
          <target state="translated">一覧を返します<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>を持つオブジェクト<ph id="ph2">&lt;xref:System.Data.DataRow.RowError%2A&gt;</ph>を設定します。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetErrors">
          <source>For example, errors can occur when calling <ph id="ph1">&lt;xref:System.Data.Common.DataAdapter.Update%2A&gt;</ph> with <ph id="ph2">&lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt;</ph> set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
          <target state="translated">呼び出すときにエラーが発生することができます、<ph id="ph1">&lt;xref:System.Data.Common.DataAdapter.Update%2A&gt;</ph>で<ph id="ph2">&lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt;</ph>'éý' <bpt id="p1">**</bpt>true<ept id="p1">**</ept>です。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetErrors">
          <source>Do not invoke <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> until you resolve all errors and resubmit the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> for updating.</source>
          <target state="translated">呼び出されません<ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph>上、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>すべてのエラーを解決して再送信するまで、<ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>を更新します。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.GetErrors">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataTable.GetErrors%2A&gt;</ph> method to return an array of <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects that have errors.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Data.DataTable.GetErrors%2A&gt;</ph>の配列を返すメソッドを<ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>エラーが発生したオブジェクト。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object that holds the serialized data associated with the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> オブジェクトと関連付けられているシリアル化データを保持する <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object that contains the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納する <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a serialization information object with the data needed to serialize the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">シリアル化情報オブジェクトを、<ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> のシリアル化に必要なデータで事前設定します。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;paramref name="info" /&gt;</ph> parameter is a null reference (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> パラメーターが null 参照 (Visual Basic の場合は <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetRowType">
          <source>Gets the row type.</source>
          <target state="translated">行の種類を取得します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetRowType">
          <source>Returns the type of the <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> の種類を返します。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetSchema">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /&gt;</ph>.</source>
          <target state="translated">このメンバーの詳細については、「<ph id="ph1">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /&gt;</ph>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.GetSchema">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> that describes the XML representation of the object that is produced by the <ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> method and consumed by the <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> メソッドによって生成され <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> メソッドによって処理されるオブジェクトの XML 表現を記述する <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.HasErrors">
          <source>Gets a value indicating whether there are errors in any of the rows in any of the tables of the <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> to which the table belongs.</source>
          <target state="translated">テーブルが属する <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> のいずれかのテーブルのいずれかの行にエラーがあるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if errors exist; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">エラーがある場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source>As users work on a set of data contained in a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, you can mark each change with an error if the change causes some validation failure.</source>
          <target state="translated">ユーザーの作業に含まれるデータのセットを<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、変更によって検証エラーが発生した場合、エラーでは、各変更をマークできます。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source>You can mark an entire <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> with an error message using the <ph id="ph2">&lt;xref:System.Data.DataRow.RowError%2A&gt;</ph> property.</source>
          <target state="translated">全体をマークする<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>、エラー メッセージを使用すると、<ph id="ph2">&lt;xref:System.Data.DataRow.RowError%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source>You can also set errors on each column of the row with the <ph id="ph1">&lt;xref:System.Data.DataRow.SetColumnError%2A&gt;</ph> method.</source>
          <target state="translated">含む行の各列でエラーを設定することも、<ph id="ph1">&lt;xref:System.Data.DataRow.SetColumnError%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source>Before updating a data source with a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>, it's recommended that you first invoke the <ph id="ph2">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method on the target <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
          <target state="translated">データ ソースを更新する前に、 <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>、最初に呼び出すことをお勧め、<ph id="ph2">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph>ターゲット上メソッド<ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source>The method results in a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> that contains only the changes made to the original.</source>
          <target state="translated">メソッドの結果、<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>オリジナルに行われた変更のみを格納しています。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source>Before sending the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> to the data source for updating, check the <ph id="ph2">&lt;xref:System.Data.DataTable.HasErrors%2A&gt;</ph> property of each table to see if any errors have been attached to the rows or columns in the rows.</source>
          <target state="translated">送信する前に、<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>を更新するため、データ ソースを確認、<ph id="ph2">&lt;xref:System.Data.DataTable.HasErrors%2A&gt;</ph>すべてのエラーが行または行の列に関連付けられるかどうかを表示するには、各テーブルのプロパティです。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source>After reconciling each error, clear the errors with the <ph id="ph1">&lt;xref:System.Data.DataRow.ClearErrors%2A&gt;</ph> method of the <ph id="ph2">`DataRow`</ph>.</source>
          <target state="translated">各エラーを解決した後に、エラーをクリア、<ph id="ph1">&lt;xref:System.Data.DataRow.ClearErrors%2A&gt;</ph>のメソッド、<ph id="ph2">`DataRow`</ph>です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.HasErrors">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataTable.HasErrors%2A&gt;</ph> property to check if a table contains errors.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Data.DataTable.HasErrors%2A&gt;</ph>プロパティをテーブルにエラーが含まれているかどうかは確認します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> to be imported.</source>
          <target state="translated">インポートする <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>Copies a <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> into a <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>, preserving any property settings, as well as original and current values.</source>
          <target state="translated">プロパティ設定、元の値、および現在の値を保持し、<ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> を <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> にコピーします。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>Calling <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> adds a row to the table using the existing table schema, but with default values for the row, and sets the <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> to <ph id="ph3">`Detached`</ph>.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>、行の既定の値が、既存のテーブル スキーマを使用してテーブルに行を追加し、設定、<ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>に<ph id="ph3">`Detached`</ph>です。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>Calling <ph id="ph1">&lt;xref:System.Data.DataTable.ImportRow%2A&gt;</ph> preserves the existing <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> along with other values in the row.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Data.DataTable.ImportRow%2A&gt;</ph>既存を保持<ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>と共に、行の他の値。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>If the <ph id="ph1">`DataRow`</ph> that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown.</source>
          <target state="translated">場合、<ph id="ph1">`DataRow`</ph>を渡すパラメーターがデタッチ済み状態では、これは無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>The new row will be added to the end of the data table.</source>
          <target state="translated">新しい行は、データ テーブルの末尾に追加されます。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>If the new row violates a Constraint it won’t be added to the data table.</source>
          <target state="translated">新しい行が制約に違反する場合は、データ テーブルに追加できません。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>You can get the index of the new row with as DataTable.Rows.Find and DataTable.Rows.IndexOf.</source>
          <target state="translated">DataTable.Rows.Find および DataTable.Rows.IndexOf として持つ新しい行のインデックスを取得することができます。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
          <source>See <ph id="ph1">&lt;xref:System.Data.DataRowCollection&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.Rows%2A&gt;</ph> for more information.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Data.DataRowCollection&gt;</ph>」および「<ph id="ph2">&lt;xref:System.Data.DataTable.Rows%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.Initialized">
          <source>Occurs after the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> が初期化された後に発生します。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.Initialized">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Data.DataTable.IsInitialized%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Data.DataTable.IsInitialized%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.IsInitialized">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> が初期化されているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.IsInitialized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate the component has completed initialization; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">コンポーネントが初期化を完了したことを示す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.IsInitialized">
          <source>Returns the status of the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> while it’s being constructed, for instance by Visual Studio.</source>
          <target state="translated">状態を返します、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>ことによって作成される、インスタンスの Visual Studio 中にします。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.IsInitialized">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph> method sets it to <ph id="ph2">`false`</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph> method sets it to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph>メソッドに設定を<ph id="ph2">`false`</ph>と<ph id="ph3">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph>メソッドに設定を<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Fills a <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with values from a data source using the supplied <ph id="ph2">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用し、<ph id="ph2">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> にデータ ソースからの値を設定します。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>If the <ph id="ph1">&lt;see langword="DataTable" /&gt;</ph> already contains rows, the incoming data from the data source is merged with the existing rows.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="DataTable" /&gt;</ph> が既に行を含んでいる場合、データ ソースからの受信データは既存の行にマージされます。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">`Load`</ph> method can be used in several common scenarios, all centered around getting data from a specified data source and adding it to the current data container (in this case, a <ph id="ph2">`DataTable`</ph>).</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、指定されたデータ ソースからデータを取得して、現在のデータ コンテナーへの追加をすべて中央揃え、いくつかの一般的なシナリオで使用できます (ここで、 <ph id="ph2">`DataTable`</ph>)。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>These scenarios describe standard usage for a <ph id="ph1">`DataTable`</ph>, describing its update and merge behavior.</source>
          <target state="translated">これらのシナリオの標準的使用方法を説明する、<ph id="ph1">`DataTable`</ph>その更新プログラムを記述する方法、および動作をマージします。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>A <ph id="ph1">`DataTable`</ph> synchronizes or updates with a single primary data source.</source>
          <target state="translated">A<ph id="ph1">`DataTable`</ph>により同期または 1 つのプライマリ データ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">`DataTable`</ph> tracks changes, allowing synchronization with the primary data source.</source>
          <target state="translated"><ph id="ph1">`DataTable`</ph>プライマリ データ ソースとの同期を許可する、変更を追跡します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>In addition, a <ph id="ph1">`DataTable`</ph> can accept incremental data from one or more secondary data sources.</source>
          <target state="translated">さらに、 <ph id="ph1">`DataTable`</ph> 1 つまたは複数のセカンダリ データ ソースからデータの増分を受け入れることができます。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">`DataTable`</ph> isn't responsible for tracking changes in order to allow synchronization with the secondary data source.</source>
          <target state="translated"><ph id="ph1">`DataTable`</ph>セカンダリ データ ソースと同期できるようにするために変更を追跡する必要はありません。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Given these two hypothetical data sources, a user is likely to require one of the following behaviors:</source>
          <target state="translated">これら 2 つの架空のデータ ソースから、ユーザーは、次の動作のいずれかが必要な可能性です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Initialize <ph id="ph1">`DataTable`</ph> from a primary data source.</source>
          <target state="translated">初期化<ph id="ph1">`DataTable`</ph>プライマリ データ ソースからです。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>In this scenario, the user wants to initialize an empty <ph id="ph1">`DataTable`</ph> with values from the primary data source.</source>
          <target state="translated">このシナリオでは、ユーザーは、空の初期化に<ph id="ph1">`DataTable`</ph>プライマリ データ ソースから値を使用します。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Later the user intends to propagate changes back to the primary data source.</source>
          <target state="translated">後で、ユーザーは、プライマリ データ ソースに変更を反映する予定です。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Preserve changes and re-synchronize from the primary data source.</source>
          <target state="translated">変更を保存して、プライマリ データ ソースから再同期できます。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>In this scenario, the user wants to take the <ph id="ph1">`DataTable`</ph> filled in the previous scenario and perform an incremental synchronization with the primary data source, preserving modifications made in the <ph id="ph2">`DataTable`</ph>.</source>
          <target state="translated">このシナリオでは、ユーザーを<ph id="ph1">`DataTable`</ph>上記のシナリオで塗りつぶされで行われた変更を保持し、プライマリ データ ソースと、増分同期を実行、<ph id="ph2">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Incremental data feed from secondary data sources.</source>
          <target state="translated">データの増分は、セカンダリ データ ソースからフィードです。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>In this scenario, the user wants to merge changes from one or more secondary data sources, and propagate those changes back to the primary data source.</source>
          <target state="translated">このシナリオでは、ユーザーは、1 つまたは複数のセカンダリ データ ソースからの変更をマージし、プライマリ データ ソースに戻るには、その変更を伝達するためがします。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">`Load`</ph> method makes all these scenarios possible.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドにより、これらすべてのシナリオです。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>All but one of the overloads for this method allows you to specify a load option parameter, indicating how rows already in a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> combine with rows being loaded.</source>
          <target state="translated">すべてが 1 つのオーバー ロードのため、このメソッドでは、読み込みのオプション パラメーターを指定することができますを示す方法で既に行、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>読み込まれる行と結合します。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>(The overload that doesn't allow you to specify the behavior uses the default load option.) The following table describes the three load options provided by the <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> enumeration.</source>
          <target state="translated">(動作を指定することはしないオーバー ロードは、既定の読み込みオプションを使用します)。次の表に、次の 3 つの負荷で提供されるオプション、<ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>In each case, the description indicates the behavior when the primary key of a row in the incoming data matches the primary key of an existing row.</source>
          <target state="translated">各ケースでは、説明は、受信データで行の主キーには、既存の行の主キーが一致する場合に、動作を示します。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Load Option</source>
          <target state="translated">読み込みオプション</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source><ph id="ph1">`PreserveChanges`</ph> (default)</source>
          <target state="translated"><ph id="ph1">`PreserveChanges`</ph> (既定値)</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Updates the original version of the row with the value of the incoming row.</source>
          <target state="translated">受信した行の値を持つ行の元のバージョンを更新します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Updates the current and original versions of the row with the value of the incoming row.</source>
          <target state="translated">受信した行の値を持つ行の現在と元のバージョンを更新します。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Updates the current version of the row with the value of the incoming row.</source>
          <target state="translated">受信した行の値を持つ行の現在のバージョンを更新します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>In general, the <ph id="ph1">`PreserveChanges`</ph> and <ph id="ph2">`OverwriteChanges`</ph> options are intended for scenarios in which the user needs to synchronize the <ph id="ph3">`DataSet`</ph> and its changes with the primary data source.</source>
          <target state="translated">一般に、<ph id="ph1">`PreserveChanges`</ph>と<ph id="ph2">`OverwriteChanges`</ph>同期するために、ユーザーが必要なシナリオ向けのオプションでは、<ph id="ph3">`DataSet`</ph>と、プライマリ データ ソースを変更します。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">`Upsert`</ph> option facilitates aggregating changes from one or more secondary data sources.</source>
          <target state="translated"><ph id="ph1">`Upsert`</ph>オプションには、1 つまたは複数のセカンダリ データ ソースから集計の変更が容易になります。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The following example demonstrates several of the issues involved with calling the <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、呼び出し元に関連する問題のいくつかを示します、<ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>First, the example focuses on schema issues, including inferring a schema from the loaded <ph id="ph1">&lt;xref:System.Data.IDataReader&gt;</ph>, and then handling incompatible schemas, and schemas with missing or additional columns.</source>
          <target state="translated">例では、読み込まれたからスキーマを推論するときなど、スキーマの問題に重点を置いています最初に、 <ph id="ph1">&lt;xref:System.Data.IDataReader&gt;</ph>、および、互換性のないスキーマは、および存在しないか、その他の列を含むスキーマを処理します。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The example then focuses on data issues, including handling the various loading options.</source>
          <target state="translated">例は、さまざまな読み込みオプションの処理など、データの問題について説明します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>This example shows how to use one of the overloaded versions of <ph id="ph1">`Load`</ph>.</source>
          <target state="translated">この例は、のいずれかのオーバー ロードされたバージョンを使用する方法を示しています。<ph id="ph1">`Load`</ph>です。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For other examples that might be available, see the individual overload topics.</source>
          <target state="translated">使用可能な可能性のあるその他の例は、個々 のオーバー ロードのトピックを参照してください。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> that provides a result set.</source>
          <target state="translated">結果セットを提供する <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Fills a <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with values from a data source using the supplied <ph id="ph2">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用し、<ph id="ph2">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> にデータ ソースからの値を設定します。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>If the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> already contains rows, the incoming data from the data source is merged with the existing rows.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> が既に行を含んでいる場合、データ ソースからの受信データは既存の行にマージされます。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method consumes the first result set from the loaded <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>, and after successful completion, sets the reader's position to the next result set, if any.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドは最初の結果セットから読み込まれた<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>、正常に完了すると、位置を設定、リーダーの次の結果セットに存在する場合とします。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>When converting data, the <ph id="ph1">`Load`</ph> method uses the same conversion rules as the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">データを変換するとき、<ph id="ph1">`Load`</ph>メソッドとして同じ変換規則を使用して、<ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method must take into account three specific issues when loading the data from an <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph> instance: schema, data, and event operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッド考慮する必要が特定の問題を次の 3 つのデータを読み込むときに、<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>インスタンス: スキーマ、データ、およびイベント操作します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>When working with the schema, the <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method may encounter conditions as described in the following table.</source>
          <target state="translated">スキーマを使用する場合、<ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドを次の表に示す条件が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The schema operations take place for all imported result sets, even those containing no data.</source>
          <target state="translated">データが含まれていないものも含め、すべてのインポートされた結果セットのスキーマの操作を実行します。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Condition</source>
          <target state="translated">条件</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Behavior</source>
          <target state="translated">動作</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has no schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマがありません。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method infers the schema based on the result set from the imported <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドは、インポートされたからの結果セットに基づくスキーマを推論<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has a schema, but it is incompatible with the loaded schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマがありますが、読み込まれたスキーマと互換性がありません。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドは、互換性のないスキーマにデータを読み込むしようとしたときに発生する特定のエラーに対応する例外をスローします。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">スキーマは互換性が読み込まれた結果セットのスキーマに存在しない列が含まれています、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method adds the extra columns to <ph id="ph2">`DataTable`</ph>'s schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドは、余分な列を追加<ph id="ph2">`DataTable`</ph>のスキーマです。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The method throws an exception if corresponding columns in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and the loaded result set are not value compatible.</source>
          <target state="translated">メソッドは、対応する場合に例外をスロー内の列、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>読み込まれた結果セットは、互換性のある値ではありません。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The method also retrieves constraint information from the result set for all added columns.</source>
          <target state="translated">メソッドは、追加されたすべての列の結果セットからも制約情報を取得します。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Except for the case of Primary Key constraint, this constraint information is used only if the current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> does not contain any columns at the start of the load operation.</source>
          <target state="translated">場合にのみに使用するこの制約情報の場合を除き、Primary Key 制約、現在<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>読み込み操作の開始時に任意の列を含んでいません。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <ph id="ph1">`DataTable`</ph>.</source>
          <target state="translated">スキーマは互換性が読み込まれた結果セットのスキーマがよりも少ない列が含まれています、<ph id="ph1">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>If a missing column has a default value defined or the column's data type is nullable, the <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method allows the rows to be added, substituting the default or <ph id="ph2">`null`</ph> value for the missing column.</source>
          <target state="translated">不足している列が定義されている既定値または列のデータ型は、null 値を許容する場合、<ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドを使用する行を追加するには、既定値の置換または<ph id="ph2">`null`</ph>不足している列の値。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>If no default value or <ph id="ph1">`null`</ph> can be used, then the <ph id="ph2">`Load`</ph> method throws an exception.</source>
          <target state="translated">既定値はありません場合、または<ph id="ph1">`null`</ph>使用できますが、次に、<ph id="ph2">`Load`</ph>メソッドが例外をスローします。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>If no specific default value has been supplied, the <ph id="ph1">`Load`</ph> method uses the <ph id="ph2">`null`</ph> value as the implied default value.</source>
          <target state="translated">特定の既定値が指定されていない場合、<ph id="ph1">`Load`</ph>メソッドを使用、<ph id="ph2">`null`</ph>暗黙的な既定値として値。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Before considering the behavior of the <ph id="ph1">`Load`</ph> method in terms of data operations, consider that each row within a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> maintains both the current value and the original value for each column.</source>
          <target state="translated">動作を検討する前に、<ph id="ph1">`Load`</ph>データ操作の観点からメソッドを検討する各内の行、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>は現在の値と各列の元の値の両方を保持します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>These values may be equivalent, or may be different if the data in the row has been changed since filling the <ph id="ph1">`DataTable`</ph>.</source>
          <target state="translated">これらの値がそれと同等か、行のデータがいっぱいになる以降変更されている場合は異なる場合があります、<ph id="ph1">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>For more information, see <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>行の状態と行のバージョン<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>This version of the <ph id="ph1">`Load`</ph> method attempts to preserve the current values in each row, leaving the original value intact.</source>
          <target state="translated">このバージョンの<ph id="ph1">`Load`</ph>メソッドは、元の値をそのまま残して、各行の現在の値を維持しようとしています。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>(If you want finer control over the behavior of incoming data, see <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A?displayProperty=nameWithType&gt;</ph>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</source>
          <target state="translated">(受信データの動作をより細かく制御する場合は、「 <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A?displayProperty=nameWithType&gt;</ph>。)既存の行と受信した行には、対応する主キーの値が含まれて場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>In terms of event operations, the <ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event occurs before each row is changed, and the <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph> event occurs after each row has been changed.</source>
          <target state="translated">イベント処理の観点から、<ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph>各行が変更されると、前に、イベントが発生し、<ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph>イベントは、各行が変更された後に発生します。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>In each case, the <ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph> instance passed to the event handler contains information about the particular action associated with the event.</source>
          <target state="translated">各ケースで、<ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph>イベント ハンドラーに渡されたインスタンスには、イベントに関連付けられている特定のアクションに関する情報が含まれています。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>This action value depends on the state of the row before the load operation.</source>
          <target state="translated">このアクションの値は、読み込み操作の前に、の行の状態によって異なります。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>In each case, both events occur, and the action is the same for each.</source>
          <target state="translated">各ケースで両方のイベントが発生して、アクションは、それぞれの同じです。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The action may be applied to either the current or original version of each row, or both, depending on the current row state.</source>
          <target state="translated">アクションは、各の行の現在または元のバージョンまたは、現在の行の状態に応じて、両方に適用可能性があります。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The following table displays behavior for the <ph id="ph1">`Load`</ph> method.</source>
          <target state="translated">次の表の動作を表示する、<ph id="ph1">`Load`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</source>
          <target state="translated">最後の行 (「(存在しない)」のラベル) では、既存の行が一致しない入力の行の動作について説明します。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Each cell in this table describes the current and original value for a field within a row, along with the <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> for the value after the <ph id="ph2">`Load`</ph> method has completed.</source>
          <target state="translated">このテーブル内の各セルでは、現在と元の行に、フィールドの値を説明と共に、<ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph>後の値の<ph id="ph2">`Load`</ph>メソッドが完了します。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>In this case, the method doesn't allow you to indicate the load option, and uses the default, <ph id="ph1">`PreserveChanges`</ph>.</source>
          <target state="translated">ここでは、メソッドは読み込みオプションを指定することはしませんし、既定値を使用<ph id="ph1">`PreserveChanges`</ph>です。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Existing DataRowState</source>
          <target state="translated">既存の DataRowState</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Values after <ph id="ph1">`Load`</ph> method, and event action</source>
          <target state="translated">後の値<ph id="ph1">`Load`</ph>メソッド、およびイベントのアクション</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Added</source>
          <target state="translated">追加</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>RowAction = ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Modified</source>
          <target state="translated">変更日時</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>RowAction = ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Deleted</source>
          <target state="translated">Deleted</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Current = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>削除 &gt;</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>RowAction = ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Unchanged</source>
          <target state="translated">Unchanged</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>(Not present)</source>
          <target state="translated">(存在しない)</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Values in a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> can be constrained through use of properties such as <ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>.</source>
          <target state="translated">値が、<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>などのプロパティの使用を制限することができます<ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">`Load`</ph> method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、列のプロパティによって定義された動作と一貫性のある方法でこのような列を処理します。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The read only constraint on a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is applicable only for changes that occur in memory.</source>
          <target state="translated">読み取りのみ制約、<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>はメモリに加えられた変更にのみ適用されます。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The <ph id="ph1">`Load`</ph> method's overwrites the read-only column values, if needed.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドの必要な場合は、読み取り専用の列の値が上書きされます。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>To determine which version of the primary key field to use for comparing the current row with an incoming row, the <ph id="ph1">`Load`</ph> method uses the original version of the primary key value within a row, if it exists.</source>
          <target state="translated">現在の行を受信した行とを比較するのに使用する主キー フィールドのバージョンを決定する、<ph id="ph1">`Load`</ph>メソッドが存在する場合、行に、主キーの値の元のバージョンを使用します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>Otherwise, the <ph id="ph1">`Load`</ph> method uses the current version of the primary key field.</source>
          <target state="translated">それ以外の場合、<ph id="ph1">`Load`</ph>メソッドは主キー フィールドの現在のバージョンを使用します。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The following example demonstrates several of the issues involved with calling the <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、呼び出し元に関連する問題のいくつかを示します、<ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>First, the example focuses on schema issues, including inferring a schema from the loaded <ph id="ph1">&lt;xref:System.Data.IDataReader&gt;</ph>, and then handling incompatible schemas, and schemas with missing or additional columns.</source>
          <target state="translated">例では、読み込まれたからスキーマを推論するときなど、スキーマの問題に重点を置いています最初に、 <ph id="ph1">&lt;xref:System.Data.IDataReader&gt;</ph>、および、互換性のないスキーマは、および存在しないか、その他の列を含むスキーマを処理します。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader)">
          <source>The example then calls the <ph id="ph1">`Load`</ph> method, displaying the data both before and after the load operation.</source>
          <target state="translated">この例では、<ph id="ph1">`Load`</ph>読み込み操作の前後にデータを表示するメソッド。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> that provides one or more result sets.</source>
          <target state="translated">1 つ以上の結果セットを含む <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>A value from the <ph id="ph1">&lt;see cref="T:System.Data.LoadOption" /&gt;</ph> enumeration that indicates how rows already in the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> are combined with incoming rows that share the same primary key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.LoadOption" /&gt;</ph> 列挙体の値。<ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Fills a <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with values from a data source using the supplied <ph id="ph2">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用し、<ph id="ph2">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> にデータ ソースからの値を設定します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>If the <ph id="ph1">&lt;see langword="DataTable" /&gt;</ph> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <ph id="ph2">&lt;paramref name="loadOption" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="DataTable" /&gt;</ph> が既に行を含んでいる場合、<ph id="ph2">&lt;paramref name="loadOption" /&gt;</ph> パラメーターの値に従って、データ ソースからの受信データは既存の行にマージされます。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">`Load`</ph> method consumes the first result set from the loaded <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>, and after successful completion, sets the reader's position to the next result set, if any.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは最初の結果セットから読み込まれた<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>、正常に完了すると、位置を設定、リーダーの次の結果セットに存在する場合とします。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>When converting data, the <ph id="ph1">`Load`</ph> method uses the same conversion rules as the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;</ph> method.</source>
          <target state="translated">データを変換するとき、<ph id="ph1">`Load`</ph>メソッドとして同じ変換規則を使用して、<ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">`Load`</ph> method must take into account three specific issues when loading the data from an <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph> instance: schema, data, and event operations.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッド考慮する必要が特定の問題を次の 3 つのデータを読み込むときに、<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>インスタンス: スキーマ、データ、およびイベント操作します。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>When working with the schema, the <ph id="ph1">`Load`</ph> method may encounter conditions as described in the following table.</source>
          <target state="translated">スキーマを使用する場合、<ph id="ph1">`Load`</ph>メソッドを次の表に示す条件が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The schema operations take place for all imported result sets, even those containing no data.</source>
          <target state="translated">データが含まれていないものも含め、すべてのインポートされた結果セットのスキーマの操作を実行します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Condition</source>
          <target state="translated">条件</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Behavior</source>
          <target state="translated">動作</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has no schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマがありません。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">`Load`</ph> method infers the schema based on the result set from the imported <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、インポートされたからの結果セットに基づくスキーマを推論<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has a schema, but it is incompatible with the loaded schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマがありますが、読み込まれたスキーマと互換性がありません。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">`Load`</ph> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、互換性のないスキーマにデータを読み込むしようとしたときに発生する特定のエラーに対応する例外をスローします。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The schemas are compatible, but the loaded result set schema contains columns that don't exist in the <ph id="ph1">`DataTable`</ph>.</source>
          <target state="translated">スキーマは互換性が読み込まれた結果セットのスキーマに存在しない列が含まれています、<ph id="ph1">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">`Load`</ph> method adds the extra columns to <ph id="ph2">`DataTable`</ph>’s schema.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、余分な列を追加<ph id="ph2">`DataTable`</ph>のスキーマです。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The method throws an exception if corresponding columns in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and the loaded result set are not value compatible.</source>
          <target state="translated">メソッドは、対応する場合に例外をスロー内の列、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>読み込まれた結果セットは、互換性のある値ではありません。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The method also retrieves constraint information from the result set for all added columns.</source>
          <target state="translated">メソッドは、追加されたすべての列の結果セットからも制約情報を取得します。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Except for the case of Primary Key constraint, this constraint information is used only if the current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> does not contain any columns at the start of the load operation.</source>
          <target state="translated">場合にのみに使用するこの制約情報の場合を除き、Primary Key 制約、現在<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>読み込み操作の開始時に任意の列を含んでいません。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <ph id="ph1">`DataTable`</ph>.</source>
          <target state="translated">スキーマは互換性が読み込まれた結果セットのスキーマがよりも少ない列が含まれています、<ph id="ph1">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>If a missing column has a default value defined or the column's data type is nullable, the <ph id="ph1">`Load`</ph> method allows the rows to be added, substituting the default or null value for the missing column.</source>
          <target state="translated">不足している列が定義されている既定値または列のデータ型は、null 値を許容する場合、<ph id="ph1">`Load`</ph>メソッドを使用する、行を追加する、不足している列の既定値または null 値を置換します。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>If no default value or null can be used, then the <ph id="ph1">`Load`</ph> method throws an exception.</source>
          <target state="translated">既定値や null は使用できない場合、<ph id="ph1">`Load`</ph>メソッドが例外をスローします。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>If no specific default value has been supplied, the <ph id="ph1">`Load`</ph> method uses the null value as the implied default value.</source>
          <target state="translated">特定の既定値が指定されていない場合、<ph id="ph1">`Load`</ph>メソッドは、暗黙的な既定値として null 値を使用します。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Before considering the behavior of the <ph id="ph1">`Load`</ph> method in terms of data operations, consider that each row within a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> maintains both the current value and the original value for each column.</source>
          <target state="translated">動作を検討する前に、<ph id="ph1">`Load`</ph>データ操作の観点からメソッドを検討する各内の行、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>は現在の値と各列の元の値の両方を保持します。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>These values may be equivalent, or may be different if the data in the row has been changed since filling the <ph id="ph1">`DataTable`</ph>.</source>
          <target state="translated">これらの値がそれと同等か、行のデータがいっぱいになる以降変更されている場合は異なる場合があります、<ph id="ph1">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>See <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept> for more information.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>行の状態と行のバージョン<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>詳細についてはします。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>In this method call, the specified <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> parameter influences the processing of the incoming data.</source>
          <target state="translated">このメソッドの呼び出しで指定された<ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph>パラメーター受信データの処理に影響します。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>How should the Load method handle loading rows that have the same primary key as existing rows?</source>
          <target state="translated">Load メソッドで既存の行として同じ主キーを持つ読み込み行が処理する方法</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Should it modify current values, original values, or both?</source>
          <target state="translated">現在の値、元の値、またはその両方を変更にする必要がありますか。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>These issues, and more, are controlled by the <ph id="ph1">`loadOption`</ph> parameter.</source>
          <target state="translated">これらの問題とその詳細は、によって制御されます、<ph id="ph1">`loadOption`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</source>
          <target state="translated">既存の行と受信した行には、対応する主キーの値が含まれて場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>In terms of event operations, the <ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event occurs before each row is changed, and the <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph> event occurs after each row has been changed.</source>
          <target state="translated">イベント処理の観点から、<ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph>各行が変更されると、前に、イベントが発生し、<ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph>イベントは、各行が変更された後に発生します。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>In each case, the <ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph> instance passed to the event handler contains information about the particular action associated with the event.</source>
          <target state="translated">各ケースで、<ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph>イベント ハンドラーに渡されたインスタンスには、イベントに関連付けられている特定のアクションに関する情報が含まれています。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>This action value varies, depending on the state of the row before the load operation.</source>
          <target state="translated">このアクションの値は、読み込み操作の前に、の行の状態によって異なります。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>In each case, both events occur, and the action is the same for each.</source>
          <target state="translated">各ケースで両方のイベントが発生して、アクションは、それぞれの同じです。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The action may be applied to either the current or original version of each row, or both, depending on the current row state.</source>
          <target state="translated">アクションは、各の行の現在または元のバージョンまたは、現在の行の状態に応じて、両方に適用可能性があります。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The following table displays behavior for the Load method when called with each of the <ph id="ph1">`LoadOption`</ph> values, and also shows how the values interact with the row state for the row being loaded.</source>
          <target state="translated">次の表は、Load メソッドのそれぞれに呼び出されたときの動作を表示、<ph id="ph1">`LoadOption`</ph>値、およびも値が読み込まれている行の行の状態と対話する方法を示しています。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</source>
          <target state="translated">最後の行 (「(存在しない)」のラベル) では、既存の行が一致しない入力の行の動作について説明します。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Each cell in this table describes the current and original value for a field within a row, along with the <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> for the value after the <ph id="ph2">`Load`</ph> method has completed.</source>
          <target state="translated">このテーブル内の各セルでは、現在と元の行に、フィールドの値を説明と共に、<ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph>後の値の<ph id="ph2">`Load`</ph>メソッドが完了します。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Existing DataRowState</source>
          <target state="translated">既存の DataRowState</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Upsert</source>
          <target state="translated">Upsert</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>OverwriteChanges</source>
          <target state="translated">OverwriteChanges</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>PreserveChanges (Default behavior)</source>
          <target state="translated">PreserveChanges (既定の動作)</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Added</source>
          <target state="translated">追加</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = -<ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">元 = -<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>追加 &gt;</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = Change</source>
          <target state="translated">RowAction 変更を =</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Modified</source>
          <target state="translated">変更日時</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = Change</source>
          <target state="translated">RowAction 変更を =</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction =ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>eleted</source>
          <target state="translated">オリジナル</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>(Load does not affect deleted rows)</source>
          <target state="translated">(負荷の動作に影響が削除された行ではなく)</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = ---</source>
          <target state="translated">現在 =--</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>削除 &gt;</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>(New row is added with the following characteristics)</source>
          <target state="translated">(次の特性を持つ新しい行が追加されます)</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>追加 &gt;</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = Add</source>
          <target state="translated">RowAction = 追加</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Undo delete and</source>
          <target state="translated">削除の取り消しと</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>削除 &gt;</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Unchanged</source>
          <target state="translated">Unchanged</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>If new value is the same as the existing value then</source>
          <target state="translated">新しい値が同じ場合、既存の値として、</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = Nothing</source>
          <target state="translated">RowAction = なし</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Else</source>
          <target state="translated">Else</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = Change</source>
          <target state="translated">RowAction 変更を =</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Not present)</source>
          <target state="translated">存在しません)</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>追加 &gt;</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = Add</source>
          <target state="translated">RowAction = 追加</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Values in a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> can be constrained through use of properties such as <ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>.</source>
          <target state="translated">値が、<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>などのプロパティの使用を制限することができます<ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">`Load`</ph> method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、列のプロパティによって定義された動作と一貫性のある方法でこのような列を処理します。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The read only constraint on a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is applicable only for changes that occur in memory.</source>
          <target state="translated">読み取りのみ制約、<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>はメモリに加えられた変更にのみ適用されます。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">`Load`</ph> method's overwrites the read-only column values, if needed.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドの必要な場合は、読み取り専用の列の値が上書きされます。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>If you specify the OverwriteChanges or PreserveChanges options when calling the <ph id="ph1">`Load`</ph> method, then the assumption is made that the incoming data is coming from the <ph id="ph2">`DataTable`</ph>'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source.</source>
          <target state="translated">呼び出すときに、OverwriteChanges PreserveChanges オプションを指定するかどうか、<ph id="ph1">`Load`</ph>メソッド後、前提されてから受信したデータが送信されたこと、<ph id="ph2">`DataTable`</ph>のプライマリ データ ソース、および DataTable 変更を追跡し、データ ソースへの変更を反映することができます。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user.</source>
          <target state="translated">アップサート オプションを選択した場合、データがユーザーによって変更されるなど、中間層コンポーネントによって提供されるデータなど、セカンダリ データ ソースのいずれかから送信されたことと見なされます。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>In this case, the assumption is that the intent is to aggregate data from one or more data sources in the <ph id="ph1">`DataTable`</ph>, and then perhaps propagate the data back to the primary data source.</source>
          <target state="translated">ここでは、という前提は、目的の 1 つまたは複数のデータ ソースからデータを集計するには、 <ph id="ph1">`DataTable`</ph>、プライマリ データ ソースにデータをおそらく伝達します。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> parameter is used for determining the specific version of the row that is to be used for primary key comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph>が主キーの比較に使用される行のバージョンを特定のパラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The table below provides the details.</source>
          <target state="translated">次の表は、詳細を提供します。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Load option</source>
          <target state="translated">読み込みオプション</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>DataRow version used for primary key comparison</source>
          <target state="translated">主キーの比較に使用される DataRow バージョン</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original version, if it exists, otherwise Current version</source>
          <target state="translated">元のバージョンは存在する場合、それ以外の場合に現在のバージョン</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Original version, if it exists, otherwise Current version</source>
          <target state="translated">元のバージョンは存在する場合、それ以外の場合に現在のバージョン</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>Current version, if it exists, otherwise Original version</source>
          <target state="translated">現在のバージョンが存在する場合、それ以外の場合の元のバージョン</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The following example demonstrates several of the issues involved with calling the <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、呼び出し元に関連する問題のいくつかを示します、<ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>First, the example focuses on schema issues, including inferring a schema from the loaded <ph id="ph1">&lt;xref:System.Data.IDataReader&gt;</ph>, and then handling incompatible schemas, and schemas with missing or additional columns.</source>
          <target state="translated">例では、読み込まれたからスキーマを推論するときなど、スキーマの問題に重点を置いています最初に、 <ph id="ph1">&lt;xref:System.Data.IDataReader&gt;</ph>、および、互換性のないスキーマは、および存在しないか、その他の列を含むスキーマを処理します。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
          <source>The example then focuses on data issues, including handling the various loading options.</source>
          <target state="translated">例は、さまざまな読み込みオプションの処理など、データの問題について説明します。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> that provides a result set.</source>
          <target state="translated">結果セットを提供する <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>A value from the <ph id="ph1">&lt;see cref="T:System.Data.LoadOption" /&gt;</ph> enumeration that indicates how rows already in the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> are combined with incoming rows that share the same primary key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.LoadOption" /&gt;</ph> 列挙体の値。<ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に既に含まれている行を同じ主キーを持つ受信した行と結合する方法を示します。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.FillErrorEventHandler" /&gt;</ph> delegate to call when an error occurs while loading data.</source>
          <target state="translated">データの読み込み中にエラーが発生した場合に呼び出される <ph id="ph1">&lt;see cref="T:System.Data.FillErrorEventHandler" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Fills a <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with values from a data source using the supplied <ph id="ph2">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> using an error-handling delegate.</source>
          <target state="translated">エラー処理デリゲートを使用し、指定された <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> にデータ ソースからの値を設定します。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">`Load`</ph> method consumes the first result set from the loaded <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>, and after successful completion, sets the reader's position to the next result set, if any.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは最初の結果セットから読み込まれた<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>、正常に完了すると、位置を設定、リーダーの次の結果セットに存在する場合とします。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>When converting data, the <ph id="ph1">`Load`</ph> method uses the same conversion rules as the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">データを変換するとき、<ph id="ph1">`Load`</ph>メソッドとして同じ変換規則を使用して、<ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">`Load`</ph> method must take into account three specific issues when loading the data from an <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph> instance: schema, data, and event operations.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッド考慮する必要が特定の問題を次の 3 つのデータを読み込むときに、<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>インスタンス: スキーマ、データ、およびイベント操作します。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>When working with the schema, the <ph id="ph1">`Load`</ph> method may encounter conditions as described in the following table.</source>
          <target state="translated">スキーマを使用する場合、<ph id="ph1">`Load`</ph>メソッドを次の表に示す条件が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The schema operations take place for all imported result sets, even those containing no data.</source>
          <target state="translated">データが含まれていないものも含め、すべてのインポートされた結果セットのスキーマの操作を実行します。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Condition</source>
          <target state="translated">条件</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Behavior</source>
          <target state="translated">動作</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has no schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマがありません。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">`Load`</ph> method infers the schema based on the result set from the imported <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、インポートされたからの結果セットに基づくスキーマを推論<ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has a schema, but it is incompatible with the loaded schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマがありますが、読み込まれたスキーマと互換性がありません。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">`Load`</ph> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、互換性のないスキーマにデータを読み込むしようとしたときに発生する特定のエラーに対応する例外をスローします。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The schemas are compatible, but the loaded result set schema contains columns that don't exist in the <ph id="ph1">`DataTable`</ph>.</source>
          <target state="translated">スキーマは互換性が読み込まれた結果セットのスキーマに存在しない列が含まれています、<ph id="ph1">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">`Load`</ph> method adds the extra column(s) to <ph id="ph2">`DataTable`</ph>’s schema.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドを追加する列を追加<ph id="ph2">`DataTable`</ph>のスキーマです。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The method throws an exception if corresponding columns in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and the loaded result set are not value compatible.</source>
          <target state="translated">メソッドは、対応する場合に例外をスロー内の列、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>読み込まれた結果セットは、互換性のある値ではありません。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The method also retrieves constraint information from the result set for all added columns.</source>
          <target state="translated">メソッドは、追加されたすべての列の結果セットからも制約情報を取得します。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Except for the case of Primary Key constraint, this constraint information is used only if the current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> does not contain any columns at the start of the load operation.</source>
          <target state="translated">場合にのみに使用するこの制約情報の場合を除き、Primary Key 制約、現在<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>読み込み操作の開始時に任意の列を含んでいません。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <ph id="ph1">`DataTable`</ph>.</source>
          <target state="translated">スキーマは互換性が読み込まれた結果セットのスキーマがよりも少ない列が含まれています、<ph id="ph1">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>If a missing column has a default value defined or the column's data type is nullable, the <ph id="ph1">`Load`</ph> method allows the rows to be added, substituting the default or null value for the missing column.</source>
          <target state="translated">不足している列が定義されている既定値または列のデータ型は、null 値を許容する場合、<ph id="ph1">`Load`</ph>メソッドを使用する、行を追加する、不足している列の既定値または null 値を置換します。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>If no default value or null can be used, then the <ph id="ph1">`Load`</ph> method throws an exception.</source>
          <target state="translated">既定値や null は使用できない場合、<ph id="ph1">`Load`</ph>メソッドが例外をスローします。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>If no specific default value has been supplied, the <ph id="ph1">`Load`</ph> method uses the null value as the implied default value.</source>
          <target state="translated">特定の既定値が指定されていない場合、<ph id="ph1">`Load`</ph>メソッドは、暗黙的な既定値として null 値を使用します。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Before considering the behavior of the <ph id="ph1">`Load`</ph> method in terms of data operations, consider that each row within a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> maintains both the current value and the original value for each column.</source>
          <target state="translated">動作を検討する前に、<ph id="ph1">`Load`</ph>データ操作の観点からメソッドを検討する各内の行、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>は現在の値と各列の元の値の両方を保持します。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>These values may be equivalent, or may be different if the data in the row has been changed since filling the <ph id="ph1">`DataTable`</ph>.</source>
          <target state="translated">これらの値がそれと同等か、行のデータがいっぱいになる以降変更されている場合は異なる場合があります、<ph id="ph1">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>See <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept> for more information.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>行の状態と行のバージョン<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>詳細についてはします。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>In this method call, the specified <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> parameter influences the processing of the incoming data.</source>
          <target state="translated">このメソッドの呼び出しで指定された<ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph>パラメーター受信データの処理に影響します。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>How should the Load method handle loading rows that have the same primary key as existing rows?</source>
          <target state="translated">Load メソッドで既存の行として同じ主キーを持つ読み込み行が処理する方法</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Should it modify current values, original values, or both?</source>
          <target state="translated">現在の値、元の値、またはその両方を変更にする必要がありますか。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>These issues, and more, are controlled by the <ph id="ph1">`loadOption`</ph> parameter.</source>
          <target state="translated">これらの問題とその詳細は、によって制御されます、<ph id="ph1">`loadOption`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</source>
          <target state="translated">既存の行と受信した行には、対応する主キーの値が含まれて場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>In terms of event operations, the <ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event occurs before each row is changed, and the <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph> event occurs after each row has been changed.</source>
          <target state="translated">イベント処理の観点から、<ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph>各行が変更されると、前に、イベントが発生し、<ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph>イベントは、各行が変更された後に発生します。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>In each case, the <ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph> instance passed to the event handler contains information about the particular action associated with the event.</source>
          <target state="translated">各ケースで、<ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph>イベント ハンドラーに渡されたインスタンスには、イベントに関連付けられている特定のアクションに関する情報が含まれています。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>This action value varies, depending on the state of the row before the load operation.</source>
          <target state="translated">このアクションの値は、読み込み操作の前に、の行の状態によって異なります。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>In each case, both events occur, and the action is the same for each.</source>
          <target state="translated">各ケースで両方のイベントが発生して、アクションは、それぞれの同じです。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The action may be applied to either the current or original version of each row, or both, depending on the current row state.</source>
          <target state="translated">アクションは、各の行の現在または元のバージョンまたは、現在の行の状態に応じて、両方に適用可能性があります。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The following table displays behavior for the Load method when called with each of the <ph id="ph1">`LoadOption`</ph> values, and also shows how the values interact with the row state for the row being loaded.</source>
          <target state="translated">次の表は、Load メソッドのそれぞれに呼び出されたときの動作を表示、<ph id="ph1">`LoadOption`</ph>値、およびも値が読み込まれている行の行の状態と対話する方法を示しています。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</source>
          <target state="translated">最後の行 (「(存在しない)」のラベル) では、既存の行が一致しない入力の行の動作について説明します。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Each cell in this table describes the current and original value for a field within a row, along with the <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> for the value after the <ph id="ph2">`Load`</ph> method has completed.</source>
          <target state="translated">このテーブル内の各セルでは、現在と元の行に、フィールドの値を説明と共に、<ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph>後の値の<ph id="ph2">`Load`</ph>メソッドが完了します。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Existing DataRowState</source>
          <target state="translated">既存の DataRowState</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Upsert</source>
          <target state="translated">Upsert</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>OverwriteChanges</source>
          <target state="translated">OverwriteChanges</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>PreserveChanges (Default behavior)</source>
          <target state="translated">PreserveChanges (既定の動作)</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Added</source>
          <target state="translated">追加</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = -<ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">元 = -<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>追加 &gt;</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = Change</source>
          <target state="translated">RowAction 変更を =</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Modified</source>
          <target state="translated">変更日時</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = Change</source>
          <target state="translated">RowAction 変更を =</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction =ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>eleted</source>
          <target state="translated">オリジナル</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>(Load does not affect deleted rows)</source>
          <target state="translated">(負荷の動作に影響が削除された行ではなく)</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = ---</source>
          <target state="translated">現在 =--</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>削除 &gt;</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>(New row is added with the following characteristics)</source>
          <target state="translated">(次の特性を持つ新しい行が追加されます)</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>追加 &gt;</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = Add</source>
          <target state="translated">RowAction = 追加</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Undo delete and</source>
          <target state="translated">削除の取り消しと</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>削除 &gt;</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeOriginal</source>
          <target state="translated">RowAction ChangeOriginal を =</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Unchanged</source>
          <target state="translated">Unchanged</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>既存 &gt;</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>If new value is the same as the existing value then</source>
          <target state="translated">新しい値が同じ場合、既存の値として、</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = Nothing</source>
          <target state="translated">RowAction = なし</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Else</source>
          <target state="translated">Else</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更 &gt;</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = Change</source>
          <target state="translated">RowAction 変更を =</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Not present)</source>
          <target state="translated">存在しません)</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>不可 &gt;</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>追加 &gt;</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = Add</source>
          <target state="translated">RowAction = 追加</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">現在 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
          <target state="translated">元 =<ph id="ph1">\&lt;</ph>着信 &gt;</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
          <target state="translated">状態 =<ph id="ph1">\&lt;</ph>変更なし &gt;</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>RowAction = ChangeCurrentAndOriginal</source>
          <target state="translated">RowAction = ChangeCurrentAndOriginal</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Values in a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> can be constrained through use of properties such as <ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>.</source>
          <target state="translated">値が、<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>などのプロパティの使用を制限することができます<ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">`Load`</ph> method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドは、列のプロパティによって定義された動作と一貫性のある方法でこのような列を処理します。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The read only constraint on a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is applicable only for changes that occur in memory.</source>
          <target state="translated">読み取りのみ制約、<ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>はメモリに加えられた変更にのみ適用されます。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">`Load`</ph> method's overwrites the read-only column values, if needed.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッドの必要な場合は、読み取り専用の列の値が上書きされます。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>If you specify the OverwriteChanges or PreserveChanges options when calling the <ph id="ph1">`Load`</ph> method, then the assumption is made that the incoming data is coming from the <ph id="ph2">`DataTable`</ph>'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source.</source>
          <target state="translated">呼び出すときに、OverwriteChanges PreserveChanges オプションを指定するかどうか、<ph id="ph1">`Load`</ph>メソッド後、前提されてから受信したデータが送信されたこと、<ph id="ph2">`DataTable`</ph>のプライマリ データ ソース、および DataTable 変更を追跡し、データ ソースへの変更を反映することができます。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user.</source>
          <target state="translated">アップサート オプションを選択した場合、データがユーザーによって変更されるなど、中間層コンポーネントによって提供されるデータなど、セカンダリ データ ソースのいずれかから送信されたことと見なされます。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>In this case, the assumption is that the intent is to aggregate data from one or more data sources in the <ph id="ph1">`DataTable`</ph>, and then perhaps propagate the data back to the primary data source.</source>
          <target state="translated">ここでは、という前提は、目的の 1 つまたは複数のデータ ソースからデータを集計するには、 <ph id="ph1">`DataTable`</ph>、プライマリ データ ソースにデータをおそらく伝達します。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> parameter is used for determining the specific version of the row that is to be used for primary key comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph>が主キーの比較に使用される行のバージョンを特定のパラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The table below provides the details.</source>
          <target state="translated">次の表は、詳細を提供します。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Load option</source>
          <target state="translated">読み込みオプション</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>DataRow version used for primary key comparison</source>
          <target state="translated">主キーの比較に使用される DataRow バージョン</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original version, if it exists, otherwise Current version</source>
          <target state="translated">元のバージョンは存在する場合、それ以外の場合に現在のバージョン</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Original version, if it exists, otherwise Current version</source>
          <target state="translated">元のバージョンは存在する場合、それ以外の場合に現在のバージョン</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Current version, if it exists, otherwise Original version</source>
          <target state="translated">現在のバージョンが存在する場合、それ以外の場合の元のバージョン</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">`errorHandler`</ph> parameter is a <ph id="ph2">&lt;xref:System.Data.FillErrorEventHandler&gt;</ph> delegate that refers to a procedure that is called when an error occurs while loading data.</source>
          <target state="translated"><ph id="ph1">`errorHandler`</ph>パラメーターは、<ph id="ph2">&lt;xref:System.Data.FillErrorEventHandler&gt;</ph>データの読み込み中にエラーが発生したときに呼び出されるプロシージャを参照するデリゲート。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">&lt;xref:System.Data.FillErrorEventArgs&gt;</ph> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> being filled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.FillErrorEventArgs&gt;</ph>プロシージャに渡されたパラメーターが、エラーが発生した場合、データの現在の行に関する情報を取得できるようにするプロパティを提供し、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>入力中です。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</source>
          <target state="translated">このデリゲート メカニズムを使用して、シンプルな try/catch ブロックではなく、エラーを確認することができます状況の処理し、必要な場合の処理を続行します。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>The <ph id="ph1">&lt;xref:System.Data.FillErrorEventArgs&gt;</ph> parameter supplies a <ph id="ph2">&lt;xref:System.Data.FillErrorEventArgs.Continue%2A&gt;</ph> property: set this property to <ph id="ph3">`true`</ph> to indicate that you have handled the error and wish to continue processing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.FillErrorEventArgs&gt;</ph>パラメーターにより指定、<ph id="ph2">&lt;xref:System.Data.FillErrorEventArgs.Continue%2A&gt;</ph>プロパティ: このプロパティを設定<ph id="ph3">`true`</ph>エラーを処理され、処理を続行することを示します。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Set the property to <ph id="ph1">`false`</ph> to indicate that you wish to halt processing.</source>
          <target state="translated">プロパティを設定<ph id="ph1">`false`</ph>処理を停止することを示すためにします。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
          <source>Be aware that setting the property to <ph id="ph1">`false`</ph> causes the code that triggered the problem to throw an exception.</source>
          <target state="translated">注意してそのプロパティを設定<ph id="ph1">`false`</ph>によって、例外をスローする問題を引き起こしたコード。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Finds and updates a specific row.</source>
          <target state="translated">特定の行を検索し、更新します。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>If no matching row is found, a new row is created using the given values.</source>
          <target state="translated">一致する行が見つからない場合は、指定した値を使用して新しい行が作成されます。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>An array of values used to create the new row.</source>
          <target state="translated">新しい行の作成に使用する値の配列。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to accept changes; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">変更を受け入れる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>Finds and updates a specific row.</source>
          <target state="translated">特定の行を検索し、更新します。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>If no matching row is found, a new row is created using the given values.</source>
          <target state="translated">一致する行が見つからない場合は、指定した値を使用して新しい行が作成されます。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> method takes an array of values and finds the matching value(s) in the primary key column(s).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph>メソッドは値の配列を受け取り、主キー列内の一致する値を検索します。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>If a column has a default value, pass a null value in the array to set the default value for that column.</source>
          <target state="translated">列に既定値がある場合は、その列の既定値を設定する配列に null の値を渡します。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>Similarly, if a column has its <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> property set to true, pass a null value in the array to set the automatically generated value for the row.</source>
          <target state="translated">同様に、列にある場合、<ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>プロパティが自動的に生成された行の値を設定する配列に null 値を渡してを真に設定します。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>If the <ph id="ph1">`fAcceptChanges`</ph> parameter is <ph id="ph2">`true`</ph> or not specified, the new data is added and then <ph id="ph3">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> is called to accept all changes in the <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>; if the argument is <ph id="ph5">`false`</ph>, newly added rows are marked as insertions, and changes to existing rows are marked as modifications.</source>
          <target state="translated">場合、<ph id="ph1">`fAcceptChanges`</ph>パラメーターは<ph id="ph2">`true`</ph>指定しないと、新しいデータが追加またはし<ph id="ph3">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph>内のすべての変更を反映するために呼び出される、<ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>以外の場合は、引数が<ph id="ph5">`false`</ph>、新しく追加された行が挿入、としてマークされ、既存の行への変更が変更としてマークされています。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>Exceptions can also occur during either a <ph id="ph1">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event.</source>
          <target state="translated">例外はいずれかの中にも発生する、<ph id="ph1">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph>または<ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>If an exception occurs, the row is not added to the table.</source>
          <target state="translated">例外が発生する場合、テーブルに行は追加されません。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>Use <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph>と共に<ph id="ph2">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> method to attempt to find a row.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph>行を検索しようとするメソッド。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>If no such row is found, the values are used to create a new row.</source>
          <target state="translated">このような行が見つからない場合、値は、新しい行の作成に使用されます。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>The array is larger than the number of columns in the table.</source>
          <target state="translated">配列がテーブルの列数より大きいです。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>A value doesn't match its respective column type.</source>
          <target state="translated">値が各列の型と一致していません。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>Adding the row invalidates a constraint.</source>
          <target state="translated">この行を追加すると、制約が無効になります。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
          <source>Attempting to put a null in a column where <ph id="ph1">&lt;see cref="P:System.Data.DataColumn.AllowDBNull" /&gt;</ph> is false.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Data.DataColumn.AllowDBNull" /&gt;</ph> が false である列に null を格納しようとしています。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>An array of values used to create the new row.</source>
          <target state="translated">新しい行の作成に使用する値の配列。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>Used to determine how the array values are applied to the corresponding values in an existing row.</source>
          <target state="translated">配列値を既存の行にある対応する値に適用する方法を決定するために使用します。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>Finds and updates a specific row.</source>
          <target state="translated">特定の行を検索し、更新します。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>If no matching row is found, a new row is created using the given values.</source>
          <target state="translated">一致する行が見つからない場合は、指定した値を使用して新しい行が作成されます。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> method takes an array of values and finds the matching value(s) in the primary key column(s).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph>メソッドは値の配列を受け取り、主キー列内の一致する値を検索します。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>If a column has a default value, pass a null value in the array to set the default value for that column.</source>
          <target state="translated">列に既定値がある場合は、その列の既定値を設定する配列に null の値を渡します。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>Similarly, if a column has its <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> property set to true, pass a null value in the array to set the automatically generated value for the row.</source>
          <target state="translated">同様に、列にある場合、<ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>プロパティが自動的に生成された行の値を設定する配列に null 値を渡してを真に設定します。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>The value of the <ph id="ph1">`loadOption`</ph> parameter is used to determine how the values in the array are applied to an existing row.</source>
          <target state="translated">値、<ph id="ph1">`loadOption`</ph>配列内の値が既存の行に適用する方法を決定するパラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>For example, if <ph id="ph1">`loadOption`</ph> is set to <ph id="ph2">`OverwriteChanges`</ph>, the <ph id="ph3">`Original`</ph> and <ph id="ph4">`Current`</ph> values of each column are replaced with the values in the incoming row and the <ph id="ph5">`RowState`</ph> property is set to <ph id="ph6">`Unchanged`</ph>.</source>
          <target state="translated">たとえば場合、<ph id="ph1">`loadOption`</ph>に設定されている<ph id="ph2">`OverwriteChanges`</ph>、<ph id="ph3">`Original`</ph>と<ph id="ph4">`Current`</ph>各列の値は、受信した行の値に置き換えられますと<ph id="ph5">`RowState`</ph>プロパティに設定されている<ph id="ph6">`Unchanged`</ph>です。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>Exceptions can also occur during either a <ph id="ph1">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event.</source>
          <target state="translated">例外はいずれかの中にも発生する、<ph id="ph1">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph>または<ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>If an exception occurs, the row is not added to the table.</source>
          <target state="translated">例外が発生する場合、テーブルに行は追加されません。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
          <source>Use <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph>と共に<ph id="ph2">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.Locale">
          <source>Gets or sets the locale information used to compare strings within the table.</source>
          <target state="translated">テーブル内の文字列の比較に使用するロケール情報を取得または設定します。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Locale">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> that contains data about the user's machine locale.</source>
          <target state="translated">ユーザーのコンピューターのロケールについてのデータが格納されている <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Locale">
          <source>The default is the <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> object's <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> (returned by the <ph id="ph3">&lt;see cref="P:System.Data.DataSet.Locale" /&gt;</ph> property) to which the <ph id="ph4">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> belongs; if the table doesn't belong to a <ph id="ph5">&lt;see cref="T:System.Data.DataSet" /&gt;</ph>, the default is the current system <ph id="ph6">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> が属する <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> オブジェクトの (<ph id="ph3">&lt;see cref="P:System.Data.DataSet.Locale" /&gt;</ph> プロパティによって返される) <ph id="ph4">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> です。テーブルが <ph id="ph5">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> に属さない場合、既定値は現在のシステムの <ph id="ph6">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Locale">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> represents the software preferences of a particular culture or community.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>特定のカルチャまたはコミュニティのソフトウェアの設定を表します。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Locale">
          <source>When used for string comparisons, the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> affects sorting, comparisons, and filtering.</source>
          <target state="translated">文字列比較に使用する場合、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>並べ替え、比較、およびフィルター処理に影響を与えます。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Locale">
          <source>In columns that contain expressions, the <ph id="ph1">&lt;xref:System.StringComparison.InvariantCulture&gt;</ph> is used.</source>
          <target state="translated">式を含む列で、<ph id="ph1">&lt;xref:System.StringComparison.InvariantCulture&gt;</ph>を使用します。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Locale">
          <source>The <ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture&gt;</ph> is ignored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture&gt;</ph>は無視されます。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Locale">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> through the <ph id="ph2">&lt;xref:System.Data.DataTable.Locale%2A&gt;</ph> and prints the ISO language name.</source>
          <target state="translated">次の例のセット、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>を通じて、 <ph id="ph2">&lt;xref:System.Data.DataTable.Locale%2A&gt;</ph> ISO 言語の名前を出力します。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Merge the specified <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with the current <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を現在の <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> とマージします。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">`Merge`</ph> method is used to merge two <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects that have largely similar schemas.</source>
          <target state="translated"><ph id="ph1">`Merge`</ph>メソッドを使用して 2 つのマージ<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>ほぼ同じスキーマを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションに既存のデータ ソースから最新の変更を組み込む<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>This allows the client application to have a refreshed <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>データ ソースから最新データを使用します。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The merge operation takes into account only the original table, and the table to be merged.</source>
          <target state="translated">マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Child tables are not affected or included.</source>
          <target state="translated">子テーブルがない影響を受けるか、含まれています。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</source>
          <target state="translated">テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The following console application demonstrates the behavior of the <ph id="ph1">`missingSchemaAction`</ph> parameter of the <ph id="ph2">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method.</source>
          <target state="translated">次のコンソール アプリケーションの動作を示す、<ph id="ph1">`missingSchemaAction`</ph>のパラメーター、<ph id="ph2">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>This example creates two versions of the same table, modifying the schema for the second version.</source>
          <target state="translated">この例では、2 番目のバージョンのスキーマを変更する、同じテーブルの 2 つのバージョンを作成します。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The code then attempts to merge the second table into the first.</source>
          <target state="translated">コードは、最初に 2 番目のテーブルをマージを試みます。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>This example shows how to use one of the overloaded versions of Merge.</source>
          <target state="translated">この例では、マージのオーバー ロードされたバージョンのいずれかを使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For other examples that might be available, see the individual overload topics.</source>
          <target state="translated">使用可能な可能性のあるその他の例は、個々 のオーバー ロードのトピックを参照してください。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> to be merged with the current <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> とマージする <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>Merge the specified <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with the current <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を現在の <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> とマージします。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>The Merge method is used to merge two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects that have largely similar schemas.</source>
          <target state="translated">2 をマージするマージ メソッドが使用される<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>ほぼ同じスキーマを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションに既存のデータ ソースから最新の変更を組み込む<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>This allows the client application to have a refreshed <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>データ ソースから最新データを使用します。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>The merge operation takes into account only the original table, and the table to be merged.</source>
          <target state="translated">マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>Child tables are not affected or included.</source>
          <target state="translated">子テーブルがない影響を受けるか、含まれています。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</source>
          <target state="translated">テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>The <ph id="ph1">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Merge`</ph>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および最後に、既存の更新を含むプロシージャの最後に<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>When performing a merge, changes made to the existing data before the merge are preserved by default during the merge operation.</source>
          <target state="translated">マージを実行するには、マージする前に、既存のデータに加えられた変更は、マージ操作中に既定では保持されます。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the <ph id="ph1">`preserveChanges`</ph> parameter.</source>
          <target state="translated">開発者は、このメソッドを呼び出して他の 2 つのオーバー ロードのいずれか、false 値を指定してこの動作を変更することができます、<ph id="ph1">`preserveChanges`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために通常です。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method is first invoked.</source>
          <target state="translated">このシナリオでは、<ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph>メソッドが最初に呼び出されます。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>That method returns a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> optimized for validating and merging.</source>
          <target state="translated">2 番目に返します<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>検証とマージ用に最適化されています。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>This second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object contains only the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">この秒<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクトにのみが含まれています、 <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> 、元のサブセットの結果として得られる、変更されたオブジェクト<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>This subset is generally smaller and thus more efficiently passed back to a middle tier component.</source>
          <target state="translated">このサブセットは通常小さくより効率的に渡されます中間層コンポーネントに戻す。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>The middle tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>The middle tier can then send back either a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> can be merged back into the client application's original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> with the <ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>クライアント アプリケーションの元にマージできます<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>で、<ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>When merging a new source <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> into the target, any source rows with a <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph3">`Unchanged`</ph>, <ph id="ph4">`Modified`</ph>, or <ph id="ph5">`Deleted`</ph>, is matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、ターゲットに任意のソース行、<ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>の値<ph id="ph3">`Unchanged`</ph>、 <ph id="ph4">`Modified`</ph>、または<ph id="ph5">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致します。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>Source rows with a <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">ソースの行を<ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を持つ新しい対象行と照合されます。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>The following console application creates a simple <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and adds data to the table.</source>
          <target state="translated">次のコンソール アプリケーションを作成、単純な<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>テーブルにデータを追加します。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>The example then creates a copy of the table, adding rows to the copy.</source>
          <target state="translated">例は、コピーする行の追加、テーブルのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable)">
          <source>Finally, the example calls the <ph id="ph1">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method to merge the data in the second table with the data in the first table.</source>
          <target state="translated">最後に、この例では、<ph id="ph1">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph>メソッドの最初のテーブルのデータが 2 番目のテーブル データをマージします。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="DataTable" /&gt;</ph> to be merged with the current <ph id="ph2">&lt;see langword="DataTable" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="DataTable" /&gt;</ph> とマージする <ph id="ph2">&lt;see langword="DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, to preserve changes in the current <ph id="ph2">&lt;see langword="DataTable" /&gt;</ph>; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.<ph id="ph4">&lt;see langword="" /&gt;</ph></source>
          <target state="translated">現在の <ph id="ph2">&lt;see langword="DataTable" /&gt;</ph> に対して行われた変更を保持するには <ph id="ph1">&lt;see langword="true" /&gt;</ph>。保持しない場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。<ph id="ph4">&lt;see langword="" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>Merge the specified <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with the current <ph id="ph2">&lt;see langword="DataTable" /&gt;</ph>, indicating whether to preserve changes in the current <ph id="ph3">&lt;see langword="DataTable" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を現在の <ph id="ph2">&lt;see langword="DataTable" /&gt;</ph> とマージし、現在の <ph id="ph3">&lt;see langword="DataTable" /&gt;</ph> の変更を保持するかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>The Merge method is used to merge two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects that have largely similar schemas.</source>
          <target state="translated">2 をマージするマージ メソッドが使用される<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>ほぼ同じスキーマを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションに既存のデータ ソースから最新の変更を組み込む<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>This allows the client application to have a refreshed <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>データ ソースから最新データを使用します。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>The merge operation takes into account only the original table, and the table to be merged.</source>
          <target state="translated">マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>Child tables are not affected or included.</source>
          <target state="translated">子テーブルがない影響を受けるか、含まれています。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</source>
          <target state="translated">テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>The <ph id="ph1">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Merge`</ph>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および最後に、既存の更新を含むプロシージャの最後に<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the <ph id="ph1">`preserveChanges`</ph> parameter.</source>
          <target state="translated">マージを実行するには、マージする前に、既存のデータに加えられた変更を保持しつつマージ操作中に、開発者が false を指定しない限り、<ph id="ph1">`preserveChanges`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>If the <ph id="ph1">`preserveChanges`</ph> parameter is set to <ph id="ph2">`true`</ph>, incoming values do not overwrite existing values in the Current row version of the existing row.</source>
          <target state="translated">場合、<ph id="ph1">`preserveChanges`</ph>にパラメーターが設定されている<ph id="ph2">`true`</ph>、入力方向の値は、既存の行の現在の行バージョンの既存の値を上書きしません。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>If the <ph id="ph1">`preserveChanges`</ph> parameter is set to <ph id="ph2">`false`</ph>, incoming values do overwrite the existing values in the Current row version of the existing row.</source>
          <target state="translated">場合、<ph id="ph1">`preserveChanges`</ph>にパラメーターが設定されている<ph id="ph2">`false`</ph>、入力方向の値は、既存の行の現在の行バージョンで既存の値を上書きしないでください。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>For more information about row versions, see <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>.</source>
          <target state="translated">行のバージョンの詳細については、次を参照してください。<bpt id="p1">[</bpt>行の状態と行のバージョン<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために通常です。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method is first invoked.</source>
          <target state="translated">このシナリオでは、<ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph>メソッドが最初に呼び出されます。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>That method returns a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> optimized for validating and merging.</source>
          <target state="translated">2 番目に返します<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>検証とマージ用に最適化されています。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>This second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object contains only the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">この秒<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクトにのみが含まれています、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph>、元のサブセットの結果として得られる、変更されたオブジェクト<ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component.</source>
          <target state="translated">このサブセットは一般に小さいと、したがってこのサブセットは、中間層コンポーネントに渡されますより効率的にします。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>The middle tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>The middle tier can then send back either a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> can be merged back into the client application's original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> with the <ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>クライアント アプリケーションの元にマージできます<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>で、<ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>When merging a new source <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> into the target, any source rows with a <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph3">`Unchanged`</ph>, <ph id="ph4">`Modified`</ph>, or <ph id="ph5">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、ターゲットに任意のソース行、<ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>の値<ph id="ph3">`Unchanged`</ph>、 <ph id="ph4">`Modified`</ph>、または<ph id="ph5">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致しました。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>Source rows with a <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">ソースの行を<ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を持つ新しい対象行と照合されます。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>The following console application creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> containing rows, modifies some of the data in those rows, and attempts to merge data from a different <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションを作成、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> 、行を含む、それらの行のデータの一部を変更しを異なるデータをマージしようとしています。<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
          <source>The example demonstrates the different behaviors for the <ph id="ph1">`preserveChanges`</ph> parameter.</source>
          <target state="translated">動作の違いを示します、<ph id="ph1">`preserveChanges`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> to be merged with the current <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> とマージする <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, to preserve changes in the current <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="true" /&gt;</ph> に対して行われた変更を保持するには <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。保持しない場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.MissingSchemaAction" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.MissingSchemaAction" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>Merge the specified <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> with the current <ph id="ph2">&lt;see langword="DataTable" /&gt;</ph>, indicating whether to preserve changes and how to handle missing schema in the current <ph id="ph3">&lt;see langword="DataTable" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を現在の <ph id="ph2">&lt;see langword="DataTable" /&gt;</ph> とマージして、現在の <ph id="ph3">&lt;see langword="DataTable" /&gt;</ph> の変更を保持するかどうかを指定し、さらに欠けているスキーマの処理方法を指定します。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>The <ph id="ph1">`Merge`</ph> method is used to merge two <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects that have largely similar schemas.</source>
          <target state="translated"><ph id="ph1">`Merge`</ph>メソッドを使用して 2 つのマージ<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>ほぼ同じスキーマを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションに既存のデータ ソースから最新の変更を組み込む<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>This allows the client application to have a refreshed <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>データ ソースから最新データを使用します。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>The merge operation takes into account only the original table, and the table to be merged.</source>
          <target state="translated">マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>Child tables are not affected or included.</source>
          <target state="translated">子テーブルがない影響を受けるか、含まれています。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</source>
          <target state="translated">テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>The <ph id="ph1">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Merge`</ph>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および最後に、既存の更新を含むプロシージャの最後に<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the <ph id="ph1">`preserveChanges`</ph> parameter.</source>
          <target state="translated">マージを実行するには、マージする前に、既存のデータに加えられた変更を保持しつつマージ操作中に、開発者が false を指定しない限り、<ph id="ph1">`preserveChanges`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>If the <ph id="ph1">`preserveChanges`</ph> parameter is set to <ph id="ph2">`true`</ph>, incoming values do not overwrite existing values in the Current row version of the existing row.</source>
          <target state="translated">場合、<ph id="ph1">`preserveChanges`</ph>にパラメーターが設定されている<ph id="ph2">`true`</ph>、入力方向の値は、既存の行の現在の行バージョンの既存の値を上書きしません。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>If the <ph id="ph1">`preserveChanges`</ph> parameter is set to <ph id="ph2">`false`</ph>, incoming values do overwrite the existing values in the Current row version of the existing row.</source>
          <target state="translated">場合、<ph id="ph1">`preserveChanges`</ph>にパラメーターが設定されている<ph id="ph2">`false`</ph>、入力方向の値は、既存の行の現在の行バージョンで既存の値を上書きしないでください。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>For more information about row versions, see <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>.</source>
          <target state="translated">行のバージョンの詳細については、次を参照してください。<bpt id="p1">[</bpt>行の状態と行のバージョン<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために通常です。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method is first invoked.</source>
          <target state="translated">このシナリオでは、<ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph>メソッドが最初に呼び出されます。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>That method returns a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> optimized for validating and merging.</source>
          <target state="translated">2 番目に返します<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>検証とマージ用に最適化されています。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>This second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object contains only the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">この秒<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクトにのみが含まれています、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>と<ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph>、元のサブセットの結果として得られる、変更されたオブジェクト<ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component.</source>
          <target state="translated">このサブセットは一般に小さいと、したがってこのサブセットは、中間層コンポーネントに渡されますより効率的にします。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>The middle tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>The middle tier can then send back either a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> can be merged back into the client application's original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> with the <ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>クライアント アプリケーションの元にマージできます<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>で、<ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>When the <ph id="ph1">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects are compared, because it is possible that the schemas may have been changed.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph>メソッドは、2 つのスキーマの<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>するスキーマが変更された可能性があるため、オブジェクトを比較します。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
          <target state="translated">たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>If the source <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> contains schema elements (added <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph3">`missingSchemaAction`</ph> argument to <ph id="ph4">`MissingSchemaAction.Add`</ph>.</source>
          <target state="translated">場合、ソース<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマ要素が含まれています (追加<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、<ph id="ph3">`missingSchemaAction`</ph>引数<ph id="ph4">`MissingSchemaAction.Add`</ph>です。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>In that case, the merged <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> contains the added schema and data.</source>
          <target state="translated">その場合、統合<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>追加されたスキーマとデータが含まれています。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>After merging schemas, the data is merged.</source>
          <target state="translated">スキーマをマージするには、後に、データがマージされます。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>When merging a new source <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> into the target, any source rows with a <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph3">`Unchanged`</ph>, <ph id="ph4">`Modified`</ph>, or <ph id="ph5">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、ターゲットに任意のソース行、<ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>の値<ph id="ph3">`Unchanged`</ph>、 <ph id="ph4">`Modified`</ph>、または<ph id="ph5">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致しました。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>Source rows with a <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">ソースの行を<ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を持つ新しい対象行と照合されます。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>The following console application demonstrates the behavior of the <ph id="ph1">`missingSchemaAction`</ph> parameter of the <ph id="ph2">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method.</source>
          <target state="translated">次のコンソール アプリケーションの動作を示す、<ph id="ph1">`missingSchemaAction`</ph>のパラメーター、<ph id="ph2">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>This example creates two versions of the same table, modifying the schema for the second version.</source>
          <target state="translated">この例では、2 番目のバージョンのスキーマを変更する、同じテーブルの 2 つのバージョンを作成します。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
          <source>The code then attempts to merge the second table into the first.</source>
          <target state="translated">コードは、最初に 2 番目のテーブルをマージを試みます。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.MinimumCapacity">
          <source>Gets or sets the initial starting size for this table.</source>
          <target state="translated">このテーブルの初期開始サイズを取得または設定します。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.MinimumCapacity">
          <source>The initial starting size in rows of this table.</source>
          <target state="translated">この行の初期開始サイズ。行数で表します。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.MinimumCapacity">
          <source>The default is 50.</source>
          <target state="translated">既定値は 50 です。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.MinimumCapacity">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.MinimumCapacity%2A&gt;</ph> allows the system to create an appropriate set of resources before fetching data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.MinimumCapacity%2A&gt;</ph>により、システムはデータのフェッチする前に、適切なリソースのセットを作成します。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.MinimumCapacity">
          <source>In a situation when performance is critical, setting this property can optimize performance.</source>
          <target state="translated">状況でパフォーマンスが重要な場合は、このプロパティの設定パフォーマンスを最適化できます。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.MinimumCapacity">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Data.DataTable.MinimumCapacity%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">次の例のセット、<ph id="ph1">&lt;xref:System.Data.DataTable.MinimumCapacity%2A&gt;</ph>の<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.Namespace">
          <source>Gets or sets the namespace for the XML representation of the data stored in the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に格納されているデータの XML 表現の名前空間を取得または設定します。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Namespace">
          <source>The namespace of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の名前空間。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.NewRow">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> with the same schema as the table.</source>
          <target state="translated">テーブルと同じスキーマで新しい <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.NewRow">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> with the same schema as the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> と同じスキーマを持つ <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.NewRow">
          <source>You must use the <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method to create new <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects with the same schema as the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">使用する必要があります、<ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>メソッドを新規作成<ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>と同じスキーマでオブジェクト、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.NewRow">
          <source>After creating a <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>, you can add it to the <ph id="ph2">&lt;xref:System.Data.DataRowCollection&gt;</ph>, through the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph> object's <ph id="ph4">&lt;xref:System.Data.DataTable.Rows%2A&gt;</ph> property.</source>
          <target state="translated">作成した後、<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>に追加することができます、<ph id="ph2">&lt;xref:System.Data.DataRowCollection&gt;</ph>して、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクトの<ph id="ph4">&lt;xref:System.Data.DataTable.Rows%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.NewRow">
          <source>When you use <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> to create new rows, the rows must be added to or deleted from the data table before you call <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>.</source>
          <target state="translated">使用すると<ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>を新しい行を作成するには、行必要がありますに追加されたりを呼び出す前に、データ テーブルから削除<ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.NewRow">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, adds two <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects that determine the table's schema, and creates several new <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> objects using the <ph id="ph4">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method.</source>
          <target state="translated">次の例を作成、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、2 つ追加<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>テーブルのスキーマを決定し、いくつかを新たに作成するオブジェクト<ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph>オブジェクトを使用して、<ph id="ph4">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.NewRow">
          <source>Those <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> objects are then added to the <ph id="ph2">&lt;xref:System.Data.DataRowCollection&gt;</ph> using the <ph id="ph3">&lt;xref:System.Data.DataRowCollection.Add%2A&gt;</ph> method.</source>
          <target state="translated">もの<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>にオブジェクトを追加し、<ph id="ph2">&lt;xref:System.Data.DataRowCollection&gt;</ph>を使用して、<ph id="ph3">&lt;xref:System.Data.DataRowCollection.Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.NewRowArray(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value that describes the size of the array.</source>
          <target state="translated">配列のサイズを表す <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.NewRowArray(System.Int32)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> の配列を返します。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.NewRowArray(System.Int32)">
          <source>The new array.</source>
          <target state="translated">新しい配列。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRowBuilder" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRowBuilder" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
          <source>Creates a new row from an existing row.</source>
          <target state="translated">既存の行から新しい行を作成します。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> derived class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> の派生クラス。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataColumnChangeEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataColumnChangeEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.ColumnChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.ColumnChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataColumnChangeEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataColumnChangeEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.ColumnChanging" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.ColumnChanging" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> being removed.</source>
          <target state="translated">削除する <ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> that a <ph id="ph2">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> is being removed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> が削除されることを <ph id="ph2">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> に通知します。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRowChangeEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataRowChangeEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.RowChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.RowChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRowChangeEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataRowChangeEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.RowChanging" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.RowChanging" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRowChangeEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataRowChangeEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.RowDeleted" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.RowDeleted" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRowChangeEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataRowChangeEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.RowDeleting" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.RowDeleting" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataTableClearEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataTableClearEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.TableCleared" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.TableCleared" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
          <source>Raises the <ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph> event, which is fired immediately after all rows have been successfully cleared but before the <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> method returns control back to the caller.</source>
          <target state="translated">発生させる、 <ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph> 、すべての行が正常にクリアされましたその前に直後後に発生するイベント、<ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>メソッドが呼び出し元にコントロールを返します。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataTableClearEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataTableClearEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.TableClearing" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.TableClearing" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
          <source>Raises the <ph id="ph1">&lt;xref:System.Data.DataTable.TableClearing&gt;</ph> event, which is fired before processing of the <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> operation begins.</source>
          <target state="translated">発生させます、<ph id="ph1">&lt;xref:System.Data.DataTable.TableClearing&gt;</ph>の処理の前に発生するイベント、<ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>操作を開始します。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataTableNewRowEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataTableNewRowEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Data.DataTable.TableNewRow" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.DataTable.TableNewRow" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
          <source>Raises the <ph id="ph1">&lt;xref:System.Data.DataTable.TableNewRow&gt;</ph> event, which fires after a new <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> has been created using <ph id="ph3">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>.</source>
          <target state="translated">発生させる、<ph id="ph1">&lt;xref:System.Data.DataTable.TableNewRow&gt;</ph>新しいの後に発生するイベント<ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>を使用して作成された<ph id="ph3">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">概要については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.ParentRelations">
          <source>Gets the collection of parent relations for this <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の親リレーションシップのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ParentRelations">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRelationCollection" /&gt;</ph> that contains the parent relations for the table.</source>
          <target state="translated">テーブルの親リレーションを格納している <ph id="ph1">&lt;see cref="T:System.Data.DataRelationCollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ParentRelations">
          <source>An empty collection is returned if no <ph id="ph1">&lt;see cref="T:System.Data.DataRelation" /&gt;</ph> objects exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRelation" /&gt;</ph> オブジェクトが存在しない場合、空のコレクションが返されます。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ParentRelations">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataTable.ParentRelations%2A&gt;</ph> property to return each parent <ph id="ph2">&lt;xref:System.Data.DataRelation&gt;</ph> in a <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Data.DataTable.ParentRelations%2A&gt;</ph>それぞれの親を取得するプロパティ<ph id="ph2">&lt;xref:System.Data.DataRelation&gt;</ph>で、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ParentRelations">
          <source>Each relation is then used as an argument in the <ph id="ph1">&lt;xref:System.Data.DataRow.GetParentRows%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> to return an array of rows.</source>
          <target state="translated">引数としてそれぞれのリレーションを使用して、<ph id="ph1">&lt;xref:System.Data.DataRow.GetParentRows%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>行の配列を返します。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.ParentRelations">
          <source>The value of each column in the row is then printed.</source>
          <target state="translated">行の各列の値が出力されます。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.Prefix">
          <source>Gets or sets the namespace for the XML representation of the data stored in the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に格納されているデータの XML 表現の名前空間を取得または設定します。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Prefix">
          <source>The prefix of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> のプリフィックス。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.PrimaryKey">
          <source>Gets or sets an array of columns that function as primary keys for the data table.</source>
          <target state="translated">このデータ テーブルの主キーとして機能する列の配列を取得または設定します。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.PrimaryKey">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataColumn" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.PrimaryKey">
          <source>The primary key of a table must be unique to identify the record in the table.</source>
          <target state="translated">テーブルの主キーは、テーブル内のレコードを識別する一意である必要があります。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.PrimaryKey">
          <source>It's also possible to have a table with a primary key made up of two or more columns.</source>
          <target state="translated">2 つ以上の列から成る主キーを持つテーブルがあることもできます。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.PrimaryKey">
          <source>This occurs when a single column can't contain enough unique values.</source>
          <target state="translated">これは、1 つの列が一意の値を含めることはできませんと発生します。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.PrimaryKey">
          <source>For example, a two column primary key might consist of a "FirstName" and "LastName" column.</source>
          <target state="translated">など、2 つの列の主キーは、"FirstName"と"LastName"列ので構成されている可能性があります。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.PrimaryKey">
          <source>Because primary keys can be made up of more than one column, the <ph id="ph1">&lt;xref:System.Data.DataTable.PrimaryKey%2A&gt;</ph> property consists of an array of <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects.</source>
          <target state="translated">主キーは、1 つ以上の列確立できなかったため、<ph id="ph1">&lt;xref:System.Data.DataTable.PrimaryKey%2A&gt;</ph>プロパティの配列から成る<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.PrimaryKey">
          <source>The first example shows how to return the primary key columns for a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> displayed in a <ph id="ph2">`DataGrid`</ph>.</source>
          <target state="translated">最初の例の主キー列を返す方法を示しています、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>に表示される、<ph id="ph2">`DataGrid`</ph>です。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.PrimaryKey">
          <source>The second example demonstrates how to set the primary key columns for a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">2 番目の例は、の主キー列を設定する方法を示します、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.PrimaryKey">
          <source>The key is a foreign key.</source>
          <target state="translated">キーが外部キーです。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Reads XML schema and data into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">XML スキーマとデータを <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントから一方、<ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを読み取ります。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that include the <ph id="ph2">`XmlReadMode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>を含むオーバー ロード、<ph id="ph2">`XmlReadMode`</ph>パラメーター、その値に設定および<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>An object that derives from <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> から派生するオブジェクト。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>Reads XML schema and data into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、XML スキーマとデータを <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.XmlReadMode" /&gt;</ph> used to read the data.</source>
          <target state="translated">データを読み込むために使用する <ph id="ph1">&lt;see cref="T:System.Data.XmlReadMode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and its descendents are loaded with the data from the supplied <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>とその子孫が、指定されたデータで読み込まれる<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The behavior of this method is identical to that of the <ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType&gt;</ph> method, except that in this case, data is loaded only for the current table and its descendants.</source>
          <target state="translated">このメソッドの動作は次のものと同じ、<ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType&gt;</ph>をここで、データ以外のメソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントから一方、<ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを読み取ります。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The <ph id="ph1">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph2">`DataColumn`</ph> or <ph id="ph3">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph2">`DataColumn`</ph>または<ph id="ph3">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> containing two columns and ten rows.</source>
          <target state="translated">次の例を作成、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> 2 つの列と 10 行を含むです。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The example writes the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> schema and data to a memory stream, by invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマとデータを呼び出すことによって、メモリ ストリーム、<ph id="ph2">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
          <source>The example creates a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and calls the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method to fill it with schema and data.</source>
          <target state="translated">作成、2 番目の例では、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を呼び出すと、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドでスキーマおよびデータを設定します。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that will be used to read the data.</source>
          <target state="translated">データを読み込むために使用する <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>Reads XML schema and data into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、XML スキーマとデータを <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.XmlReadMode" /&gt;</ph> used to read the data.</source>
          <target state="translated">データを読み込むために使用する <ph id="ph1">&lt;see cref="T:System.Data.XmlReadMode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and its descendents are loaded with the data from the supplied <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>とその子孫が、指定されたデータで読み込まれる<ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The behavior of this method is identical to that of the <ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType&gt;</ph> method, except that in this case, data is loaded only for the current table and its descendants.</source>
          <target state="translated">このメソッドの動作は次のものと同じ、<ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType&gt;</ph>をここで、データ以外のメソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントから一方、<ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを読み取ります。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The <ph id="ph1">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph2">`DataColumn`</ph> or <ph id="ph3">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph2">`DataColumn`</ph>または<ph id="ph3">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> containing two columns and ten rows.</source>
          <target state="translated">次の例を作成、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> 2 つの列と 10 行を含むです。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The example writes the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> schema and data to a memory stream, by invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマとデータを呼び出すことによって、メモリ ストリーム、<ph id="ph2">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
          <source>The example creates a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and calls the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method to fill it with schema and data.</source>
          <target state="translated">作成、2 番目の例では、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を呼び出すと、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドでスキーマおよびデータを設定します。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The name of the file from which to read the data.</source>
          <target state="translated">データの読み取り元のファイルの名前。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>Reads XML schema and data into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> from the specified file.</source>
          <target state="translated">指定したファイルから、XML スキーマとデータを <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.XmlReadMode" /&gt;</ph> used to read the data.</source>
          <target state="translated">データを読み込むために使用する <ph id="ph1">&lt;see cref="T:System.Data.XmlReadMode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and its descendents are loaded with the data from the file named in the supplied <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>と、示されたという名前のファイルからのデータとその子孫が読み込まれる<ph id="ph2">&lt;xref:System.String&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The behavior of this method is identical to that of the <ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType&gt;</ph> method, except that in this case, data is loaded only for the current table and its descendants.</source>
          <target state="translated">このメソッドの動作は次のものと同じ、<ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType&gt;</ph>をここで、データ以外のメソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントから一方、<ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを読み取ります。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The <ph id="ph1">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph2">`DataColumn`</ph> or <ph id="ph3">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph2">`DataColumn`</ph>または<ph id="ph3">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> containing two columns and ten rows.</source>
          <target state="translated">次の例を作成、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> 2 つの列と 10 行を含むです。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The example writes the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> schema and data to disk.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマとデータをディスクにします。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.String)">
          <source>The example creates a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and calls the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method to fill it with schema and data.</source>
          <target state="translated">作成、2 番目の例では、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を呼び出すと、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドでスキーマおよびデータを設定します。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that will be used to read the data.</source>
          <target state="translated">データを読み込むために使用する <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>Reads XML Schema and Data into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、XML スキーマとデータを <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.XmlReadMode" /&gt;</ph> used to read the data.</source>
          <target state="translated">データを読み込むために使用する <ph id="ph1">&lt;see cref="T:System.Data.XmlReadMode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and its descendents are loaded with the data from the file named in the supplied <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>と、示されたという名前のファイルからのデータとその子孫が読み込まれる<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The behavior of this method is identical to that of the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method, except that in this case, data is loaded only for the current table and its descendants.</source>
          <target state="translated">このメソッドの動作は次のものと同じ、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>をここで、データ以外のメソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントから一方、<ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを読み取ります。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph2">`DataColumn`</ph> or <ph id="ph3">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph2">`DataColumn`</ph>または<ph id="ph3">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> containing two columns and ten rows.</source>
          <target state="translated">次の例を作成、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> 2 つの列と 10 行を含むです。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The example writes the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> schema and data to an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>スキーマとデータを<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
          <source>The example creates a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and calls the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method to fill it with schema and data from the <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> instance.</source>
          <target state="translated">作成、2 番目の例では、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を呼び出すと、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>メソッドがスキーマとデータを入力する、<ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Reads an XML schema into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated">XML スキーマを <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Use the <ph id="ph1">`ReadXmlSchema`</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">`ReadXmlSchema`</ph>のスキーマを作成する方法、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The XML schema is interpreted according to the XSD standard.</source>
          <target state="translated">XML スキーマは XSD 標準に従って解釈されます。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ReadXmlSchema`</ph>を呼び出す前にメソッドが呼び出され、通常、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>の塗りつぶしに使用するメソッド、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>The stream used to read the schema.</source>
          <target state="translated">スキーマを読み込むために使用するストリーム。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>Reads an XML schema into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified stream.</source>
          <target state="translated">指定したストリームを使用して、XML スキーマを <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>のスキーマを作成する方法、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>The XML schema is interpreted according to the XSD standard.</source>
          <target state="translated">XML スキーマは XSD 標準に従って解釈されます。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
          <target state="translated">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>No exception will be thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ReadXmlSchema`</ph>を呼び出す前にメソッドが呼び出され、通常、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>の塗りつぶしに使用するメソッド、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>To create a nested relation using XML schema, use implicit nested elements.</source>
          <target state="translated">XML スキーマを使用して入れ子にされたリレーションシップを作成するには、暗黙的な入れ子になった要素を使用します。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>You can also configure the nested relation to use explicit column names.</source>
          <target state="translated">明示的な列名を使用する入れ子にされたリレーションシップを構成することもできます。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</source>
          <target state="translated">要素は、対応するデータ テーブルを入れ子にされたリレーションシップに参加するために暗黙的に入れ子にする必要があります。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>The following console application creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, and writes the schema for that table to a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションを作成、新しい<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、し、そのテーブルのスキーマを書き込みます、<ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
          <source>Then, the example creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and reads its schema from the saved XML schema.</source>
          <target state="translated">例が新たに作成し、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>し、そのスキーマを保存済みの XML スキーマから読み取ります。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> used to read the schema information.</source>
          <target state="translated">スキーマ情報を読み込むために使用する <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>Reads an XML schema into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、XML スキーマを <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>のスキーマを作成する方法、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>The XML schema is interpreted according to the XSD standard.</source>
          <target state="translated">XML スキーマは XSD 標準に従って解釈されます。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
          <target state="translated">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>No exception will be thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ReadXmlSchema`</ph>を呼び出す前にメソッドが呼び出され、通常、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>の塗りつぶしに使用するメソッド、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>To create a nested relation using XML schema, use implicit nested elements.</source>
          <target state="translated">XML スキーマを使用して入れ子にされたリレーションシップを作成するには、暗黙的な入れ子になった要素を使用します。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>You can also reconfigure the nested relation to use explicit column names.</source>
          <target state="translated">また、明示的な列名を使用する入れ子にされたリレーションシップを再構成できます。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</source>
          <target state="translated">要素は、対応するデータ テーブルを入れ子にされたリレーションシップに参加するために暗黙的に入れ子にする必要があります。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>The following console application creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, and writes the schema for that table to a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションを作成、新しい<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、し、そのテーブルのスキーマを書き込みます、<ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
          <source>Then, the example creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and reads its schema from the saved XML schema, using a <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> (which inherits from <ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph>) as its source.</source>
          <target state="translated">例が新たに作成し、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を使用して、保存されている XML スキーマからそのスキーマを読み取ると、 <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> (から継承される<ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph>) のソースとして。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>The name of the file from which to read the schema information.</source>
          <target state="translated">スキーマ情報の読み取り元のファイルの名前。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>Reads an XML schema into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> from the specified file.</source>
          <target state="translated">指定したファイルから <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> に XML スキーマを読み込みます。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>のスキーマを作成する方法、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>The XML schema is interpreted according to the XSD standard.</source>
          <target state="translated">XML スキーマは XSD 標準に従って解釈されます。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
          <target state="translated">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>No exception will be thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">`DataTable`</ph>.</source>
          <target state="translated"><ph id="ph1">`ReadXmlSchema`</ph>を呼び出す前にメソッドが呼び出され、通常、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>の塗りつぶしに使用するメソッド、<ph id="ph3">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>To create a nested relation using XML schema, use implicit nested elements.</source>
          <target state="translated">XML スキーマを使用して入れ子にされたリレーションシップを作成するには、暗黙的な入れ子になった要素を使用します。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>You can also reconfigure the nested relation to use explicit column names.</source>
          <target state="translated">また、明示的な列名を使用する入れ子にされたリレーションシップを再構成できます。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</source>
          <target state="translated">要素は、対応するデータ テーブルを入れ子にされたリレーションシップに参加するために暗黙的に入れ子にする必要があります。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>The following console application creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, and writes the schema for that table to a file.</source>
          <target state="translated">次のコンソール アプリケーションを作成、新しい<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、し、そのテーブルのスキーマをファイルに書き込みます。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.String)">
          <source>Then, the example creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and reads its schema from the saved XML schema, using the file as its source.</source>
          <target state="translated">例が新たに作成し、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>し、そのソースとしてファイルを使用して、保存されている XML スキーマからそのスキーマを読み込みます。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> used to read the schema information.</source>
          <target state="translated">スキーマ情報を読み込むために使用する <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>Reads an XML schema into the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、XML スキーマを <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> に読み込みます。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>のスキーマを作成する方法、<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>The XML schema is interpreted according to the XSD standard.</source>
          <target state="translated">XML スキーマは XSD 標準に従って解釈されます。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
          <target state="translated">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>No exception will be thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ReadXmlSchema`</ph>を呼び出す前にメソッドが呼び出され、通常、<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>の塗りつぶしに使用するメソッド、<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>The way to create a nested relation using XML schema is to have implicit nested elements.</source>
          <target state="translated">XML スキーマを使用して入れ子にされたリレーションシップを作成する方法では、暗黙的な入れ子になった要素を持つです。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>Additionally, the nested relation could be re-wired, to use explicit column names.</source>
          <target state="translated">さらに、入れ子にされたリレーションシップは、再ワイヤード (有線)、明示的な列名を使用する可能性があります。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>It is mandatory for elements to be implicitly nested for the corresponding DataTables to participate in a nested relation.</source>
          <target state="translated">要素を暗黙的に入れ子にされたリレーションシップに参加する対応するデータ テーブルの入れ子にするために必須であります。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>The following console application creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, and writes the schema for that table to a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションを作成、新しい<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、し、そのテーブルのスキーマを書き込みます、<ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
          <source>Then, the example creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and reads its schema from the saved XML schema, using a <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> (which inherits from <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>) as its source.</source>
          <target state="translated">例が新たに作成し、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>を使用して、保存されている XML スキーマからそのスキーマを読み取ると、 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> (から継承される<ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>) のソースとして。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
          <source>Reads from an XML stream.</source>
          <target state="translated">XML ストリームから読み取ります。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.RejectChanges">
          <source>Rolls back all changes that have been made to the table since it was loaded, or the last time <ph id="ph1">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> was called.</source>
          <target state="translated">このテーブルを読み込むか、前回 <ph id="ph1">&lt;see cref="M:System.Data.DataTable.AcceptChanges" /&gt;</ph> を呼び出した以降にこのテーブルに対して行われたすべての変更をロールバックします。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.RejectChanges">
          <source>When <ph id="ph1">&lt;xref:System.Data.DataTable.RejectChanges%2A&gt;</ph> is called, any <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects that are still in edit-mode cancel their edits.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Data.DataTable.RejectChanges%2A&gt;</ph>が呼び出されると、いずれかの<ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>編集モードに残っているオブジェクトがそれらの編集をキャンセルします。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.RejectChanges">
          <source>New rows are removed.</source>
          <target state="translated">新しい行が削除されます。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.RejectChanges">
          <source>Rows with the <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> set to <ph id="ph2">`Modified`</ph> or <ph id="ph3">`Deleted`</ph> return back to their original state.</source>
          <target state="translated">行、 <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> 'éý'<ph id="ph2">`Modified`</ph>または<ph id="ph3">`Deleted`</ph>元の状態に戻り値。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.RejectChanges">
          <source>The following example makes several changes to a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, but rejects the changes by invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.RejectChanges%2A&gt;</ph> method.</source>
          <target state="translated">次の例は、いくつか変更を加える、 <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>、呼び出すことによって、変更を拒否したが、<ph id="ph2">&lt;xref:System.Data.DataTable.RejectChanges%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.RemotingFormat">
          <source>Gets or sets the serialization format.</source>
          <target state="translated">シリアル化形式を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.RemotingFormat">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.SerializationFormat" /&gt;</ph> enumeration specifying either <ph id="ph2">&lt;see langword="Binary" /&gt;</ph> or <ph id="ph3">&lt;see langword="Xml" /&gt;</ph> serialization.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="Binary" /&gt;</ph> シリアル化または <ph id="ph3">&lt;see langword="Xml" /&gt;</ph> シリアル化を指定する <ph id="ph1">&lt;see cref="T:System.Data.SerializationFormat" /&gt;</ph> 列挙体。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Reset">
          <source>Resets the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> to its original state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を元の状態にリセットします。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Reset">
          <source>Reset removes all data, indexes, relations, and columns of the table.</source>
          <target state="translated">テーブルのすべてのデータ、インデックス、リレーションシップ、および列の削除をリセットします。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Reset">
          <source>If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.</source>
          <target state="translated">DataSet に DataTable が含まれている場合は、テーブルをリセットした後も、テーブルは DataSet の一部です。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.RowChanged">
          <source>Occurs after a <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> has been changed successfully.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> が正常に変更された後に発生します。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.RowChanged">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable イベントの処理<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.RowChanging">
          <source>Occurs when a <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> is changing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> が変更されているときに発生します。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.RowChanging">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable イベントの処理<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.RowDeleted">
          <source>Occurs after a row in the table has been deleted.</source>
          <target state="translated">テーブル内の行が削除された後に発生します。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.RowDeleted">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable イベントの処理<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.RowDeleting">
          <source>Occurs before a row in the table is about to be deleted.</source>
          <target state="translated">テーブル内の行が削除される直前に発生します。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.RowDeleting">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable イベントの処理<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.Rows">
          <source>Gets the collection of rows that belong to this table.</source>
          <target state="translated">このテーブルに属する行のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataRowCollection" /&gt;</ph> that contains <ph id="ph2">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects; otherwise a null value if no <ph id="ph3">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRowCollection" /&gt;</ph> オブジェクトが格納されている <ph id="ph2">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>。<ph id="ph3">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトが存在しない場合は null 値。</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>To create a new <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>, you must use the <ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method to return a new object.</source>
          <target state="translated">新しい<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>、使用する必要があります、<ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>新しいオブジェクトを返すメソッド。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>Such an object is automatically configured according to the schema defined for the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> through its collection of <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects.</source>
          <target state="translated">このようなオブジェクトが自動的に構成に対して定義されているスキーマに従って、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>のコレクションを<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>After creating a new row and setting the values for each column in the row, add the row to the <ph id="ph1">&lt;xref:System.Data.DataRowCollection&gt;</ph> using the <ph id="ph2">`Add`</ph> method.</source>
          <target state="translated">を新しい行を作成し、行の各列の値を設定した後に行を追加、<ph id="ph1">&lt;xref:System.Data.DataRowCollection&gt;</ph>を使用して、<ph id="ph2">`Add`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>Each <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> in the collection represents a row of data in the table.</source>
          <target state="translated">各<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>コレクション内には、テーブル内のデータの行を表します。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>To commit a change to the value of a column in the row, you must invoke the <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> method.</source>
          <target state="translated">行内の列の値に変更をコミットするに呼び出す必要があります、<ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>The following shows two examples of returning and setting rows.</source>
          <target state="translated">設定する行を返し、2 つの例を次に示します。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>The first example uses the <ph id="ph1">&lt;xref:System.Data.DataTable.Rows%2A&gt;</ph> property and prints the value of each column for every row.</source>
          <target state="translated">最初の例では、<ph id="ph1">&lt;xref:System.Data.DataTable.Rows%2A&gt;</ph>プロパティのすべての行の各列の値に出力します。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>The second example uses the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object's <ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method to create a new <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> object with the schema of the <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">2 番目の例では、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクトの<ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>メソッドを作成、新しい<ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph>のスキーマとオブジェクト、<ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Rows">
          <source>After setting the row values, the row is added to the <ph id="ph1">&lt;xref:System.Data.DataRowCollection&gt;</ph> through the <ph id="ph2">`Add`</ph> method.</source>
          <target state="translated">行の値を設定した後に行は追加、<ph id="ph1">&lt;xref:System.Data.DataRowCollection&gt;</ph>を通じて、<ph id="ph2">`Add`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Gets an array of <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列を取得します。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select">
          <source>Gets an array of all <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects.</source>
          <target state="translated">すべての <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列を取得します。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select">
          <source>To ensure the proper sort order, specify sort criteria with <ph id="ph1">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>.</source>
          <target state="translated">適切な並べ替え順序と並べ替えの条件の指定<ph id="ph1">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select">
          <source>The following example returns an array of <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> objects through the <ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph> method.</source>
          <target state="translated">次の例の配列を返します<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>オブジェクトを介して、<ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String)">
          <source>The criteria to use to filter the rows.</source>
          <target state="translated">行にフィルターをかけるために使用する基準。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String)">
          <source>For examples on how to filter rows, see <bpt id="p1">[</bpt>DataView RowFilter Syntax [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.</source>
          <target state="translated">行をフィルター処理する方法の例については、「<bpt id="p1">[</bpt>DataView RowFilter の構文 [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String)">
          <source>Gets an array of all <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects that match the filter criteria.</source>
          <target state="translated">フィルター基準と一致するすべての <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列を取得します。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String)">
          <source>To create the <ph id="ph1">`filterExpression`</ph> argument, use the same rules that apply to the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> class's <ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property value for creating filters.</source>
          <target state="translated">作成する、<ph id="ph1">`filterExpression`</ph>引数に適用される同じ規則を使用して、<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>クラスの<ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph>フィルターを作成するためのプロパティの値。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String)">
          <source>To ensure the proper sort order, specify sort criteria with <ph id="ph1">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>.</source>
          <target state="translated">適切な並べ替え順序と並べ替えの条件の指定<ph id="ph1">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String)">
          <source>If the column on the filter contains a null value, it will not be part of the result.</source>
          <target state="translated">フィルターの列に null 値が含まれている場合、結果の一部をされません。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String)">
          <source>The following example uses a filter expression to return an array of <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> objects.</source>
          <target state="translated">次の例では、フィルター式を使用して、配列を返す<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>The criteria to use to filter the rows.</source>
          <target state="translated">行にフィルターをかけるために使用する基準。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>For examples on how to filter rows, see <bpt id="p1">[</bpt>DataView RowFilter Syntax [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.</source>
          <target state="translated">行をフィルター処理する方法の例については、「<bpt id="p1">[</bpt>DataView RowFilter の構文 [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>A string specifying the column and sort direction.</source>
          <target state="translated">列と並べ替え方向を指定する文字列。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>Gets an array of all <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects that match the filter criteria, in the specified sort order.</source>
          <target state="translated">フィルター基準と一致するすべての <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列を、指定した並べ替え順で取得します。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects matching the filter expression.</source>
          <target state="translated">フィルター式と一致する <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>To form the <ph id="ph1">`filterExpression`</ph> argument, use the same rules for creating the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> class's <ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property value.</source>
          <target state="translated">フォームに、<ph id="ph1">`filterExpression`</ph>引数を作成するため、同じ規則を使用して、<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>クラスの<ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph>プロパティの値。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>The <ph id="ph1">`Sort`</ph> argument also uses the same rules for creating class's <ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> strings.</source>
          <target state="translated"><ph id="ph1">`Sort`</ph>引数は、クラスの作成するため、同じ規則を使用するも<ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph>文字列。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>If the column on the filter contains a null value, it will not be part of the result.</source>
          <target state="translated">フィルターの列に null 値が含まれている場合、結果の一部をされません。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String,System.String)">
          <source>The following example uses a filter expression to return an array of <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> objects.</source>
          <target state="translated">次の例では、フィルター式を使用して、配列を返す<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>The criteria to use to filter the rows.</source>
          <target state="translated">行にフィルターをかけるために使用する基準。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>For examples on how to filter rows, see <bpt id="p1">[</bpt>DataView RowFilter Syntax [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.</source>
          <target state="translated">行をフィルター処理する方法の例については、「<bpt id="p1">[</bpt>DataView RowFilter の構文 [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>A string specifying the column and sort direction.</source>
          <target state="translated">列と並べ替え方向を指定する文字列。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.DataViewRowState" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataViewRowState" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>Gets an array of all <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects that match the filter in the order of the sort that match the specified state.</source>
          <target state="translated">フィルター基準と一致するすべての <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列を、指定した状態と一致する並べ替え順に取得します。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>To form the <ph id="ph1">`filterExpression`</ph> argument, use the same rules for creating the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> class's <ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property value.</source>
          <target state="translated">フォームに、<ph id="ph1">`filterExpression`</ph>引数を作成するため、同じ規則を使用して、<ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>クラスの<ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph>プロパティの値。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>The <ph id="ph1">`Sort`</ph> argument also uses the same rules for creating class's <ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> strings.</source>
          <target state="translated"><ph id="ph1">`Sort`</ph>引数は、クラスの作成するため、同じ規則を使用するも<ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph>文字列。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>If the column on the filter contains a null value, it will not be part of the result.</source>
          <target state="translated">フィルターの列に null 値が含まれている場合、結果の一部をされません。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
          <source>The following example uses a filter expression and record state to return an array of <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> objects.</source>
          <target state="translated">次の例では、フィルター式とレコードの状態を使用して、配列を返します<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.Site">
          <source>Gets or sets an <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Site">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.Site">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph> and enable communication between them, as well as provide a way for the container to manage its components.</source>
          <target state="translated">サイトのバインド、<ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph>を<ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph>とそれらの間で通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="P:System.ComponentModel.IListSource.ContainsListCollection" /&gt;</ph>.</source>
          <target state="translated">このメンバーの詳細については、「<ph id="ph1">&lt;see cref="P:System.ComponentModel.IListSource.ContainsListCollection" /&gt;</ph>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the collection is a collection of <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> objects; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">コレクションが <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> オブジェクトのコレクションである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.ComponentModel.IListSource.GetList" /&gt;</ph>.</source>
          <target state="translated">このメンバーの詳細については、「<ph id="ph1">&lt;see cref="M:System.ComponentModel.IListSource.GetList" /&gt;</ph>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> that can be bound to a data source from the object.</source>
          <target state="translated">オブジェクトからデータ ソースに連結できる <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /&gt;</ph>.</source>
          <target state="translated">このメンバーの詳細については、「<ph id="ph1">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /&gt;</ph>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> that describes the XML representation of the object that is produced by the <ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> method and consumed by the <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> メソッドによって生成され <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> メソッドによって処理されるオブジェクトの XML 表現を記述する <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>An XmlReader.</source>
          <target state="translated">XmlReader。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph>.</source>
          <target state="translated">このメンバーの詳細については、「<ph id="ph1">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
          <source>An XmlWriter.</source>
          <target state="translated">XmlWriter。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph>.</source>
          <target state="translated">このメンバーの詳細については、「<ph id="ph1">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.TableCleared">
          <source>Occurs after a <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> is cleared.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> が消去された後に発生します。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.TableCleared">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph> event is fired immediately after all rows have been successfully cleared but before the <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> method returns control back to the caller.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph>すべての行が正常にクリアされましたその前に、すぐにイベントが発生、<ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>メソッドが呼び出し元にコントロールを返します。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.TableCleared">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph> event is not fired if there are any exceptions during the clear operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph>消去操作中に例外がある場合、イベントは発生しません。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.TableClearing">
          <source>Occurs when a <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> is cleared.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> が削除されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.TableClearing">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.TableClearing&gt;</ph> event is fired before processing of the <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> operation begins.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.TableClearing&gt;</ph>の処理の前にイベントが発生した、<ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>操作を開始します。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.TableClearing">
          <source>This event is always fired when the <ph id="ph1">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> method is invoked, even if the table contains zero rows.</source>
          <target state="translated">このイベントが常に発生したときに、<ph id="ph1">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>テーブルには、0 行が含まれている場合でも、メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.TableName">
          <source>Gets or sets the name of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の名前を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.TableName">
          <source>The name of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の名前。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.TableName">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph> is used to return this table from the parent <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> object's <ph id="ph3">&lt;xref:System.Data.DataTableCollection&gt;</ph> (returned by the <ph id="ph4">&lt;xref:System.Data.DataSet.Tables%2A&gt;</ph> property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph>親からこのテーブルを返すために使用<ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>オブジェクトの<ph id="ph3">&lt;xref:System.Data.DataTableCollection&gt;</ph>(によって返される、<ph id="ph4">&lt;xref:System.Data.DataSet.Tables%2A&gt;</ph>プロパティ)。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.DataTable.TableName">
          <source>The following example prints the <ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph> for each table in a collection of <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects.</source>
          <target state="translated">次の例の出力、<ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph>のコレクションの各テーブルに対して<ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.TableName">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> or empty string ("") is passed in and this table belongs to a collection.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> または空の文字列 ("") が渡され、このテーブルはコレクションに属します。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.TableName">
          <source>The table belongs to a collection that already has a table with the same name.</source>
          <target state="translated">テーブルが属しているコレクションに、同じ名前のテーブルが既に含まれています。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="P:System.Data.DataTable.TableName">
          <source>(Comparison is case-sensitive).</source>
          <target state="translated">比較では、大文字と小文字が区別されます。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" uid="E:System.Data.DataTable.TableNewRow">
          <source>Occurs when a new <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> is inserted.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> が挿入されると発生します。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.TableNewRow">
          <source>Fires after a new <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> has been created using <ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>.</source>
          <target state="translated">新しいした後に発生<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>を使用して作成された<ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.TableNewRow">
          <source>This event is fired before the invoked <ph id="ph1">`NewRow`</ph> method returns.</source>
          <target state="translated">このイベントが発生する前に、呼び出された<ph id="ph1">`NewRow`</ph>メソッドを返します。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Data.DataTable.TableNewRow">
          <source>The new <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> instance is detached; it has not been added to the collection.</source>
          <target state="translated">新しい<ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>インスタンスがデタッチ済み以外の場合は、コレクションに追加されていません。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ToString">
          <source>Gets the <ph id="ph1">&lt;see cref="P:System.Data.DataTable.TableName" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Data.DataTable.DisplayExpression" /&gt;</ph>, if there is one as a concatenated string.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Data.DataTable.TableName" /&gt;</ph> と <ph id="ph2">&lt;see cref="P:System.Data.DataTable.DisplayExpression" /&gt;</ph> が連結された文字列として存在する場合は、これらを取得します。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.ToString">
          <source>A string consisting of the <ph id="ph1">&lt;see cref="P:System.Data.DataTable.TableName" /&gt;</ph> and the <ph id="ph2">&lt;see cref="P:System.Data.DataTable.DisplayExpression" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Data.DataTable.TableName" /&gt;</ph> と <ph id="ph2">&lt;see cref="P:System.Data.DataTable.DisplayExpression" /&gt;</ph> 値で構成された文字列。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ToString">
          <source>Gets the <ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.DisplayExpression%2A&gt;</ph> for the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
          <target state="translated">取得、<ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.DisplayExpression%2A&gt;</ph>の<ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.ToString">
          <source>The following example returns the <ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.DisplayExpression%2A&gt;</ph> using the <ph id="ph3">&lt;xref:System.Data.DataTable.ToString%2A&gt;</ph> method.</source>
          <target state="translated">次の例を返します、<ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.DisplayExpression%2A&gt;</ph>を使用して、<ph id="ph3">&lt;xref:System.Data.DataTable.ToString%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を XML として書き込みます。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The following console application creates two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instances, adds each to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, creates a <ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph> relating the two tables, and then uses the <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method to write the data contained within the parent table to a <ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションでは、2 つ作成されます<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>をインスタンス化、追加するように各、 <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>、作成、<ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph>関連する 2 つの表とを使用して、 <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> に親テーブル内に含まれるデータを書き込むメソッド<ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The example demonstrates the behavior when setting the <ph id="ph1">`writeHierarchy`</ph> parameter to each of its values.</source>
          <target state="translated">設定するときに、例が動作を示します、<ph id="ph1">`writeHierarchy`</ph>にその値の各パラメーター。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>This example shows how to use one of the overloaded versions of WriteXml.</source>
          <target state="translated">この例では、WriteXml のオーバー ロードされたバージョンのいずれかを使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>For other examples that might be available, see the individual overload topics.</source>
          <target state="translated">使用可能な可能性のあるその他の例は、個々 のオーバー ロードのトピックを参照してください。</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The example displays the following output in the console window:</source>
          <target state="translated">この例では、次の出力がコンソール ウィンドウに表示されます。</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
          <source>The stream to which the data will be written.</source>
          <target state="translated">データが書き込まれるストリーム。</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML using the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を指定された <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> を使用して XML として書き込みます。</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> with which to write the content.</source>
          <target state="translated">内容を書き込む対象の <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を指定された <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> を使用して XML として書き込みます。</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String)">
          <source>The file to which to write the XML data.</source>
          <target state="translated">XML データの書き込み先ファイル。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String)">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML using the specified file.</source>
          <target state="translated">指定したファイルを使用して <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を XML で書き込みます。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> with which to write the contents.</source>
          <target state="translated">内容の書き込みに使用する <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を指定された <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> を使用して XML として書き込みます。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>The stream to which the data will be written.</source>
          <target state="translated">データが書き込まれるストリーム。</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the contents of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫の内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the data for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML using the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を指定された <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> を使用して XML として書き込みます。</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>To save the data for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのデータとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドが、現在のテーブルに対してのみデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>To write the data for the current table and all of its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">関連するテーブルの現在のテーブルとその子孫のすべてのデータを書き込みでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>The stream to which the data will be written.</source>
          <target state="translated">データが書き込まれるストリーム。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> to the specified file using the specified <ph id="ph2">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> の現在のデータを、指定したファイルに書き込みます。オプションでスキーマを書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>To write the schema, set the value for the <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph>.</source>
          <target state="translated">スキーマを書き込むには、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> パラメーターの値を <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> with which to write the content.</source>
          <target state="translated">内容を書き込む対象の <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the contents of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫の内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the data for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を指定された <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> を使用して XML として書き込みます。</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>To save the data for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのデータとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドが、現在のテーブルに対してのみデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>To write the data for the current table and all its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">現在のテーブルとそのすべての子孫、関連するテーブルのデータを書き込むでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>The following console application creates two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instances, adds each to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, creates a <ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph> relating the two tables, and then uses the <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method to write the data contained within the parent table to a <ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションでは、2 つ作成されます<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>をインスタンス化、追加するように各、 <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>、作成、<ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph>関連する 2 つの表とを使用して、 <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> に親テーブル内に含まれるデータを書き込むメソッド<ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
          <source>The example demonstrates the behavior when setting the <ph id="ph1">`writeHierarchy`</ph> parameter to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">設定するときに、例が動作を示します、<ph id="ph1">`writeHierarchy`</ph>パラメーターを<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> used to write the document.</source>
          <target state="translated">ドキュメントを書き込むために使用する <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> と <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> を使用して、<ph id="ph3">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>To write the schema, set the value for the <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph>.</source>
          <target state="translated">スキーマを書き込むには、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> パラメーターの値を <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>The file to which to write the XML data.</source>
          <target state="translated">XML データの書き込み先ファイル。</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the contents of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫の内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the data for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML using the specified file.</source>
          <target state="translated">指定したファイルを使用して <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を XML で書き込みます。</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>To save the data for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのデータとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドが、現在のテーブルに対してのみデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>To write the data for the current table and all of its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">関連するテーブルの現在のテーブルとその子孫のすべてのデータを書き込みでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>The name of the file to which the data will be written.</source>
          <target state="translated">データが書き込まれるファイルの名前。</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified file and <ph id="ph2">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph>.</source>
          <target state="translated">指定したファイルと <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>To write the schema, set the value for the <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph>.</source>
          <target state="translated">スキーマを書き込むには、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> パラメーターの値を <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> with which to write the contents.</source>
          <target state="translated">内容の書き込みに使用する <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the contents of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫の内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the data for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>Writes the current contents of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as XML using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在の内容を指定された <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> を使用して XML として書き込みます。</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドが、現在のテーブルに対してのみデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>To write the data for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">現在のテーブルとその子孫、関連するテーブル全体のデータを書き込むでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> used to write the document.</source>
          <target state="translated">ドキュメントを書き込むために使用する <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> と <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> を使用して、<ph id="ph3">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>To write the schema, set the value for the <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph>.</source>
          <target state="translated">スキーマを書き込むには、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> パラメーターの値を <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>The stream to which the data will be written.</source>
          <target state="translated">データが書き込まれるストリーム。</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the contents of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫の内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the data for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> to the specified file using the specified <ph id="ph2">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> の現在のデータを、指定したファイルに書き込みます。オプションでスキーマを書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write the schema, set the value for the <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph>.</source>
          <target state="translated">スキーマを書き込むには、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> パラメーターの値を <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To save the data for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのデータとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">`DataTable`</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">`DataTable`</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">`XmlWriteMode`</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">`XmlWriteMode`</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>Normally, the <ph id="ph1">`WriteXml`</ph> method saves data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドは、現在のテーブルに対してのみデータを保存します。</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">`DataTable`</ph> into an XML document, whereas the <ph id="ph3">`WriteXmlSchema`</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">`DataTable`</ph> 、XML ドキュメントに対し、<ph id="ph3">`WriteXmlSchema`</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">`XmlWriteMode`</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">`XmlWriteMode`</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドが、現在のテーブルに対してのみデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write the data for the current table and all of its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">関連するテーブルの現在のテーブルとその子孫のすべてのデータを書き込みでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> used to write the document.</source>
          <target state="translated">ドキュメントを書き込むために使用する <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the contents of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫の内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the data for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> と <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> を使用して、<ph id="ph3">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write the schema, set the value for the <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph>.</source>
          <target state="translated">スキーマを書き込むには、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> パラメーターの値を <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To save the data for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのデータとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>Normally, the <ph id="ph1">`WriteXml`</ph> method saves data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドは、現在のテーブルに対してのみデータを保存します。</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドが、現在のテーブルに対してのみデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write the data for the current table and all of its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">関連するテーブルの現在のテーブルとその子孫のすべてのデータを書き込みでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>The following console application creates two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instances, adds each to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, creates a <ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph> relating the two tables, and then uses the <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method to write the data contained within the parent table to a <ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションでは、2 つ作成されます<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>をインスタンス化、追加するように各、 <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>、作成、<ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph>関連する 2 つの表とを使用して、 <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> に親テーブル内に含まれるデータを書き込むメソッド<ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>The example demonstrates the behavior when setting the <ph id="ph1">`writeHierarchy`</ph> parameter to each of its values.</source>
          <target state="translated">設定するときに、例が動作を示します、<ph id="ph1">`writeHierarchy`</ph>にその値の各パラメーター。</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>The example displays the following output in the console window:</source>
          <target state="translated">この例では、次の出力がコンソール ウィンドウに表示されます。</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>The name of the file to which the data will be written.</source>
          <target state="translated">データが書き込まれるファイルの名前。</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the contents of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫の内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the data for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified file and <ph id="ph2">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph>.</source>
          <target state="translated">指定したファイルと <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write the schema, set the value for the <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph>.</source>
          <target state="translated">スキーマを書き込むには、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> パラメーターの値を <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To save the data for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのデータとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>Normally, the <ph id="ph1">`WriteXml`</ph> method saves data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドは、現在のテーブルに対してのみデータを保存します。</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>If you want to save the data for the current table and all of schema, the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated">現在のテーブルとスキーマのすべてのデータを保存する場合、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドが、現在のテーブルに対してのみデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write the data for the current table and all descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">現在のテーブルで、すべての子孫、関連するテーブルのデータを書き込むでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> used to write the document.</source>
          <target state="translated">ドキュメントを書き込むために使用する <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the contents of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫の内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the data for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのデータのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> と <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> を使用して、<ph id="ph3">&lt;see cref="T:System.Data.XmlWriteMode" /&gt;</ph> の現在のデータを書き込みます。オプションでスキーマを書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write the schema, set the value for the <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph>.</source>
          <target state="translated">スキーマを書き込むには、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> パラメーターの値を <ph id="ph2">&lt;see langword="WriteSchema" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To save the data for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのデータとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> 、XML ドキュメントに対し、<ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>メソッドは、スキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph>パラメーター、その値に設定し、<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、<ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataTable`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXml`</ph>メソッドが、現在のテーブルに対してのみデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>To write the data for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">現在のテーブルとその子孫、関連するテーブル全体のデータを書き込むでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取りまたは書き込みを実装する<ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>を実装していません<ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="T:System.Data.DataTable">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在のデータ構造体を XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The following console application creates two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instances, adds each to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, creates a <ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph> relating the two tables, and then uses the <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the data contained within the parent table to a <ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションでは、2 つ作成されます<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>をインスタンス化、追加するように各、 <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>、作成、<ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph>関連する 2 つの表とを使用して、 <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> に親テーブル内に含まれるデータを書き込むメソッド<ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The example demonstrates the behavior when setting the <ph id="ph1">`writeHierarchy`</ph> parameter to each of its values.</source>
          <target state="translated">設定するときに、例が動作を示します、<ph id="ph1">`writeHierarchy`</ph>にその値の各パラメーター。</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>This example shows how to use one of the overloaded versions of <ph id="ph1">`WriteXmlSchema`</ph> For other examples that might be available, see the individual overload topics.</source>
          <target state="translated">この例は、のいずれかのオーバー ロードされたバージョンを使用する方法を示しています。<ph id="ph1">`WriteXmlSchema`</ph>可能なその他の例は、個々 のオーバー ロードのトピックを参照してください。</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.DataTable">
          <source>The example displays the following output in the console window:</source>
          <target state="translated">この例では、次の出力がコンソール ウィンドウに表示されます。</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
          <source>The stream to which the XML schema will be written.</source>
          <target state="translated">XML スキーマが書き込まれるストリーム。</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema to the specified stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在のデータ構造体を指定されたストリームに XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> with which to write.</source>
          <target state="translated">書き込みに使用する <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> の現在のデータ構造体を XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.String)">
          <source>The name of the file to use.</source>
          <target state="translated">使用するファイルの名前。</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.String)">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema to the specified file.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在のデータ構造体を指定されたファイルに XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> to use.</source>
          <target state="translated">使用する <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> の現在のデータ構造体を XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>The stream to which the XML schema will be written.</source>
          <target state="translated">XML スキーマが書き込まれるストリーム。</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the schema of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫のスキーマを書き込みます。</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the schema for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのスキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema to the specified stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在のデータ構造体を指定されたストリームに XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>To save the schema for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのスキーマとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXmlSchema`</ph> method writes the schema only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXmlSchema`</ph>メソッドは、現在のテーブルに対してのみ、スキーマを書き込みます。</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
          <source>To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">記述するには、現在のテーブルとその子孫、関連するテーブル全体のスキーマでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> with which to write.</source>
          <target state="translated">書き込みに使用する <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the schema of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫のスキーマを書き込みます。</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the schema for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのスキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> の現在のデータ構造体を XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>To save the schema for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのスキーマとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXmlSchema`</ph> method writes the schema only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXmlSchema`</ph>メソッドは、現在のテーブルに対してのみ、スキーマを書き込みます。</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">記述するには、現在のテーブルとその子孫、関連するテーブル全体のスキーマでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>The following console application creates two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instances, adds each to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, creates a <ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph> relating the two tables, and then uses the <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the data contained within the parent table to a <ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
          <target state="translated">次のコンソール アプリケーションでは、2 つ作成されます<ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>をインスタンス化、追加するように各、 <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>、作成、<ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph>関連する 2 つの表とを使用して、 <ph id="ph4">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> に親テーブル内に含まれるデータを書き込むメソッド<ph id="ph5">&lt;xref:System.IO.TextWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>The example demonstrates the behavior when setting the <ph id="ph1">`writeHierarchy`</ph> parameter to each of its values.</source>
          <target state="translated">設定するときに、例が動作を示します、<ph id="ph1">`writeHierarchy`</ph>にその値の各パラメーター。</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
          <source>The example displays the following output in the console window:</source>
          <target state="translated">この例では、次の出力がコンソール ウィンドウに表示されます。</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>The name of the file to use.</source>
          <target state="translated">使用するファイルの名前。</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the schema of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫のスキーマを書き込みます。</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the schema for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのスキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema to the specified file.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> の現在のデータ構造体を指定されたファイルに XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>To save the schema for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのスキーマとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXmlSchema`</ph> method writes the schema only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXmlSchema`</ph>メソッドは、現在のテーブルに対してのみ、スキーマを書き込みます。</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
          <source>To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">記述するには、現在のテーブルとその子孫、関連するテーブル全体のスキーマでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> used to write the document.</source>
          <target state="translated">ドキュメントを書き込むために使用する <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, write the schema of the current table and all its descendants.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、現在のテーブルとその子孫のスキーマを書き込みます。</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph> (the default value), write the schema for the current table only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> (既定値) の場合は、現在のテーブルのスキーマのみを書き込みます。</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>Writes the current data structure of the <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> as an XML schema using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> を使用して、<ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> の現在のデータ構造体を XML スキーマとして書き込みます。</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>To save the schema for the table and all its descendants, set the <ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> parameter to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">テーブルのスキーマとその子孫をすべて保存するには、<ph id="ph1">&lt;paramref name="writeHierarchy" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph>のスキーマを記述する方法、 <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> XML ドキュメントにします。</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、<ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>Normally the <ph id="ph1">`WriteXmlSchema`</ph> method writes the schema only for the current table.</source>
          <target state="translated">通常、<ph id="ph1">`WriteXmlSchema`</ph>メソッドは、現在のテーブルに対してのみ、スキーマを書き込みます。</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
          <source>To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">記述するには、現在のテーブルとその子孫、関連するテーブル全体のスキーマでメソッドを呼び出し、<ph id="ph1">`writeHierarchy`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>