<Type Name="DataTable" FullName="System.Data.DataTable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="432309348c270d5b9320642ac62568852dd502fd" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37671042" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataTable extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTable" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTable&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, ISupportInitializeNotification, IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTable : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" />
  <TypeSignature Language="F#" Value="type DataTable = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RowChanging")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TableName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataTableSchema")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b4330-101">Represents one table of in-memory data.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b4330-101">Represents one table of in-memory data.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-102"><xref:System.Data.DataTable>は ADO.NET ライブラリ内のサーバーの全体のオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b4330-102">The <xref:System.Data.DataTable> is a central object in the ADO.NET library.</span></span> <span data-ttu-id="b4330-103">他のオブジェクトを使用して、<xref:System.Data.DataTable>含める、 <xref:System.Data.DataSet> 、<xref:System.Data.DataView>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-103">Other objects that use the <xref:System.Data.DataTable> include the <xref:System.Data.DataSet> and the <xref:System.Data.DataView>.</span></span>  
  
 <span data-ttu-id="b4330-104">アクセスするときに<xref:System.Data.DataTable>オブジェクトでは、条件付きで大文字小文字が区別されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b4330-104">When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive.</span></span> <span data-ttu-id="b4330-105">たとえば、1 つ<xref:System.Data.DataTable>"mydatatable"という名前し"Mydatatable"という 2 つは、1 つのテーブルの検索に使用される文字列は大文字と小文字を区別見なされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-105">For example, if one <xref:System.Data.DataTable> is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</span></span> <span data-ttu-id="b4330-106">ただし、"mydatatable"が存在し、"Mydatatable"は、検索文字列は、大文字と小文字を区別しない見なされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-106">However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</span></span> <span data-ttu-id="b4330-107">A <xref:System.Data.DataSet> 2 つ含めることができます<xref:System.Data.DataTable>オブジェクトが同じ<xref:System.Data.DataTable.TableName%2A>プロパティの値が異なる<xref:System.Data.DataTable.Namespace%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="b4330-107">A <xref:System.Data.DataSet> can contain two <xref:System.Data.DataTable> objects that have the same <xref:System.Data.DataTable.TableName%2A> property value but different <xref:System.Data.DataTable.Namespace%2A> property values.</span></span> <span data-ttu-id="b4330-108">操作の詳細については<xref:System.Data.DataTable>、オブジェクトを参照してください[DataTable の作成](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)です。</span><span class="sxs-lookup"><span data-stu-id="b4330-108">For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).</span></span>  
  
 <span data-ttu-id="b4330-109">作成する場合、<xref:System.Data.DataTable>プログラムでは、最初に定義してそのスキーマを追加して<xref:System.Data.DataColumn>オブジェクトを<xref:System.Data.DataColumnCollection>(を使用してアクセス、<xref:System.Data.DataTable.Columns%2A>プロパティ)。</span><span class="sxs-lookup"><span data-stu-id="b4330-109">If you are creating a <xref:System.Data.DataTable> programmatically, you must first define its schema by adding <xref:System.Data.DataColumn> objects to the <xref:System.Data.DataColumnCollection> (accessed through the <xref:System.Data.DataTable.Columns%2A> property).</span></span> <span data-ttu-id="b4330-110">追加の詳細については<xref:System.Data.DataColumn>、オブジェクトを参照してください[DataTable に列の追加](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-110">For more information about adding <xref:System.Data.DataColumn> objects, see [Adding Columns to a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md).</span></span>  
  
 <span data-ttu-id="b4330-111">行を追加する、 <xref:System.Data.DataTable>、最初に使用する必要があります、<xref:System.Data.DataTable.NewRow%2A>を返す新しいメソッドを<xref:System.Data.DataRow>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-111">To add rows to a <xref:System.Data.DataTable>, you must first use the <xref:System.Data.DataTable.NewRow%2A> method to return a new <xref:System.Data.DataRow> object.</span></span> <span data-ttu-id="b4330-112"><xref:System.Data.DataTable.NewRow%2A>メソッドのスキーマとの行を返します、<xref:System.Data.DataTable>によって、テーブルの定義は、<xref:System.Data.DataColumnCollection>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-112">The <xref:System.Data.DataTable.NewRow%2A> method returns a row with the schema of the <xref:System.Data.DataTable>, as it is defined by the table's <xref:System.Data.DataColumnCollection>.</span></span> <span data-ttu-id="b4330-113">最大数の行を<xref:System.Data.DataTable>できますストアが 16,777, 216 します。</span><span class="sxs-lookup"><span data-stu-id="b4330-113">The maximum number of rows that a <xref:System.Data.DataTable> can store is 16,777,216.</span></span> <span data-ttu-id="b4330-114">詳細については、次を参照してください。 [DataTable にデータを追加する](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-data-to-a-datatable.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-114">For more information, see [Adding Data to a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-data-to-a-datatable.md).</span></span>  
  
 <span data-ttu-id="b4330-115"><xref:System.Data.DataTable>のコレクションを格納も<xref:System.Data.Constraint>オブジェクト データの整合性を確保するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-115">The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.Constraint> objects that can be used to ensure the integrity of the data.</span></span> <span data-ttu-id="b4330-116">詳細については、次を参照してください。 [DataTable の制約](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-116">For more information, see [DataTable Constraints](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).</span></span>  
  
 <span data-ttu-id="b4330-117">たくさん<xref:System.Data.DataTable>テーブルに変更があったときを判断するために使用できるイベント。</span><span class="sxs-lookup"><span data-stu-id="b4330-117">There are many <xref:System.Data.DataTable> events that can be used to determine when changes are made to a table.</span></span> <span data-ttu-id="b4330-118">これには、<xref:System.Data.DataTable.RowChanged>、<xref:System.Data.DataTable.RowChanging>、<xref:System.Data.DataTable.RowDeleting>、および <xref:System.Data.DataTable.RowDeleted> が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-118">These include <xref:System.Data.DataTable.RowChanged>, <xref:System.Data.DataTable.RowChanging>, <xref:System.Data.DataTable.RowDeleting>, and <xref:System.Data.DataTable.RowDeleted>.</span></span> <span data-ttu-id="b4330-119">使用できるイベントの詳細については、<xref:System.Data.DataTable>を参照してください[DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-119">For more information about the events that can be used with a <xref:System.Data.DataTable>, see [Handling DataTable Events](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md).</span></span>  
  
 <span data-ttu-id="b4330-120">インスタンス<xref:System.Data.DataTable>作成されると、いくつか読み取り/書き込みのプロパティは、初期値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-120">When an instance of <xref:System.Data.DataTable> is created, some of the read/write properties are set to initial values.</span></span> <span data-ttu-id="b4330-121">これらの値の一覧は、次を参照してください。、<xref:System.Data.DataTable.%23ctor%2A?displayProperty=nameWithType>コンス トラクターのトピックです。</span><span class="sxs-lookup"><span data-stu-id="b4330-121">For a list of these values, see the <xref:System.Data.DataTable.%23ctor%2A?displayProperty=nameWithType> constructor topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-122"><xref:System.Data.DataSet>と<xref:System.Data.DataTable>オブジェクトから継承<xref:System.ComponentModel.MarshalByValueComponent>、およびサポート、 <xref:System.Runtime.Serialization.ISerializable> .NET Framework リモート処理用のインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b4330-122">The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for .NET Framework remoting.</span></span> <span data-ttu-id="b4330-123">これらは、.NET Framework リモート処理用に使用できる唯一の ADO.NET オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b4330-123">These are the only ADO.NET objects that you can use for .NET Framework remoting.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-124">次の例では、2 つ作成されます<xref:System.Data.DataTable>オブジェクトと 1 つ<xref:System.Data.DataRelation>オブジェクト、および新しいオブジェクトを追加します、<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-124">The following example creates two <xref:System.Data.DataTable> objects and one <xref:System.Data.DataRelation> object, and adds the new objects to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="b4330-125">テーブルが表示されます、<xref:System.Windows.Forms.DataGridView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="b4330-125">The tables are then displayed in a <xref:System.Windows.Forms.DataGridView> control.</span></span>  
  
 [!code-csharp[Classic WebData DataTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable Example/VB/source.vb#1)]  
  
 <span data-ttu-id="b4330-126">このサンプルでは、特定のスキーマ定義を含む DataTable を手動で作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-126">This sample demonstrates how to create a DataTable manually with specific schema definitions:</span></span>  
  
-   <span data-ttu-id="b4330-127">複数のデータ テーブルを作成し、最初の列を定義します。</span><span class="sxs-lookup"><span data-stu-id="b4330-127">Create multiple DataTables and define the initial columns.</span></span>  
  
-   <span data-ttu-id="b4330-128">テーブルの制約を作成します。</span><span class="sxs-lookup"><span data-stu-id="b4330-128">Create the table constraints.</span></span>  
  
-   <span data-ttu-id="b4330-129">値を挿入し、テーブルを表示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-129">Insert the values and display the tables.</span></span>  
  
-   <span data-ttu-id="b4330-130">式列を作成し、テーブルを表示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-130">Create the expression columns and display the tables.</span></span>  
  
 <span data-ttu-id="b4330-131">このコード サンプルの c# および Visual Basic プロジェクトで確認できます[開発者コード サンプル](https://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-131">C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](https://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914).</span></span>  
  
 [!code-csharp[Classic WebData DataTable Example2#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/classic webdata datatable example2/cs/source.cs#1)]
 [!code-vb[Classic WebData DataTable Example2#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/classic webdata datatable example2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b4330-132">この型は、マルチ スレッドの読み取り操作も安全です。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b4330-132">This type is safe for multithreaded read operations.</span>
      </span>
      <span data-ttu-id="b4330-133">書き込み操作を同期する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b4330-133">You must synchronize any write operations.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-134">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-134">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-135">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class with no arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-135">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class with no arguments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-136">コンス トラクターのすべてのプロパティの初期値の設定、<xref:System.Data.DataTable>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-136">The constructor sets initial values for all properties of the <xref:System.Data.DataTable> object.</span></span> <span data-ttu-id="b4330-137">次の表は、プロパティとその既定値を示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-137">The following table shows the properties and their default values.</span></span> <span data-ttu-id="b4330-138">インスタンス<xref:System.Data.DataTable>作成は、次読み取り/書き込みプロパティの初期値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-138">When an instance of <xref:System.Data.DataTable> is created, the following read/write properties are set to initial values.</span></span>  
  
|<span data-ttu-id="b4330-139">プロパティ</span><span class="sxs-lookup"><span data-stu-id="b4330-139">Property</span></span>|<span data-ttu-id="b4330-140">既定値</span><span class="sxs-lookup"><span data-stu-id="b4330-140">Default value</span></span>|  
|--------------|-------------------|  
|<span data-ttu-id="b4330-141">**CaseSensitive**</span><span class="sxs-lookup"><span data-stu-id="b4330-141">**CaseSensitive**</span></span>|<span data-ttu-id="b4330-142">親と同じ<xref:System.Data.DataSet>いずれかに属する場合。</span><span class="sxs-lookup"><span data-stu-id="b4330-142">Same as the parent <xref:System.Data.DataSet>, if it belongs to one.</span></span> <span data-ttu-id="b4330-143">それ以外の場合は `false`。</span><span class="sxs-lookup"><span data-stu-id="b4330-143">Otherwise, `false`.</span></span>|  
|<span data-ttu-id="b4330-144">**DisplayExpression**</span><span class="sxs-lookup"><span data-stu-id="b4330-144">**DisplayExpression**</span></span>|<span data-ttu-id="b4330-145">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="b4330-145">Empty string ("")</span></span>|  
|<span data-ttu-id="b4330-146">**ロケール**</span><span class="sxs-lookup"><span data-stu-id="b4330-146">**Locale**</span></span>|<span data-ttu-id="b4330-147">親と同じ<xref:System.Data.DataSet>オブジェクトの<xref:System.Globalization.CultureInfo>(によって返される、<xref:System.Data.DataSet.Locale%2A>プロパティ)。 親が存在しない場合、既定では、現在のシステム<xref:System.Globalization.CultureInfo>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-147">Same as the parent <xref:System.Data.DataSet> object's <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale%2A> property); if no parent exists, the default is the current system <xref:System.Globalization.CultureInfo>.</span></span>|  
|<span data-ttu-id="b4330-148">**MinimumCapacity**</span><span class="sxs-lookup"><span data-stu-id="b4330-148">**MinimumCapacity**</span></span>|<span data-ttu-id="b4330-149">50 行までです。</span><span class="sxs-lookup"><span data-stu-id="b4330-149">50 rows.</span></span>|  
  
 <span data-ttu-id="b4330-150">これらのプロパティを個別に呼び出して、プロパティをいずれかの値を変更することができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-150">You can change the value for any of these properties through a separate call to the property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-151">次の例では、作成、新しい<xref:System.Data.DataTable>で<xref:System.Data.DataColumn>と<xref:System.Data.DataRow>で表示、<xref:System.Windows.Forms.DataGridView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="b4330-151">The following example creates a new <xref:System.Data.DataTable> with <xref:System.Data.DataColumn> and <xref:System.Data.DataRow>, and displays it in a <xref:System.Windows.Forms.DataGridView> control.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.DataTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable (string tableName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tableName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tableName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTable(System::String ^ tableName);" />
      <MemberSignature Language="F#" Value="new System.Data.DataTable : string -&gt; System.Data.DataTable" Usage="new System.Data.DataTable tableName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tableName">
          <span data-ttu-id="b4330-152">The name to give the table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-152">The name to give the table.</span>
          </span>
          <span data-ttu-id="b4330-153">If <c>tableName</c> is <see langword="null" /> or an empty string, a default name is given when added to the <see cref="T:System.Data.DataTableCollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-153">If <c>tableName</c> is <see langword="null" /> or an empty string, a default name is given when added to the <see cref="T:System.Data.DataTableCollection" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-154">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class with the specified table name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-154">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class with the specified table name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4330-155">次の例では、作成、<xref:System.Data.DataTable>で表示、<xref:System.Windows.Forms.DataGridView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="b4330-155">The following example creates a <xref:System.Data.DataTable> and displays it in a <xref:System.Windows.Forms.DataGridView> control.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.DataTable1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataTable1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataTable(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Data.DataTable : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.DataTable" Usage="new System.Data.DataTable (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="b4330-156">The data needed to serialize or deserialize an object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-156">The data needed to serialize or deserialize an object.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="b4330-157">The source and destination of a given serialized stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-157">The source and destination of a given serialized stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-158">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class with the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and the <see cref="T:System.Runtime.Serialization.StreamingContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-158">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class with the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and the <see cref="T:System.Runtime.Serialization.StreamingContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-159">この実装の<xref:System.Data.DataTable>コンス トラクターが必要です。<xref:System.Runtime.Serialization.ISerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-159">This implementation of the <xref:System.Data.DataTable> constructor is required for <xref:System.Runtime.Serialization.ISerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable (string tableName, string tableNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tableName, string tableNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tableName As String, tableNamespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTable(System::String ^ tableName, System::String ^ tableNamespace);" />
      <MemberSignature Language="F#" Value="new System.Data.DataTable : string * string -&gt; System.Data.DataTable" Usage="new System.Data.DataTable (tableName, tableNamespace)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="tableNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tableName">
          <span data-ttu-id="b4330-160">The name to give the table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-160">The name to give the table.</span>
          </span>
          <span data-ttu-id="b4330-161">If <c>tableName</c> is <see langword="null" /> or an empty string, a default name is given when added to the <see cref="T:System.Data.DataTableCollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-161">If <c>tableName</c> is <see langword="null" /> or an empty string, a default name is given when added to the <see cref="T:System.Data.DataTableCollection" />.</span>
          </span>
        </param>
        <param name="tableNamespace">
          <span data-ttu-id="b4330-162">The namespace for the XML representation of the data stored in the <see langword="DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-162">The namespace for the XML representation of the data stored in the <see langword="DataTable" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-163">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class using the specified table name and namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-163">Initializes a new instance of the <see cref="T:System.Data.DataTable" /> class using the specified table name and namespace.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="dataTable.AcceptChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-164">Commits all the changes made to this table since the last time <see cref="M:System.Data.DataTable.AcceptChanges" /> was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-164">Commits all the changes made to this table since the last time <see cref="M:System.Data.DataTable.AcceptChanges" /> was called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-165">ときに<xref:System.Data.DataTable.AcceptChanges%2A>が呼び出されると、いずれかの<xref:System.Data.DataRow>まだ編集モードでのオブジェクトは、その編集を正常に終了します。</span><span class="sxs-lookup"><span data-stu-id="b4330-165">When <xref:System.Data.DataTable.AcceptChanges%2A> is called, any <xref:System.Data.DataRow> object still in edit mode successfully ends its edits.</span></span> <span data-ttu-id="b4330-166"><xref:System.Data.DataRowState>も変更されます: すべて`Added`と`Modified`になる行`Unchanged`、および`Deleted`行が削除されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-166">The <xref:System.Data.DataRowState> also changes: all `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.</span></span>  
  
 <span data-ttu-id="b4330-167"><xref:System.Data.DataTable.AcceptChanges%2A>でメソッドが呼び出さ一般に、<xref:System.Data.DataTable>更新を試行した後、<xref:System.Data.DataSet>を使用して、<xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-167">The <xref:System.Data.DataTable.AcceptChanges%2A> method is generally called on a <xref:System.Data.DataTable> after you attempt to update the <xref:System.Data.DataSet> using the <xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-168">次の例では、各テーブルにエラーをテストします。</span><span class="sxs-lookup"><span data-stu-id="b4330-168">The following example tests each table for errors.</span></span> <span data-ttu-id="b4330-169">(に渡すことによって、未定義の関数)、テーブルのエラーを調整できる場合<xref:System.Data.DataTable.AcceptChanges%2A>。 それ以外は<xref:System.Data.DataTable.RejectChanges%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-169">If the table's errors can be reconciled (by passing it to an undefined function), <xref:System.Data.DataTable.AcceptChanges%2A> is called; otherwise, <xref:System.Data.DataTable.RejectChanges%2A> is called.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.AcceptChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.AcceptChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.AcceptChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.AcceptChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="dataTable.BeginInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-170">Begins the initialization of a <see cref="T:System.Data.DataTable" /> that is used on a form or used by another component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-170">Begins the initialization of a <see cref="T:System.Data.DataTable" /> that is used on a form or used by another component.</span>
          </span>
          <span data-ttu-id="b4330-171">The initialization occurs at run time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-171">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-172">Visual Studio .NET のデザイン環境では、このメソッドを使用して、フォームまたはその他のコンポーネントで使用するコンポーネントの初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="b4330-172">The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="b4330-173"><xref:System.Data.DataTable.EndInit%2A>メソッドは、初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="b4330-173">The <xref:System.Data.DataTable.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="b4330-174">使用して、<xref:System.Data.DataTable.BeginInit%2A>と<xref:System.Data.DataTable.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="b4330-174">Using the <xref:System.Data.DataTable.BeginInit%2A> and <xref:System.Data.DataTable.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoadData">
      <MemberSignature Language="C#" Value="public void BeginLoadData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginLoadData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.BeginLoadData" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginLoadData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginLoadData();" />
      <MemberSignature Language="F#" Value="member this.BeginLoadData : unit -&gt; unit" Usage="dataTable.BeginLoadData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-175">Turns off notifications, index maintenance, and constraints while loading data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-175">Turns off notifications, index maintenance, and constraints while loading data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-176">使用<xref:System.Data.DataTable.BeginLoadData%2A>と共に<xref:System.Data.DataTable.LoadDataRow%2A>と<xref:System.Data.DataTable.EndLoadData%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-176">Use <xref:System.Data.DataTable.BeginLoadData%2A> in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CaseSensitive : bool with get, set" Usage="System.Data.DataTable.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-177">Indicates whether string comparisons within the table are case-sensitive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-177">Indicates whether string comparisons within the table are case-sensitive.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-178">
            <see langword="true" /> 場合、比較では、大文字小文字を区別します。それ以外の場合<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-178">
              <see langword="true" /> if the comparison is case-sensitive; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b4330-179">既定値は、parent に設定されて<see cref="T:System.Data.DataSet" />オブジェクトの<see cref="P:System.Data.DataSet.CaseSensitive" />プロパティ、または<see langword="false" />場合、<see cref="T:System.Data.DataTable" />とは無関係に作成された、<see cref="T:System.Data.DataSet" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-179">The default is set to the parent <see cref="T:System.Data.DataSet" /> object's <see cref="P:System.Data.DataSet.CaseSensitive" /> property, or <see langword="false" /> if the <see cref="T:System.Data.DataTable" /> was created independently of a <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-180"><xref:System.Data.DataTable.CaseSensitive%2A>プロパティで並べ替え、検索、およびフィルター処理文字列の比較に影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="b4330-180">The <xref:System.Data.DataTable.CaseSensitive%2A> property affects string comparisons in sorting, searching, and filtering.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-181">次の例では、<xref:System.Data.DataTable.Select%2A>メソッドに 2 回、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-181">The following example calls the <xref:System.Data.DataTable.Select%2A> method twice on a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-182">最初に、<xref:System.Data.DataTable.CaseSensitive%2A>プロパティに設定されて`false`、2 番目、 `true`。</span><span class="sxs-lookup"><span data-stu-id="b4330-182">The first time, the <xref:System.Data.DataTable.CaseSensitive%2A> property is set to `false`, the second, to `true`.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.CaseSensitive Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.CaseSensitive Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataTable.Select" />
      </Docs>
    </Member>
    <Member MemberName="ChildRelations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection ChildRelations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection ChildRelations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ChildRelations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChildRelations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ ChildRelations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChildRelations : System.Data.DataRelationCollection" Usage="System.Data.DataTable.ChildRelations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-183">Gets the collection of child relations for this <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-183">Gets the collection of child relations for this <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-184">A<see cref="T:System.Data.DataRelationCollection" />テーブルの子リレーションを格納しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-184">A <see cref="T:System.Data.DataRelationCollection" /> that contains the child relations for the table.</span>
          </span>
          <span data-ttu-id="b4330-185">ない場合は、空のコレクションが返される<see cref="T:System.Data.DataRelation" />オブジェクトが存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-185">An empty collection is returned if no <see cref="T:System.Data.DataRelation" /> objects exist.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-186">A <xref:System.Data.DataRelation> 2 つのテーブル間のリレーションシップを定義します。</span><span class="sxs-lookup"><span data-stu-id="b4330-186">A <xref:System.Data.DataRelation> defines the relationship between two tables.</span></span> <span data-ttu-id="b4330-187">通常、2 つのテーブルは、同じデータを含む単一のフィールドでリンクされています。</span><span class="sxs-lookup"><span data-stu-id="b4330-187">Typically, two tables are linked through a single field that contains the same data.</span></span> <span data-ttu-id="b4330-188">たとえば、アドレス データを格納するテーブルには、国/地域を表すコードを含む 1 つのフィールドがあります。</span><span class="sxs-lookup"><span data-stu-id="b4330-188">For example, a table which contains address data may have a single field containing codes that represent countries/regions.</span></span> <span data-ttu-id="b4330-189">国/地域のデータが含まれる 2 番目のテーブルには、国/地域を識別するコードを含む 1 つのフィールドを持つあり、このコードは、最初のテーブルの対応するフィールドに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b4330-189">A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table.</span></span> <span data-ttu-id="b4330-190">A <xref:System.Data.DataRelation>、次に、少なくとも 4 つ情報にはが含まれています。 (1) 最初のテーブルの名前、(2) の最初のテーブル内の列名、(3) 2 つ目のテーブルの名前および (4) 2 番目のテーブル内の列名。</span><span class="sxs-lookup"><span data-stu-id="b4330-190">A <xref:System.Data.DataRelation>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-191">次の例では、<xref:System.Data.DataTable.ChildRelations%2A>プロパティをそれぞれの子を返す<xref:System.Data.DataRelation>で、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-191">The following example uses the <xref:System.Data.DataTable.ChildRelations%2A> property to return each child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-192">各リレーションシップは、引数として使用し、<xref:System.Data.DataRow.GetChildRows%2A>のメソッド、<xref:System.Data.DataRow>行の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4330-192">Each relation is then used as an argument in the <xref:System.Data.DataRow.GetChildRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows.</span></span> <span data-ttu-id="b4330-193">行の各列の値が出力されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-193">The value of each column in the row is then printed.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.ChildRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ChildRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ChildRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ChildRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.ParentRelations" />
        <altmember cref="M:System.Data.DataRow.GetParentRows(System.String)" />
        <altmember cref="M:System.Data.DataRow.GetChildRows(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="dataTable.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-194">Clears the <see cref="T:System.Data.DataTable" /> of all data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-194">Clears the <see cref="T:System.Data.DataTable" /> of all data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-195">すべてのテーブルのすべての行が削除されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-195">All rows in all tables are removed.</span></span> <span data-ttu-id="b4330-196">表に、子行が孤立するを原因となる任意の強制子リレーションシップがある場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-196">An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.</span></span>  
  
 <span data-ttu-id="b4330-197">場合、<xref:System.Data.DataSet>にバインドされて、<xref:System.Xml.XmlDataDocument>を呼び出すと、<xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType>または<xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType>発生させる、<xref:System.NotSupportedException>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-197">If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> or <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> raises the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="b4330-198">このような状況を避けるためには、各テーブルは、一度に 1 行ずつを削除するを走査します。</span><span class="sxs-lookup"><span data-stu-id="b4330-198">To avoid this situation, traverse each table, removing each row one at a time.</span></span> <span data-ttu-id="b4330-199">使用すると<xref:System.Data.DataTable.NewRow%2A>を呼び出す前に新しい行を作成する、行を処理する必要があります<xref:System.Data.DataTable.Clear%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-199">When you use <xref:System.Data.DataTable.NewRow%2A> to create new rows, the rows must be processed before you call <xref:System.Data.DataTable.Clear%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-200">次の例では、すべてのデータのテーブルをクリアします。</span><span class="sxs-lookup"><span data-stu-id="b4330-200">The following example clears the table of all data.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataTable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataTable ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Data.DataTable&#xA;override this.Clone : unit -&gt; System.Data.DataTable" Usage="dataTable.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-201">Clones the structure of the <see cref="T:System.Data.DataTable" />, including all <see cref="T:System.Data.DataTable" /> schemas and constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-201">Clones the structure of the <see cref="T:System.Data.DataTable" />, including all <see cref="T:System.Data.DataTable" /> schemas and constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-202">A new <see cref="T:System.Data.DataTable" /> with the same schema as the current <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-202">A new <see cref="T:System.Data.DataTable" /> with the same schema as the current <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-203">これらのクラスが派生されている場合、複製同じ派生クラスはでも。</span><span class="sxs-lookup"><span data-stu-id="b4330-203">If these classes have been derived, the clone will also be of the same derived classes.</span></span>  
  
 <span data-ttu-id="b4330-204">新しい複製を作成<xref:System.Data.DataTable>元と同じ構造で<xref:System.Data.DataTable>、任意のデータはコピーされませんが、(新しい<xref:System.Data.DataTable>は含められません`DataRows`)。</span><span class="sxs-lookup"><span data-stu-id="b4330-204">Clone creates a new <xref:System.Data.DataTable> with the same structure as the original <xref:System.Data.DataTable>, but does not copy any data (the new <xref:System.Data.DataTable> will not contain any `DataRows`).</span></span> <span data-ttu-id="b4330-205">新しい構造とデータの両方をコピーする<xref:System.Data.DataTable>を使用して、<xref:System.Data.DataTable.Copy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-205">To copy both the structure and data into a new <xref:System.Data.DataTable>, use <xref:System.Data.DataTable.Copy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-206">次の例では、DataTable.Clone を実行した後、構造体とレプリケーション先テーブルの制約を更新する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-206">The following sample demonstrates how to update the structure and constraints of the destination table after you execute DataTable.Clone.</span></span> <span data-ttu-id="b4330-207">ClonedDataTable クラスでは、変換先テーブルを返すし、すべての更新イベントが含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-207">The ClonedDataTable class will return a destination table and includes all the updating events.</span></span> <span data-ttu-id="b4330-208">クローン後のソース テーブルの構造の変更は、変換先テーブルに反映されません。</span><span class="sxs-lookup"><span data-stu-id="b4330-208">After the clone, structure changes in the source table won’t be reflected in the destination table.</span></span> <span data-ttu-id="b4330-209">具体的には、このサンプルには。</span><span class="sxs-lookup"><span data-stu-id="b4330-209">Specifically, this sample will:</span></span>  
  
-   <span data-ttu-id="b4330-210">ソース テーブル内の列の変更を更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-210">Update the changes of the columns in source table.</span></span>  
  
-   <span data-ttu-id="b4330-211">ソース テーブルの一意の制約の変更を更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-211">Update the changes of the UniqueConstraint in source table.</span></span>  
  
-   <span data-ttu-id="b4330-212">ソース テーブルの外部キーの変更を更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-212">Update the changes of the ForeignKeyConstraint in source table.</span></span>  
  
 <span data-ttu-id="b4330-213">このコード サンプルの c# および Visual Basic プロジェクトで確認できます[開発者コード サンプル](https://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-213">C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](https://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable).</span></span>  
  
```csharp  
using System;  
using System.Linq;  
using System.Data;  
using System.ComponentModel;  
  
class Program {  
   static void Main(string[] args) {  
      DataTable courses = NewCourseDataTable();  
      Console.WriteLine("This is the source table:");  
      WriteDataTable(courses);  
  
      ClonedDataTable clonedResult = new ClonedDataTable(courses);  
      DataTable clonedCourses = clonedResult.DestinationTable;  
      Console.WriteLine("This is the destination table:");  
      WriteDataTable(clonedCourses);  
  
      // Add the events of updating column collection into the source table.  
      clonedResult.UpdateAddedColumn();  
      clonedResult.UpdateDeletedColumn();  
      // Add a DataColumn in source table.  
      DataColumn columnCreidts = new DataColumn("Credits", typeof(Int32));  
      courses.Columns.Add(columnCreidts);  
      Console.WriteLine("After add a column in source table, it's the result in the destination:");  
      WriteDataTable(clonedCourses);  
  
      // Add the event of updating UniqueConstraint into the source table.  
      clonedResult.UpdateUniqueConstraint();  
  
      // Add the unique constraint in source table.  
      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns["CourseId"]);  
      courses.Constraints.Add(uniqueConstraint);  
  
      Console.WriteLine(@"If we add the unique constraint in source table and then insert the duplicate   
rows into the destination table, we will get the following error:");  
      InsertDuplicateData(clonedCourses);  
      Console.WriteLine();  
  
      // Add the event of updating ForeignKeyConstraint into the source table.  
      clonedResult.UpdateForeignKeyConstraint();  
  
      // Add the ForeignKeyConstraint into the source table.  
      DataTable deparments = NewDeparmentDataTable();  
      DataSet dataset = new DataSet();  
  
      dataset.Tables.Add(courses);  
      dataset.Tables.Add(clonedCourses);  
      dataset.Tables.Add(deparments);  
  
      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns["DepartmentId"], courses.Columns["DepartmentId"]);  
      courses.Constraints.Add(foreignKey);  
  
      Console.WriteLine(@"If we add the foreign key constraint in source table and then insert a row   
without the parent  into the destination table, we will get the following error:");  
      InsertNoParentRow(clonedCourses);  
      Console.WriteLine();  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   static private DataTable NewCourseDataTable() {  
      DataTable newTable = new DataTable();  
  
      DataColumn[] columns ={   
                                      new DataColumn("CourseId", typeof(String)),  
                                      new DataColumn("CourseName",typeof(String)),                                        
                                      new DataColumn("DepartmentId", typeof(Int32))  
                                  };  
  
      newTable.Columns.AddRange(columns);  
  
      newTable.Rows.Add("C1045", "Calculus", 7);  
      newTable.Rows.Add("C1061", "Physics", 1);  
      newTable.Rows.Add("C2021", "Composition", 2);  
      newTable.Rows.Add("C2042", "Literature", 2);  
  
      return newTable;  
   }  
  
   static private DataTable NewDeparmentDataTable() {  
      DataTable newTable = new DataTable();  
  
      DataColumn[] columns ={   
                                      new DataColumn("DepartmentId", typeof(Int32)),  
                                      new DataColumn("Name",typeof(String)),  
                                  };  
  
      newTable.Columns.AddRange(columns);  
  
      newTable.Rows.Add(1, "Engineering");  
      newTable.Rows.Add(2, "English");  
      newTable.Rows.Add(4, "Economics");  
      newTable.Rows.Add(7, "Mathematics");  
  
      return newTable;  
   }  
  
   static private void WriteDataTable(DataTable table) {  
      if (table == null)  
         return;  
  
      foreach (DataColumn column in table.Columns) {  
         Console.Write("{0,-15}", column.ColumnName);  
      }  
      Console.WriteLine();  
  
      foreach (DataRow row in table.Rows) {  
         for (int i = 0; i < table.Columns.Count; i++)  
            Console.Write("{0,-15}", row[i].ToString());  
         Console.WriteLine();  
      }  
  
      Console.WriteLine();  
   }  
  
   static private void InsertDuplicateData(DataTable table) {  
      try {  
         table.Rows.Add("C1045", "Calculus", 7);  
         table.Rows.Add("C1045", "Calculus", 7);  
      } catch (Exception e) {  
         Console.WriteLine("\"" + e.Message + "\"");  
      }  
   }  
  
   private static void InsertNoParentRow(DataTable table) {  
      try {  
         table.Rows.Add("C1061", "Physics", 11);  
      } catch (Exception e) {  
         Console.WriteLine("\"" + e.Message + "\"");  
      }  
   }  
}  
  
public class ClonedDataTable {  
   private DataTable sourceTable;  
   private DataTable destinationTable;  
  
   public ClonedDataTable(DataTable source) {  
      sourceTable = source;  
      // set the cloned result  
      destinationTable = sourceTable.Clone();  
   }  
  
   public void UpdateAddedColumn() {  
      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  
   }  
  
   public void UpdateDeletedColumn() {  
      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  
   }  
  
   public void UpdateUniqueConstraint() {  
      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  
   }  
  
   public void UpdateForeignKeyConstraint() {  
      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  
   }  
  
   // After the source table adds a column, the method will add the same column in the destination table.  
   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn column = e.Element as DataColumn;  
  
         if (column != null) {  
            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  
  
            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  
               destinationTable.Columns.Add(newColumn);  
         }  
      }  
   }  
  
   // After the source table deletes a column, the method will delete the same column in the destination table.  
   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  
      if (e.Action == CollectionChangeAction.Remove) {  
         DataColumn column = e.Element as DataColumn;  
  
         if (column != null)  
            if (destinationTable.Columns.Contains(column.ColumnName))  
               destinationTable.Columns.Remove(column.ColumnName);  
      }  
   }  
  
   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        
   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  
      UniqueConstraint constraint = e.Element as UniqueConstraint;  
  
      if (constraint == null)  
         return;  
  
      String constraintName = constraint.ConstraintName;  
  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  
         Boolean isPrimaryKey = constraint.IsPrimaryKey;  
  
         // Get the columns used in new constraint from the destiantion table.  
         for (Int32 i = 0; i < constraint.Columns.Count(); i++) {  
            String columnName = constraint.Columns[i].ColumnName;  
  
            if (destinationTable.Columns.Contains(columnName))  
               columns[i] = destinationTable.Columns[columnName];  
            else  
               return;  
         }  
  
         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  
  
         if (!destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Add(newConstraint);  
  
      } else if (e.Action == CollectionChangeAction.Remove)  
         if (destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Remove(constraintName);  
   }  
  
   // After the source table changes the ForeignKeyConstraint, this method changes    
   // the same ForeignKeyConstraint in the destination table.  
   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  
      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  
  
      if (constraint == null)  
         return;  
  
      // If the source and destination are not in the same DataSet, don't change the ForeignKeyConstraint.  
      if (sourceTable.DataSet != destinationTable.DataSet)  
         return;  
  
      String constraintName = constraint.ConstraintName;  
  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  
         DataColumn[] parentColumns = constraint.RelatedColumns;  
  
         // Get the columns used in new constraint from the destination table.  
         for (int i = 0; i < constraint.Columns.Count(); i++) {  
            String columnName = constraint.Columns[i].ColumnName;  
  
            if (destinationTable.Columns.Contains(columnName))  
               columns[i] = destinationTable.Columns[columnName];  
            else  
               return;  
         }  
  
         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  
         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  
         newConstraint.DeleteRule = constraint.DeleteRule;  
         newConstraint.UpdateRule = constraint.UpdateRule;  
  
         if (!destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Add(newConstraint);  
      } else if (e.Action == CollectionChangeAction.Remove)  
         if (destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Remove(constraintName);  
   }  
  
   // return the destination table.  
   public DataTable DestinationTable {  
      get { return destinationTable; }  
   }  
}  
```  
  
 <span data-ttu-id="b4330-214">このサンプルでは、DataTable 内のデータを変更して、データ ソースを更新する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-214">This sample shows how to modify data in a DataTable and update the data source.</span></span>  
  
 <span data-ttu-id="b4330-215">まず、データベースを作成します。</span><span class="sxs-lookup"><span data-stu-id="b4330-215">First, create a database:</span></span>  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]   
  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
```  
  
 <span data-ttu-id="b4330-216">コンパイルして、サンプルを実行することができますようになりました。</span><span class="sxs-lookup"><span data-stu-id="b4330-216">You can now compile and run the sample.</span></span> <span data-ttu-id="b4330-217">[DataTable、およびデータ ソースの更新でのデータを変更する方法](https://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4)はこのサンプルの Visual Basic および c# のプロジェクトがあります。</span><span class="sxs-lookup"><span data-stu-id="b4330-217">[How to modify data in DataTable and update to the data source](https://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4) has Visual Basic and C# projects of this sample.</span></span>  
  
```csharp  
using System;  
using System.Data;  
using System.Data.SqlClient;  
  
class Program {  
   static void Main(string[] args) {  
  
   string MySchoolConnectionString = "Data Source=(local);Initial Catalog=MySchool;Integrated Security=True";  
  
      // Get Data  
      String selectString =  
       @"Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  
               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] ";  
  
      DataSet dataSet = new DataSet();  
      DataTable course = dataSet.Tables.Add("Course");  
      DataTable department = dataSet.Tables.Add("Department");  
  
      Console.WriteLine("Get data from database:");  
      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  
      Console.WriteLine();  
  
      // Use DataTable Edits to edit the data  
      String updateString =  
              @"Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;";  
  
      course.ColumnChanged += OnColumnChanged;  
  
      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  
      ChangeCredits(course, course.Rows[0], -1);  
      ChangeCredits(course, course.Rows[1], 11);  
  
      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"),  
          new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits"));  
      Console.WriteLine("Only the Credits of second row is changed.");  
      ShowDataTable(course);  
      Console.WriteLine();  
  
      // Delete and Remove from DataTable  
      // Create the foreign key constraint, and set the DeleteRule with Cascade.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      String deleteString = @"Delete From [dbo].[Course] Where [CourseID]=@CourseID;";  
  
      department.Rows[0].Delete();  
      Console.WriteLine("If One row in Department table is deleted, the related rows in Course table will also be deleted.");  
      Console.WriteLine("Department DataTable:");  
      ShowDataTable(department);  
      Console.WriteLine();  
      Console.WriteLine("Course DataTable:");  
      ShowDataTable(course);  
      Console.WriteLine();  
      // Update the delete operation  
      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"));  
      Console.WriteLine("After delete operation:");  
      Console.WriteLine("Course DataTable:");  
      ShowDataTable(course);  
      Console.WriteLine();  
  
      course.Rows.RemoveAt(0);  
      Console.WriteLine("Now we remove one row from Course:");  
      ShowDataTable(course);  
      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"));  
   }  
  
   // Use SqlDataAdapter to get data.  
   private static void GetDataTables(String connectionString, String selectString,  
       DataSet dataSet, params DataTable[] tables) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.SelectCommand = new SqlCommand(selectString);  
         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Fill(0, 0, tables);  
  
         foreach (DataTable table in dataSet.Tables) {  
            Console.WriteLine("Data in {0}:", table.TableName);  
            ShowDataTable(table);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use SqlDataAdapter to update the updata operation.  
   private static void UpdateDataTables(String connectionString, String updateString,  
       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.UpdateCommand = new SqlCommand(updateString);  
         adapter.UpdateCommand.Parameters.AddRange(parameters);  
         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Update(dataSet, tableName);  
      }  
   }  
  
   // Use SqlDataAdapter to update delete operation.  
   private static void DeleteDataTables(String connectionString, String deleteString,  
       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.DeleteCommand = new SqlCommand(deleteString);  
         adapter.DeleteCommand.Parameters.AddRange(parameters);  
         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Update(dataSet, tableName);  
      }  
   }  
  
   // Use DataTable Edits to modify the data.  
   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  
      row.BeginEdit();  
      Console.WriteLine("We change row {0}", table.Rows.IndexOf(row));  
      row["Credits"] = credits;  
      row.EndEdit();  
   }  
  
   // The method will be invoked when the value in DataTable is changed.  
   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  
      Int32 credits = 0;  
      // If Credits is changed and the value is negative, we'll cancel the edit.  
      if ((args.Column.ColumnName == "Credits") &&  
          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits < 0)) {  
         Console.WriteLine("The value of Credits is invalid. Edit canceled.");  
         args.Row.CancelEdit();  
      }  
   }  
  
   // Display the column and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "RowState");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime)))  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               else if (col.DataType.Equals(typeof(Decimal)))  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               else  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime)))  
                  Console.Write("{0,-14:d}", row[col]);  
               else if (col.DataType.Equals(typeof(Decimal)))  
                  Console.Write("{0,-14:C}", row[col]);  
               else  
                  Console.Write("{0,-14}", row[col]);  
            }  
         }  
         Console.WriteLine("{0,-14}", row.RowState);  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataTable.Copy" />
      </Docs>
    </Member>
    <Member MemberName="ColumnChanged">
      <MemberSignature Language="C#" Value="public event System.Data.DataColumnChangeEventHandler ColumnChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataColumnChangeEventHandler ColumnChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.ColumnChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnChanged As DataColumnChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataColumnChangeEventHandler ^ ColumnChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnChanged : System.Data.DataColumnChangeEventHandler " Usage="member this.ColumnChanged : System.Data.DataColumnChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-218">Occurs after a value has been changed for the specified <see cref="T:System.Data.DataColumn" /> in a <see cref="T:System.Data.DataRow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-218">Occurs after a value has been changed for the specified <see cref="T:System.Data.DataColumn" /> in a <see cref="T:System.Data.DataRow" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-219">詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-219">For more information, see [Handling DataTable Events](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.ColumnChanged Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanged Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ColumnChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataColumnChangeEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ColumnChanging">
      <MemberSignature Language="C#" Value="public event System.Data.DataColumnChangeEventHandler ColumnChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataColumnChangeEventHandler ColumnChanging" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.ColumnChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnChanging As DataColumnChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataColumnChangeEventHandler ^ ColumnChanging;" />
      <MemberSignature Language="F#" Value="member this.ColumnChanging : System.Data.DataColumnChangeEventHandler " Usage="member this.ColumnChanging : System.Data.DataColumnChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-220">Occurs when a value is being changed for the specified <see cref="T:System.Data.DataColumn" /> in a <see cref="T:System.Data.DataRow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-220">Occurs when a value is being changed for the specified <see cref="T:System.Data.DataColumn" /> in a <see cref="T:System.Data.DataRow" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-221">詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-221">For more information, see [Handling DataTable Events](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.ColumnChanging Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanging Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ColumnChanging Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanging Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Data.DataColumnCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataColumnCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As DataColumnCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataColumnCollection ^ Columns { System::Data::DataColumnCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Columns : System.Data.DataColumnCollection" Usage="System.Data.DataTable.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-222">Gets the collection of columns that belong to this table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-222">Gets the collection of columns that belong to this table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-223">A<see cref="T:System.Data.DataColumnCollection" />のコレクションを格納している<see cref="T:System.Data.DataColumn" />テーブルのオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-223">A <see cref="T:System.Data.DataColumnCollection" /> that contains the collection of <see cref="T:System.Data.DataColumn" /> objects for the table.</span>
          </span>
          <span data-ttu-id="b4330-224">ない場合は、空のコレクションが返される<see cref="T:System.Data.DataColumn" />オブジェクトが存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-224">An empty collection is returned if no <see cref="T:System.Data.DataColumn" /> objects exist.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-225"><xref:System.Data.DataColumnCollection>各列のデータ型を定義することで、テーブルのスキーマを決定します。</span><span class="sxs-lookup"><span data-stu-id="b4330-225">The <xref:System.Data.DataColumnCollection> determines the schema of a table by defining the data type of each column.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-226">次の例を使用してテーブル内の各行の各値を出力する、<xref:System.Data.DataTable.Columns%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-226">The following example prints each value of each row in a table using the <xref:System.Data.DataTable.Columns%2A> property.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Columns Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Columns Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Columns Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Columns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compute">
      <MemberSignature Language="C#" Value="public object Compute (string expression, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Compute(string expression, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Compute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compute (expression As String, filter As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Compute(System::String ^ expression, System::String ^ filter);" />
      <MemberSignature Language="F#" Value="member this.Compute : string * string -&gt; obj" Usage="dataTable.Compute (expression, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="b4330-227">The expression to compute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-227">The expression to compute.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="b4330-228">The filter to limit the rows that evaluate in the expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-228">The filter to limit the rows that evaluate in the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-229">Computes the given expression on the current rows that pass the filter criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-229">Computes the given expression on the current rows that pass the filter criteria.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-230">An <see cref="T:System.Object" />, set to the result of the computation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-230">An <see cref="T:System.Object" />, set to the result of the computation.</span>
          </span>
          <span data-ttu-id="b4330-231">If the expression evaluates to null, the return value will be <see cref="F:System.DBNull.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-231">If the expression evaluates to null, the return value will be <see cref="F:System.DBNull.Value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-232">`expression`パラメーターには、集計関数が必要です。</span><span class="sxs-lookup"><span data-stu-id="b4330-232">The `expression` parameter requires an aggregate function.</span></span> <span data-ttu-id="b4330-233">たとえば、有効な式は、次のように。</span><span class="sxs-lookup"><span data-stu-id="b4330-233">For example, the following is a legal expression:</span></span>  
  
 `Count(Quantity)`  
  
 <span data-ttu-id="b4330-234">この式ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4330-234">But this expression is not:</span></span>  
  
 `Sum (Quantity * UnitPrice)`  
  
 <span data-ttu-id="b4330-235">場合は 2 つ以上の列に対して操作を実行する必要があります、作成、<xref:System.Data.DataColumn>に設定して、その<xref:System.Data.DataColumn.Expression%2A>プロパティを適切な式と、結果の列に集計式を使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-235">If you must perform an operation on two or more columns, you should create a <xref:System.Data.DataColumn>, set its <xref:System.Data.DataColumn.Expression%2A> property to an appropriate expression, and use an aggregate expression on the resulting column.</span></span> <span data-ttu-id="b4330-236">その場合は、指定された、<xref:System.Data.DataColumn>名前「合計」、および<xref:System.Data.DataColumn.Expression%2A>プロパティには、この設定。</span><span class="sxs-lookup"><span data-stu-id="b4330-236">In that case, given a <xref:System.Data.DataColumn> with the name "total", and the <xref:System.Data.DataColumn.Expression%2A> property set to this:</span></span>  
  
 `"Quantity * UnitPrice"`  
  
 <span data-ttu-id="b4330-237">式の引数、<xref:System.Data.DataTable.Compute%2A>メソッドがこれになります。</span><span class="sxs-lookup"><span data-stu-id="b4330-237">The expression argument for the <xref:System.Data.DataTable.Compute%2A> method would then be this:</span></span>  
  
 `Sum(total)`  
  
 <span data-ttu-id="b4330-238">2 番目のパラメーターでは、`filter`は、式で使用する行を決定します。</span><span class="sxs-lookup"><span data-stu-id="b4330-238">The second parameter, `filter`, determines which rows are used in the expression.</span></span> <span data-ttu-id="b4330-239">たとえば、テーブルに"colDate"という名前の日付列が含まれている場合、次の式を持つ行を制限します。</span><span class="sxs-lookup"><span data-stu-id="b4330-239">For example, if the table contains a date column named "colDate", you could limit the rows with the following expression:</span></span>  
  
 `colDate > 1/1/99 AND colDate < 17/1/99`  
  
 <span data-ttu-id="b4330-240">両方のパラメーターの式の作成にルールは、次を参照してください。、<xref:System.Data.DataColumn.Expression%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-240">For rules on creating expressions for both parameters, see the <xref:System.Data.DataColumn.Expression%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-241">次の例では、識別番号が 5 つの販売員「合計」をという名前の列の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b4330-241">The following example sums the values of a column named "Total", for the salesperson whose identification number is five.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Compute Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Compute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Compute Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Compute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constraints">
      <MemberSignature Language="C#" Value="public System.Data.ConstraintCollection Constraints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ConstraintCollection Constraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Constraints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Constraints As ConstraintCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ConstraintCollection ^ Constraints { System::Data::ConstraintCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Constraints : System.Data.ConstraintCollection" Usage="System.Data.DataTable.Constraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConstraintCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-242">Gets the collection of constraints maintained by this table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-242">Gets the collection of constraints maintained by this table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-243">A<see cref="T:System.Data.ConstraintCollection" />のコレクションを格納している<see cref="T:System.Data.Constraint" />テーブルのオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-243">A <see cref="T:System.Data.ConstraintCollection" /> that contains the collection of <see cref="T:System.Data.Constraint" /> objects for the table.</span>
          </span>
          <span data-ttu-id="b4330-244">ない場合は、空のコレクションが返される<see cref="T:System.Data.Constraint" />オブジェクトが存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-244">An empty collection is returned if no <see cref="T:System.Data.Constraint" /> objects exist.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-245">A <xref:System.Data.ForeignKeyConstraint> (または複数) の列の値が削除または更新したときに実行するアクションを制限します。</span><span class="sxs-lookup"><span data-stu-id="b4330-245">A <xref:System.Data.ForeignKeyConstraint> restricts the action performed when a value in a column (or columns) is either deleted or updated.</span></span> <span data-ttu-id="b4330-246">このような制約が主キー列で使用するためのものです。</span><span class="sxs-lookup"><span data-stu-id="b4330-246">Such a constraint is intended to be used with primary key columns.</span></span> <span data-ttu-id="b4330-247">2 つのテーブル間の親/子リレーションシップで、親テーブルから値を削除することができます子の行に影響は次の方法のいずれかでします。</span><span class="sxs-lookup"><span data-stu-id="b4330-247">In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.</span></span>  
  
-   <span data-ttu-id="b4330-248">子の行がすることもできます (カスケード アクション) を削除します。</span><span class="sxs-lookup"><span data-stu-id="b4330-248">The child rows can also be deleted (a cascading action).</span></span>  
  
-   <span data-ttu-id="b4330-249">子の列 (または列) の値は null 値を設定できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-249">The values in the child column (or columns) can be set to null values.</span></span>  
  
-   <span data-ttu-id="b4330-250">子の列 (または列) の値は、既定値に設定できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-250">The values in the child column (or columns) can be set to default values.</span></span>  
  
-   <span data-ttu-id="b4330-251">例外を生成できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-251">An exception can be generated.</span></span>  
  
 <span data-ttu-id="b4330-252">A<xref:System.Data.UniqueConstraint>と非一意の値に主キーの値を設定しようとしてアクティブになります。</span><span class="sxs-lookup"><span data-stu-id="b4330-252">A <xref:System.Data.UniqueConstraint> becomes active when attempting to set a value in a primary key to a non-unique value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-253">次の例では、追加、<xref:System.Data.ForeignKeyConstraint>に制約のコレクション。</span><span class="sxs-lookup"><span data-stu-id="b4330-253">The following example adds a <xref:System.Data.ForeignKeyConstraint> to the collection of constraints.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Constraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Constraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Constraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Constraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Data.DataTable" Usage="dataTable.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-254">Copies both the structure and data for this <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-254">Copies both the structure and data for this <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-255">A new <see cref="T:System.Data.DataTable" /> with the same structure (table schemas and constraints) and data as this <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-255">A new <see cref="T:System.Data.DataTable" /> with the same structure (table schemas and constraints) and data as this <see cref="T:System.Data.DataTable" />.</span>
          </span>
          <span data-ttu-id="b4330-256">If these classes have been derived, the copy will also be of the same derived classes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-256">If these classes have been derived, the copy will also be of the same derived classes.</span>
          </span>
          <span data-ttu-id="b4330-257">
            <see cref="M:System.Data.DataTable.Copy" /> creates a new <see cref="T:System.Data.DataTable" /> with the same structure and data as the original <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-257">
              <see cref="M:System.Data.DataTable.Copy" /> creates a new <see cref="T:System.Data.DataTable" /> with the same structure and data as the original <see cref="T:System.Data.DataTable" />.</span>
          </span>
          <span data-ttu-id="b4330-258">To copy the structure to a new <see cref="T:System.Data.DataTable" />, but not the data, use <see cref="M:System.Data.DataTable.Clone" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-258">To copy the structure to a new <see cref="T:System.Data.DataTable" />, but not the data, use <see cref="M:System.Data.DataTable.Clone" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4330-259">次の例では、 <xref:System.Data.DataTable.Copy%2A> 、元のコピーを作成するメソッド<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-259">The following example uses the <xref:System.Data.DataTable.Copy%2A> method to create a copy of the original <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-260">親から継承されている場合、名前空間の名前は保持されません<xref:System.Data.DataTable>または<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-260">The namespace name is not retained if it is inherited from a parent <xref:System.Data.DataTable> or <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataView.ToTable" />
        <altmember cref="M:System.Data.DataTable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : unit -&gt; System.Data.DataTableReader" Usage="dataTable.CreateDataReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-261">Returns a <see cref="T:System.Data.DataTableReader" /> corresponding to the data within this <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-261">Returns a <see cref="T:System.Data.DataTableReader" /> corresponding to the data within this <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-262">A <see cref="T:System.Data.DataTableReader" /> containing one result set, corresponding to the source <see cref="T:System.Data.DataTable" /> instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-262">A <see cref="T:System.Data.DataTableReader" /> containing one result set, corresponding to the source <see cref="T:System.Data.DataTable" /> instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4330-263"><xref:System.Data.DataTable> インスタンスを作成するコンソール アプリケーションの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-263">The following console application creates a <xref:System.Data.DataTable> instance.</span></span> <span data-ttu-id="b4330-264">例は、塗りつぶされた<xref:System.Data.DataTable>を呼び出すプロシージャに、<xref:System.Data.DataTable.CreateDataReader%2A>内に含まれる結果を反復処理するメソッド、<xref:System.Data.DataTableReader>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-264">The example then passes the filled <xref:System.Data.DataTable> to a procedure that calls the <xref:System.Data.DataTable.CreateDataReader%2A> method, which iterates through the results contained within the <xref:System.Data.DataTableReader>.</span></span>  
  
 [!code-csharp[DataWorks DataTable.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.CreateDataReader/VB/source.vb#1)]  
  
 <span data-ttu-id="b4330-265">この例では、次の出力がコンソール ウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-265">The example displays the following output in the console window:</span></span>  
  
 `1 Mary`  
  
 `2 Andy`  
  
 `3 Peter`  
  
 `4 Russ`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.CreateDataReader" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable CreateInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable CreateInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.CreateInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateInstance () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ CreateInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : unit -&gt; System.Data.DataTable&#xA;override this.CreateInstance : unit -&gt; System.Data.DataTable" Usage="dataTable.CreateInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-266">Creates a new instance of <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-266">Creates a new instance of <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-267">The new expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-267">The new expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSet">
      <MemberSignature Language="C#" Value="public System.Data.DataSet DataSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataSet DataSet" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DataSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSet As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSet ^ DataSet { System::Data::DataSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSet : System.Data.DataSet" Usage="System.Data.DataTable.DataSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-268">Gets the <see cref="T:System.Data.DataSet" /> to which this table belongs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-268">Gets the <see cref="T:System.Data.DataSet" /> to which this table belongs.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-269">
            <see cref="T:System.Data.DataSet" />このテーブルが属しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-269">The <see cref="T:System.Data.DataSet" /> to which this table belongs.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-270">コントロールがデータにバインドされて、<xref:System.Data.DataTable>が属するテーブルと、<xref:System.Data.DataSet>を取得する、<xref:System.Data.DataSet>このプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-270">If a control is data bound to a <xref:System.Data.DataTable>, and the table belongs to a <xref:System.Data.DataSet>, you can get to the <xref:System.Data.DataSet> through this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-271">次の例は、親を返します<xref:System.Data.DataSet>を通じて、特定のテーブルの<xref:System.Data.DataTable.DataSet%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-271">The following example returns the parent <xref:System.Data.DataSet> of a given table through the <xref:System.Data.DataTable.DataSet%2A> property.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultView">
      <MemberSignature Language="C#" Value="public System.Data.DataView DefaultView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataView DefaultView" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DefaultView" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultView As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataView ^ DefaultView { System::Data::DataView ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultView : System.Data.DataView" Usage="System.Data.DataTable.DefaultView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-272">Gets a customized view of the table that may include a filtered view, or a cursor position.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-272">Gets a customized view of the table that may include a filtered view, or a cursor position.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-273">
            <see cref="T:System.Data.DataView" /> に関連付けられている <see cref="T:System.Data.DataTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-273">The <see cref="T:System.Data.DataView" /> associated with the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-274"><xref:System.Data.DataTable.DefaultView%2A>プロパティが返す、<xref:System.Data.DataView>並べ替え、フィルター、および検索に使用することができます、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-274">The <xref:System.Data.DataTable.DefaultView%2A> property returns a <xref:System.Data.DataView> you can use to sort, filter, and search a <xref:System.Data.DataTable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-275">次の例のプロパティの設定、<xref:System.Data.DataTable>オブジェクトの<xref:System.Data.DataView>を通じて、<xref:System.Data.DataTable.DefaultView%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-275">The following example sets a property of the <xref:System.Data.DataTable> object's <xref:System.Data.DataView> through the <xref:System.Data.DataTable.DefaultView%2A> property.</span></span> <span data-ttu-id="b4330-276">バインディングも示しています、<xref:System.Windows.Forms.DataGridView>への制御、 <xref:System.Data.DataTable> "CompanyName"という名前の列を含む"Suppliers"という名前。</span><span class="sxs-lookup"><span data-stu-id="b4330-276">The example also shows the binding of a <xref:System.Windows.Forms.DataGridView> control to a <xref:System.Data.DataTable> named "Suppliers" that includes a column named "CompanyName."</span></span>  
  
 [!code-csharp[Classic WebData DataTable.DefaultView Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DefaultView Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DefaultView Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DefaultView Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayExpression">
      <MemberSignature Language="C#" Value="public string DisplayExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayExpression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DisplayExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayExpression : string with get, set" Usage="System.Data.DataTable.DisplayExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-277">Gets or sets the expression that returns a value used to represent this table in the user interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-277">Gets or sets the expression that returns a value used to represent this table in the user interface.</span>
          </span>
          <span data-ttu-id="b4330-278">The <see langword="DisplayExpression" /> property lets you display the name of this table in a user interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-278">The <see langword="DisplayExpression" /> property lets you display the name of this table in a user interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-279">表示文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-279">A display string.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="dataTable.EndInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-280">Ends the initialization of a <see cref="T:System.Data.DataTable" /> that is used on a form or used by another component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-280">Ends the initialization of a <see cref="T:System.Data.DataTable" /> that is used on a form or used by another component.</span>
          </span>
          <span data-ttu-id="b4330-281">The initialization occurs at run time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-281">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-282">Visual Studio .NET のデザイン環境では、このメソッドを使用して、フォームまたはその他のコンポーネントで使用するコンポーネントの初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="b4330-282">The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="b4330-283"><xref:System.Data.DataTable.BeginInit%2A>メソッドは、初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="b4330-283">The <xref:System.Data.DataTable.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="b4330-284">使用して、<xref:System.Data.DataTable.BeginInit%2A>と<xref:System.Data.DataTable.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="b4330-284">Using the <xref:System.Data.DataTable.BeginInit%2A> and <xref:System.Data.DataTable.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoadData">
      <MemberSignature Language="C#" Value="public void EndLoadData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndLoadData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.EndLoadData" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndLoadData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndLoadData();" />
      <MemberSignature Language="F#" Value="member this.EndLoadData : unit -&gt; unit" Usage="dataTable.EndLoadData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-285">Turns on notifications, index maintenance, and constraints after loading data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-285">Turns on notifications, index maintenance, and constraints after loading data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-286">使用<xref:System.Data.DataTable.EndLoadData%2A>と共に<xref:System.Data.DataTable.LoadDataRow%2A>と<xref:System.Data.DataTable.BeginLoadData%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-286">Use <xref:System.Data.DataTable.EndLoadData%2A> in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.BeginLoadData%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProperties : System.Data.PropertyCollection" Usage="System.Data.DataTable.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-287">Gets the collection of customized user information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-287">Gets the collection of customized user information.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-288">A<see cref="T:System.Data.PropertyCollection" />カスタム ユーザー情報を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-288">A <see cref="T:System.Data.PropertyCollection" /> that contains custom user information.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-289">使用して、<xref:System.Data.DataTable.ExtendedProperties%2A>にカスタム情報を追加する、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-289">Use the <xref:System.Data.DataTable.ExtendedProperties%2A> to add custom information to a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-290">使用して情報を追加、`Add`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-290">Add information with the `Add` method.</span></span> <span data-ttu-id="b4330-291">情報を取得、`Item`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-291">Retrieve information with the `Item` method.</span></span>  
  
 <span data-ttu-id="b4330-292">拡張プロパティは、型でなければなりません<xref:System.String>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-292">Extended properties must be of type <xref:System.String>.</span></span> <span data-ttu-id="b4330-293">文字列型でないプロパティは保持されないときに、<xref:System.Data.DataTable>は XML として書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-293">Properties that are not of type String are not persisted when the <xref:System.Data.DataTable> is written as XML.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-294">次の例では、追加するタイムスタンプ値を<xref:System.Data.DataTable>を通じて、<xref:System.Data.DataTable.ExtendedProperties%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-294">The following example adds a timestamp value to the <xref:System.Data.DataTable> through the <xref:System.Data.DataTable.ExtendedProperties%2A> property.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="fInitInProgress">
      <MemberSignature Language="C#" Value="protected internal bool fInitInProgress;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly bool fInitInProgress" />
      <MemberSignature Language="DocId" Value="F:System.Data.DataTable.fInitInProgress" />
      <MemberSignature Language="VB.NET" Value="Protected Friend fInitInProgress As Boolean " />
      <MemberSignature Language="C++ CLI" Value="protected public: bool fInitInProgress;" />
      <MemberSignature Language="F#" Value="val mutable fInitInProgress : bool" Usage="System.Data.DataTable.fInitInProgress" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-295">Checks whether initialization is in progress.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-295">Checks whether initialization is in progress.</span>
          </span>
          <span data-ttu-id="b4330-296">The initialization occurs at run time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-296">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-297">Gets a copy of the <see cref="T:System.Data.DataTable" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataTable.AcceptChanges" /> was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-297">Gets a copy of the <see cref="T:System.Data.DataTable" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataTable.AcceptChanges" /> was called.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ GetChanges();" />
      <MemberSignature Language="F#" Value="member this.GetChanges : unit -&gt; System.Data.DataTable" Usage="dataTable.GetChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-298">Gets a copy of the <see cref="T:System.Data.DataTable" /> that contains all changes made to it since it was loaded or <see cref="M:System.Data.DataTable.AcceptChanges" /> was last called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-298">Gets a copy of the <see cref="T:System.Data.DataTable" /> that contains all changes made to it since it was loaded or <see cref="M:System.Data.DataTable.AcceptChanges" /> was last called.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-299">A copy of the changes from this <see cref="T:System.Data.DataTable" />, or <see langword="null" /> if no changes are found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-299">A copy of the changes from this <see cref="T:System.Data.DataTable" />, or <see langword="null" /> if no changes are found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-300">新たに作成<xref:System.Data.DataSet>、元のすべての行のコピーを含む<xref:System.Data.DataSet>保留中の変更があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-300">Creates a new <xref:System.Data.DataSet> containing a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span> <span data-ttu-id="b4330-301">リレーションシップの制限が原因で、新規に追加する追加の変更されていない行<xref:System.Data.DataSet>変更されていない行が変更された行の外部キーに対応する主キーを含めるかどうか。</span><span class="sxs-lookup"><span data-stu-id="b4330-301">Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</span></span> <span data-ttu-id="b4330-302">メソッドを返します`null`(`Nothing` Visual Basic で) 元の行がない場合<xref:System.Data.DataSet>で保留中の変更。</span><span class="sxs-lookup"><span data-stu-id="b4330-302">The method returns `null` (`Nothing` in Visual Basic) if there are no rows in the original <xref:System.Data.DataSet> with pending changes.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.GetChanges : System.Data.DataRowState -&gt; System.Data.DataTable" Usage="dataTable.GetChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">
          <span data-ttu-id="b4330-303">One of the <see cref="T:System.Data.DataRowState" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-303">One of the <see cref="T:System.Data.DataRowState" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-304">Gets a copy of the <see cref="T:System.Data.DataTable" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataTable.AcceptChanges" /> was called, filtered by <see cref="T:System.Data.DataRowState" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-304">Gets a copy of the <see cref="T:System.Data.DataTable" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataTable.AcceptChanges" /> was called, filtered by <see cref="T:System.Data.DataRowState" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-305">A filtered copy of the <see cref="T:System.Data.DataTable" /> that can have actions performed on it, and later be merged back in the <see cref="T:System.Data.DataTable" /> using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-305">A filtered copy of the <see cref="T:System.Data.DataTable" /> that can have actions performed on it, and later be merged back in the <see cref="T:System.Data.DataTable" /> using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span>
          </span>
          <span data-ttu-id="b4330-306">If no rows of the desired <see cref="T:System.Data.DataRowState" /> are found, the method returns <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-306">If no rows of the desired <see cref="T:System.Data.DataRowState" /> are found, the method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-307"><xref:System.Data.DataTable.GetChanges%2A>メソッドは、1 秒あたりに生成するために使用<xref:System.Data.DataTable>元に導入された変更のみを格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-307">The <xref:System.Data.DataTable.GetChanges%2A> method is used to produce a second <xref:System.Data.DataTable> object that contains only the changes introduced into the original.</span></span> <span data-ttu-id="b4330-308">使用して、`rowStates`新しいオブジェクトを含める必要があります変更の種類を指定する引数。</span><span class="sxs-lookup"><span data-stu-id="b4330-308">Use the `rowStates` argument to specify the type of changes the new object should include.</span></span>  
  
 <span data-ttu-id="b4330-309">親が変更されていない行が含まれるリレーションシップの制約があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-309">Relationship constraints may cause unchanged parent rows to be included.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataTableSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataTableSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataTableSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberSignature Language="F#" Value="static member GetDataTableSchema : System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaComplexType" Usage="System.Data.DataTable.GetDataTableSchema schemaSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemaSet">
          <span data-ttu-id="b4330-310">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-310">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-311">This method returns an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instance containing the Web Services Description Language (WSDL) that describes the <see cref="T:System.Data.DataTable" /> for Web Services.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-311">This method returns an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instance containing the Web Services Description Language (WSDL) that describes the <see cref="T:System.Data.DataTable" /> for Web Services.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-312">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-312">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetErrors">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetErrors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetErrors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetErrors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetErrors () As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ GetErrors();" />
      <MemberSignature Language="F#" Value="member this.GetErrors : unit -&gt; System.Data.DataRow[]" Usage="dataTable.GetErrors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-313">Gets an array of <see cref="T:System.Data.DataRow" /> objects that contain errors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-313">Gets an array of <see cref="T:System.Data.DataRow" /> objects that contain errors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-314">An array of <see cref="T:System.Data.DataRow" /> objects that have errors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-314">An array of <see cref="T:System.Data.DataRow" /> objects that have errors.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-315">一覧を返します<xref:System.Data.DataRow>を持つオブジェクト<xref:System.Data.DataRow.RowError%2A>を設定します。</span><span class="sxs-lookup"><span data-stu-id="b4330-315">Returns the list of <xref:System.Data.DataRow> objects that have <xref:System.Data.DataRow.RowError%2A> set.</span></span> <span data-ttu-id="b4330-316">呼び出すときにエラーが発生することができます、<xref:System.Data.Common.DataAdapter.Update%2A>で<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>に設定**true**します。</span><span class="sxs-lookup"><span data-stu-id="b4330-316">For example, errors can occur when calling <xref:System.Data.Common.DataAdapter.Update%2A> with <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> set to **true**.</span></span> <span data-ttu-id="b4330-317">呼び出さないでください<xref:System.Data.DataTable.AcceptChanges%2A>上、<xref:System.Data.DataTable>すべてのエラーを解決して再送信するまで、<xref:System.Data.DataSet>を更新するためです。</span><span class="sxs-lookup"><span data-stu-id="b4330-317">Do not invoke <xref:System.Data.DataTable.AcceptChanges%2A> on the <xref:System.Data.DataTable> until you resolve all errors and resubmit the <xref:System.Data.DataSet> for updating.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-318">次の例では、<xref:System.Data.DataTable.GetErrors%2A>の配列を返すメソッドを<xref:System.Data.DataRow>エラーが発生したオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-318">The following example uses the <xref:System.Data.DataTable.GetErrors%2A> method to return an array of <xref:System.Data.DataRow> objects that have errors.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.GetErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.HasErrors" />
        <altmember cref="P:System.Data.DataRow.RowError" />
        <altmember cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataTable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="b4330-319">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized data associated with the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-319">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized data associated with the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="b4330-320">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-320">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-321">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-321">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b4330-322">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-322">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRowType">
      <MemberSignature Language="C#" Value="protected virtual Type GetRowType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type GetRowType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetRowType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetRowType () As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ GetRowType();" />
      <MemberSignature Language="F#" Value="abstract member GetRowType : unit -&gt; Type&#xA;override this.GetRowType : unit -&gt; Type" Usage="dataTable.GetRowType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-323">Gets the row type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-323">Gets the row type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-324">Returns the type of the <see cref="T:System.Data.DataRow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-324">Returns the type of the <see cref="T:System.Data.DataRow" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchema () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchema();" />
      <MemberSignature Language="F#" Value="abstract member GetSchema : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.GetSchema : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataTable.GetSchema " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-325">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-325">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-326">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-326">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasErrors : bool" Usage="System.Data.DataTable.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-327">Gets a value indicating whether there are errors in any of the rows in any of the tables of the <see cref="T:System.Data.DataSet" /> to which the table belongs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-327">Gets a value indicating whether there are errors in any of the rows in any of the tables of the <see cref="T:System.Data.DataSet" /> to which the table belongs.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-328">
            <see langword="true" /> エラーがある場合それ以外の場合<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-328">
              <see langword="true" /> if errors exist; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-329">ユーザーの作業に含まれるデータのセットに応じて、 <xref:System.Data.DataTable>、変更によって検証エラーが発生した場合、エラーでは、各変更をマークすることができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-329">As users work on a set of data contained in a <xref:System.Data.DataTable>, you can mark each change with an error if the change causes some validation failure.</span></span> <span data-ttu-id="b4330-330">全体をマークする<xref:System.Data.DataRow>を使用してエラー メッセージ、<xref:System.Data.DataRow.RowError%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-330">You can mark an entire <xref:System.Data.DataRow> with an error message using the <xref:System.Data.DataRow.RowError%2A> property.</span></span> <span data-ttu-id="b4330-331">含む行の各列でエラーを設定することも、<xref:System.Data.DataRow.SetColumnError%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-331">You can also set errors on each column of the row with the <xref:System.Data.DataRow.SetColumnError%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-332">データ ソースを更新する前に、 <xref:System.Data.DataSet>、最初に呼び出すことをお勧め、<xref:System.Data.DataSet.GetChanges%2A>メソッド ターゲットを<xref:System.Data.DataSet>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-332">Before updating a data source with a <xref:System.Data.DataSet>, it's recommended that you first invoke the <xref:System.Data.DataSet.GetChanges%2A> method on the target <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="b4330-333">メソッドの結果、<xref:System.Data.DataSet>元に行われた変更のみを格納しています。</span><span class="sxs-lookup"><span data-stu-id="b4330-333">The method results in a <xref:System.Data.DataSet> that contains only the changes made to the original.</span></span> <span data-ttu-id="b4330-334">送信する前に、<xref:System.Data.DataSet>を更新するため、データ ソースを確認、<xref:System.Data.DataTable.HasErrors%2A>エラーが行または行の列にアタッチされているかどうかに表示するには、各テーブルのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-334">Before sending the <xref:System.Data.DataSet> to the data source for updating, check the <xref:System.Data.DataTable.HasErrors%2A> property of each table to see if any errors have been attached to the rows or columns in the rows.</span></span>  
  
 <span data-ttu-id="b4330-335">各エラーを解決した後でエラーをクリア、<xref:System.Data.DataRow.ClearErrors%2A>のメソッド、`DataRow`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-335">After reconciling each error, clear the errors with the <xref:System.Data.DataRow.ClearErrors%2A> method of the `DataRow`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-336">次の例では、<xref:System.Data.DataTable.HasErrors%2A>テーブルにエラーが含まれるかどうかを確認するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-336">The following example uses the <xref:System.Data.DataTable.HasErrors%2A> property to check if a table contains errors.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataTable.GetErrors" />
      </Docs>
    </Member>
    <Member MemberName="ImportRow">
      <MemberSignature Language="C#" Value="public void ImportRow (System.Data.DataRow row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ImportRow(class System.Data.DataRow row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ImportRow(System.Data.DataRow)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportRow (row As DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportRow(System::Data::DataRow ^ row);" />
      <MemberSignature Language="F#" Value="member this.ImportRow : System.Data.DataRow -&gt; unit" Usage="dataTable.ImportRow row" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" />
      </Parameters>
      <Docs>
        <param name="row">
          <span data-ttu-id="b4330-337">The <see cref="T:System.Data.DataRow" /> to be imported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-337">The <see cref="T:System.Data.DataRow" /> to be imported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-338">Copies a <see cref="T:System.Data.DataRow" /> into a <see cref="T:System.Data.DataTable" />, preserving any property settings, as well as original and current values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-338">Copies a <see cref="T:System.Data.DataRow" /> into a <see cref="T:System.Data.DataTable" />, preserving any property settings, as well as original and current values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-339">呼び出す<xref:System.Data.DataTable.NewRow%2A>、行の既定の値が、既存のテーブル スキーマを使用してテーブルに行を追加し、設定、<xref:System.Data.DataRowState>に`Detached`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-339">Calling <xref:System.Data.DataTable.NewRow%2A> adds a row to the table using the existing table schema, but with default values for the row, and sets the <xref:System.Data.DataRowState> to `Detached`.</span></span> <span data-ttu-id="b4330-340">呼び出す<xref:System.Data.DataTable.ImportRow%2A>既存を保持<xref:System.Data.DataRowState>と共に、行の他の値。</span><span class="sxs-lookup"><span data-stu-id="b4330-340">Calling <xref:System.Data.DataTable.ImportRow%2A> preserves the existing <xref:System.Data.DataRowState> along with other values in the row.</span></span> <span data-ttu-id="b4330-341">場合、`DataRow`渡されるパラメーターがデタッチ済み状態では、無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="b4330-341">If the `DataRow` that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="b4330-342">新しい行は、データ テーブルの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-342">The new row will be added to the end of the data table.</span></span>  
  
 <span data-ttu-id="b4330-343">新しい行には制約に違反している場合は、データ テーブルに追加されません。</span><span class="sxs-lookup"><span data-stu-id="b4330-343">If the new row violates a Constraint it won’t be added to the data table.</span></span>  
  
 <span data-ttu-id="b4330-344">DataTable.Rows.Find と DataTable.Rows.IndexOf として持つ新しい行のインデックスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-344">You can get the index of the new row with as DataTable.Rows.Find and DataTable.Rows.IndexOf.</span></span> <span data-ttu-id="b4330-345">詳細については、「<xref:System.Data.DataRowCollection>」および「<xref:System.Data.DataTable.Rows%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b4330-345">See <xref:System.Data.DataRowCollection> and <xref:System.Data.DataTable.Rows%2A> for more information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-346">Occurs after the <see cref="T:System.Data.DataTable" /> is initialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-346">Occurs after the <see cref="T:System.Data.DataTable" /> is initialized.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-347">詳細については、「<xref:System.Data.DataTable.IsInitialized%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b4330-347">For more information, see <xref:System.Data.DataTable.IsInitialized%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Data.DataTable.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-348">Gets a value that indicates whether the <see cref="T:System.Data.DataTable" /> is initialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-348">Gets a value that indicates whether the <see cref="T:System.Data.DataTable" /> is initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-349">
            <see langword="true" /> コンポーネントを示すために初期化が完了しましたそれ以外の場合<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-349">
              <see langword="true" /> to indicate the component has completed initialization; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-350">状態を返し、<xref:System.Data.DataTable>ことによって作成される、たとえば Visual Studio の中にします。</span><span class="sxs-lookup"><span data-stu-id="b4330-350">Returns the status of the <xref:System.Data.DataTable> while it’s being constructed, for instance by Visual Studio.</span></span> <span data-ttu-id="b4330-351"><xref:System.Data.DataTable.BeginInit%2A>メソッドに設定`false`と<xref:System.Data.DataTable.EndInit%2A>メソッドに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-351">The <xref:System.Data.DataTable.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataTable.EndInit%2A> method sets it to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-352">Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-352">Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span>
          </span>
          <span data-ttu-id="b4330-353">If the <see langword="DataTable" /> already contains rows, the incoming data from the data source is merged with the existing rows.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-353">If the <see langword="DataTable" /> already contains rows, the incoming data from the data source is merged with the existing rows.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-354">`Load`メソッドは、指定したデータ ソースからデータを取得し、現在のデータ コンテナーに追加することをすべて中央揃え、いくつかの一般的なシナリオで使用できます (ここで、 `DataTable`)。</span><span class="sxs-lookup"><span data-stu-id="b4330-354">The `Load` method can be used in several common scenarios, all centered around getting data from a specified data source and adding it to the current data container (in this case, a `DataTable`).</span></span> <span data-ttu-id="b4330-355">これらのシナリオの標準の使用状況の説明、`DataTable`その更新プログラムを記述する方法、および動作をマージします。</span><span class="sxs-lookup"><span data-stu-id="b4330-355">These scenarios describe standard usage for a `DataTable`, describing its update and merge behavior.</span></span>  
  
 <span data-ttu-id="b4330-356">A`DataTable`により同期または 1 つのプライマリ データ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-356">A `DataTable` synchronizes or updates with a single primary data source.</span></span> <span data-ttu-id="b4330-357">`DataTable`プライマリ データ ソースとの同期を許可する、変更を追跡します。</span><span class="sxs-lookup"><span data-stu-id="b4330-357">The `DataTable` tracks changes, allowing synchronization with the primary data source.</span></span> <span data-ttu-id="b4330-358">さらに、 `DataTable` 1 つまたは複数のセカンダリ データ ソースからデータの増分を受け入れることができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-358">In addition, a `DataTable` can accept incremental data from one or more secondary data sources.</span></span> <span data-ttu-id="b4330-359">`DataTable`セカンダリ データ ソースと同期できるようにするために変更を追跡する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b4330-359">The `DataTable` isn't responsible for tracking changes in order to allow synchronization with the secondary data source.</span></span>  
  
 <span data-ttu-id="b4330-360">これら 2 つの架空のデータ ソースを指定するには、ユーザーは、次の動作のいずれかが必要な可能性。</span><span class="sxs-lookup"><span data-stu-id="b4330-360">Given these two hypothetical data sources, a user is likely to require one of the following behaviors:</span></span>  
  
-   <span data-ttu-id="b4330-361">初期化`DataTable`プライマリ データ ソースから。</span><span class="sxs-lookup"><span data-stu-id="b4330-361">Initialize `DataTable` from a primary data source.</span></span> <span data-ttu-id="b4330-362">このシナリオで、ユーザーが、空の初期化が`DataTable`をプライマリ データ ソースの値。</span><span class="sxs-lookup"><span data-stu-id="b4330-362">In this scenario, the user wants to initialize an empty `DataTable` with values from the primary data source.</span></span> <span data-ttu-id="b4330-363">後で、ユーザーは、プライマリ データ ソースに変更を反映する予定です。</span><span class="sxs-lookup"><span data-stu-id="b4330-363">Later the user intends to propagate changes back to the primary data source.</span></span>  
  
-   <span data-ttu-id="b4330-364">変更を保持し、プライマリ データ ソースから再同期します。</span><span class="sxs-lookup"><span data-stu-id="b4330-364">Preserve changes and re-synchronize from the primary data source.</span></span> <span data-ttu-id="b4330-365">このシナリオで、ユーザーが実行する、`DataTable`で行われた変更を維持し、プライマリ データ ソースと、増分同期を行い、前のシナリオで入力、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-365">In this scenario, the user wants to take the `DataTable` filled in the previous scenario and perform an incremental synchronization with the primary data source, preserving modifications made in the `DataTable`.</span></span>  
  
-   <span data-ttu-id="b4330-366">セカンダリ データ ソースからの増分データ フィードです。</span><span class="sxs-lookup"><span data-stu-id="b4330-366">Incremental data feed from secondary data sources.</span></span> <span data-ttu-id="b4330-367">このシナリオでは、ユーザーは、1 つまたは複数のセカンダリ データ ソースからの変更をマージし、プライマリ データ ソースに戻るには、その変更を反映するがします。</span><span class="sxs-lookup"><span data-stu-id="b4330-367">In this scenario, the user wants to merge changes from one or more secondary data sources, and propagate those changes back to the primary data source.</span></span>  
  
 <span data-ttu-id="b4330-368">`Load`メソッドにより、これらすべてのシナリオが可能です。</span><span class="sxs-lookup"><span data-stu-id="b4330-368">The `Load` method makes all these scenarios possible.</span></span> <span data-ttu-id="b4330-369">すべてが 1 つのオーバー ロードは、このメソッドを使用して、読み込みのオプション パラメーターを指定できますを示す方法に既に含まれて、<xref:System.Data.DataTable>読み込まれる行と結合します。</span><span class="sxs-lookup"><span data-stu-id="b4330-369">All but one of the overloads for this method allows you to specify a load option parameter, indicating how rows already in a <xref:System.Data.DataTable> combine with rows being loaded.</span></span> <span data-ttu-id="b4330-370">(動作を指定することはできませんをオーバー ロードは、既定の読み込みオプションを使用します)。次の表に、次の 3 つの負荷で提供されるオプション、<xref:System.Data.LoadOption>列挙体。</span><span class="sxs-lookup"><span data-stu-id="b4330-370">(The overload that doesn't allow you to specify the behavior uses the default load option.) The following table describes the three load options provided by the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="b4330-371">各ケースでは、説明は、着信データの行の主キーには、既存の行の主キーが一致する場合に、動作を示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-371">In each case, the description indicates the behavior when the primary key of a row in the incoming data matches the primary key of an existing row.</span></span>  
  
|<span data-ttu-id="b4330-372">読み込みオプション</span><span class="sxs-lookup"><span data-stu-id="b4330-372">Load Option</span></span>|<span data-ttu-id="b4330-373">説明</span><span class="sxs-lookup"><span data-stu-id="b4330-373">Description</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="b4330-374">`PreserveChanges` (既定値)</span><span class="sxs-lookup"><span data-stu-id="b4330-374">`PreserveChanges` (default)</span></span>|<span data-ttu-id="b4330-375">受信した行の値を持つ行の元のバージョンを更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-375">Updates the original version of the row with the value of the incoming row.</span></span>|  
|`OverwriteChanges`|<span data-ttu-id="b4330-376">受信した行の値を持つ行の現在と元のバージョンを更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-376">Updates the current and original versions of the row with the value of the incoming row.</span></span>|  
|`Upsert`|<span data-ttu-id="b4330-377">受信した行の値を持つ行の現在のバージョンを更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-377">Updates the current version of the row with the value of the incoming row.</span></span>|  
  
 <span data-ttu-id="b4330-378">一般に、`PreserveChanges`と`OverwriteChanges`オプションは、ユーザーが同期のシナリオを意図しています、`DataSet`とプライマリ データ ソースを変更します。</span><span class="sxs-lookup"><span data-stu-id="b4330-378">In general, the `PreserveChanges` and `OverwriteChanges` options are intended for scenarios in which the user needs to synchronize the `DataSet` and its changes with the primary data source.</span></span> <span data-ttu-id="b4330-379">`Upsert`オプションが 1 つまたは複数のセカンダリ データ ソースから集計の変更を容易になります。</span><span class="sxs-lookup"><span data-stu-id="b4330-379">The `Upsert` option facilitates aggregating changes from one or more secondary data sources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-380">次の例では、呼び出しに関連する問題のいくつかを紹介します<xref:System.Data.DataTable.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-380">The following example demonstrates several of the issues involved with calling the <xref:System.Data.DataTable.Load%2A> method.</span></span> <span data-ttu-id="b4330-381">例では、スキーマの問題は、読み込まれてから、スキーマの推論などに重点を置いています最初に、<xref:System.Data.IDataReader>とし、互換性のないスキーマは、および不足しているまたはその他の列を含むスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="b4330-381">First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns.</span></span> <span data-ttu-id="b4330-382">例では、さまざまな読み込みオプションの処理など、データの問題、について説明します。</span><span class="sxs-lookup"><span data-stu-id="b4330-382">The example then focuses on data issues, including handling the various loading options.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-383">この例は、のいずれかのオーバー ロードされたバージョンを使用する方法を示します`Load`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-383">This example shows how to use one of the overloaded versions of `Load`.</span></span> <span data-ttu-id="b4330-384">使用可能な可能性があるその他の例は、個々 のオーバー ロードのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b4330-384">For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataTableLoad#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Data.DataSet.Load" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader -&gt; unit" Usage="dataTable.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-385">An <see cref="T:System.Data.IDataReader" /> that provides a result set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-385">An <see cref="T:System.Data.IDataReader" /> that provides a result set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-386">Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-386">Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span>
          </span>
          <span data-ttu-id="b4330-387">If the <see cref="T:System.Data.DataTable" /> already contains rows, the incoming data from the data source is merged with the existing rows.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-387">If the <see cref="T:System.Data.DataTable" /> already contains rows, the incoming data from the data source is merged with the existing rows.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-388"><xref:System.Data.DataTable.Load%2A>メソッドは最初の結果セットから読み込まれた<xref:System.Data.IDataReader>が正常に完了には、設定、リーダーの位置 [次へ] の結果セットに存在する場合とします。</span><span class="sxs-lookup"><span data-stu-id="b4330-388">The <xref:System.Data.DataTable.Load%2A> method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any.</span></span> <span data-ttu-id="b4330-389">データを変換するとき、`Load`メソッドと同じ変換規則を使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-389">When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b4330-390"><xref:System.Data.DataTable.Load%2A>メソッドする必要があります考慮に入れて 3 つの特定の問題からデータを読み込むときに、<xref:System.Data.IDataReader>インスタンス: スキーマ、データ、およびイベント操作。</span><span class="sxs-lookup"><span data-stu-id="b4330-390">The <xref:System.Data.DataTable.Load%2A> method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations.</span></span> <span data-ttu-id="b4330-391">スキーマを使用する場合、<xref:System.Data.DataTable.Load%2A>メソッドを次の表に示す条件が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-391">When working with the schema, the <xref:System.Data.DataTable.Load%2A> method may encounter conditions as described in the following table.</span></span> <span data-ttu-id="b4330-392">データが含まれていないものも含め、すべてのインポートされた結果セット向けに、スキーマ操作が行わします。</span><span class="sxs-lookup"><span data-stu-id="b4330-392">The schema operations take place for all imported result sets, even those containing no data.</span></span>  
  
|<span data-ttu-id="b4330-393">条件</span><span class="sxs-lookup"><span data-stu-id="b4330-393">Condition</span></span>|<span data-ttu-id="b4330-394">動作</span><span class="sxs-lookup"><span data-stu-id="b4330-394">Behavior</span></span>|  
|---------------|--------------|  
|<span data-ttu-id="b4330-395"><xref:System.Data.DataTable>スキーマがありません。</span><span class="sxs-lookup"><span data-stu-id="b4330-395">The <xref:System.Data.DataTable> has no schema.</span></span>|<span data-ttu-id="b4330-396"><xref:System.Data.DataTable.Load%2A>メソッドは、インポートの結果セットに基づくスキーマを推論<xref:System.Data.IDataReader>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-396">The <xref:System.Data.DataTable.Load%2A> method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.</span></span>|  
|<span data-ttu-id="b4330-397"><xref:System.Data.DataTable>スキーマがありますが、読み込まれたスキーマに互換性はありません。</span><span class="sxs-lookup"><span data-stu-id="b4330-397">The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.</span></span>|<span data-ttu-id="b4330-398"><xref:System.Data.DataTable.Load%2A>メソッドしようとすると、互換性のないスキーマにデータを読み込むときに発生する特定のエラーに対応する例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b4330-398">The <xref:System.Data.DataTable.Load%2A> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</span></span>|  
|<span data-ttu-id="b4330-399">スキーマに互換性はあるが、読み込まれた結果セットのスキーマに存在しない列が含まれています、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-399">The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <xref:System.Data.DataTable>.</span></span>|<span data-ttu-id="b4330-400"><xref:System.Data.DataTable.Load%2A>メソッドは、余分な列を追加します。`DataTable`のスキーマ。</span><span class="sxs-lookup"><span data-stu-id="b4330-400">The <xref:System.Data.DataTable.Load%2A> method adds the extra columns to `DataTable`'s schema.</span></span> <span data-ttu-id="b4330-401">メソッドは、対応する場合に例外をスロー内の列、<xref:System.Data.DataTable>読み込まれた結果セットは、互換性のある値ではできません。</span><span class="sxs-lookup"><span data-stu-id="b4330-401">The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible.</span></span> <span data-ttu-id="b4330-402">メソッドは、追加したすべての列の結果セットからも制約情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="b4330-402">The method also retrieves constraint information from the result set for all added columns.</span></span> <span data-ttu-id="b4330-403">場合にのみに使用するこの制約の情報を除く Primary Key 制約の場合は、現在<xref:System.Data.DataTable>読み込み操作の開始時の任意の列を含んでいません。</span><span class="sxs-lookup"><span data-stu-id="b4330-403">Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.</span></span>|  
|<span data-ttu-id="b4330-404">スキーマに互換性はあるが、読み込まれた結果セットのスキーマがよりも少ない列が含まれています、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-404">The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.</span></span>|<span data-ttu-id="b4330-405">不足している列が定義された既定値を持っているか、列のデータ型は、null 許容の場合、<xref:System.Data.DataTable.Load%2A>メソッドにより、追加する行であり、既定値の置換または`null`不足している列の値。</span><span class="sxs-lookup"><span data-stu-id="b4330-405">If a missing column has a default value defined or the column's data type is nullable, the <xref:System.Data.DataTable.Load%2A> method allows the rows to be added, substituting the default or `null` value for the missing column.</span></span> <span data-ttu-id="b4330-406">既定値はありません場合、または`null`使用できますが、次に、`Load`メソッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b4330-406">If no default value or `null` can be used, then the `Load` method throws an exception.</span></span> <span data-ttu-id="b4330-407">特定の既定値が指定されていない場合、`Load`メソッドは、`null`暗黙の既定値として値。</span><span class="sxs-lookup"><span data-stu-id="b4330-407">If no specific default value has been supplied, the `Load` method uses the `null` value as the implied default value.</span></span>|  
  
 <span data-ttu-id="b4330-408">動作を検討する前に、`Load`メソッドは、データ操作の観点からそれを考慮して各内で行を<xref:System.Data.DataTable>各列の元の値と現在の値の両方を保持します。</span><span class="sxs-lookup"><span data-stu-id="b4330-408">Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column.</span></span> <span data-ttu-id="b4330-409">これらの値は、それと同等である可能性がありますか、いっぱいになるのため、行のデータが変更された場合は異なる場合があります、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-409">These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`.</span></span>  <span data-ttu-id="b4330-410">詳細については、次を参照してください。[行の状態と行バージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-410">For more information, see [Row States and Row Versions](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md).</span></span>  
  
 <span data-ttu-id="b4330-411">このバージョンの`Load`メソッドは、元の値をそのまま残して、各行の現在の値を保持しようとしています。</span><span class="sxs-lookup"><span data-stu-id="b4330-411">This version of the `Load` method attempts to preserve the current values in each row, leaving the original value intact.</span></span> <span data-ttu-id="b4330-412">(受信データの動作をより細かく制御する場合は、「 <xref:System.Data.DataTable.Load%2A?displayProperty=nameWithType>。)既存の行と、受信した行に対応する主キー値が含まれている場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。</span><span class="sxs-lookup"><span data-stu-id="b4330-412">(If you want finer control over the behavior of incoming data, see <xref:System.Data.DataTable.Load%2A?displayProperty=nameWithType>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</span></span>  
  
 <span data-ttu-id="b4330-413">イベントの操作の観点から、<xref:System.Data.DataTable.RowChanging>各の行を変更すると、前に、イベントが発生し、<xref:System.Data.DataTable.RowChanged>イベントは、各行が変更された後に発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-413">In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed.</span></span> <span data-ttu-id="b4330-414">各ケースで、<xref:System.Data.DataRowChangeEventArgs.Action%2A>のプロパティ、<xref:System.Data.DataRowChangeEventArgs>イベント ハンドラーに渡されるインスタンスには、イベントに関連付けられた特定のアクションに関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-414">In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event.</span></span> <span data-ttu-id="b4330-415">このアクションの値は、読み込み操作の前に、の行の状態によって異なります。</span><span class="sxs-lookup"><span data-stu-id="b4330-415">This action value depends on the state of the row before the load operation.</span></span> <span data-ttu-id="b4330-416">各ケースで両方のイベントが発生して、アクションはそれぞれ同じです。</span><span class="sxs-lookup"><span data-stu-id="b4330-416">In each case, both events occur, and the action is the same for each.</span></span> <span data-ttu-id="b4330-417">アクションは、各行の現在または元のバージョンまたは行の現在の状態に応じて、両方に適用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-417">The action may be applied to either the current or original version of each row, or both, depending on the current row state.</span></span>  
  
 <span data-ttu-id="b4330-418">次の表の動作、`Load`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-418">The following table displays behavior for the `Load` method.</span></span> <span data-ttu-id="b4330-419">最後の行 (「(存在しない)」のラベル) には、既存の行が一致しない行の動作について説明します。</span><span class="sxs-lookup"><span data-stu-id="b4330-419">The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</span></span> <span data-ttu-id="b4330-420">このテーブル内の各セルは、と共に、行のフィールドの現在と元の値をについて説明します、<xref:System.Data.DataRowState>後の値を`Load`メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="b4330-420">Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.</span></span> <span data-ttu-id="b4330-421">この場合、メソッドの読み込み オプションを指定することはできず、既定では、`PreserveChanges`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-421">In this case, the method doesn't allow you to indicate the load option, and uses the default, `PreserveChanges`.</span></span>  
  
|<span data-ttu-id="b4330-422">既存の DataRowState</span><span class="sxs-lookup"><span data-stu-id="b4330-422">Existing DataRowState</span></span>|<span data-ttu-id="b4330-423">後の値`Load`メソッド、およびイベント アクション</span><span class="sxs-lookup"><span data-stu-id="b4330-423">Values after `Load` method, and event action</span></span>|  
|---------------------------|--------------------------------------------------|  
|<span data-ttu-id="b4330-424">追加</span><span class="sxs-lookup"><span data-stu-id="b4330-424">Added</span></span>|<span data-ttu-id="b4330-425">現在 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-425">Current = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-426">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-426">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-427">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-427">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-428">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-428">RowAction = ChangeOriginal</span></span>|  
|<span data-ttu-id="b4330-429">変更日時</span><span class="sxs-lookup"><span data-stu-id="b4330-429">Modified</span></span>|<span data-ttu-id="b4330-430">現在 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-430">Current = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-431">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-431">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-432">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-432">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-433">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-433">RowAction = ChangeOriginal</span></span>|  
|<span data-ttu-id="b4330-434">Deleted</span><span class="sxs-lookup"><span data-stu-id="b4330-434">Deleted</span></span>|<span data-ttu-id="b4330-435">現在 =\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-435">Current = \<Not available></span></span><br /><br /> <span data-ttu-id="b4330-436">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-436">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-437">状態 =\<削除 ></span><span class="sxs-lookup"><span data-stu-id="b4330-437">State = \<Deleted></span></span><br /><br /> <span data-ttu-id="b4330-438">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-438">RowAction = ChangeOriginal</span></span>|  
|<span data-ttu-id="b4330-439">Unchanged</span><span class="sxs-lookup"><span data-stu-id="b4330-439">Unchanged</span></span>|<span data-ttu-id="b4330-440">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-440">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-441">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-441">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-442">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-442">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-443">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-443">RowAction = ChangeCurrentAndOriginal</span></span>|  
|<span data-ttu-id="b4330-444">(存在しません)</span><span class="sxs-lookup"><span data-stu-id="b4330-444">(Not present)</span></span>|<span data-ttu-id="b4330-445">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-445">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-446">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-446">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-447">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-447">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-448">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-448">RowAction = ChangeCurrentAndOriginal</span></span>|  
  
 <span data-ttu-id="b4330-449">値を<xref:System.Data.DataColumn>などのプロパティを使用して制限できます<xref:System.Data.DataColumn.ReadOnly%2A>と<xref:System.Data.DataColumn.AutoIncrement%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-449">Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="b4330-450">`Load`メソッドは、列のプロパティで定義されている動作と一貫性のある方法では、このような列を処理します。</span><span class="sxs-lookup"><span data-stu-id="b4330-450">The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</span></span> <span data-ttu-id="b4330-451">読み取りの唯一の制約上、<xref:System.Data.DataColumn>はメモリ内で発生した変更のみに適用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-451">The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory.</span></span> <span data-ttu-id="b4330-452">`Load`メソッドの必要な場合は、読み取り専用の列の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-452">The `Load` method's overwrites the read-only column values, if needed.</span></span>  
  
 <span data-ttu-id="b4330-453">受信行では、現在の行を比較するために使用する主キー フィールドのバージョンを決定する、`Load`メソッドが存在する場合、同一行に、主キーの値の元のバージョンを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-453">To determine which version of the primary key field to use for comparing the current row with an incoming row, the `Load` method uses the original version of the primary key value within a row, if it exists.</span></span> <span data-ttu-id="b4330-454">それ以外の場合、`Load`メソッドは、主キー フィールドの現在のバージョンを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-454">Otherwise, the `Load` method uses the current version of the primary key field.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-455">次の例では、呼び出しに関連する問題のいくつかを紹介します<xref:System.Data.DataTable.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-455">The following example demonstrates several of the issues involved with calling the <xref:System.Data.DataTable.Load%2A> method.</span></span> <span data-ttu-id="b4330-456">例では、スキーマの問題は、読み込まれてから、スキーマの推論などに重点を置いています最初に、<xref:System.Data.IDataReader>とし、互換性のないスキーマは、および不足しているまたはその他の列を含むスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="b4330-456">First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns.</span></span> <span data-ttu-id="b4330-457">例を呼び出して、`Load`読み込み操作の前後にデータを表示するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-457">The example then calls the `Load` method, displaying the data both before and after the load operation.</span></span>  
  
 [!code-csharp[DataWorks DataTableLoad.IDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.IDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.IDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.IDataReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption -&gt; unit" Usage="dataTable.Load (reader, loadOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-458">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-458">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span>
          </span>
        </param>
        <param name="loadOption">
          <span data-ttu-id="b4330-459">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> are combined with incoming rows that share the same primary key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-459">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> are combined with incoming rows that share the same primary key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-460">Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-460">Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span>
          </span>
          <span data-ttu-id="b4330-461">If the <see langword="DataTable" /> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <paramref name="loadOption" /> parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-461">If the <see langword="DataTable" /> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <paramref name="loadOption" /> parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-462">`Load`メソッドは最初の結果セットから読み込まれた<xref:System.Data.IDataReader>が正常に完了には、設定、リーダーの位置 [次へ] の結果セットに存在する場合とします。</span><span class="sxs-lookup"><span data-stu-id="b4330-462">The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any.</span></span> <span data-ttu-id="b4330-463">データを変換するとき、`Load`メソッドと同じ変換規則を使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-463">When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-464">`Load`メソッドする必要があります考慮に入れて 3 つの特定の問題からデータを読み込むときに、<xref:System.Data.IDataReader>インスタンス: スキーマ、データ、およびイベント操作。</span><span class="sxs-lookup"><span data-stu-id="b4330-464">The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations.</span></span> <span data-ttu-id="b4330-465">スキーマを使用する場合、`Load`メソッドを次の表に示す条件が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-465">When working with the schema, the `Load` method may encounter conditions as described in the following table.</span></span> <span data-ttu-id="b4330-466">データが含まれていないものも含め、すべてのインポートされた結果セット向けに、スキーマ操作が行わします。</span><span class="sxs-lookup"><span data-stu-id="b4330-466">The schema operations take place for all imported result sets, even those containing no data.</span></span>  
  
|<span data-ttu-id="b4330-467">条件</span><span class="sxs-lookup"><span data-stu-id="b4330-467">Condition</span></span>|<span data-ttu-id="b4330-468">動作</span><span class="sxs-lookup"><span data-stu-id="b4330-468">Behavior</span></span>|  
|---------------|--------------|  
|<span data-ttu-id="b4330-469"><xref:System.Data.DataTable>スキーマがありません。</span><span class="sxs-lookup"><span data-stu-id="b4330-469">The <xref:System.Data.DataTable> has no schema.</span></span>|<span data-ttu-id="b4330-470">`Load`メソッドは、インポートの結果セットに基づくスキーマを推論<xref:System.Data.IDataReader>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-470">The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.</span></span>|  
|<span data-ttu-id="b4330-471"><xref:System.Data.DataTable>スキーマがありますが、読み込まれたスキーマに互換性はありません。</span><span class="sxs-lookup"><span data-stu-id="b4330-471">The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.</span></span>|<span data-ttu-id="b4330-472">`Load`メソッドしようとすると、互換性のないスキーマにデータを読み込むときに発生する特定のエラーに対応する例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b4330-472">The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</span></span>|  
|<span data-ttu-id="b4330-473">スキーマに互換性はあるが、読み込まれた結果セットのスキーマに存在しない列が含まれています、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-473">The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.</span></span>|<span data-ttu-id="b4330-474">`Load`メソッドは、余分な列を追加します。`DataTable`のスキーマ。</span><span class="sxs-lookup"><span data-stu-id="b4330-474">The `Load` method adds the extra columns to `DataTable`’s schema.</span></span> <span data-ttu-id="b4330-475">メソッドは、対応する場合に例外をスロー内の列、<xref:System.Data.DataTable>読み込まれた結果セットは、互換性のある値ではできません。</span><span class="sxs-lookup"><span data-stu-id="b4330-475">The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible.</span></span> <span data-ttu-id="b4330-476">メソッドは、追加したすべての列の結果セットからも制約情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="b4330-476">The method also retrieves constraint information from the result set for all added columns.</span></span> <span data-ttu-id="b4330-477">場合にのみに使用するこの制約の情報を除く Primary Key 制約の場合は、現在<xref:System.Data.DataTable>読み込み操作の開始時の任意の列を含んでいません。</span><span class="sxs-lookup"><span data-stu-id="b4330-477">Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.</span></span>|  
|<span data-ttu-id="b4330-478">スキーマに互換性はあるが、読み込まれた結果セットのスキーマがよりも少ない列が含まれています、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-478">The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.</span></span>|<span data-ttu-id="b4330-479">不足している列が定義された既定値を持っているか、列のデータ型は、null 許容の場合、`Load`メソッドにより、追加する行であり、不足している列の default または null 値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="b4330-479">If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column.</span></span> <span data-ttu-id="b4330-480">既定値や null は使用できない場合、`Load`メソッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b4330-480">If no default value or null can be used, then the `Load` method throws an exception.</span></span> <span data-ttu-id="b4330-481">特定の既定値が指定されていない場合、`Load`メソッドは、暗黙の既定値として null 値を使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-481">If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.</span></span>|  
  
 <span data-ttu-id="b4330-482">動作を検討する前に、`Load`メソッドは、データ操作の観点からそれを考慮して各内で行を<xref:System.Data.DataTable>各列の元の値と現在の値の両方を保持します。</span><span class="sxs-lookup"><span data-stu-id="b4330-482">Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column.</span></span> <span data-ttu-id="b4330-483">これらの値は、それと同等である可能性がありますか、いっぱいになるのため、行のデータが変更された場合は異なる場合があります、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-483">These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`.</span></span> <span data-ttu-id="b4330-484">参照してください[行の状態と行バージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="b4330-484">See [Row States and Row Versions](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md) for more information.</span></span>  
  
 <span data-ttu-id="b4330-485">このメソッド呼び出しで指定した<xref:System.Data.LoadOption>パラメーター受信データの処理に影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="b4330-485">In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data.</span></span> <span data-ttu-id="b4330-486">Load メソッドで既存の行として主キーが同じである読み込みの行が処理する方法</span><span class="sxs-lookup"><span data-stu-id="b4330-486">How should the Load method handle loading rows that have the same primary key as existing rows?</span></span> <span data-ttu-id="b4330-487">現在の値、元の値、またはその両方を変更にする必要がありますか。</span><span class="sxs-lookup"><span data-stu-id="b4330-487">Should it modify current values, original values, or both?</span></span> <span data-ttu-id="b4330-488">これらの問題などがによって制御される、`loadOption`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-488">These issues, and more, are controlled by the `loadOption` parameter.</span></span>  
  
 <span data-ttu-id="b4330-489">既存の行と、受信した行に対応する主キー値が含まれている場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。</span><span class="sxs-lookup"><span data-stu-id="b4330-489">If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</span></span>  
  
 <span data-ttu-id="b4330-490">イベントの操作の観点から、<xref:System.Data.DataTable.RowChanging>各の行を変更すると、前に、イベントが発生し、<xref:System.Data.DataTable.RowChanged>イベントは、各行が変更された後に発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-490">In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed.</span></span> <span data-ttu-id="b4330-491">各ケースで、<xref:System.Data.DataRowChangeEventArgs.Action%2A>のプロパティ、<xref:System.Data.DataRowChangeEventArgs>イベント ハンドラーに渡されるインスタンスには、イベントに関連付けられた特定のアクションに関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-491">In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event.</span></span> <span data-ttu-id="b4330-492">このアクションの値は、読み込み操作の前に、の行の状態によって異なります。</span><span class="sxs-lookup"><span data-stu-id="b4330-492">This action value varies, depending on the state of the row before the load operation.</span></span> <span data-ttu-id="b4330-493">各ケースで両方のイベントが発生して、アクションはそれぞれ同じです。</span><span class="sxs-lookup"><span data-stu-id="b4330-493">In each case, both events occur, and the action is the same for each.</span></span> <span data-ttu-id="b4330-494">アクションは、各行の現在または元のバージョンまたは行の現在の状態に応じて、両方に適用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-494">The action may be applied to either the current or original version of each row, or both, depending on the current row state.</span></span>  
  
 <span data-ttu-id="b4330-495">次の表に、それぞれの呼び出されたときに、Load メソッドの動作、`LoadOption`値し、も、値が読み込まれている行の行の状態と対話する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b4330-495">The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded.</span></span> <span data-ttu-id="b4330-496">最後の行 (「(存在しない)」のラベル) には、既存の行が一致しない行の動作について説明します。</span><span class="sxs-lookup"><span data-stu-id="b4330-496">The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</span></span> <span data-ttu-id="b4330-497">このテーブル内の各セルは、と共に、行のフィールドの現在と元の値をについて説明します、<xref:System.Data.DataRowState>後の値を`Load`メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="b4330-497">Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.</span></span>  
  
|<span data-ttu-id="b4330-498">既存の DataRowState</span><span class="sxs-lookup"><span data-stu-id="b4330-498">Existing DataRowState</span></span>|<span data-ttu-id="b4330-499">Upsert</span><span class="sxs-lookup"><span data-stu-id="b4330-499">Upsert</span></span>|<span data-ttu-id="b4330-500">OverwriteChanges</span><span class="sxs-lookup"><span data-stu-id="b4330-500">OverwriteChanges</span></span>|<span data-ttu-id="b4330-501">PreserveChanges (既定の動作)</span><span class="sxs-lookup"><span data-stu-id="b4330-501">PreserveChanges (Default behavior)</span></span>|  
|---------------------------|------------|----------------------|------------------------------------------|  
|<span data-ttu-id="b4330-502">追加</span><span class="sxs-lookup"><span data-stu-id="b4330-502">Added</span></span>|<span data-ttu-id="b4330-503">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-503">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-504">元 = -\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-504">Original = -\<Not available></span></span><br /><br /> <span data-ttu-id="b4330-505">状態 =\<追加 ></span><span class="sxs-lookup"><span data-stu-id="b4330-505">State = \<Added></span></span><br /><br /> <span data-ttu-id="b4330-506">RowAction 変更を =</span><span class="sxs-lookup"><span data-stu-id="b4330-506">RowAction = Change</span></span>|<span data-ttu-id="b4330-507">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-507">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-508">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-508">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-509">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-509">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-510">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-510">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-511">現在 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-511">Current = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-512">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-512">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-513">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-513">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-514">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-514">RowAction = ChangeOriginal</span></span>|  
|<span data-ttu-id="b4330-515">変更日時</span><span class="sxs-lookup"><span data-stu-id="b4330-515">Modified</span></span>|<span data-ttu-id="b4330-516">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-516">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-517">元 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-517">Original = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-518">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-518">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-519">RowAction 変更を =</span><span class="sxs-lookup"><span data-stu-id="b4330-519">RowAction = Change</span></span>|<span data-ttu-id="b4330-520">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-520">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-521">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-521">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-522">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-522">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-523">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-523">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-524">現在 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-524">Current = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-525">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-525">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-526">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-526">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-527">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-527">RowAction =ChangeOriginal</span></span>|  
<span data-ttu-id="b4330-528">削除済みとオリジナル</span><span class="sxs-lookup"><span data-stu-id="b4330-528">eleted</span></span>|<span data-ttu-id="b4330-529">(負荷の動作に影響が削除された行ではなく)</span><span class="sxs-lookup"><span data-stu-id="b4330-529">(Load does not affect deleted rows)</span></span><br /><br /> <span data-ttu-id="b4330-530">現在 =--</span><span class="sxs-lookup"><span data-stu-id="b4330-530">Current = ---</span></span><br /><br /> <span data-ttu-id="b4330-531">元 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-531">Original = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-532">状態 =\<削除 ></span><span class="sxs-lookup"><span data-stu-id="b4330-532">State = \<Deleted></span></span><br /><br /> <span data-ttu-id="b4330-533">(次の特性を持つ新しい行が追加されます)</span><span class="sxs-lookup"><span data-stu-id="b4330-533">(New row is added with the following characteristics)</span></span><br /><br /> <span data-ttu-id="b4330-534">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-534">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-535">元 =\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-535">Original = \<Not available></span></span><br /><br /> <span data-ttu-id="b4330-536">状態 =\<追加 ></span><span class="sxs-lookup"><span data-stu-id="b4330-536">State = \<Added></span></span><br /><br /> <span data-ttu-id="b4330-537">RowAction = 追加</span><span class="sxs-lookup"><span data-stu-id="b4330-537">RowAction = Add</span></span>|<span data-ttu-id="b4330-538">削除の取り消しと</span><span class="sxs-lookup"><span data-stu-id="b4330-538">Undo delete and</span></span><br /><br /> <span data-ttu-id="b4330-539">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-539">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-540">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-540">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-541">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-541">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-542">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-542">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-543">現在 =\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-543">Current = \<Not available></span></span><br /><br /> <span data-ttu-id="b4330-544">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-544">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-545">状態 =\<削除 ></span><span class="sxs-lookup"><span data-stu-id="b4330-545">State = \<Deleted></span></span><br /><br /> <span data-ttu-id="b4330-546">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-546">RowAction = ChangeOriginal</span></span>|  
|<span data-ttu-id="b4330-547">Unchanged</span><span class="sxs-lookup"><span data-stu-id="b4330-547">Unchanged</span></span>|<span data-ttu-id="b4330-548">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-548">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-549">元 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-549">Original = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-550">新しい値が、既存の値と同じ場合</span><span class="sxs-lookup"><span data-stu-id="b4330-550">If new value is the same as the existing value then</span></span><br /><br /> <span data-ttu-id="b4330-551">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-551">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-552">RowAction = Nothing</span><span class="sxs-lookup"><span data-stu-id="b4330-552">RowAction = Nothing</span></span><br /><br /> <span data-ttu-id="b4330-553">Else</span><span class="sxs-lookup"><span data-stu-id="b4330-553">Else</span></span><br /><br /> <span data-ttu-id="b4330-554">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-554">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-555">RowAction 変更を =</span><span class="sxs-lookup"><span data-stu-id="b4330-555">RowAction = Change</span></span>|<span data-ttu-id="b4330-556">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-556">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-557">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-557">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-558">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-558">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-559">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-559">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-560">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-560">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-561">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-561">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-562">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-562">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-563">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-563">RowAction = ChangeCurrentAndOriginal</span></span>|  
<span data-ttu-id="b4330-564">存在しません)</span><span class="sxs-lookup"><span data-stu-id="b4330-564">Not present)</span></span>|<span data-ttu-id="b4330-565">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-565">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-566">元 =\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-566">Original = \<Not available></span></span><br /><br /> <span data-ttu-id="b4330-567">状態 =\<追加 ></span><span class="sxs-lookup"><span data-stu-id="b4330-567">State = \<Added></span></span><br /><br /> <span data-ttu-id="b4330-568">RowAction = 追加</span><span class="sxs-lookup"><span data-stu-id="b4330-568">RowAction = Add</span></span>|<span data-ttu-id="b4330-569">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-569">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-570">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-570">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-571">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-571">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-572">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-572">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-573">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-573">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-574">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-574">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-575">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-575">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-576">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-576">RowAction = ChangeCurrentAndOriginal</span></span>|  
  
 <span data-ttu-id="b4330-577">値を<xref:System.Data.DataColumn>などのプロパティを使用して制限できます<xref:System.Data.DataColumn.ReadOnly%2A>と<xref:System.Data.DataColumn.AutoIncrement%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-577">Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="b4330-578">`Load`メソッドは、列のプロパティで定義されている動作と一貫性のある方法では、このような列を処理します。</span><span class="sxs-lookup"><span data-stu-id="b4330-578">The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</span></span> <span data-ttu-id="b4330-579">読み取りの唯一の制約上、<xref:System.Data.DataColumn>はメモリ内で発生した変更のみに適用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-579">The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory.</span></span> <span data-ttu-id="b4330-580">`Load`メソッドの必要な場合は、読み取り専用の列の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-580">The `Load` method's overwrites the read-only column values, if needed.</span></span>  
  
 <span data-ttu-id="b4330-581">呼び出すときに、OverwriteChanges PreserveChanges オプションを指定するかどうか、`Load`メソッド、そのことを前提から受信したデータが送信されたことを行ったが、`DataTable`の変更を追跡し、伝達できるプライマリ データ ソース、および DataTableデータ ソースに変更します。</span><span class="sxs-lookup"><span data-stu-id="b4330-581">If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source.</span></span> <span data-ttu-id="b4330-582">Upsert オプションを選択した場合、データがユーザーによって変更されるなど、中間層コンポーネントによって提供されるデータなどのセカンダリ データ ソースのいずれかから送信されたことと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-582">If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user.</span></span> <span data-ttu-id="b4330-583">ここでは、という前提は、目的の 1 つまたは複数のデータ ソースからデータを集計するには、 `DataTable`、プライマリ データ ソースにデータをおそらく伝達します。</span><span class="sxs-lookup"><span data-stu-id="b4330-583">In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source.</span></span> <span data-ttu-id="b4330-584"><xref:System.Data.LoadOption>が主キーの比較に使用される行のバージョンを特定のパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-584">The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison.</span></span> <span data-ttu-id="b4330-585">次の表では、詳細を提供します。</span><span class="sxs-lookup"><span data-stu-id="b4330-585">The table below provides the details.</span></span>  
  
|<span data-ttu-id="b4330-586">読み込みオプション</span><span class="sxs-lookup"><span data-stu-id="b4330-586">Load option</span></span>|<span data-ttu-id="b4330-587">プライマリ キーの比較に使用される DataRow バージョン</span><span class="sxs-lookup"><span data-stu-id="b4330-587">DataRow version used for primary key comparison</span></span>|  
|-----------------|-----------------------------------------------------|  
|`OverwriteChanges`|<span data-ttu-id="b4330-588">元のバージョンは存在する場合、それ以外の場合に現在のバージョン</span><span class="sxs-lookup"><span data-stu-id="b4330-588">Original version, if it exists, otherwise Current version</span></span>|  
|`PreserveChanges`|<span data-ttu-id="b4330-589">元のバージョンは存在する場合、それ以外の場合に現在のバージョン</span><span class="sxs-lookup"><span data-stu-id="b4330-589">Original version, if it exists, otherwise Current version</span></span>|  
|`Upsert`|<span data-ttu-id="b4330-590">現在のバージョンが存在する場合、それ以外の場合に元のバージョン</span><span class="sxs-lookup"><span data-stu-id="b4330-590">Current version, if it exists, otherwise Original version</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="b4330-591">次の例では、呼び出しに関連する問題のいくつかを紹介します<xref:System.Data.DataTable.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-591">The following example demonstrates several of the issues involved with calling the <xref:System.Data.DataTable.Load%2A> method.</span></span> <span data-ttu-id="b4330-592">例では、スキーマの問題は、読み込まれてから、スキーマの推論などに重点を置いています最初に、<xref:System.Data.IDataReader>とし、互換性のないスキーマは、および不足しているまたはその他の列を含むスキーマを処理します。</span><span class="sxs-lookup"><span data-stu-id="b4330-592">First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns.</span></span> <span data-ttu-id="b4330-593">例では、さまざまな読み込みオプションの処理など、データの問題、について説明します。</span><span class="sxs-lookup"><span data-stu-id="b4330-593">The example then focuses on data issues, including handling the various loading options.</span></span>  
  
 [!code-csharp[DataWorks DataTableLoad.LoadOption#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.LoadOption/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.LoadOption#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.LoadOption/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit&#xA;override this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit" Usage="dataTable.Load (reader, loadOption, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-594">A <see cref="T:System.Data.IDataReader" /> that provides a result set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-594">A <see cref="T:System.Data.IDataReader" /> that provides a result set.</span>
          </span>
        </param>
        <param name="loadOption">
          <span data-ttu-id="b4330-595">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> are combined with incoming rows that share the same primary key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-595">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> are combined with incoming rows that share the same primary key.</span>
          </span>
        </param>
        <param name="errorHandler">
          <span data-ttu-id="b4330-596">A <see cref="T:System.Data.FillErrorEventHandler" /> delegate to call when an error occurs while loading data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-596">A <see cref="T:System.Data.FillErrorEventHandler" /> delegate to call when an error occurs while loading data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-597">Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" /> using an error-handling delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-597">Fills a <see cref="T:System.Data.DataTable" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" /> using an error-handling delegate.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-598">`Load`メソッドは最初の結果セットから読み込まれた<xref:System.Data.IDataReader>が正常に完了には、設定、リーダーの位置 [次へ] の結果セットに存在する場合とします。</span><span class="sxs-lookup"><span data-stu-id="b4330-598">The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any.</span></span> <span data-ttu-id="b4330-599">データを変換するとき、`Load`メソッドと同じ変換規則を使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-599">When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b4330-600">`Load`メソッドする必要があります考慮に入れて 3 つの特定の問題からデータを読み込むときに、<xref:System.Data.IDataReader>インスタンス: スキーマ、データ、およびイベント操作。</span><span class="sxs-lookup"><span data-stu-id="b4330-600">The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations.</span></span> <span data-ttu-id="b4330-601">スキーマを使用する場合、`Load`メソッドを次の表に示す条件が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-601">When working with the schema, the `Load` method may encounter conditions as described in the following table.</span></span> <span data-ttu-id="b4330-602">データが含まれていないものも含め、すべてのインポートされた結果セット向けに、スキーマ操作が行わします。</span><span class="sxs-lookup"><span data-stu-id="b4330-602">The schema operations take place for all imported result sets, even those containing no data.</span></span>  
  
|<span data-ttu-id="b4330-603">条件</span><span class="sxs-lookup"><span data-stu-id="b4330-603">Condition</span></span>|<span data-ttu-id="b4330-604">動作</span><span class="sxs-lookup"><span data-stu-id="b4330-604">Behavior</span></span>|  
|---------------|--------------|  
|<span data-ttu-id="b4330-605"><xref:System.Data.DataTable>スキーマがありません。</span><span class="sxs-lookup"><span data-stu-id="b4330-605">The <xref:System.Data.DataTable> has no schema.</span></span>|<span data-ttu-id="b4330-606">`Load`メソッドは、インポートの結果セットに基づくスキーマを推論<xref:System.Data.IDataReader>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-606">The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.</span></span>|  
|<span data-ttu-id="b4330-607"><xref:System.Data.DataTable>スキーマがありますが、読み込まれたスキーマに互換性はありません。</span><span class="sxs-lookup"><span data-stu-id="b4330-607">The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.</span></span>|<span data-ttu-id="b4330-608">`Load`メソッドしようとすると、互換性のないスキーマにデータを読み込むときに発生する特定のエラーに対応する例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b4330-608">The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</span></span>|  
|<span data-ttu-id="b4330-609">スキーマに互換性はあるが、読み込まれた結果セットのスキーマに存在しない列が含まれています、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-609">The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.</span></span>|<span data-ttu-id="b4330-610">`Load`メソッドは、余分な列を追加します。`DataTable`のスキーマ。</span><span class="sxs-lookup"><span data-stu-id="b4330-610">The `Load` method adds the extra column(s) to `DataTable`’s schema.</span></span> <span data-ttu-id="b4330-611">メソッドは、対応する場合に例外をスロー内の列、<xref:System.Data.DataTable>読み込まれた結果セットは、互換性のある値ではできません。</span><span class="sxs-lookup"><span data-stu-id="b4330-611">The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible.</span></span> <span data-ttu-id="b4330-612">メソッドは、追加したすべての列の結果セットからも制約情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="b4330-612">The method also retrieves constraint information from the result set for all added columns.</span></span> <span data-ttu-id="b4330-613">場合にのみに使用するこの制約の情報を除く Primary Key 制約の場合は、現在<xref:System.Data.DataTable>読み込み操作の開始時の任意の列を含んでいません。</span><span class="sxs-lookup"><span data-stu-id="b4330-613">Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.</span></span>|  
|<span data-ttu-id="b4330-614">スキーマに互換性はあるが、読み込まれた結果セットのスキーマがよりも少ない列が含まれています、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-614">The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.</span></span>|<span data-ttu-id="b4330-615">不足している列が定義された既定値を持っているか、列のデータ型は、null 許容の場合、`Load`メソッドにより、追加する行であり、不足している列の default または null 値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="b4330-615">If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column.</span></span> <span data-ttu-id="b4330-616">既定値や null は使用できない場合、`Load`メソッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b4330-616">If no default value or null can be used, then the `Load` method throws an exception.</span></span> <span data-ttu-id="b4330-617">特定の既定値が指定されていない場合、`Load`メソッドは、暗黙の既定値として null 値を使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-617">If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.</span></span>|  
  
 <span data-ttu-id="b4330-618">動作を検討する前に、`Load`メソッドは、データ操作の観点からそれを考慮して各内で行を<xref:System.Data.DataTable>各列の元の値と現在の値の両方を保持します。</span><span class="sxs-lookup"><span data-stu-id="b4330-618">Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column.</span></span> <span data-ttu-id="b4330-619">これらの値は、それと同等である可能性がありますか、いっぱいになるのため、行のデータが変更された場合は異なる場合があります、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-619">These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`.</span></span> <span data-ttu-id="b4330-620">参照してください[行の状態と行バージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="b4330-620">See [Row States and Row Versions](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md) for more information.</span></span>  
  
 <span data-ttu-id="b4330-621">このメソッド呼び出しで指定した<xref:System.Data.LoadOption>パラメーター受信データの処理に影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="b4330-621">In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data.</span></span> <span data-ttu-id="b4330-622">Load メソッドで既存の行として主キーが同じである読み込みの行が処理する方法</span><span class="sxs-lookup"><span data-stu-id="b4330-622">How should the Load method handle loading rows that have the same primary key as existing rows?</span></span> <span data-ttu-id="b4330-623">現在の値、元の値、またはその両方を変更にする必要がありますか。</span><span class="sxs-lookup"><span data-stu-id="b4330-623">Should it modify current values, original values, or both?</span></span> <span data-ttu-id="b4330-624">これらの問題などがによって制御される、`loadOption`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-624">These issues, and more, are controlled by the `loadOption` parameter.</span></span>  
  
 <span data-ttu-id="b4330-625">既存の行と、受信した行に対応する主キー値が含まれている場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。</span><span class="sxs-lookup"><span data-stu-id="b4330-625">If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</span></span>  
  
 <span data-ttu-id="b4330-626">イベントの操作の観点から、<xref:System.Data.DataTable.RowChanging>各の行を変更すると、前に、イベントが発生し、<xref:System.Data.DataTable.RowChanged>イベントは、各行が変更された後に発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-626">In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed.</span></span> <span data-ttu-id="b4330-627">各ケースで、<xref:System.Data.DataRowChangeEventArgs.Action%2A>のプロパティ、<xref:System.Data.DataRowChangeEventArgs>イベント ハンドラーに渡されるインスタンスには、イベントに関連付けられた特定のアクションに関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-627">In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event.</span></span> <span data-ttu-id="b4330-628">このアクションの値は、読み込み操作の前に、の行の状態によって異なります。</span><span class="sxs-lookup"><span data-stu-id="b4330-628">This action value varies, depending on the state of the row before the load operation.</span></span> <span data-ttu-id="b4330-629">各ケースで両方のイベントが発生して、アクションはそれぞれ同じです。</span><span class="sxs-lookup"><span data-stu-id="b4330-629">In each case, both events occur, and the action is the same for each.</span></span> <span data-ttu-id="b4330-630">アクションは、各行の現在または元のバージョンまたは行の現在の状態に応じて、両方に適用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-630">The action may be applied to either the current or original version of each row, or both, depending on the current row state.</span></span>  
  
 <span data-ttu-id="b4330-631">次の表に、それぞれの呼び出されたときに、Load メソッドの動作、`LoadOption`値し、も、値が読み込まれている行の行の状態と対話する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b4330-631">The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded.</span></span> <span data-ttu-id="b4330-632">最後の行 (「(存在しない)」のラベル) には、既存の行が一致しない行の動作について説明します。</span><span class="sxs-lookup"><span data-stu-id="b4330-632">The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</span></span> <span data-ttu-id="b4330-633">このテーブル内の各セルは、と共に、行のフィールドの現在と元の値をについて説明します、<xref:System.Data.DataRowState>後の値を`Load`メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="b4330-633">Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.</span></span>  
  
|<span data-ttu-id="b4330-634">既存の DataRowState</span><span class="sxs-lookup"><span data-stu-id="b4330-634">Existing DataRowState</span></span>|<span data-ttu-id="b4330-635">Upsert</span><span class="sxs-lookup"><span data-stu-id="b4330-635">Upsert</span></span>|<span data-ttu-id="b4330-636">OverwriteChanges</span><span class="sxs-lookup"><span data-stu-id="b4330-636">OverwriteChanges</span></span>|<span data-ttu-id="b4330-637">PreserveChanges (既定の動作)</span><span class="sxs-lookup"><span data-stu-id="b4330-637">PreserveChanges (Default behavior)</span></span>|  
|---------------------------|------------|----------------------|------------------------------------------|  
|<span data-ttu-id="b4330-638">追加</span><span class="sxs-lookup"><span data-stu-id="b4330-638">Added</span></span>|<span data-ttu-id="b4330-639">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-639">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-640">元 = -\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-640">Original = -\<Not available></span></span><br /><br /> <span data-ttu-id="b4330-641">状態 =\<追加 ></span><span class="sxs-lookup"><span data-stu-id="b4330-641">State = \<Added></span></span><br /><br /> <span data-ttu-id="b4330-642">RowAction 変更を =</span><span class="sxs-lookup"><span data-stu-id="b4330-642">RowAction = Change</span></span>|<span data-ttu-id="b4330-643">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-643">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-644">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-644">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-645">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-645">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-646">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-646">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-647">現在 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-647">Current = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-648">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-648">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-649">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-649">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-650">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-650">RowAction = ChangeOriginal</span></span>|  
|<span data-ttu-id="b4330-651">変更日時</span><span class="sxs-lookup"><span data-stu-id="b4330-651">Modified</span></span>|<span data-ttu-id="b4330-652">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-652">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-653">元 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-653">Original = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-654">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-654">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-655">RowAction 変更を =</span><span class="sxs-lookup"><span data-stu-id="b4330-655">RowAction = Change</span></span>|<span data-ttu-id="b4330-656">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-656">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-657">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-657">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-658">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-658">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-659">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-659">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-660">現在 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-660">Current = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-661">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-661">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-662">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-662">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-663">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-663">RowAction =ChangeOriginal</span></span>|  
<span data-ttu-id="b4330-664">削除済みとオリジナル</span><span class="sxs-lookup"><span data-stu-id="b4330-664">eleted</span></span>|<span data-ttu-id="b4330-665">(負荷の動作に影響が削除された行ではなく)</span><span class="sxs-lookup"><span data-stu-id="b4330-665">(Load does not affect deleted rows)</span></span><br /><br /> <span data-ttu-id="b4330-666">現在 =--</span><span class="sxs-lookup"><span data-stu-id="b4330-666">Current = ---</span></span><br /><br /> <span data-ttu-id="b4330-667">元 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-667">Original = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-668">状態 =\<削除 ></span><span class="sxs-lookup"><span data-stu-id="b4330-668">State = \<Deleted></span></span><br /><br /> <span data-ttu-id="b4330-669">(次の特性を持つ新しい行が追加されます)</span><span class="sxs-lookup"><span data-stu-id="b4330-669">(New row is added with the following characteristics)</span></span><br /><br /> <span data-ttu-id="b4330-670">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-670">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-671">元 =\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-671">Original = \<Not available></span></span><br /><br /> <span data-ttu-id="b4330-672">状態 =\<追加 ></span><span class="sxs-lookup"><span data-stu-id="b4330-672">State = \<Added></span></span><br /><br /> <span data-ttu-id="b4330-673">RowAction = 追加</span><span class="sxs-lookup"><span data-stu-id="b4330-673">RowAction = Add</span></span>|<span data-ttu-id="b4330-674">削除の取り消しと</span><span class="sxs-lookup"><span data-stu-id="b4330-674">Undo delete and</span></span><br /><br /> <span data-ttu-id="b4330-675">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-675">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-676">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-676">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-677">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-677">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-678">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-678">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-679">現在 =\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-679">Current = \<Not available></span></span><br /><br /> <span data-ttu-id="b4330-680">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-680">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-681">状態 =\<削除 ></span><span class="sxs-lookup"><span data-stu-id="b4330-681">State = \<Deleted></span></span><br /><br /> <span data-ttu-id="b4330-682">RowAction ChangeOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-682">RowAction = ChangeOriginal</span></span>|  
|<span data-ttu-id="b4330-683">Unchanged</span><span class="sxs-lookup"><span data-stu-id="b4330-683">Unchanged</span></span>|<span data-ttu-id="b4330-684">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-684">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-685">元 =\<既存 ></span><span class="sxs-lookup"><span data-stu-id="b4330-685">Original = \<Existing></span></span><br /><br /> <span data-ttu-id="b4330-686">新しい値が、既存の値と同じ場合</span><span class="sxs-lookup"><span data-stu-id="b4330-686">If new value is the same as the existing value then</span></span><br /><br /> <span data-ttu-id="b4330-687">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-687">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-688">RowAction = Nothing</span><span class="sxs-lookup"><span data-stu-id="b4330-688">RowAction = Nothing</span></span><br /><br /> <span data-ttu-id="b4330-689">Else</span><span class="sxs-lookup"><span data-stu-id="b4330-689">Else</span></span><br /><br /> <span data-ttu-id="b4330-690">状態 =\<変更 ></span><span class="sxs-lookup"><span data-stu-id="b4330-690">State = \<Modified></span></span><br /><br /> <span data-ttu-id="b4330-691">RowAction 変更を =</span><span class="sxs-lookup"><span data-stu-id="b4330-691">RowAction = Change</span></span>|<span data-ttu-id="b4330-692">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-692">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-693">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-693">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-694">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-694">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-695">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-695">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-696">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-696">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-697">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-697">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-698">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-698">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-699">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-699">RowAction = ChangeCurrentAndOriginal</span></span>|  
<span data-ttu-id="b4330-700">存在しません)</span><span class="sxs-lookup"><span data-stu-id="b4330-700">Not present)</span></span>|<span data-ttu-id="b4330-701">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-701">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-702">元 =\<不可 ></span><span class="sxs-lookup"><span data-stu-id="b4330-702">Original = \<Not available></span></span><br /><br /> <span data-ttu-id="b4330-703">状態 =\<追加 ></span><span class="sxs-lookup"><span data-stu-id="b4330-703">State = \<Added></span></span><br /><br /> <span data-ttu-id="b4330-704">RowAction = 追加</span><span class="sxs-lookup"><span data-stu-id="b4330-704">RowAction = Add</span></span>|<span data-ttu-id="b4330-705">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-705">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-706">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-706">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-707">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-707">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-708">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-708">RowAction = ChangeCurrentAndOriginal</span></span>|<span data-ttu-id="b4330-709">現在 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-709">Current = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-710">元 =\<受信 ></span><span class="sxs-lookup"><span data-stu-id="b4330-710">Original = \<Incoming></span></span><br /><br /> <span data-ttu-id="b4330-711">状態 = \<Unchanged ></span><span class="sxs-lookup"><span data-stu-id="b4330-711">State = \<Unchanged></span></span><br /><br /> <span data-ttu-id="b4330-712">RowAction ChangeCurrentAndOriginal を =</span><span class="sxs-lookup"><span data-stu-id="b4330-712">RowAction = ChangeCurrentAndOriginal</span></span>|  
  
 <span data-ttu-id="b4330-713">値を<xref:System.Data.DataColumn>などのプロパティを使用して制限できます<xref:System.Data.DataColumn.ReadOnly%2A>と<xref:System.Data.DataColumn.AutoIncrement%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-713">Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="b4330-714">`Load`メソッドは、列のプロパティで定義されている動作と一貫性のある方法では、このような列を処理します。</span><span class="sxs-lookup"><span data-stu-id="b4330-714">The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</span></span> <span data-ttu-id="b4330-715">読み取りの唯一の制約上、<xref:System.Data.DataColumn>はメモリ内で発生した変更のみに適用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-715">The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory.</span></span> <span data-ttu-id="b4330-716">`Load`メソッドの必要な場合は、読み取り専用の列の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-716">The `Load` method's overwrites the read-only column values, if needed.</span></span>  
  
 <span data-ttu-id="b4330-717">呼び出すときに、OverwriteChanges PreserveChanges オプションを指定するかどうか、`Load`メソッド、そのことを前提から受信したデータが送信されたことを行ったが、`DataTable`の変更を追跡し、伝達できるプライマリ データ ソース、および DataTableデータ ソースに変更します。</span><span class="sxs-lookup"><span data-stu-id="b4330-717">If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source.</span></span> <span data-ttu-id="b4330-718">Upsert オプションを選択した場合、データがユーザーによって変更されるなど、中間層コンポーネントによって提供されるデータなどのセカンダリ データ ソースのいずれかから送信されたことと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-718">If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user.</span></span> <span data-ttu-id="b4330-719">ここでは、という前提は、目的の 1 つまたは複数のデータ ソースからデータを集計するには、 `DataTable`、プライマリ データ ソースにデータをおそらく伝達します。</span><span class="sxs-lookup"><span data-stu-id="b4330-719">In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source.</span></span> <span data-ttu-id="b4330-720"><xref:System.Data.LoadOption>が主キーの比較に使用される行のバージョンを特定のパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-720">The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison.</span></span> <span data-ttu-id="b4330-721">次の表では、詳細を提供します。</span><span class="sxs-lookup"><span data-stu-id="b4330-721">The table below provides the details.</span></span>  
  
|<span data-ttu-id="b4330-722">読み込みオプション</span><span class="sxs-lookup"><span data-stu-id="b4330-722">Load option</span></span>|<span data-ttu-id="b4330-723">プライマリ キーの比較に使用される DataRow バージョン</span><span class="sxs-lookup"><span data-stu-id="b4330-723">DataRow version used for primary key comparison</span></span>|  
|-----------------|-----------------------------------------------------|  
|`OverwriteChanges`|<span data-ttu-id="b4330-724">元のバージョンは存在する場合、それ以外の場合に現在のバージョン</span><span class="sxs-lookup"><span data-stu-id="b4330-724">Original version, if it exists, otherwise Current version</span></span>|  
|`PreserveChanges`|<span data-ttu-id="b4330-725">元のバージョンは存在する場合、それ以外の場合に現在のバージョン</span><span class="sxs-lookup"><span data-stu-id="b4330-725">Original version, if it exists, otherwise Current version</span></span>|  
|`Upsert`|<span data-ttu-id="b4330-726">現在のバージョンが存在する場合、それ以外の場合に元のバージョン</span><span class="sxs-lookup"><span data-stu-id="b4330-726">Current version, if it exists, otherwise Original version</span></span>|  
  
 <span data-ttu-id="b4330-727">`errorHandler`パラメーターは、<xref:System.Data.FillErrorEventHandler>データの読み込み中にエラーが発生したときに呼び出されるプロシージャを参照するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="b4330-727">The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data.</span></span> <span data-ttu-id="b4330-728"><xref:System.Data.FillErrorEventArgs>プロシージャに渡されるパラメーターは、発生したエラー、データの現在の行に関する情報を取得するためのプロパティを提供し、<xref:System.Data.DataTable>に指定されています。</span><span class="sxs-lookup"><span data-stu-id="b4330-728">The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled.</span></span> <span data-ttu-id="b4330-729">このデリゲートのメカニズムを使用して、単純な try/catch ブロックではなく、エラーを確認することができます状況の処理し、必要な場合の処理を続行します。</span><span class="sxs-lookup"><span data-stu-id="b4330-729">Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</span></span> <span data-ttu-id="b4330-730"><xref:System.Data.FillErrorEventArgs>パラメーターを提供、<xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティ: このプロパティを設定`true`をエラーを処理し、処理を続行することを示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-730">The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing.</span></span> <span data-ttu-id="b4330-731">プロパティを設定`false`を処理を停止することを示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-731">Set the property to `false` to indicate that you wish to halt processing.</span></span> <span data-ttu-id="b4330-732">注意してくださいそのプロパティを設定する`false`コードが例外をスローする問題を発生させた。</span><span class="sxs-lookup"><span data-stu-id="b4330-732">Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DataWorks DataTableLoad.ErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.ErrorEventHandler/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.ErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.ErrorEventHandler/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadDataRow">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-733">Finds and updates a specific row.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-733">Finds and updates a specific row.</span>
          </span>
          <span data-ttu-id="b4330-734">If no matching row is found, a new row is created using the given values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-734">If no matching row is found, a new row is created using the given values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadDataRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow LoadDataRow(object[] values, bool fAcceptChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadDataRow (values As Object(), fAcceptChanges As Boolean) As DataRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ LoadDataRow(cli::array &lt;System::Object ^&gt; ^ values, bool fAcceptChanges);" />
      <MemberSignature Language="F#" Value="member this.LoadDataRow : obj[] * bool -&gt; System.Data.DataRow" Usage="dataTable.LoadDataRow (values, fAcceptChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
        <Parameter Name="fAcceptChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="values">
          <span data-ttu-id="b4330-735">An array of values used to create the new row.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-735">An array of values used to create the new row.</span>
          </span>
        </param>
        <param name="fAcceptChanges">
          <span data-ttu-id="b4330-736">
            <see langword="true" /> to accept changes; otherwise <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-736">
              <see langword="true" /> to accept changes; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-737">Finds and updates a specific row.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-737">Finds and updates a specific row.</span>
          </span>
          <span data-ttu-id="b4330-738">If no matching row is found, a new row is created using the given values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-738">If no matching row is found, a new row is created using the given values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-739">The new <see cref="T:System.Data.DataRow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-739">The new <see cref="T:System.Data.DataRow" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-740"><xref:System.Data.DataTable.LoadDataRow%2A>メソッドが値の配列を受け取り、主キー列で一致する値を検索します。</span><span class="sxs-lookup"><span data-stu-id="b4330-740">The <xref:System.Data.DataTable.LoadDataRow%2A> method takes an array of values and finds the matching value(s) in the primary key column(s).</span></span>  
  
 <span data-ttu-id="b4330-741">列に既定値がある場合は、その列の既定値を設定する配列に null 値を渡します。</span><span class="sxs-lookup"><span data-stu-id="b4330-741">If a column has a default value, pass a null value in the array to set the default value for that column.</span></span> <span data-ttu-id="b4330-742">同様に、列にある場合、<xref:System.Data.DataColumn.AutoIncrement%2A>を true に、自動的に生成された行の値を設定する配列の null 値を渡すプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b4330-742">Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row.</span></span>  
  
 <span data-ttu-id="b4330-743">場合、`fAcceptChanges`パラメーターが`true`またはが指定されていない新しいデータが追加されたし、<xref:System.Data.DataTable.AcceptChanges%2A>内のすべての変更を反映するために呼び出される、<xref:System.Data.DataTable>場合は、引数が`false`、新しく追加された行が挿入、およびへの変更としてマークされています。既存の行は、変更としてマークされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-743">If the `fAcceptChanges` parameter is `true` or not specified, the new data is added and then <xref:System.Data.DataTable.AcceptChanges%2A> is called to accept all changes in the <xref:System.Data.DataTable>; if the argument is `false`, newly added rows are marked as insertions, and changes to existing rows are marked as modifications.</span></span>  
  
 <span data-ttu-id="b4330-744">例外は、いずれかの中にも発生する<xref:System.Data.DataTable.ColumnChanging>または<xref:System.Data.DataTable.RowChanging>イベント。</span><span class="sxs-lookup"><span data-stu-id="b4330-744">Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event.</span></span> <span data-ttu-id="b4330-745">例外が発生する場合、行は、テーブルには追加されません。</span><span class="sxs-lookup"><span data-stu-id="b4330-745">If an exception occurs, the row is not added to the table.</span></span>  
  
 <span data-ttu-id="b4330-746">使用<xref:System.Data.DataTable.LoadDataRow%2A>と共に<xref:System.Data.DataTable.BeginLoadData%2A>と<xref:System.Data.DataTable.EndLoadData%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-746">Use <xref:System.Data.DataTable.LoadDataRow%2A> in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-747">次の例では、<xref:System.Data.DataTable.LoadDataRow%2A>行を検索しようとするメソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-747">The following example uses the <xref:System.Data.DataTable.LoadDataRow%2A> method to attempt to find a row.</span></span> <span data-ttu-id="b4330-748">このような行が見つからない場合は、値が新しい行を作成に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-748">If no such row is found, the values are used to create a new row.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.LoadDataRow Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.LoadDataRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.LoadDataRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.LoadDataRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b4330-749">The array is larger than the number of columns in the table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-749">The array is larger than the number of columns in the table.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="b4330-750">A value doesn't match its respective column type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-750">A value doesn't match its respective column type.</span>
          </span>
        </exception>
        <exception cref="T:System.Data.ConstraintException">
          <span data-ttu-id="b4330-751">Adding the row invalidates a constraint.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-751">Adding the row invalidates a constraint.</span>
          </span>
        </exception>
        <exception cref="T:System.Data.NoNullAllowedException">
          <span data-ttu-id="b4330-752">Attempting to put a null in a column where <see cref="P:System.Data.DataColumn.AllowDBNull" /> is false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-752">Attempting to put a null in a column where <see cref="P:System.Data.DataColumn.AllowDBNull" /> is false.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow LoadDataRow(object[] values, valuetype System.Data.LoadOption loadOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ LoadDataRow(cli::array &lt;System::Object ^&gt; ^ values, System::Data::LoadOption loadOption);" />
      <MemberSignature Language="F#" Value="member this.LoadDataRow : obj[] * System.Data.LoadOption -&gt; System.Data.DataRow" Usage="dataTable.LoadDataRow (values, loadOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <param name="values">
          <span data-ttu-id="b4330-753">An array of values used to create the new row.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-753">An array of values used to create the new row.</span>
          </span>
        </param>
        <param name="loadOption">
          <span data-ttu-id="b4330-754">Used to determine how the array values are applied to the corresponding values in an existing row.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-754">Used to determine how the array values are applied to the corresponding values in an existing row.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-755">Finds and updates a specific row.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-755">Finds and updates a specific row.</span>
          </span>
          <span data-ttu-id="b4330-756">If no matching row is found, a new row is created using the given values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-756">If no matching row is found, a new row is created using the given values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-757">The new <see cref="T:System.Data.DataRow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-757">The new <see cref="T:System.Data.DataRow" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-758"><xref:System.Data.DataTable.LoadDataRow%2A>メソッドが値の配列を受け取り、主キー列で一致する値を検索します。</span><span class="sxs-lookup"><span data-stu-id="b4330-758">The <xref:System.Data.DataTable.LoadDataRow%2A> method takes an array of values and finds the matching value(s) in the primary key column(s).</span></span>  
  
 <span data-ttu-id="b4330-759">列に既定値がある場合は、その列の既定値を設定する配列に null 値を渡します。</span><span class="sxs-lookup"><span data-stu-id="b4330-759">If a column has a default value, pass a null value in the array to set the default value for that column.</span></span> <span data-ttu-id="b4330-760">同様に、列にある場合、<xref:System.Data.DataColumn.AutoIncrement%2A>を true に、自動的に生成された行の値を設定する配列の null 値を渡すプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b4330-760">Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row.</span></span>  
  
 <span data-ttu-id="b4330-761">値、`loadOption`配列内の値を既存の行に適用する方法を決定するパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-761">The value of the `loadOption` parameter is used to determine how the values in the array are applied to an existing row.</span></span> <span data-ttu-id="b4330-762">たとえば場合、`loadOption`に設定されている`OverwriteChanges`、`Original`と`Current`各列の値は、受信した行の値に置き換えられます、`RowState`プロパティに設定されて`Unchanged`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-762">For example, if `loadOption` is set to `OverwriteChanges`, the `Original` and `Current` values of each column are replaced with the values in the incoming row and the `RowState` property is set to `Unchanged`.</span></span>  
  
 <span data-ttu-id="b4330-763">例外は、いずれかの中にも発生する<xref:System.Data.DataTable.ColumnChanging>または<xref:System.Data.DataTable.RowChanging>イベント。</span><span class="sxs-lookup"><span data-stu-id="b4330-763">Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event.</span></span> <span data-ttu-id="b4330-764">例外が発生する場合、行は、テーブルには追加されません。</span><span class="sxs-lookup"><span data-stu-id="b4330-764">If an exception occurs, the row is not added to the table.</span></span>  
  
 <span data-ttu-id="b4330-765">使用<xref:System.Data.DataTable.LoadDataRow%2A>と共に<xref:System.Data.DataTable.BeginLoadData%2A>と<xref:System.Data.DataTable.EndLoadData%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-765">Use <xref:System.Data.DataTable.LoadDataRow%2A> in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Locale : System.Globalization.CultureInfo with get, set" Usage="System.Data.DataTable.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-766">Gets or sets the locale information used to compare strings within the table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-766">Gets or sets the locale information used to compare strings within the table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-767">A<see cref="T:System.Globalization.CultureInfo" />ユーザーのコンピューターのロケールに関するデータを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-767">A <see cref="T:System.Globalization.CultureInfo" /> that contains data about the user's machine locale.</span>
          </span>
          <span data-ttu-id="b4330-768">既定値は、<see cref="T:System.Data.DataSet" />オブジェクトの<see cref="T:System.Globalization.CultureInfo" />(によって返される、<see cref="P:System.Data.DataSet.Locale" />プロパティ) を<see cref="T:System.Data.DataTable" />が属する; に、テーブルが属していない場合、 <see cref="T:System.Data.DataSet" />、既定値は、現在のシステム<see cref="T:System.Globalization.CultureInfo" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-768">The default is the <see cref="T:System.Data.DataSet" /> object's <see cref="T:System.Globalization.CultureInfo" /> (returned by the <see cref="P:System.Data.DataSet.Locale" /> property) to which the <see cref="T:System.Data.DataTable" /> belongs; if the table doesn't belong to a <see cref="T:System.Data.DataSet" />, the default is the current system <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-769">A<xref:System.Globalization.CultureInfo>の特定のカルチャまたはコミュニティのソフトウェアの設定を表します。</span><span class="sxs-lookup"><span data-stu-id="b4330-769">A <xref:System.Globalization.CultureInfo> represents the software preferences of a particular culture or community.</span></span>  
  
 <span data-ttu-id="b4330-770">文字列の比較に使用される場合、<xref:System.Globalization.CultureInfo>並べ替え、比較、およびフィルター処理に影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="b4330-770">When used for string comparisons, the <xref:System.Globalization.CultureInfo> affects sorting, comparisons, and filtering.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-771">式を指定する列で、<xref:System.StringComparison.InvariantCulture>使用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-771">In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used.</span></span> <span data-ttu-id="b4330-772"><xref:System.StringComparison.CurrentCulture>は無視されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-772">The <xref:System.StringComparison.CurrentCulture> is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-773">次の例のセット、<xref:System.Globalization.CultureInfo>を通じて、 <xref:System.Data.DataTable.Locale%2A> ISO 言語の名前を出力します。</span><span class="sxs-lookup"><span data-stu-id="b4330-773">The following example sets the <xref:System.Globalization.CultureInfo> through the <xref:System.Data.DataTable.Locale%2A> and prints the ISO language name.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Locale Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Locale Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-774">Merge the specified <see cref="T:System.Data.DataTable" /> with the current <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-774">Merge the specified <see cref="T:System.Data.DataTable" /> with the current <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-775">`Merge`メソッドを使用して、2 つのマージを<xref:System.Data.DataTable>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-775">The `Merge` method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas.</span></span> <span data-ttu-id="b4330-776">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-776">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-777">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataTable>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-777">This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="b4330-778">マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-778">The merge operation takes into account only the original table, and the table to be merged.</span></span> <span data-ttu-id="b4330-779">しない子テーブルが影響を受けるか、含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-779">Child tables are not affected or included.</span></span> <span data-ttu-id="b4330-780">テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-780">If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-781">次のコンソール アプリケーションの動作を示す、`missingSchemaAction`のパラメーター、<xref:System.Data.DataTable.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-781">The following console application demonstrates the behavior of the `missingSchemaAction` parameter of the <xref:System.Data.DataTable.Merge%2A> method.</span></span> <span data-ttu-id="b4330-782">この例では、2 番目のバージョンのスキーマの変更、同じテーブルの 2 つのバージョンを作成します。</span><span class="sxs-lookup"><span data-stu-id="b4330-782">This example creates two versions of the same table, modifying the schema for the second version.</span></span> <span data-ttu-id="b4330-783">コードは、最初に 2 番目のテーブルをマージを試みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-783">The code then attempts to merge the second table into the first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-784">この例では、マージのオーバー ロードされたバージョンのいずれかを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-784">This example shows how to use one of the overloaded versions of Merge.</span></span> <span data-ttu-id="b4330-785">使用可能な可能性があるその他の例は、個々 のオーバー ロードのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b4330-785">For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataTableMergeOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableMergeOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableMergeOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableMergeOverload/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable -&gt; unit" Usage="dataTable.Merge table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">
          <span data-ttu-id="b4330-786">The <see cref="T:System.Data.DataTable" /> to be merged with the current <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-786">The <see cref="T:System.Data.DataTable" /> to be merged with the current <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-787">Merge the specified <see cref="T:System.Data.DataTable" /> with the current <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-787">Merge the specified <see cref="T:System.Data.DataTable" /> with the current <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-788">Merge メソッドが 2 つにマージするために使用<xref:System.Data.DataTable>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-788">The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas.</span></span> <span data-ttu-id="b4330-789">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-789">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-790">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataTable>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-790">This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="b4330-791">マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-791">The merge operation takes into account only the original table, and the table to be merged.</span></span> <span data-ttu-id="b4330-792">しない子テーブルが影響を受けるか、含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-792">Child tables are not affected or included.</span></span> <span data-ttu-id="b4330-793">テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-793">If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</span></span>  
  
 <span data-ttu-id="b4330-794">`Merge`メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-794">The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="b4330-795">マージを実行するときに、マージする前に、既存のデータに加えられた変更が既定では、マージ操作中に保持されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-795">When performing a merge, changes made to the existing data before the merge are preserved by default during the merge operation.</span></span> <span data-ttu-id="b4330-796">開発者はで、このメソッドの他の 2 つのオーバー ロードのいずれかを呼び出し、false 値を指定するこの動作を変更することができます、`preserveChanges`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-796">Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the `preserveChanges` parameter.</span></span>  
  
 <span data-ttu-id="b4330-797">クライアント アプリケーションでは、1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために通常は。</span><span class="sxs-lookup"><span data-stu-id="b4330-797">In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</span></span> <span data-ttu-id="b4330-798">このシナリオで、<xref:System.Data.DataTable.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-798">In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="b4330-799">2 番目に返します<xref:System.Data.DataTable>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="b4330-799">That method returns a second <xref:System.Data.DataTable> optimized for validating and merging.</span></span> <span data-ttu-id="b4330-800">この 1 秒間<xref:System.Data.DataTable>オブジェクトのみを含む、 <xref:System.Data.DataRow> 、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-800">This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-801">このサブセットは一般に小さいため、中間層のコンポーネントにより効率的によく渡されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-801">This subset is generally smaller and thus more efficiently passed back to a middle tier component.</span></span> <span data-ttu-id="b4330-802">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-802">The middle tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="b4330-803">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataTable> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-803">The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="b4330-804">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataTable>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataTable>で、<xref:System.Data.DataTable.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-804">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-805">新しいソースをマージするときに<xref:System.Data.DataTable>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="b4330-805">When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted`, is matched to target rows with the same primary key values.</span></span> <span data-ttu-id="b4330-806">ソースを持つ行を<xref:System.Data.DataRowState>の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="b4330-806">Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-807">次のコンソール アプリケーションの作成、単純な<xref:System.Data.DataTable>テーブルにデータを追加します。</span><span class="sxs-lookup"><span data-stu-id="b4330-807">The following console application creates a simple <xref:System.Data.DataTable> and adds data to the table.</span></span> <span data-ttu-id="b4330-808">例は、コピーする行の追加、テーブルのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="b4330-808">The example then creates a copy of the table, adding rows to the copy.</span></span> <span data-ttu-id="b4330-809">最後に、例では、<xref:System.Data.DataTable.Merge%2A>メソッドの最初のテーブル内のデータを 2 番目のテーブル データをマージします。</span><span class="sxs-lookup"><span data-stu-id="b4330-809">Finally, the example calls the <xref:System.Data.DataTable.Merge%2A> method to merge the data in the second table with the data in the first table.</span></span>  
  
 [!code-csharp[DataWorks DataTable.Merge#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.Merge/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.Merge#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.Merge/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable, preserveChanges As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool -&gt; unit" Usage="dataTable.Merge (table, preserveChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="table">
          <span data-ttu-id="b4330-810">The <see langword="DataTable" /> to be merged with the current <see langword="DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-810">The <see langword="DataTable" /> to be merged with the current <see langword="DataTable" />.</span>
          </span>
        </param>
        <param name="preserveChanges">
          <span data-ttu-id="b4330-811">
            <see langword="true" />, to preserve changes in the current <see langword="DataTable" />; otherwise <see langword="false" />.<see langword="" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-811">
              <see langword="true" />, to preserve changes in the current <see langword="DataTable" />; otherwise <see langword="false" />.<see langword="" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-812">Merge the specified <see cref="T:System.Data.DataTable" /> with the current <see langword="DataTable" />, indicating whether to preserve changes in the current <see langword="DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-812">Merge the specified <see cref="T:System.Data.DataTable" /> with the current <see langword="DataTable" />, indicating whether to preserve changes in the current <see langword="DataTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-813">Merge メソッドが 2 つにマージするために使用<xref:System.Data.DataTable>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-813">The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas.</span></span> <span data-ttu-id="b4330-814">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-814">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-815">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataTable>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-815">This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="b4330-816">マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-816">The merge operation takes into account only the original table, and the table to be merged.</span></span> <span data-ttu-id="b4330-817">しない子テーブルが影響を受けるか、含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-817">Child tables are not affected or included.</span></span> <span data-ttu-id="b4330-818">テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-818">If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</span></span>  
  
 <span data-ttu-id="b4330-819">`Merge`メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-819">The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="b4330-820">マージを実行するときに、マージする前に、既存のデータに加えられた変更は、開発者が場合は false を指定しない限り、マージ操作中に保持されます、`preserveChanges`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-820">When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter.</span></span> <span data-ttu-id="b4330-821">場合、`preserveChanges`にパラメーターが設定されている`true`、入力方向の値は、既存の行の現在の行バージョンの既存の値を上書きできません。</span><span class="sxs-lookup"><span data-stu-id="b4330-821">If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row.</span></span> <span data-ttu-id="b4330-822">場合、`preserveChanges`にパラメーターが設定されている`false`、受信した値は、既存の行の現在の行のバージョンで既存の値を上書きしないでください。</span><span class="sxs-lookup"><span data-stu-id="b4330-822">If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row.</span></span> <span data-ttu-id="b4330-823">行のバージョンの詳細については、次を参照してください。[行の状態と行バージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-823">For more information about row versions, see [Row States and Row Versions](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md).</span></span>  
  
 <span data-ttu-id="b4330-824">クライアント アプリケーションでは、1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために通常は。</span><span class="sxs-lookup"><span data-stu-id="b4330-824">In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</span></span> <span data-ttu-id="b4330-825">このシナリオで、<xref:System.Data.DataTable.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-825">In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="b4330-826">2 番目に返します<xref:System.Data.DataTable>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="b4330-826">That method returns a second <xref:System.Data.DataTable> optimized for validating and merging.</span></span> <span data-ttu-id="b4330-827">この 1 秒間<xref:System.Data.DataTable>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-827">This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-828">このサブセットは一般的に小さく、したがってこのサブセットは、中間層のコンポーネントに渡されるより効率的にします。</span><span class="sxs-lookup"><span data-stu-id="b4330-828">This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component.</span></span> <span data-ttu-id="b4330-829">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-829">The middle tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="b4330-830">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataTable> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-830">The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="b4330-831">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataTable>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataTable>で、<xref:System.Data.DataTable.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-831">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-832">新しいソースをマージするときに<xref:System.Data.DataTable>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="b4330-832">When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="b4330-833">ソースを持つ行を<xref:System.Data.DataRowState>の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="b4330-833">Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-834">次のコンソール アプリケーションを作成、 <xref:System.Data.DataTable> 、行を格納している、それらの行のデータの一部が変更され、別のデータを結合しようとしています。<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-834">The following console application creates a <xref:System.Data.DataTable> containing rows, modifies some of the data in those rows, and attempts to merge data from a different <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-835">動作の違い例を示します、`preserveChanges`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-835">The example demonstrates the different behaviors for the `preserveChanges` parameter.</span></span>  
  
 [!code-csharp[DataWorks DataTable.MergePreserveChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.MergePreserveChanges/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.MergePreserveChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.MergePreserveChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataTable.Merge (table, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table">
          <span data-ttu-id="b4330-836">The <see cref="T:System.Data.DataTable" /> to be merged with the current <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-836">The <see cref="T:System.Data.DataTable" /> to be merged with the current <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </param>
        <param name="preserveChanges">
          <span data-ttu-id="b4330-837">
            <see langword="true" />, to preserve changes in the current <see cref="T:System.Data.DataTable" />; otherwise <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-837">
              <see langword="true" />, to preserve changes in the current <see cref="T:System.Data.DataTable" />; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <param name="missingSchemaAction">
          <span data-ttu-id="b4330-838">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-838">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-839">Merge the specified <see cref="T:System.Data.DataTable" /> with the current <see langword="DataTable" />, indicating whether to preserve changes and how to handle missing schema in the current <see langword="DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-839">Merge the specified <see cref="T:System.Data.DataTable" /> with the current <see langword="DataTable" />, indicating whether to preserve changes and how to handle missing schema in the current <see langword="DataTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-840">`Merge`メソッドを使用して、2 つのマージを<xref:System.Data.DataTable>ほぼ同じスキーマを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-840">The `Merge` method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas.</span></span> <span data-ttu-id="b4330-841">既存のデータ ソースから最新の変更を組み込むことに、マージが通常使用クライアント アプリケーションに対する<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-841">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-842">これにより、クライアント アプリケーションを更新して<xref:System.Data.DataTable>データ ソースから最新のデータにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-842">This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="b4330-843">マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-843">The merge operation takes into account only the original table, and the table to be merged.</span></span> <span data-ttu-id="b4330-844">しない子テーブルが影響を受けるか、含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-844">Child tables are not affected or included.</span></span> <span data-ttu-id="b4330-845">テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-845">If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</span></span>  
  
 <span data-ttu-id="b4330-846">`Merge`メソッドは、通常、一連の変更の検証、エラーを調整、変更により、データ ソースの更新、および最後に、既存の更新に関連するプロシージャの最後に呼び出されます<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-846">The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="b4330-847">マージを実行するときに、マージする前に、既存のデータに加えられた変更は、開発者が場合は false を指定しない限り、マージ操作中に保持されます、`preserveChanges`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-847">When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter.</span></span> <span data-ttu-id="b4330-848">場合、`preserveChanges`にパラメーターが設定されている`true`、入力方向の値は、既存の行の現在の行バージョンの既存の値を上書きできません。</span><span class="sxs-lookup"><span data-stu-id="b4330-848">If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row.</span></span> <span data-ttu-id="b4330-849">場合、`preserveChanges`にパラメーターが設定されている`false`、受信した値は、既存の行の現在の行のバージョンで既存の値を上書きしないでください。</span><span class="sxs-lookup"><span data-stu-id="b4330-849">If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row.</span></span> <span data-ttu-id="b4330-850">行のバージョンの詳細については、次を参照してください。[行の状態と行バージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-850">For more information about row versions, see [Row States and Row Versions](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md).</span></span>  
  
 <span data-ttu-id="b4330-851">クライアント アプリケーションでは、1 つのボタン ユーザーがクリックすることができますが、変更されたデータを収集し、中間層のコンポーネントに送信する前に検証するために通常は。</span><span class="sxs-lookup"><span data-stu-id="b4330-851">In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</span></span> <span data-ttu-id="b4330-852">このシナリオで、<xref:System.Data.DataTable.GetChanges%2A>メソッドが最初に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-852">In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="b4330-853">2 番目に返します<xref:System.Data.DataTable>検証とマージ用に最適化します。</span><span class="sxs-lookup"><span data-stu-id="b4330-853">That method returns a second <xref:System.Data.DataTable> optimized for validating and merging.</span></span> <span data-ttu-id="b4330-854">この 1 秒間<xref:System.Data.DataTable>オブジェクトのみを含む、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として、変更されたオブジェクト<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-854">This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-855">このサブセットは一般的に小さく、したがってこのサブセットは、中間層のコンポーネントに渡されるより効率的にします。</span><span class="sxs-lookup"><span data-stu-id="b4330-855">This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component.</span></span> <span data-ttu-id="b4330-856">中間層のコンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="b4330-856">The middle tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="b4330-857">中間層が、新しいバックアップを送信できますし、 <xref:System.Data.DataTable> (によって、元のクエリを再実行)、元のデータとデータ ソースから最新のデータを含むかをデータ ソースから行われた変更のサブセットに送り返すことができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-857">The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="b4330-858">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値伝えることができるクライアント アプリケーションにします。)どちらの場合、返された<xref:System.Data.DataTable>クライアント アプリケーションの元に再マージすることができます<xref:System.Data.DataTable>で、<xref:System.Data.DataTable.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-858">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-859">ときに、<xref:System.Data.DataTable.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataTable>するスキーマが変更された可能性があるため、オブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="b4330-859">When the <xref:System.Data.DataTable.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataTable> objects are compared, because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="b4330-860">たとえば、企業間取引シナリオで新しい列が追加された可能性が XML スキーマを自動プロセスで。</span><span class="sxs-lookup"><span data-stu-id="b4330-860">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="b4330-861">場合、ソース<xref:System.Data.DataTable>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト)、ターゲットに不足している、スキーマ要素は、設定して、ターゲットに追加できる、`missingSchemaAction`への引数`MissingSchemaAction.Add`。</span><span class="sxs-lookup"><span data-stu-id="b4330-861">If the source <xref:System.Data.DataTable> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="b4330-862">その場合は、マージされた<xref:System.Data.DataTable>に追加されたスキーマとデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="b4330-862">In that case, the merged <xref:System.Data.DataTable> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="b4330-863">スキーマをマージ後に、データに結合されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-863">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="b4330-864">新しいソースをマージするときに<xref:System.Data.DataTable>、ターゲットに任意のソースの行で、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つターゲット行に一致します。</span><span class="sxs-lookup"><span data-stu-id="b4330-864">When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="b4330-865">ソースを持つ行を<xref:System.Data.DataRowState>の値`Added`が新しいソース行として同じプライマリ キー値を持つターゲットの新しい行に一致します。</span><span class="sxs-lookup"><span data-stu-id="b4330-865">Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-866">次のコンソール アプリケーションの動作を示す、`missingSchemaAction`のパラメーター、<xref:System.Data.DataTable.Merge%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-866">The following console application demonstrates the behavior of the `missingSchemaAction` parameter of the <xref:System.Data.DataTable.Merge%2A> method.</span></span> <span data-ttu-id="b4330-867">この例では、2 番目のバージョンのスキーマの変更、同じテーブルの 2 つのバージョンを作成します。</span><span class="sxs-lookup"><span data-stu-id="b4330-867">This example creates two versions of the same table, modifying the schema for the second version.</span></span> <span data-ttu-id="b4330-868">コードは、最初に 2 番目のテーブルをマージを試みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-868">The code then attempts to merge the second table into the first.</span></span>  
  
 [!code-csharp[DataWorks DataTable.MergeMissingSchemaAction#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.MergeMissingSchemaAction/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.MergeMissingSchemaAction#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.MergeMissingSchemaAction/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumCapacity">
      <MemberSignature Language="C#" Value="public int MinimumCapacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumCapacity" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.MinimumCapacity" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumCapacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumCapacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumCapacity : int with get, set" Usage="System.Data.DataTable.MinimumCapacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(50)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-869">Gets or sets the initial starting size for this table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-869">Gets or sets the initial starting size for this table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-870">このテーブルの行の初期開始サイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-870">The initial starting size in rows of this table.</span>
          </span>
          <span data-ttu-id="b4330-871">既定値には 50 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-871">The default is 50.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-872"><xref:System.Data.DataTable.MinimumCapacity%2A>システムは、データをフェッチする前に、適切なリソースのセットを作成できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-872">The <xref:System.Data.DataTable.MinimumCapacity%2A> allows the system to create an appropriate set of resources before fetching data.</span></span> <span data-ttu-id="b4330-873">状況でパフォーマンスが重要な場合は、このプロパティを設定するパフォーマンスを最適化できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-873">In a situation when performance is critical, setting this property can optimize performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-874">次の例のセット、<xref:System.Data.DataTable.MinimumCapacity%2A>の<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-874">The following example sets the <xref:System.Data.DataTable.MinimumCapacity%2A> of a <xref:System.Data.DataTable>.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.MinimumCapacity Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.MinimumCapacity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.MinimumCapacity Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.MinimumCapacity Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Data.DataTable.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-875">Gets or sets the namespace for the XML representation of the data stored in the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-875">Gets or sets the namespace for the XML representation of the data stored in the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-876">
            <see cref="T:System.Data.DataTable" /> の名前空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-876">The namespace of the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow NewRow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow NewRow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRow" />
      <MemberSignature Language="VB.NET" Value="Public Function NewRow () As DataRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ NewRow();" />
      <MemberSignature Language="F#" Value="member this.NewRow : unit -&gt; System.Data.DataRow" Usage="dataTable.NewRow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-877">Creates a new <see cref="T:System.Data.DataRow" /> with the same schema as the table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-877">Creates a new <see cref="T:System.Data.DataRow" /> with the same schema as the table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-878">A <see cref="T:System.Data.DataRow" /> with the same schema as the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-878">A <see cref="T:System.Data.DataRow" /> with the same schema as the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-879">使用する必要があります、<xref:System.Data.DataTable.NewRow%2A>新しいを作成するメソッド<xref:System.Data.DataRow>オブジェクトと同じスキーマを持つ、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-879">You must use the <xref:System.Data.DataTable.NewRow%2A> method to create new <xref:System.Data.DataRow> objects with the same schema as the <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-880">作成した後、<xref:System.Data.DataRow>に追加することができます、<xref:System.Data.DataRowCollection>を使用して、<xref:System.Data.DataTable>オブジェクトの<xref:System.Data.DataTable.Rows%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b4330-880">After creating a <xref:System.Data.DataRow>, you can add it to the <xref:System.Data.DataRowCollection>, through the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.Rows%2A> property.</span></span> <span data-ttu-id="b4330-881">使用すると<xref:System.Data.DataTable.NewRow%2A>を新しい行を作成するには、行必要があります追加またはを呼び出す前に、データ テーブルから削除<xref:System.Data.DataTable.Clear%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-881">When you use <xref:System.Data.DataTable.NewRow%2A> to create new rows, the rows must be added to or deleted from the data table before you call <xref:System.Data.DataTable.Clear%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-882">次の例では、作成、 <xref:System.Data.DataTable>、2 つ追加します<xref:System.Data.DataColumn>オブジェクト、テーブルのスキーマを決定し、いくつか新たに作成します<xref:System.Data.DataRow>オブジェクトを使用して、<xref:System.Data.DataTable.NewRow%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-882">The following example creates a <xref:System.Data.DataTable>, adds two <xref:System.Data.DataColumn> objects that determine the table's schema, and creates several new <xref:System.Data.DataRow> objects using the <xref:System.Data.DataTable.NewRow%2A> method.</span></span> <span data-ttu-id="b4330-883">これは、<xref:System.Data.DataRow>オブジェクトに追加し、<xref:System.Data.DataRowCollection>を使用して、<xref:System.Data.DataRowCollection.Add%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-883">Those <xref:System.Data.DataRow> objects are then added to the <xref:System.Data.DataRowCollection> using the <xref:System.Data.DataRowCollection.Add%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.NewRow Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.NewRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.NewRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.NewRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRowArray">
      <MemberSignature Language="C#" Value="protected internal System.Data.DataRow[] NewRowArray (int size);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Data.DataRow[] NewRowArray(int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRowArray(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function NewRowArray (size As Integer) As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ NewRowArray(int size);" />
      <MemberSignature Language="F#" Value="member this.NewRowArray : int -&gt; System.Data.DataRow[]" Usage="dataTable.NewRowArray size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">
          <span data-ttu-id="b4330-884">A <see cref="T:System.Int32" /> value that describes the size of the array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-884">A <see cref="T:System.Int32" /> value that describes the size of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-885">Returns an array of <see cref="T:System.Data.DataRow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-885">Returns an array of <see cref="T:System.Data.DataRow" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-886">The new array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-886">The new array.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRowFromBuilder">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataRow NewRowFromBuilder(class System.Data.DataRowBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewRowFromBuilder (builder As DataRowBuilder) As DataRow" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataRow ^ NewRowFromBuilder(System::Data::DataRowBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="abstract member NewRowFromBuilder : System.Data.DataRowBuilder -&gt; System.Data.DataRow&#xA;override this.NewRowFromBuilder : System.Data.DataRowBuilder -&gt; System.Data.DataRow" Usage="dataTable.NewRowFromBuilder builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Data.DataRowBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="b4330-887">A <see cref="T:System.Data.DataRowBuilder" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-887">A <see cref="T:System.Data.DataRowBuilder" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-888">Creates a new row from an existing row.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-888">Creates a new row from an existing row.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-889">A <see cref="T:System.Data.DataRow" /> derived class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-889">A <see cref="T:System.Data.DataRow" /> derived class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnColumnChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnChanged(class System.Data.DataColumnChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnColumnChanged (e As DataColumnChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnColumnChanged(System::Data::DataColumnChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnChanged : System.Data.DataColumnChangeEventArgs -&gt; unit&#xA;override this.OnColumnChanged : System.Data.DataColumnChangeEventArgs -&gt; unit" Usage="dataTable.OnColumnChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataColumnChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-890">A <see cref="T:System.Data.DataColumnChangeEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-890">A <see cref="T:System.Data.DataColumnChangeEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-891">Raises the <see cref="E:System.Data.DataTable.ColumnChanged" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-891">Raises the <see cref="E:System.Data.DataTable.ColumnChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-892">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-892">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-893">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-893">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b4330-894">
            <para>オーバーライドするときに<see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />メソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-894">
              <para>When overriding <see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnChanging">
      <MemberSignature Language="C#" Value="protected internal virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnChanging(class System.Data.DataColumnChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnColumnChanging (e As DataColumnChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnColumnChanging(System::Data::DataColumnChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnChanging : System.Data.DataColumnChangeEventArgs -&gt; unit&#xA;override this.OnColumnChanging : System.Data.DataColumnChangeEventArgs -&gt; unit" Usage="dataTable.OnColumnChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataColumnChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-895">A <see cref="T:System.Data.DataColumnChangeEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-895">A <see cref="T:System.Data.DataColumnChangeEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-896">Raises the <see cref="E:System.Data.DataTable.ColumnChanging" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-896">Raises the <see cref="E:System.Data.DataTable.ColumnChanging" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-897">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-897">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-898">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-898">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b4330-899">
            <para>オーバーライドするときに<see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />メソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-899">
              <para>When overriding <see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="dataTable.OnPropertyChanging pcevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">
          <span data-ttu-id="b4330-900">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-900">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-901">Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-901">Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-902">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-902">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-903">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-903">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b4330-904">
            <para>オーバーライドするときに<see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />メソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-904">
              <para>When overriding <see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveColumn">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveColumn (System.Data.DataColumn column);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveColumn(class System.Data.DataColumn column) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveColumn (column As DataColumn)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveColumn(System::Data::DataColumn ^ column);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveColumn : System.Data.DataColumn -&gt; unit&#xA;override this.OnRemoveColumn : System.Data.DataColumn -&gt; unit" Usage="dataTable.OnRemoveColumn column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <param name="column">
          <span data-ttu-id="b4330-905">The <see cref="T:System.Data.DataColumn" /> being removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-905">The <see cref="T:System.Data.DataColumn" /> being removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-906">Notifies the <see cref="T:System.Data.DataTable" /> that a <see cref="T:System.Data.DataColumn" /> is being removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-906">Notifies the <see cref="T:System.Data.DataTable" /> that a <see cref="T:System.Data.DataColumn" /> is being removed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-907">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-907">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-908">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-908">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b4330-909">
            <para>オーバーライドするときに<see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />メソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-909">
              <para>When overriding <see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowChanged(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowChanged (e As DataRowChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowChanged(System::Data::DataRowChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowChanged : System.Data.DataRowChangeEventArgs -&gt; unit&#xA;override this.OnRowChanged : System.Data.DataRowChangeEventArgs -&gt; unit" Usage="dataTable.OnRowChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-910">A <see cref="T:System.Data.DataRowChangeEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-910">A <see cref="T:System.Data.DataRowChangeEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-911">Raises the <see cref="E:System.Data.DataTable.RowChanged" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-911">Raises the <see cref="E:System.Data.DataTable.RowChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-912">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-912">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-913">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-913">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b4330-914">
            <para>オーバーライドするときに<see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />メソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-914">
              <para>When overriding <see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowChanging(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowChanging (e As DataRowChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowChanging(System::Data::DataRowChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowChanging : System.Data.DataRowChangeEventArgs -&gt; unit&#xA;override this.OnRowChanging : System.Data.DataRowChangeEventArgs -&gt; unit" Usage="dataTable.OnRowChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-915">A <see cref="T:System.Data.DataRowChangeEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-915">A <see cref="T:System.Data.DataRowChangeEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-916">Raises the <see cref="E:System.Data.DataTable.RowChanging" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-916">Raises the <see cref="E:System.Data.DataTable.RowChanging" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-917">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-917">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-918">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-918">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b4330-919">
            <para>オーバーライドするときに<see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />メソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-919">
              <para>When overriding <see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDeleted(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowDeleted (e As DataRowChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowDeleted(System::Data::DataRowChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowDeleted : System.Data.DataRowChangeEventArgs -&gt; unit&#xA;override this.OnRowDeleted : System.Data.DataRowChangeEventArgs -&gt; unit" Usage="dataTable.OnRowDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-920">A <see cref="T:System.Data.DataRowChangeEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-920">A <see cref="T:System.Data.DataRowChangeEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-921">Raises the <see cref="E:System.Data.DataTable.RowDeleted" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-921">Raises the <see cref="E:System.Data.DataTable.RowDeleted" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-922">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-922">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-923">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-923">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b4330-924">
            <para>オーバーライドするときに<see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />メソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-924">
              <para>When overriding <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDeleting(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowDeleting (e As DataRowChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowDeleting(System::Data::DataRowChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowDeleting : System.Data.DataRowChangeEventArgs -&gt; unit&#xA;override this.OnRowDeleting : System.Data.DataRowChangeEventArgs -&gt; unit" Usage="dataTable.OnRowDeleting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-925">A <see cref="T:System.Data.DataRowChangeEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-925">A <see cref="T:System.Data.DataRowChangeEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-926">Raises the <see cref="E:System.Data.DataTable.RowDeleting" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-926">Raises the <see cref="E:System.Data.DataTable.RowDeleting" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-927">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-927">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-928">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-928">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b4330-929">
            <para>オーバーライドするときに<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />メソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-929">
              <para>When overriding <see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnTableCleared">
      <MemberSignature Language="C#" Value="protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableCleared(class System.Data.DataTableClearEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTableCleared (e As DataTableClearEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTableCleared(System::Data::DataTableClearEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTableCleared : System.Data.DataTableClearEventArgs -&gt; unit&#xA;override this.OnTableCleared : System.Data.DataTableClearEventArgs -&gt; unit" Usage="dataTable.OnTableCleared e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableClearEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-930">A <see cref="T:System.Data.DataTableClearEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-930">A <see cref="T:System.Data.DataTableClearEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-931">Raises the <see cref="E:System.Data.DataTable.TableCleared" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-931">Raises the <see cref="E:System.Data.DataTable.TableCleared" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-932">発生させる、 <xref:System.Data.DataTable.TableCleared> 、すぐにすべての行が削除された後正常にする前に発生するイベント、<xref:System.Data.DataTable.Clear%2A>メソッドが呼び出し元にコントロールを返します。</span><span class="sxs-lookup"><span data-stu-id="b4330-932">Raises the <xref:System.Data.DataTable.TableCleared> event, which is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller.</span></span>  
  
 <span data-ttu-id="b4330-933">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-933">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-934">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-934">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTableClearing">
      <MemberSignature Language="C#" Value="protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableClearing(class System.Data.DataTableClearEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTableClearing (e As DataTableClearEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTableClearing(System::Data::DataTableClearEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTableClearing : System.Data.DataTableClearEventArgs -&gt; unit&#xA;override this.OnTableClearing : System.Data.DataTableClearEventArgs -&gt; unit" Usage="dataTable.OnTableClearing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableClearEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-935">A <see cref="T:System.Data.DataTableClearEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-935">A <see cref="T:System.Data.DataTableClearEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-936">Raises the <see cref="E:System.Data.DataTable.TableClearing" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-936">Raises the <see cref="E:System.Data.DataTable.TableClearing" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-937">発生させる、<xref:System.Data.DataTable.TableClearing>の処理の前に発生するイベント、<xref:System.Data.DataTable.Clear%2A>操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="b4330-937">Raises the <xref:System.Data.DataTable.TableClearing> event, which is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins.</span></span>  
  
 <span data-ttu-id="b4330-938">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-938">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-939">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-939">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTableNewRow">
      <MemberSignature Language="C#" Value="protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableNewRow(class System.Data.DataTableNewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTableNewRow (e As DataTableNewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTableNewRow(System::Data::DataTableNewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTableNewRow : System.Data.DataTableNewRowEventArgs -&gt; unit&#xA;override this.OnTableNewRow : System.Data.DataTableNewRowEventArgs -&gt; unit" Usage="dataTable.OnTableNewRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableNewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b4330-940">A <see cref="T:System.Data.DataTableNewRowEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-940">A <see cref="T:System.Data.DataTableNewRowEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-941">Raises the <see cref="E:System.Data.DataTable.TableNewRow" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-941">Raises the <see cref="E:System.Data.DataTable.TableNewRow" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-942">発生させる、<xref:System.Data.DataTable.TableNewRow>新しいの後に発生するイベント、<xref:System.Data.DataRow>を使用して作成された<xref:System.Data.DataTable.NewRow%2A>。</span><span class="sxs-lookup"><span data-stu-id="b4330-942">Raises the <xref:System.Data.DataTable.TableNewRow> event, which fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>.</span></span>  
  
 <span data-ttu-id="b4330-943">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-943">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="b4330-944">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-944">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentRelations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection ParentRelations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection ParentRelations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ParentRelations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentRelations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ ParentRelations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParentRelations : System.Data.DataRelationCollection" Usage="System.Data.DataTable.ParentRelations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-945">Gets the collection of parent relations for this <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-945">Gets the collection of parent relations for this <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-946">A<see cref="T:System.Data.DataRelationCollection" />テーブルの親リレーションを格納しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-946">A <see cref="T:System.Data.DataRelationCollection" /> that contains the parent relations for the table.</span>
          </span>
          <span data-ttu-id="b4330-947">ない場合は、空のコレクションが返される<see cref="T:System.Data.DataRelation" />オブジェクトが存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-947">An empty collection is returned if no <see cref="T:System.Data.DataRelation" /> objects exist.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4330-948">次の例では、<xref:System.Data.DataTable.ParentRelations%2A>プロパティを返す各親<xref:System.Data.DataRelation>で、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-948">The following example uses the <xref:System.Data.DataTable.ParentRelations%2A> property to return each parent <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-949">各リレーションシップは、引数として使用し、<xref:System.Data.DataRow.GetParentRows%2A>のメソッド、<xref:System.Data.DataRow>行の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4330-949">Each relation is then used as an argument in the <xref:System.Data.DataRow.GetParentRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows.</span></span> <span data-ttu-id="b4330-950">行の各列の値が出力されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-950">The value of each column in the row is then printed.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.ParentRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ParentRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ParentRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ParentRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.ChildRelations" />
        <altmember cref="T:System.Data.DataRelation" />
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="P:System.Data.DataSet.Relations" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string with get, set" Usage="System.Data.DataTable.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-951">Gets or sets the namespace for the XML representation of the data stored in the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-951">Gets or sets the namespace for the XML representation of the data stored in the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-952">プレフィックス、<see cref="T:System.Data.DataTable" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-952">The prefix of the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public System.Data.DataColumn[] PrimaryKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataColumn[] PrimaryKey" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.PrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Property PrimaryKey As DataColumn()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Data::DataColumn ^&gt; ^ PrimaryKey { cli::array &lt;System::Data::DataColumn ^&gt; ^ get(); void set(cli::array &lt;System::Data::DataColumn ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryKey : System.Data.DataColumn[] with get, set" Usage="System.Data.DataTable.PrimaryKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.PrimaryKeyEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.PrimaryKeyTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataColumn[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-953">Gets or sets an array of columns that function as primary keys for the data table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-953">Gets or sets an array of columns that function as primary keys for the data table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-954">
            <see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-954">An array of <see cref="T:System.Data.DataColumn" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-955">テーブルの主キーは、テーブル内のレコードを識別するために一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-955">The primary key of a table must be unique to identify the record in the table.</span></span> <span data-ttu-id="b4330-956">2 つ以上の列から成る主キーを持つテーブルを作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="b4330-956">It's also possible to have a table with a primary key made up of two or more columns.</span></span> <span data-ttu-id="b4330-957">これは、1 つの列が一意の値を含めることはできませんと発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-957">This occurs when a single column can't contain enough unique values.</span></span> <span data-ttu-id="b4330-958">たとえば、"FirstName"と"LastName"の列の 2 つの列の主キーから構成されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-958">For example, a two column primary key might consist of a "FirstName" and "LastName" column.</span></span> <span data-ttu-id="b4330-959">主キーは、1 つ以上の列確立できなかったため、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティの配列から成る<xref:System.Data.DataColumn>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-959">Because primary keys can be made up of more than one column, the <xref:System.Data.DataTable.PrimaryKey%2A> property consists of an array of <xref:System.Data.DataColumn> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-960">最初の例の主キー列を返す方法を示しています、<xref:System.Data.DataTable>に表示される、`DataGrid`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-960">The first example shows how to return the primary key columns for a <xref:System.Data.DataTable> displayed in a `DataGrid`.</span></span> <span data-ttu-id="b4330-961">2 番目の例は、主キー列を設定する方法を示します、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-961">The second example demonstrates how to set the primary key columns for a <xref:System.Data.DataTable>.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.PrimaryKey Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.PrimaryKey Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.PrimaryKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.PrimaryKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DataException">
          <span data-ttu-id="b4330-962">The key is a foreign key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-962">The key is a foreign key.</span>
          </span>
        </exception>
        <altmember cref="T:System.Data.DataColumn" />
        <altmember cref="P:System.Data.DataTable.PrimaryKey" />
        <altmember cref="T:System.Data.DataColumnCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-963">Reads XML schema and data into the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-963">Reads XML schema and data into the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-964"><xref:System.Data.DataTable.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントからは、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="b4330-964">The <xref:System.Data.DataTable.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="b4330-965">データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードが含まれる、`XmlReadMode`パラメーター、その値に設定し、 `ReadSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-965">To read both data and schema, use one of the `ReadXML` overloads that include the `XmlReadMode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="b4330-966">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-966">Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-967">XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-967">To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method.</span></span> <span data-ttu-id="b4330-968">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-968">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-969"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-969">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Data.DataSet.ReadXml" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream -&gt; System.Data.XmlReadMode" Usage="dataTable.ReadXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b4330-970">An object that derives from <see cref="T:System.IO.Stream" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-970">An object that derives from <see cref="T:System.IO.Stream" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-971">Reads XML schema and data into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-971">Reads XML schema and data into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-972">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-972">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-973">現在<xref:System.Data.DataTable>とその子孫が、指定したデータを読み込まれる<xref:System.IO.Stream>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-973">The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.Stream>.</span></span> <span data-ttu-id="b4330-974">このメソッドの動作のと同じですが、<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>この場合、データを除く、メソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-974">The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType> method, except that in this case, data is loaded only for the current table and its descendants.</span></span>  
  
 <span data-ttu-id="b4330-975"><xref:System.Data.DataTable.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントからは、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="b4330-975">The <xref:System.Data.DataTable.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.</span></span>  
  
 <span data-ttu-id="b4330-976">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-976">Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-977">XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-977">To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method.</span></span> <span data-ttu-id="b4330-978">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-978">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-979"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-979">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="b4330-980">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-980">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="b4330-981">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-981">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="b4330-982">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-982">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="b4330-983">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-983">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-984">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-984">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="b4330-985">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="b4330-985">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="b4330-986">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-986">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-987">次の例では、作成、 <xref:System.Data.DataTable> 2 つの列と 10 行を格納しています。</span><span class="sxs-lookup"><span data-stu-id="b4330-987">The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows.</span></span> <span data-ttu-id="b4330-988">この例で、<xref:System.Data.DataTable>スキーマとデータを呼び出すことによって、メモリ ストリーム、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-988">The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span> <span data-ttu-id="b4330-989">例では、1 秒あたりの作成<xref:System.Data.DataTable>を呼び出すと、<xref:System.Data.DataTable.ReadXml%2A>メソッドを呼び出してスキーマおよびデータを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-989">The example creates a second <xref:System.Data.DataTable> and calls the <xref:System.Data.DataTable.ReadXml%2A> method to fill it with schema and data.</span></span>  
  
 [!code-csharp[DataWorks DataTable.ReadXml#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXml/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXml#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXml/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader -&gt; System.Data.XmlReadMode" Usage="dataTable.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-990">The <see cref="T:System.IO.TextReader" /> that will be used to read the data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-990">The <see cref="T:System.IO.TextReader" /> that will be used to read the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-991">Reads XML schema and data into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-991">Reads XML schema and data into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-992">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-992">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-993">現在<xref:System.Data.DataTable>とその子孫が、指定したデータを読み込まれる<xref:System.IO.TextReader>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-993">The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.TextReader>.</span></span> <span data-ttu-id="b4330-994">このメソッドの動作のと同じですが、<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>この場合、データを除く、メソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-994">The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType> method, except that in this case, data is loaded only for the current table and its descendants.</span></span>  
  
 <span data-ttu-id="b4330-995"><xref:System.Data.DataTable.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントからは、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="b4330-995">The <xref:System.Data.DataTable.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.</span></span>  
  
 <span data-ttu-id="b4330-996">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-996">Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-997">XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-997">To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method.</span></span> <span data-ttu-id="b4330-998">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-998">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-999"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-999">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="b4330-1000">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1000">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="b4330-1001">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1001">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="b4330-1002">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1002">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="b4330-1003">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1003">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1004">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1004">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="b4330-1005">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="b4330-1005">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="b4330-1006">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1006">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1007">次の例では、作成、 <xref:System.Data.DataTable> 2 つの列と 10 行を格納しています。</span><span class="sxs-lookup"><span data-stu-id="b4330-1007">The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows.</span></span> <span data-ttu-id="b4330-1008">この例で、<xref:System.Data.DataTable>スキーマとデータを呼び出すことによって、メモリ ストリーム、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1008">The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span> <span data-ttu-id="b4330-1009">例では、1 秒あたりの作成<xref:System.Data.DataTable>を呼び出すと、<xref:System.Data.DataTable.ReadXml%2A>メソッドを呼び出してスキーマおよびデータを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1009">The example creates a second <xref:System.Data.DataTable> and calls the <xref:System.Data.DataTable.ReadXml%2A> method to fill it with schema and data.</span></span>  
  
 [!code-csharp[DataWorks DataTable.ReadXmlText#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlText/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlText#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlText/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string -&gt; System.Data.XmlReadMode" Usage="dataTable.ReadXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="b4330-1010">The name of the file from which to read the data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1010">The name of the file from which to read the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1011">Reads XML schema and data into the <see cref="T:System.Data.DataTable" /> from the specified file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1011">Reads XML schema and data into the <see cref="T:System.Data.DataTable" /> from the specified file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1012">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1012">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1013">現在<xref:System.Data.DataTable>と指定されたという名前のファイルからのデータとその子孫が読み込まれる<xref:System.String>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1013">The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.String>.</span></span> <span data-ttu-id="b4330-1014">このメソッドの動作のと同じですが、<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>この場合、データを除く、メソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1014">The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType> method, except that in this case, data is loaded only for the current table and its descendants.</span></span>  
  
 <span data-ttu-id="b4330-1015"><xref:System.Data.DataTable.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントからは、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="b4330-1015">The <xref:System.Data.DataTable.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.</span></span>  
  
 <span data-ttu-id="b4330-1016">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1016">Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1017">XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1017">To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method.</span></span> <span data-ttu-id="b4330-1018">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1018">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1019"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1019">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="b4330-1020">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1020">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="b4330-1021">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1021">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="b4330-1022">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1022">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="b4330-1023">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1023">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1024">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1024">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="b4330-1025">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="b4330-1025">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="b4330-1026">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1026">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
```csharp  
using System.Data;  
public class A {  
   static void Main(string[] args) {  
      DataTable tabl = new DataTable("mytable");  
      tabl.Columns.Add(new DataColumn("id", typeof(int)));  
      for (int i = 0; i < 10; i++) {  
         DataRow row = tabl.NewRow();  
         row["id"] = i;  
         tabl.Rows.Add(row);  
      }  
      tabl.WriteXml("f.xml", XmlWriteMode.WriteSchema);  
      DataTable newt = new DataTable();  
      newt.ReadXml("f.xml");  
   }  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1027">次の例では、作成、 <xref:System.Data.DataTable> 2 つの列と 10 行を格納しています。</span><span class="sxs-lookup"><span data-stu-id="b4330-1027">The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows.</span></span> <span data-ttu-id="b4330-1028">この例で、<xref:System.Data.DataTable>スキーマとデータ ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1028">The example writes the <xref:System.Data.DataTable> schema and data to disk.</span></span> <span data-ttu-id="b4330-1029">例では、1 秒あたりの作成<xref:System.Data.DataTable>を呼び出すと、<xref:System.Data.DataTable.ReadXml%2A>メソッドを呼び出してスキーマおよびデータを使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1029">The example creates a second <xref:System.Data.DataTable> and calls the <xref:System.Data.DataTable.ReadXml%2A> method to fill it with schema and data.</span></span>  
  
 [!code-csharp[DataWorks DataTable.ReadXmlString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlString/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader -&gt; System.Data.XmlReadMode" Usage="dataTable.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-1030">The <see cref="T:System.Xml.XmlReader" /> that will be used to read the data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1030">The <see cref="T:System.Xml.XmlReader" /> that will be used to read the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1031">Reads XML Schema and Data into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1031">Reads XML Schema and Data into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1032">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1032">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1033">現在<xref:System.Data.DataTable>と指定されたという名前のファイルからのデータとその子孫が読み込まれる<xref:System.Xml.XmlReader>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1033">The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="b4330-1034">このメソッドの動作のと同じですが、<xref:System.Data.DataTable.ReadXml%2A>この場合、データを除く、メソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1034">The behavior of this method is identical to that of the <xref:System.Data.DataTable.ReadXml%2A> method, except that in this case, data is loaded only for the current table and its descendants.</span></span>  
  
 <span data-ttu-id="b4330-1035"><xref:System.Data.DataTable.ReadXml%2A>メソッドを提供するだけ、いずれかのデータを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントからは、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="b4330-1035">The <xref:System.Data.DataTable.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.</span></span>  
  
 <span data-ttu-id="b4330-1036">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1036">Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1037">XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1037">To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method.</span></span> <span data-ttu-id="b4330-1038">スキーマだけを作成するには、使用、`WriteXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1038">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1039"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1039">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="b4330-1040">インライン スキーマが指定されている場合、インライン スキーマは、データを読み込む前に既存のリレーショナル構造の拡張に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1040">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="b4330-1041">競合 (たとえば、さまざまなデータ型で定義された同じテーブルで同じ列) がある場合は、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1041">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="b4330-1042">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1042">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="b4330-1043">すべてのデータを公開するためには、推論でスキーマを拡張することはできません、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1043">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1044">`DataSet` 、対応する XML 要素に関連付けない`DataColumn`または`DataTable`場合 (「_」) のように有効な XML 文字がシリアル化された XML でエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1044">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="b4330-1045">`DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみ利用できる同じです。</span><span class="sxs-lookup"><span data-stu-id="b4330-1045">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="b4330-1046">XML 要素名の有効な文字はエスケープすると、処理中に、要素が無視されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1046">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1047">次の例では、作成、 <xref:System.Data.DataTable> 2 つの列と 10 行を格納しています。</span><span class="sxs-lookup"><span data-stu-id="b4330-1047">The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows.</span></span> <span data-ttu-id="b4330-1048">この例で、<xref:System.Data.DataTable>スキーマとデータを<xref:System.Xml.XmlReader>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1048">The example writes the <xref:System.Data.DataTable> schema and data to an <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="b4330-1049">例では、1 秒あたりの作成<xref:System.Data.DataTable>を呼び出すと、<xref:System.Data.DataTable.ReadXml%2A>からスキーマとデータを格納する方法、<xref:System.Xml.XmlReader>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="b4330-1049">The example creates a second <xref:System.Data.DataTable> and calls the <xref:System.Data.DataTable.ReadXml%2A> method to fill it with schema and data from the <xref:System.Xml.XmlReader> instance.</span></span>  
  
 [!code-csharp[DataWorks DataTable.ReadXmlXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlXmlReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlXmlReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1050">Reads an XML schema into the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1050">Reads an XML schema into the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1051">使用して、`ReadXmlSchema`のスキーマを作成する方法、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1051">Use the `ReadXmlSchema` method to create the schema for a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-1052">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1052">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1053">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1053">To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1054">XML スキーマは XSD 標準に従って解釈されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1054">The XML schema is interpreted according to the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1055">`ReadXmlSchema`メソッドを呼び出す前に一般的に、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1055">The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Data.DataSet.ReadXmlSchema" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.Stream -&gt; unit" Usage="dataTable.ReadXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b4330-1056">The stream used to read the schema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1056">The stream used to read the schema.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1057">Reads an XML schema into the <see cref="T:System.Data.DataTable" /> using the specified stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1057">Reads an XML schema into the <see cref="T:System.Data.DataTable" /> using the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1058">使用して、<xref:System.Data.DataTable.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1058">Use the <xref:System.Data.DataTable.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-1059">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1059">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1060">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1060">To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1061">XML スキーマは XSD 標準に従って解釈されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1061">The XML schema is interpreted according to the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1062">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1062">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="b4330-1063">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1063">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="b4330-1064">`ReadXmlSchema`メソッドを呼び出す前に一般的に、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1064">The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="b4330-1065">XML スキーマを使用して入れ子になったリレーションを作成するには、暗黙的な入れ子になった要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1065">To create a nested relation using XML schema, use implicit nested elements.</span></span> <span data-ttu-id="b4330-1066">明示的な列名を使用して、入れ子の関係を構成することもできます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1066">You can also configure the nested relation to use explicit column names.</span></span> <span data-ttu-id="b4330-1067">要素は、対応するデータ テーブルを入れ子になった関係に参加させるために暗黙的に入れ子にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-1067">Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1068">次のコンソール アプリケーションを作成する新しい<xref:System.Data.DataTable>、読み書きをするには、そのテーブルのスキーマ、<xref:System.IO.MemoryStream>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1068">The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>.</span></span> <span data-ttu-id="b4330-1069">例が新たに作成し、<xref:System.Data.DataTable>し、保存された XML スキーマからそのスキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1069">Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema.</span></span>  
  
 [!code-csharp[DataWorks DataTable.ReadXmlIOStream#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlIOStream/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlIOStream#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlIOStream/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.TextReader -&gt; unit" Usage="dataTable.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-1070">The <see cref="T:System.IO.TextReader" /> used to read the schema information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1070">The <see cref="T:System.IO.TextReader" /> used to read the schema information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1071">Reads an XML schema into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1071">Reads an XML schema into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1072">使用して、<xref:System.Data.DataTable.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1072">Use the <xref:System.Data.DataTable.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-1073">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1073">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1074">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1074">To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1075">XML スキーマは XSD 標準に従って解釈されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1075">The XML schema is interpreted according to the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1076">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1076">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="b4330-1077">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1077">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="b4330-1078">`ReadXmlSchema`メソッドを呼び出す前に一般的に、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1078">The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="b4330-1079">XML スキーマを使用して入れ子になったリレーションを作成するには、暗黙的な入れ子になった要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1079">To create a nested relation using XML schema, use implicit nested elements.</span></span> <span data-ttu-id="b4330-1080">また、明示的な列名を使用する入れ子になったリレーションシップを再構成できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1080">You can also reconfigure the nested relation to use explicit column names.</span></span> <span data-ttu-id="b4330-1081">要素は、対応するデータ テーブルを入れ子になった関係に参加させるために暗黙的に入れ子にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-1081">Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1082">次のコンソール アプリケーションを作成する新しい<xref:System.Data.DataTable>、読み書きをするには、そのテーブルのスキーマ、<xref:System.IO.MemoryStream>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1082">The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>.</span></span> <span data-ttu-id="b4330-1083">例が新たに作成し、<xref:System.Data.DataTable>し、そのスキーマを保存された XML スキーマから読み取りを使用して、 <xref:System.IO.StreamReader> (から継承する<xref:System.IO.TextReader>) のソースとして。</span><span class="sxs-lookup"><span data-stu-id="b4330-1083">Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.IO.StreamReader> (which inherits from <xref:System.IO.TextReader>) as its source.</span></span>  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchema#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchema/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchema#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchema/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : string -&gt; unit" Usage="dataTable.ReadXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="b4330-1084">The name of the file from which to read the schema information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1084">The name of the file from which to read the schema information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1085">Reads an XML schema into the <see cref="T:System.Data.DataTable" /> from the specified file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1085">Reads an XML schema into the <see cref="T:System.Data.DataTable" /> from the specified file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1086">使用して、<xref:System.Data.DataTable.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1086">Use the <xref:System.Data.DataTable.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-1087">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1087">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1088">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1088">To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1089">XML スキーマは XSD 標準に従って解釈されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1089">The XML schema is interpreted according to the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1090">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1090">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="b4330-1091">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1091">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="b4330-1092">`ReadXmlSchema`メソッドを呼び出す前に一般的に、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、`DataTable`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1092">The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the `DataTable`.</span></span>  
  
 <span data-ttu-id="b4330-1093">XML スキーマを使用して入れ子になったリレーションを作成するには、暗黙的な入れ子になった要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1093">To create a nested relation using XML schema, use implicit nested elements.</span></span> <span data-ttu-id="b4330-1094">また、明示的な列名を使用する入れ子になったリレーションシップを再構成できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1094">You can also reconfigure the nested relation to use explicit column names.</span></span> <span data-ttu-id="b4330-1095">要素は、対応するデータ テーブルを入れ子になった関係に参加させるために暗黙的に入れ子にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-1095">Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1096">次のコンソール アプリケーションを作成する新しい<xref:System.Data.DataTable>、し、そのテーブルのスキーマをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1096">The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a file.</span></span> <span data-ttu-id="b4330-1097">例が新たに作成し、<xref:System.Data.DataTable>し、そのソースとしてファイルを使用して、保存された XML スキーマからそのスキーマを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1097">Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using the file as its source.</span></span>  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchemaString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaString/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchemaString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.Xml.XmlReader -&gt; unit" Usage="dataTable.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-1098">The <see cref="T:System.Xml.XmlReader" /> used to read the schema information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1098">The <see cref="T:System.Xml.XmlReader" /> used to read the schema information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1099">Reads an XML schema into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1099">Reads an XML schema into the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1100">使用して、<xref:System.Data.DataTable.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1100">Use the <xref:System.Data.DataTable.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-1101">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1101">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1102">XML ドキュメントにスキーマを書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1102">To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1103">XML スキーマは XSD 標準に従って解釈されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1103">The XML schema is interpreted according to the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1104">データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1104">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="b4330-1105">例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1105">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="b4330-1106">`ReadXmlSchema`メソッドを呼び出す前に一般的に、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1106">The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1107">XML スキーマを使用して入れ子になったリレーションを作成する方法では、暗黙的な入れ子になった要素があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-1107">The way to create a nested relation using XML schema is to have implicit nested elements.</span></span> <span data-ttu-id="b4330-1108">さらに、入れ子になったリレーションの再関連付けし、明示的な列名を使用する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-1108">Additionally, the nested relation could be re-wired, to use explicit column names.</span></span> <span data-ttu-id="b4330-1109">要素は暗黙的に、入れ子の関係に参加する対応するデータ テーブルの入れ子にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b4330-1109">It is mandatory for elements to be implicitly nested for the corresponding DataTables to participate in a nested relation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1110">次のコンソール アプリケーションを作成する新しい<xref:System.Data.DataTable>、読み書きをするには、そのテーブルのスキーマ、<xref:System.IO.MemoryStream>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1110">The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>.</span></span> <span data-ttu-id="b4330-1111">例が新たに作成し、<xref:System.Data.DataTable>し、そのスキーマを保存された XML スキーマから読み取りを使用して、 <xref:System.Xml.XmlTextReader> (から継承する<xref:System.Xml.XmlReader>) のソースとして。</span><span class="sxs-lookup"><span data-stu-id="b4330-1111">Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.Xml.XmlTextReader> (which inherits from <xref:System.Xml.XmlReader>) as its source.</span></span>  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchemaReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchemaReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXmlSerializable : System.Xml.XmlReader -&gt; unit&#xA;override this.ReadXmlSerializable : System.Xml.XmlReader -&gt; unit" Usage="dataTable.ReadXmlSerializable reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-1112">A <see cref="T:System.Xml.XmlReader" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1112">A <see cref="T:System.Xml.XmlReader" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1113">Reads from an XML stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1113">Reads from an XML stream.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RejectChanges();" />
      <MemberSignature Language="F#" Value="member this.RejectChanges : unit -&gt; unit" Usage="dataTable.RejectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1114">Rolls back all changes that have been made to the table since it was loaded, or the last time <see cref="M:System.Data.DataTable.AcceptChanges" /> was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1114">Rolls back all changes that have been made to the table since it was loaded, or the last time <see cref="M:System.Data.DataTable.AcceptChanges" /> was called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1115">ときに<xref:System.Data.DataTable.RejectChanges%2A>が呼び出されると、いずれかの<xref:System.Data.DataRow>編集モードに残っているオブジェクトがそれらの編集をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1115">When <xref:System.Data.DataTable.RejectChanges%2A> is called, any <xref:System.Data.DataRow> objects that are still in edit-mode cancel their edits.</span></span> <span data-ttu-id="b4330-1116">新しい行が削除されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1116">New rows are removed.</span></span> <span data-ttu-id="b4330-1117">行、<xref:System.Data.DataRowState>に設定`Modified`または`Deleted`元の状態に戻り値。</span><span class="sxs-lookup"><span data-stu-id="b4330-1117">Rows with the <xref:System.Data.DataRowState> set to `Modified` or `Deleted` return back to their original state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1118">次の例でいくつかの変更、 <xref:System.Data.DataTable>、呼び出すことによって、変更を拒否が、<xref:System.Data.DataTable.RejectChanges%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1118">The following example makes several changes to a <xref:System.Data.DataTable>, but rejects the changes by invoking the <xref:System.Data.DataTable.RejectChanges%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.RemotingFormat : System.Data.SerializationFormat with get, set" Usage="System.Data.DataTable.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1119">Gets or sets the serialization format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1119">Gets or sets the serialization format.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-1120">A<see cref="T:System.Data.SerializationFormat" />いずれかを指定する列挙体<see langword="Binary" />または<see langword="Xml" />シリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1120">A <see cref="T:System.Data.SerializationFormat" /> enumeration specifying either <see langword="Binary" /> or <see langword="Xml" /> serialization.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dataTable.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1121">Resets the <see cref="T:System.Data.DataTable" /> to its original state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1121">Resets the <see cref="T:System.Data.DataTable" /> to its original state.</span>
          </span>
          <span data-ttu-id="b4330-1122">Reset removes all data, indexes, relations, and columns of the table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1122">Reset removes all data, indexes, relations, and columns of the table.</span>
          </span>
          <span data-ttu-id="b4330-1123">If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1123">If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowChanged">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowChanged As DataRowChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataRowChangeEventHandler ^ RowChanged;" />
      <MemberSignature Language="F#" Value="member this.RowChanged : System.Data.DataRowChangeEventHandler " Usage="member this.RowChanged : System.Data.DataRowChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1124">Occurs after a <see cref="T:System.Data.DataRow" /> has been changed successfully.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1124">Occurs after a <see cref="T:System.Data.DataRow" /> has been changed successfully.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1125">詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1125">For more information, see [Handling DataTable Events](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowChanged Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanged Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowChanging">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowChanging" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowChanging As DataRowChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataRowChangeEventHandler ^ RowChanging;" />
      <MemberSignature Language="F#" Value="member this.RowChanging : System.Data.DataRowChangeEventHandler " Usage="member this.RowChanging : System.Data.DataRowChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1126">Occurs when a <see cref="T:System.Data.DataRow" /> is changing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1126">Occurs when a <see cref="T:System.Data.DataRow" /> is changing.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1127">詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1127">For more information, see [Handling DataTable Events](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowChanging Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanging Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowChanging Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanging Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDeleted">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowDeleted As DataRowChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataRowChangeEventHandler ^ RowDeleted;" />
      <MemberSignature Language="F#" Value="member this.RowDeleted : System.Data.DataRowChangeEventHandler " Usage="member this.RowDeleted : System.Data.DataRowChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1128">Occurs after a row in the table has been deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1128">Occurs after a row in the table has been deleted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1129">詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1129">For more information, see [Handling DataTable Events](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowDeleted Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleted Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowDeleted Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleted Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDeleting">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowDeleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowDeleting As DataRowChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataRowChangeEventHandler ^ RowDeleting;" />
      <MemberSignature Language="F#" Value="member this.RowDeleting : System.Data.DataRowChangeEventHandler " Usage="member this.RowDeleting : System.Data.DataRowChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1130">Occurs before a row in the table is about to be deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1130">Occurs before a row in the table is about to be deleted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1131">詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1131">For more information, see [Handling DataTable Events](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowDeleting Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowDeleting Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public System.Data.DataRowCollection Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRowCollection Rows" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Rows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rows As DataRowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRowCollection ^ Rows { System::Data::DataRowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Rows : System.Data.DataRowCollection" Usage="System.Data.DataTable.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1132">Gets the collection of rows that belong to this table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1132">Gets the collection of rows that belong to this table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-1133">A<see cref="T:System.Data.DataRowCollection" />を格納している<see cref="T:System.Data.DataRow" />オブジェクトです。 null 値場合<see cref="T:System.Data.DataRow" />オブジェクトが存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1133">A <see cref="T:System.Data.DataRowCollection" /> that contains <see cref="T:System.Data.DataRow" /> objects; otherwise a null value if no <see cref="T:System.Data.DataRow" /> objects exist.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1134">新たに作成する<xref:System.Data.DataRow>、使用する必要があります、<xref:System.Data.DataTable.NewRow%2A>新しいオブジェクトを返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1134">To create a new <xref:System.Data.DataRow>, you must use the <xref:System.Data.DataTable.NewRow%2A> method to return a new object.</span></span> <span data-ttu-id="b4330-1135">このようなオブジェクトが自動的に構成に定義されたスキーマに従って、<xref:System.Data.DataTable>のコレクションを<xref:System.Data.DataColumn>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-1135">Such an object is automatically configured according to the schema defined for the <xref:System.Data.DataTable> through its collection of <xref:System.Data.DataColumn> objects.</span></span> <span data-ttu-id="b4330-1136">新しい行を作成し、行の各列の値を設定した後に行を追加、<xref:System.Data.DataRowCollection>を使用して、`Add`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1136">After creating a new row and setting the values for each column in the row, add the row to the <xref:System.Data.DataRowCollection> using the `Add` method.</span></span>  
  
 <span data-ttu-id="b4330-1137">各<xref:System.Data.DataRow>コレクション内には、テーブル内のデータの行を表します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1137">Each <xref:System.Data.DataRow> in the collection represents a row of data in the table.</span></span> <span data-ttu-id="b4330-1138">行内の列の値に変更をコミットするを呼び出す必要があります、<xref:System.Data.DataTable.AcceptChanges%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1138">To commit a change to the value of a column in the row, you must invoke the <xref:System.Data.DataTable.AcceptChanges%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1139">設定する行を返し、2 つの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1139">The following shows two examples of returning and setting rows.</span></span> <span data-ttu-id="b4330-1140">最初の例では、<xref:System.Data.DataTable.Rows%2A>プロパティを行ごとに各列の値を出力します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1140">The first example uses the <xref:System.Data.DataTable.Rows%2A> property and prints the value of each column for every row.</span></span> <span data-ttu-id="b4330-1141">2 番目の例では、<xref:System.Data.DataTable>オブジェクトの<xref:System.Data.DataTable.NewRow%2A>新たに作成するメソッド<xref:System.Data.DataRow>のスキーマ オブジェクトを<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1141">The second example uses the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.NewRow%2A> method to create a new <xref:System.Data.DataRow> object with the schema of the <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="b4330-1142">行を追加する行の値を設定した後、<xref:System.Data.DataRowCollection>を通じて、`Add`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1142">After setting the row values, the row is added to the <xref:System.Data.DataRowCollection> through the `Add` method.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Rows Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Rows Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Rows Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Rows Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataTable.AcceptChanges" />
        <altmember cref="T:System.Data.DataRow" />
        <altmember cref="T:System.Data.DataRowCollection" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Select">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1143">Gets an array of <see cref="T:System.Data.DataRow" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1143">Gets an array of <see cref="T:System.Data.DataRow" /> objects.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; System.Data.DataRow[]" Usage="dataTable.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1144">Gets an array of all <see cref="T:System.Data.DataRow" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1144">Gets an array of all <see cref="T:System.Data.DataRow" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1145">An array of <see cref="T:System.Data.DataRow" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1145">An array of <see cref="T:System.Data.DataRow" /> objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1146">適切な並べ替え順序を確実での並べ替え条件の指定<xref:System.Data.DataTable.Select%2A>または<xref:System.Data.DataTable.Select%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1146">To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1147">次の例の配列を返します<xref:System.Data.DataRow>オブジェクトを通じて、<xref:System.Data.DataTable.Select%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1147">The following example returns an array of <xref:System.Data.DataRow> objects through the <xref:System.Data.DataTable.Select%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Select Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.CaseSensitive" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (filterExpression As String) As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ Select(System::String ^ filterExpression);" />
      <MemberSignature Language="F#" Value="member this.Select : string -&gt; System.Data.DataRow[]" Usage="dataTable.Select filterExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterExpression">
          <span data-ttu-id="b4330-1148">The criteria to use to filter the rows.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1148">The criteria to use to filter the rows.</span>
          </span>
          <span data-ttu-id="b4330-1149">For examples on how to filter rows, see [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/).</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1149">For examples on how to filter rows, see [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1150">Gets an array of all <see cref="T:System.Data.DataRow" /> objects that match the filter criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1150">Gets an array of all <see cref="T:System.Data.DataRow" /> objects that match the filter criteria.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1151">An array of <see cref="T:System.Data.DataRow" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1151">An array of <see cref="T:System.Data.DataRow" /> objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1152">作成する、`filterExpression`引数に適用される同じ規則を使用して、<xref:System.Data.DataColumn>クラスの<xref:System.Data.DataColumn.Expression%2A>フィルターを作成するためのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="b4330-1152">To create the `filterExpression` argument, use the same rules that apply to the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value for creating filters.</span></span>  
  
 <span data-ttu-id="b4330-1153">適切な並べ替え順序を確実での並べ替え条件の指定<xref:System.Data.DataTable.Select%2A>または<xref:System.Data.DataTable.Select%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1153">To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>.</span></span>  
  
 <span data-ttu-id="b4330-1154">フィルターの列に null 値が含まれている場合、結果の一部をされません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1154">If the column on the filter contains a null value, it will not be part of the result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1155">次の例では、フィルター式を使用して、配列を返す<xref:System.Data.DataRow>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-1155">The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Select1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.CaseSensitive" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression, string sort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression, string sort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (filterExpression As String, sort As String) As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ Select(System::String ^ filterExpression, System::String ^ sort);" />
      <MemberSignature Language="F#" Value="member this.Select : string * string -&gt; System.Data.DataRow[]" Usage="dataTable.Select (filterExpression, sort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
        <Parameter Name="sort" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterExpression">
          <span data-ttu-id="b4330-1156">The criteria to use to filter the rows.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1156">The criteria to use to filter the rows.</span>
          </span>
          <span data-ttu-id="b4330-1157">For examples on how to filter rows, see [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/).</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1157">For examples on how to filter rows, see [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/).</span>
          </span>
        </param>
        <param name="sort">
          <span data-ttu-id="b4330-1158">A string specifying the column and sort direction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1158">A string specifying the column and sort direction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1159">Gets an array of all <see cref="T:System.Data.DataRow" /> objects that match the filter criteria, in the specified sort order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1159">Gets an array of all <see cref="T:System.Data.DataRow" /> objects that match the filter criteria, in the specified sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1160">An array of <see cref="T:System.Data.DataRow" /> objects matching the filter expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1160">An array of <see cref="T:System.Data.DataRow" /> objects matching the filter expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1161">フォームに、`filterExpression`引数を作成するため、同じ規則を使用して、<xref:System.Data.DataColumn>クラスの<xref:System.Data.DataColumn.Expression%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="b4330-1161">To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value.</span></span> <span data-ttu-id="b4330-1162">`Sort`引数は、クラスの作成に同じ規則を使用するも<xref:System.Data.DataColumn.Expression%2A>文字列。</span><span class="sxs-lookup"><span data-stu-id="b4330-1162">The `Sort` argument also uses the same rules for creating class's <xref:System.Data.DataColumn.Expression%2A> strings.</span></span>  
  
 <span data-ttu-id="b4330-1163">フィルターの列に null 値が含まれている場合、結果の一部をされません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1163">If the column on the filter contains a null value, it will not be part of the result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1164">次の例では、フィルター式を使用して、配列を返す<xref:System.Data.DataRow>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-1164">The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Select2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataTable.CaseSensitive" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression, string sort, valuetype System.Data.DataViewRowState recordStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (filterExpression As String, sort As String, recordStates As DataViewRowState) As DataRow()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataRow ^&gt; ^ Select(System::String ^ filterExpression, System::String ^ sort, System::Data::DataViewRowState recordStates);" />
      <MemberSignature Language="F#" Value="member this.Select : string * string * System.Data.DataViewRowState -&gt; System.Data.DataRow[]" Usage="dataTable.Select (filterExpression, sort, recordStates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="recordStates" Type="System.Data.DataViewRowState" />
      </Parameters>
      <Docs>
        <param name="filterExpression">
          <span data-ttu-id="b4330-1165">The criteria to use to filter the rows.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1165">The criteria to use to filter the rows.</span>
          </span>
          <span data-ttu-id="b4330-1166">For examples on how to filter rows, see [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/).</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1166">For examples on how to filter rows, see [DataView RowFilter Syntax [C#]](http://www.csharp-examples.net/dataview-rowfilter/).</span>
          </span>
        </param>
        <param name="sort">
          <span data-ttu-id="b4330-1167">A string specifying the column and sort direction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1167">A string specifying the column and sort direction.</span>
          </span>
        </param>
        <param name="recordStates">
          <span data-ttu-id="b4330-1168">One of the <see cref="T:System.Data.DataViewRowState" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1168">One of the <see cref="T:System.Data.DataViewRowState" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1169">Gets an array of all <see cref="T:System.Data.DataRow" /> objects that match the filter in the order of the sort that match the specified state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1169">Gets an array of all <see cref="T:System.Data.DataRow" /> objects that match the filter in the order of the sort that match the specified state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1170">An array of <see cref="T:System.Data.DataRow" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1170">An array of <see cref="T:System.Data.DataRow" /> objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1171">フォームに、`filterExpression`引数を作成するため、同じ規則を使用して、<xref:System.Data.DataColumn>クラスの<xref:System.Data.DataColumn.Expression%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="b4330-1171">To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value.</span></span> <span data-ttu-id="b4330-1172">`Sort`引数は、クラスの作成に同じ規則を使用するも<xref:System.Data.DataColumn.Expression%2A>文字列。</span><span class="sxs-lookup"><span data-stu-id="b4330-1172">The `Sort` argument also uses the same rules for creating class's <xref:System.Data.DataColumn.Expression%2A> strings.</span></span>  
  
 <span data-ttu-id="b4330-1173">フィルターの列に null 値が含まれている場合、結果の一部をされません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1173">If the column on the filter contains a null value, it will not be part of the result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1174">次の例では、フィルター式とレコードの状態を使用して、配列を返します<xref:System.Data.DataRow>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-1174">The following example uses a filter expression and record state to return an array of <xref:System.Data.DataRow> objects.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.Select3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Data.DataTable.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1175">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1175">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-1176">
            <see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1176">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1177">サイト バインドを<xref:System.ComponentModel.Component>を<xref:System.ComponentModel.Container>と、それらの間の通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1177">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1178">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1178">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-1179">
            <see langword="true" /> コレクションのコレクションが場合<see cref="T:System.Collections.IList" />オブジェクト。 それ以外の場合、<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1179">
              <see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1180">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b4330-1180">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4330-1181">これは、<xref:System.Data.DataTable> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合にのみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1181">It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1182">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1182">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1183">An <see cref="T:System.Collections.IList" /> that can be bound to a data source from the object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1183">An <see cref="T:System.Collections.IList" /> that can be bound to a data source from the object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1184">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b4330-1184">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4330-1185">これは、<xref:System.Data.DataTable> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合にのみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1185">It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1186">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1186">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1187">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1187">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1188">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b4330-1188">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4330-1189">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合にのみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1189">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b4330-1190">An XmlReader.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1190">An XmlReader.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1191">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1191">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1192">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b4330-1192">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4330-1193">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合にのみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1193">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1194">An XmlWriter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1194">An XmlWriter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1195">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1195">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1196">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b4330-1196">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4330-1197">これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合にのみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1197">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableCleared">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableClearEventHandler TableCleared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableClearEventHandler TableCleared" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableCleared" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TableCleared As DataTableClearEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataTableClearEventHandler ^ TableCleared;" />
      <MemberSignature Language="F#" Value="member this.TableCleared : System.Data.DataTableClearEventHandler " Usage="member this.TableCleared : System.Data.DataTableClearEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableClearEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1198">Occurs after a <see cref="T:System.Data.DataTable" /> is cleared.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1198">Occurs after a <see cref="T:System.Data.DataTable" /> is cleared.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1199"><xref:System.Data.DataTable.TableCleared>すぐにすべての行が削除された後正常にする前に、イベントが発生した、<xref:System.Data.DataTable.Clear%2A>メソッドが呼び出し元にコントロールを返します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1199">The <xref:System.Data.DataTable.TableCleared> event is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller.</span></span> <span data-ttu-id="b4330-1200"><xref:System.Data.DataTable.TableCleared>消去操作中に例外がある場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1200">The <xref:System.Data.DataTable.TableCleared> event is not fired if there are any exceptions during the clear operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableClearing">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableClearEventHandler TableClearing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableClearEventHandler TableClearing" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableClearing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TableClearing As DataTableClearEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataTableClearEventHandler ^ TableClearing;" />
      <MemberSignature Language="F#" Value="member this.TableClearing : System.Data.DataTableClearEventHandler " Usage="member this.TableClearing : System.Data.DataTableClearEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableClearEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1201">Occurs when a <see cref="T:System.Data.DataTable" /> is cleared.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1201">Occurs when a <see cref="T:System.Data.DataTable" /> is cleared.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1202"><xref:System.Data.DataTable.TableClearing>の処理の前にイベントが発生した、<xref:System.Data.DataTable.Clear%2A>操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1202">The <xref:System.Data.DataTable.TableClearing> event is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins.</span></span> <span data-ttu-id="b4330-1203">このイベントがときに発生することは常に、<xref:System.Data.DataTable.Clear%2A>テーブルには、0 行が含まれている場合でも、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1203">This event is always fired when the <xref:System.Data.DataTable.Clear%2A> method is invoked, even if the table contains zero rows.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Data.DataTable.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1204">Gets or sets the name of the <see cref="T:System.Data.DataTable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1204">Gets or sets the name of the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b4330-1205">
            <see cref="T:System.Data.DataTable" /> の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1205">The name of the <see cref="T:System.Data.DataTable" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1206"><xref:System.Data.DataTable.TableName%2A>親からこのテーブルを返すために使用<xref:System.Data.DataSet>オブジェクトの<xref:System.Data.DataTableCollection>(によって返される、<xref:System.Data.DataSet.Tables%2A>プロパティ)。</span><span class="sxs-lookup"><span data-stu-id="b4330-1206">The <xref:System.Data.DataTable.TableName%2A> is used to return this table from the parent <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection> (returned by the <xref:System.Data.DataSet.Tables%2A> property).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1207">次の例では、印刷、<xref:System.Data.DataTable.TableName%2A>のコレクション内の各テーブルの<xref:System.Data.DataTable>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4330-1207">The following example prints the <xref:System.Data.DataTable.TableName%2A> for each table in a collection of <xref:System.Data.DataTable> objects.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.TableName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.TableName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.TableName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.TableName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b4330-1208">
            <see langword="null" /> or empty string ("") is passed in and this table belongs to a collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1208">
              <see langword="null" /> or empty string ("") is passed in and this table belongs to a collection.</span>
          </span>
        </exception>
        <exception cref="T:System.Data.DuplicateNameException">
          <span data-ttu-id="b4330-1209">The table belongs to a collection that already has a table with the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1209">The table belongs to a collection that already has a table with the same name.</span>
          </span>
          <span data-ttu-id="b4330-1210">(Comparison is case-sensitive).</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1210">(Comparison is case-sensitive).</span>
          </span>
        </exception>
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="P:System.Data.DataSet.Tables" />
      </Docs>
    </Member>
    <Member MemberName="TableNewRow">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableNewRowEventHandler TableNewRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableNewRowEventHandler TableNewRow" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableNewRow" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TableNewRow As DataTableNewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::DataTableNewRowEventHandler ^ TableNewRow;" />
      <MemberSignature Language="F#" Value="member this.TableNewRow : System.Data.DataTableNewRowEventHandler " Usage="member this.TableNewRow : System.Data.DataTableNewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableNewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1211">Occurs when a new <see cref="T:System.Data.DataRow" /> is inserted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1211">Occurs when a new <see cref="T:System.Data.DataRow" /> is inserted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1212">新しいの後に発生<xref:System.Data.DataRow>を使用して作成された<xref:System.Data.DataTable.NewRow%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1212">Fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>.</span></span> <span data-ttu-id="b4330-1213">このイベントが発生する前に、呼び出された`NewRow`メソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1213">This event is fired before the invoked `NewRow` method returns.</span></span> <span data-ttu-id="b4330-1214">新しい<xref:System.Data.DataRow>インスタンスがデタッチは、コレクションに追加されていません。</span><span class="sxs-lookup"><span data-stu-id="b4330-1214">The new <xref:System.Data.DataRow> instance is detached; it has not been added to the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="dataTable.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1215">Gets the <see cref="P:System.Data.DataTable.TableName" /> and <see cref="P:System.Data.DataTable.DisplayExpression" />, if there is one as a concatenated string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1215">Gets the <see cref="P:System.Data.DataTable.TableName" /> and <see cref="P:System.Data.DataTable.DisplayExpression" />, if there is one as a concatenated string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b4330-1216">A string consisting of the <see cref="P:System.Data.DataTable.TableName" /> and the <see cref="P:System.Data.DataTable.DisplayExpression" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1216">A string consisting of the <see cref="P:System.Data.DataTable.TableName" /> and the <see cref="P:System.Data.DataTable.DisplayExpression" /> values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1217">取得、<xref:System.Data.DataTable.TableName%2A>と<xref:System.Data.DataTable.DisplayExpression%2A>の<xref:System.Data.DataTable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1217">Gets the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> for the <xref:System.Data.DataTable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1218">次の例を返します、<xref:System.Data.DataTable.TableName%2A>と<xref:System.Data.DataTable.DisplayExpression%2A>を使用して、<xref:System.Data.DataTable.ToString%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1218">The following example returns the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> using the <xref:System.Data.DataTable.ToString%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataTable.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1219">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1219">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1220"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1220">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1221">データとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、 `WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1221">To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1222">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1222">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1223">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1223">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1224">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1224">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1225"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1225">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1226">次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>インスタンスを追加します、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>テーブル、および使用して、関連する 2 つ、 <xref:System.Data.DataTable.WriteXml%2A> に親テーブル内のデータを書き込むメソッド<xref:System.IO.TextWriter>.</span><span class="sxs-lookup"><span data-stu-id="b4330-1226">The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the <xref:System.Data.DataTable.WriteXml%2A> method to write the data contained within the parent table to a <xref:System.IO.TextWriter>.</span></span> <span data-ttu-id="b4330-1227">設定するときに、例を示します、動作、`writeHierarchy`にその値の各パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-1227">The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1228">この例では、WriteXml のオーバー ロードされたバージョンのいずれかを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1228">This example shows how to use one of the overloaded versions of WriteXml.</span></span> <span data-ttu-id="b4330-1229">使用可能な可能性があるその他の例は、個々 のオーバー ロードのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b4330-1229">For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataTable.WriteXmlOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlOverload/VB/source.vb#1)]  
  
 <span data-ttu-id="b4330-1230">この例では、次の出力がコンソール ウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1230">The example displays the following output in the console window:</span></span>  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
</NewDataSet>  
==============================  
Customer table, with hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
          <xs:element name="Table2">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="OrderID" type="xs:int" />  
                <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
                <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
      <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" m  
sdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="OrderID" />  
      </xs:unique>  
      <xs:keyref name="CustomerOrder" refer="Constraint1">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="CustomerID" />  
      </xs:keyref>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
  <Table2>  
    <OrderID>1</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>2</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>3</OrderID>  
    <CustomerID>2</CustomerID>  
    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>4</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>5</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>6</OrderID>  
    <CustomerID>4</CustomerID>  
    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
</NewDataSet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream -&gt; unit" Usage="dataTable.WriteXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b4330-1231">The stream to which the data will be written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1231">The stream to which the data will be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1232">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1232">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1233"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1233">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1234">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1234">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1235">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1235">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1236">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1236">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1237">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1237">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1238"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1238">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter -&gt; unit" Usage="dataTable.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1239">The <see cref="T:System.IO.TextWriter" /> with which to write the content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1239">The <see cref="T:System.IO.TextWriter" /> with which to write the content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1240">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1240">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1241"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1241">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1242">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1242">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1243">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1243">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1244">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1244">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1245">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1245">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1246"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1246">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string -&gt; unit" Usage="dataTable.WriteXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="b4330-1247">The file to which to write the XML data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1247">The file to which to write the XML data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1248">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1248">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1249"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1249">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1250">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1250">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1251">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1251">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1252">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1252">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1253">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1253">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1254"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1254">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataTable.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1255">The <see cref="T:System.Xml.XmlWriter" /> with which to write the contents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1255">The <see cref="T:System.Xml.XmlWriter" /> with which to write the contents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1256">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1256">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1257"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1257">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1258">データとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、 `WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1258">To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1259">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1259">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1260">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1260">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1261">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1261">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1262"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1262">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * bool -&gt; unit" Usage="dataTable.WriteXml (stream, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b4330-1263">The stream to which the data will be written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1263">The stream to which the data will be written.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1264">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1264">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1265">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1265">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1266">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1266">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="b4330-1267">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1267">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1268">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1268">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1269">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1269">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1270">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1270">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1271">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1271">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1272">通常、`WriteXml`メソッドは、現在のテーブルのみデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1272">Normally the `WriteXml` method writes the data only for the current table.</span></span> <span data-ttu-id="b4330-1273">現在のテーブルとその子孫でのすべてのデータの書き込みに関連するテーブルでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1273">To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1274"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1274">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode -&gt; unit" Usage="dataTable.WriteXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b4330-1275">The stream to which the data will be written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1275">The stream to which the data will be written.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="b4330-1276">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1276">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1277">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1277">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="b4330-1278">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1278">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1279"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1279">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1280">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1280">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1281">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1281">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1282">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1282">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1283">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1283">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1284"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1284">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * bool -&gt; unit" Usage="dataTable.WriteXml (writer, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1285">The <see cref="T:System.IO.TextWriter" /> with which to write the content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1285">The <see cref="T:System.IO.TextWriter" /> with which to write the content.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1286">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1286">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1287">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1287">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1288">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1288">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.IO.TextWriter" />.</span>
          </span>
          <span data-ttu-id="b4330-1289">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1289">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1290"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1290">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1291">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1291">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1292">通常、`WriteXml`メソッドは、現在のテーブルのみデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1292">Normally the `WriteXml` method writes the data only for the current table.</span></span> <span data-ttu-id="b4330-1293">現在のテーブルとすべての子孫、関連するテーブルのデータを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1293">To write the data for the current table and all its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1294"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1294">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1295">次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>インスタンスを追加します、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>テーブル、および使用して、関連する 2 つ、 <xref:System.Data.DataTable.WriteXml%2A> に親テーブル内のデータを書き込むメソッド<xref:System.IO.TextWriter>.</span><span class="sxs-lookup"><span data-stu-id="b4330-1295">The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the <xref:System.Data.DataTable.WriteXml%2A> method to write the data contained within the parent table to a <xref:System.IO.TextWriter>.</span></span> <span data-ttu-id="b4330-1296">設定するときに、例を示します、動作、`writeHierarchy`パラメーター`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1296">The example demonstrates the behavior when setting the `writeHierarchy` parameter to `true`.</span></span>  
  
 [!code-csharp[DataWorks DataTable.WriteXml#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXml/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXml#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXml/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataTable.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1297">The <see cref="T:System.IO.TextWriter" /> used to write the document.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1297">The <see cref="T:System.IO.TextWriter" /> used to write the document.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="b4330-1298">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1298">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1299">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1299">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="b4330-1300">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1300">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1301"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1301">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1302">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1302">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1303">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1303">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1304">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1304">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1305">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1305">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1306"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1306">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * bool -&gt; unit" Usage="dataTable.WriteXml (fileName, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="b4330-1307">The file to which to write the XML data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1307">The file to which to write the XML data.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1308">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1308">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1309">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1309">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1310">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1310">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified file.</span>
          </span>
          <span data-ttu-id="b4330-1311">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1311">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1312"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1312">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1313">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1313">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1314">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1314">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1315">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1315">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1316">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1316">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1317">通常、`WriteXml`メソッドは、現在のテーブルのみデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1317">Normally the `WriteXml` method writes the data only for the current table.</span></span> <span data-ttu-id="b4330-1318">現在のテーブルとその子孫でのすべてのデータの書き込みに関連するテーブルでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1318">To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1319"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1319">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode -&gt; unit" Usage="dataTable.WriteXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="b4330-1320">The name of the file to which the data will be written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1320">The name of the file to which the data will be written.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="b4330-1321">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1321">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1322">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified file and <see cref="T:System.Data.XmlWriteMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1322">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified file and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="b4330-1323">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1323">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1324"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1324">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1325">データとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、 `WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1325">To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1326">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1326">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1327">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1327">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1328">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1328">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1329"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1329">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * bool -&gt; unit" Usage="dataTable.WriteXml (writer, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1330">The <see cref="T:System.Xml.XmlWriter" /> with which to write the contents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1330">The <see cref="T:System.Xml.XmlWriter" /> with which to write the contents.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1331">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1331">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1332">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1332">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1333">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1333">Writes the current contents of the <see cref="T:System.Data.DataTable" /> as XML using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1334"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1334">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1335">データとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、 `WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1335">To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1336">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1336">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1337">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1337">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1338">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1338">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1339">通常、`WriteXml`メソッドは、現在のテーブルのみデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1339">Normally the `WriteXml` method writes the data only for the current table.</span></span> <span data-ttu-id="b4330-1340">現在のテーブルとその子孫、関連するテーブル全体のデータを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1340">To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1341"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1341">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataTable.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1342">The <see cref="T:System.Xml.XmlWriter" /> used to write the document.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1342">The <see cref="T:System.Xml.XmlWriter" /> used to write the document.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="b4330-1343">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1343">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1344">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1344">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="b4330-1345">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1345">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1346"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1346">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1347">データとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、 `WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1347">To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1348">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1348">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1349">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1349">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1350">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1350">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1351"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1351">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode * bool -&gt; unit" Usage="dataTable.WriteXml (stream, mode, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b4330-1352">The stream to which the data will be written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1352">The stream to which the data will be written.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="b4330-1353">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1353">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1354">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1354">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1355">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1355">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1356">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1356">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="b4330-1357">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1357">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
          <span data-ttu-id="b4330-1358">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1358">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1359"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 `DataTable` XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1359">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1360">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`XmlWriteMode`パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1360">To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1361">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1361">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1362">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1362">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1363">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1363">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1364">通常、`WriteXml`メソッドは、現在のテーブルに対してのみデータを保存します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1364">Normally, the `WriteXml` method saves data only for the current table.</span></span> <span data-ttu-id="b4330-1365">`WriteXml` 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 `DataTable` XML ドキュメントに対し、`WriteXmlSchema`メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1365">The `WriteXml` method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the `WriteXmlSchema` method writes only the schema.</span></span> <span data-ttu-id="b4330-1366">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、`XmlWriteMode`パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1366">To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1367">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1367">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1368">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1368">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1369">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1369">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1370">通常、`WriteXml`メソッドは、現在のテーブルのみデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1370">Normally the `WriteXml` method writes the data only for the current table.</span></span> <span data-ttu-id="b4330-1371">現在のテーブルとその子孫でのすべてのデータの書き込みに関連するテーブルでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1371">To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1372"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1372">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode * bool -&gt; unit" Usage="dataTable.WriteXml (writer, mode, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1373">The <see cref="T:System.IO.TextWriter" /> used to write the document.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1373">The <see cref="T:System.IO.TextWriter" /> used to write the document.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="b4330-1374">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1374">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1375">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1375">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1376">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1376">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1377">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1377">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="b4330-1378">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1378">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
          <span data-ttu-id="b4330-1379">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1379">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1380"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1380">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1381">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1381">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1382">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1382">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1383">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1383">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1384">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1384">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1385">通常、`WriteXml`メソッドは、現在のテーブルに対してのみデータを保存します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1385">Normally, the `WriteXml` method saves data only for the current table.</span></span> <span data-ttu-id="b4330-1386"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1386">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1387">データとスキーマの両方を作成するを含むオーバー ロードのいずれかを使用、<xref:System.Data.XmlWriteMode>パラメーターに値を設定および`WriteSchema`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1387">To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1388">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1388">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1389">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1389">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1390">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1390">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1391">通常、`WriteXml`メソッドは、現在のテーブルのみデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1391">Normally the `WriteXml` method writes the data only for the current table.</span></span> <span data-ttu-id="b4330-1392">現在のテーブルとその子孫でのすべてのデータの書き込みに関連するテーブルでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1392">To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1393"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1393">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1394">次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>インスタンスを追加します、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>テーブル、および使用して、関連する 2 つ、 <xref:System.Data.DataTable.WriteXml%2A> に親テーブル内のデータを書き込むメソッド<xref:System.IO.TextWriter>.</span><span class="sxs-lookup"><span data-stu-id="b4330-1394">The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the <xref:System.Data.DataTable.WriteXml%2A> method to write the data contained within the parent table to a <xref:System.IO.TextWriter>.</span></span> <span data-ttu-id="b4330-1395">設定するときに、例を示します、動作、`writeHierarchy`にその値の各パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-1395">The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.</span></span>  
  
 [!code-csharp[DataWorks DataTable.WriteXmlIO#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlIO/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlIO#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlIO/VB/source.vb#1)]  
  
 <span data-ttu-id="b4330-1396">この例では、次の出力がコンソール ウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1396">The example displays the following output in the console window:</span></span>  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
</NewDataSet>  
==============================  
Customer table, with hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
          <xs:element name="Table2">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="OrderID" type="xs:int" />  
                <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
                <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
      <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" m  
sdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="OrderID" />  
      </xs:unique>  
      <xs:keyref name="CustomerOrder" refer="Constraint1">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="CustomerID" />  
      </xs:keyref>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
  <Table2>  
    <OrderID>1</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>2</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>3</OrderID>  
    <CustomerID>2</CustomerID>  
    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>4</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>5</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>6</OrderID>  
    <CustomerID>4</CustomerID>  
    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
</NewDataSet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode * bool -&gt; unit" Usage="dataTable.WriteXml (fileName, mode, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="b4330-1397">The name of the file to which the data will be written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1397">The name of the file to which the data will be written.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="b4330-1398">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1398">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1399">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1399">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1400">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1400">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1401">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified file and <see cref="T:System.Data.XmlWriteMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1401">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified file and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="b4330-1402">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1402">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
          <span data-ttu-id="b4330-1403">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1403">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1404"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1404">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1405">データとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、 `WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1405">To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1406">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1406">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1407">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1407">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1408">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1408">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1409">通常、`WriteXml`メソッドは、現在のテーブルに対してのみデータを保存します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1409">Normally, the `WriteXml` method saves data only for the current table.</span></span> <span data-ttu-id="b4330-1410">現在のテーブルとスキーマのすべてのデータを保存する場合、<xref:System.Data.DataTable.WriteXml%2A>メソッドを提供するいずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> XML ドキュメントには、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1410">If you want to save the data for the current table and all of schema, the <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1411">データとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、 `WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1411">To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1412">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1412">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1413">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1413">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1414">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1414">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1415">通常、`WriteXml`メソッドは、現在のテーブルのみデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1415">Normally the `WriteXml` method writes the data only for the current table.</span></span> <span data-ttu-id="b4330-1416">現在のテーブルとすべての子孫、関連するテーブルのデータを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1416">To write the data for the current table and all descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1417"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1417">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode * bool -&gt; unit" Usage="dataTable.WriteXml (writer, mode, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1418">The <see cref="T:System.Xml.XmlWriter" /> used to write the document.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1418">The <see cref="T:System.Xml.XmlWriter" /> used to write the document.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="b4330-1419">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1419">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1420">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1420">If <see langword="true" />, write the contents of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1421">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1421">If <see langword="false" /> (the default value), write the data for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1422">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1422">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataTable" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span>
          </span>
          <span data-ttu-id="b4330-1423">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1423">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span>
          </span>
          <span data-ttu-id="b4330-1424">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1424">To save the data for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1425"><xref:System.Data.DataTable.WriteXml%2A> 、いずれかのデータのみを記述する方法またはデータとスキーマの両方からメソッドを提供します、 <xref:System.Data.DataTable> XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1425">The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="b4330-1426">データとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、 `WriteSchema`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1426">To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="b4330-1427">True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1427">Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="b4330-1428">XML データ、または両方のスキーマとにデータを読み取る、`DataTable`を使用して、`ReadXml`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1428">To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method.</span></span> <span data-ttu-id="b4330-1429">スキーマだけを読み取り、使用、`ReadXmlSchema`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1429">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
 <span data-ttu-id="b4330-1430">通常、`WriteXml`メソッドは、現在のテーブルのみデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1430">Normally the `WriteXml` method writes the data only for the current table.</span></span> <span data-ttu-id="b4330-1431">現在のテーブルとその子孫、関連するテーブル全体のデータを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1431">To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1432"><xref:System.InvalidOperationException>場合、列の型がスローされます、`DataRow`から読み取りまたは実装に書き込まれる<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装しない<xref:System.Xml.Serialization.IXmlSerializable>します。</span><span class="sxs-lookup"><span data-stu-id="b4330-1432">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b4330-1433">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1433">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1434">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1434">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1435">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1435">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1436">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1436">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1437">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1437">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1438">次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>インスタンスを追加します、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>テーブル、および使用して、関連する 2 つ、 <xref:System.Data.DataTable.WriteXmlSchema%2A> に親テーブル内のデータを書き込むメソッド<xref:System.IO.TextWriter>.</span><span class="sxs-lookup"><span data-stu-id="b4330-1438">The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the data contained within the parent table to a <xref:System.IO.TextWriter>.</span></span> <span data-ttu-id="b4330-1439">設定するときに、例を示します、動作、`writeHierarchy`にその値の各パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-1439">The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4330-1440">この例は、のいずれかのオーバー ロードされたバージョンを使用する方法を示します`WriteXmlSchema`、使用可能な可能性があるその他の例は、個々 のオーバー ロードのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b4330-1440">This example shows how to use one of the overloaded versions of `WriteXmlSchema` For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataTable.WriteXmlSchemaOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchemaOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlSchemaOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchemaOverload/VB/source.vb#1)]  
  
 <span data-ttu-id="b4330-1441">この例では、次の出力がコンソール ウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1441">The example displays the following output in the console window:</span></span>  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Ta  
ble1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
  </xs:element>  
</xs:schema>  
==============================  
Customer table, with hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
        <xs:element name="Table2">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="OrderID" type="xs:int" />  
              <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
              <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
    <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="OrderID" />  
    </xs:unique>  
    <xs:keyref name="CustomerOrder" refer="Constraint1">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="CustomerID" />  
    </xs:keyref>  
  </xs:element>  
</xs:schema>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream -&gt; unit" Usage="dataTable.WriteXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b4330-1442">The stream to which the XML schema will be written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1442">The stream to which the XML schema will be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1443">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema to the specified stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1443">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema to the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1444">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1444">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1445">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1445">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1446">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1446">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1447">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1447">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter -&gt; unit" Usage="dataTable.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1448">The <see cref="T:System.IO.TextWriter" /> with which to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1448">The <see cref="T:System.IO.TextWriter" /> with which to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1449">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema using the specified <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1449">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema using the specified <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1450">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1450">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1451">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1451">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1452">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1452">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1453">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1453">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string -&gt; unit" Usage="dataTable.WriteXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="b4330-1454">The name of the file to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1454">The name of the file to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1455">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema to the specified file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1455">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema to the specified file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1456">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1456">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1457">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1457">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1458">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1458">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1459">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1459">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter -&gt; unit" Usage="dataTable.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1460">The <see cref="T:System.Xml.XmlWriter" /> to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1460">The <see cref="T:System.Xml.XmlWriter" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1461">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1461">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1462">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1462">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1463">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1463">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1464">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1464">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1465">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1465">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream * bool -&gt; unit" Usage="dataTable.WriteXmlSchema (stream, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b4330-1466">The stream to which the XML schema will be written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1466">The stream to which the XML schema will be written.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1467">If <see langword="true" />, write the schema of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1467">If <see langword="true" />, write the schema of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1468">If <see langword="false" /> (the default value), write the schema for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1468">If <see langword="false" /> (the default value), write the schema for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1469">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema to the specified stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1469">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema to the specified stream.</span>
          </span>
          <span data-ttu-id="b4330-1470">To save the schema for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1470">To save the schema for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1471">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1471">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1472">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1472">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1473">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1473">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1474">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1474">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1475">通常、`WriteXmlSchema`メソッドは、現在のテーブルのみのスキーマを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1475">Normally the `WriteXmlSchema` method writes the schema only for the current table.</span></span> <span data-ttu-id="b4330-1476">現在のテーブルとその全体の子孫、関連するテーブルのスキーマを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1476">To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter * bool -&gt; unit" Usage="dataTable.WriteXmlSchema (writer, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1477">The <see cref="T:System.IO.TextWriter" /> with which to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1477">The <see cref="T:System.IO.TextWriter" /> with which to write.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1478">If <see langword="true" />, write the schema of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1478">If <see langword="true" />, write the schema of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1479">If <see langword="false" /> (the default value), write the schema for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1479">If <see langword="false" /> (the default value), write the schema for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1480">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema using the specified <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1480">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema using the specified <see cref="T:System.IO.TextWriter" />.</span>
          </span>
          <span data-ttu-id="b4330-1481">To save the schema for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1481">To save the schema for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1482">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1482">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1483">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1483">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1484">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1484">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1485">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1485">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1486">通常、`WriteXmlSchema`メソッドは、現在のテーブルのみのスキーマを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1486">Normally the `WriteXmlSchema` method writes the schema only for the current table.</span></span> <span data-ttu-id="b4330-1487">現在のテーブルとその全体の子孫、関連するテーブルのスキーマを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1487">To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4330-1488">次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>インスタンスを追加します、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>テーブル、および使用して、関連する 2 つ、 <xref:System.Data.DataTable.WriteXmlSchema%2A> に親テーブル内のデータを書き込むメソッド<xref:System.IO.TextWriter>.</span><span class="sxs-lookup"><span data-stu-id="b4330-1488">The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the data contained within the parent table to a <xref:System.IO.TextWriter>.</span></span> <span data-ttu-id="b4330-1489">設定するときに、例を示します、動作、`writeHierarchy`にその値の各パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4330-1489">The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.</span></span>  
  
 [!code-csharp[DataWorks DataTable.WriteXmlSchema#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchema/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlSchema#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchema/VB/source.vb#1)]  
  
 <span data-ttu-id="b4330-1490">この例では、次の出力がコンソール ウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1490">The example displays the following output in the console window:</span></span>  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Ta  
ble1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
  </xs:element>  
</xs:schema>  
==============================  
Customer table, with hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
        <xs:element name="Table2">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="OrderID" type="xs:int" />  
              <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
              <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
    <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="OrderID" />  
    </xs:unique>  
    <xs:keyref name="CustomerOrder" refer="Constraint1">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="CustomerID" />  
    </xs:keyref>  
  </xs:element>  
</xs:schema>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string * bool -&gt; unit" Usage="dataTable.WriteXmlSchema (fileName, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="b4330-1491">The name of the file to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1491">The name of the file to use.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1492">If <see langword="true" />, write the schema of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1492">If <see langword="true" />, write the schema of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1493">If <see langword="false" /> (the default value), write the schema for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1493">If <see langword="false" /> (the default value), write the schema for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1494">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema to the specified file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1494">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema to the specified file.</span>
          </span>
          <span data-ttu-id="b4330-1495">To save the schema for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1495">To save the schema for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1496">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1496">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1497">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1497">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1498">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1498">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1499">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1499">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1500">通常、`WriteXmlSchema`メソッドは、現在のテーブルのみのスキーマを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1500">Normally the `WriteXmlSchema` method writes the schema only for the current table.</span></span> <span data-ttu-id="b4330-1501">現在のテーブルとその全体の子孫、関連するテーブルのスキーマを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1501">To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, writeHierarchy As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, bool writeHierarchy);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter * bool -&gt; unit" Usage="dataTable.WriteXmlSchema (writer, writeHierarchy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="b4330-1502">The <see cref="T:System.Xml.XmlWriter" /> used to write the document.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1502">The <see cref="T:System.Xml.XmlWriter" /> used to write the document.</span>
          </span>
        </param>
        <param name="writeHierarchy">
          <span data-ttu-id="b4330-1503">If <see langword="true" />, write the schema of the current table and all its descendants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1503">If <see langword="true" />, write the schema of the current table and all its descendants.</span>
          </span>
          <span data-ttu-id="b4330-1504">If <see langword="false" /> (the default value), write the schema for the current table only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1504">If <see langword="false" /> (the default value), write the schema for the current table only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b4330-1505">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1505">Writes the current data structure of the <see cref="T:System.Data.DataTable" /> as an XML schema using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
          <span data-ttu-id="b4330-1506">To save the schema for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b4330-1506">To save the schema for the table and all its descendants, set the <paramref name="writeHierarchy" /> parameter to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4330-1507">使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述するメソッド、 <xref:System.Data.DataTable> XML ドキュメントにします。</span><span class="sxs-lookup"><span data-stu-id="b4330-1507">Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document.</span></span> <span data-ttu-id="b4330-1508">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1508">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="b4330-1509">XML スキーマでは、XSD 標準を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1509">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="b4330-1510">XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4330-1510">To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="b4330-1511">通常、`WriteXmlSchema`メソッドは、現在のテーブルのみのスキーマを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="b4330-1511">Normally the `WriteXmlSchema` method writes the schema only for the current table.</span></span> <span data-ttu-id="b4330-1512">現在のテーブルとその全体の子孫、関連するテーブルのスキーマを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`。</span><span class="sxs-lookup"><span data-stu-id="b4330-1512">To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>