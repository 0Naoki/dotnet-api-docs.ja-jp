<Type Name="WorkflowInstance" FullName="System.Workflow.Runtime.WorkflowInstance">
  <TypeSignature Language="C#" Value="public sealed class WorkflowInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowInstance" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInstance sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="47760-101">ワークフロー インスタンスを表します。</span><span class="sxs-lookup"><span data-stu-id="47760-101">Represents a workflow instance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="47760-102"><xref:System.Workflow.Runtime.WorkflowInstance> クラスは、ワークフロー インスタンスの実行の制御に使用できるメソッドおよびプロパティを公開します。本質的には、ワークフロー ランタイム エンジンが使用する実際のワークフロー インスタンスのプロキシです。</span><span class="sxs-lookup"><span data-stu-id="47760-102">The <xref:System.Workflow.Runtime.WorkflowInstance> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine.</span></span> <span data-ttu-id="47760-103">ホストまたはサービスは、<xref:System.Workflow.Runtime.WorkflowInstance> クラスに含まれる適切なメソッドを呼び出すことによって、ワークフロー インスタンスに関するアクションの実行をワークフロー ランタイム エンジンに指示することができます。</span><span class="sxs-lookup"><span data-stu-id="47760-103">A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <xref:System.Workflow.Runtime.WorkflowInstance> class.</span></span>  <span data-ttu-id="47760-104">要求されたアクションが無効だった場合、たとえば既に完成しているワークフロー インスタンスについて <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> をホストが呼び出した場合は、該当する例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="47760-104">If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="47760-105">ホスト アプリケーションでの呼び出しが返されないためにワークフロー インスタンスが応答しなくなった場合、このインスタンスを回復するための方法は、ランタイムを再起動する以外にありません。</span><span class="sxs-lookup"><span data-stu-id="47760-105">If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime.</span></span> <span data-ttu-id="47760-106">ただし、インスタンスが強制的にアンロード、中止、または中断された場合は、<xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType> メソッドを呼び出すことによってインスタンスを継続することができます。</span><span class="sxs-lookup"><span data-stu-id="47760-106">However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-107">次のコード例は、ワークフロー ホストで <xref:System.Workflow.Runtime.WorkflowInstance> を作成および開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="47760-107">The following code example demonstrates how you can create and start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host.</span></span> <span data-ttu-id="47760-108">このコードでは、<xref:System.Workflow.Runtime.WorkflowRuntime> のインスタンスを作成してサービスをランタイムに追加し、推奨される <xref:System.Workflow.Runtime.WorkflowInstance> オブジェクトの作成方法を示します。</span><span class="sxs-lookup"><span data-stu-id="47760-108">The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="47760-109">このコードは <xref:System.Workflow.Runtime.WorkflowInstance> メソッドを呼び出し、既に作成されている型をそれに渡すことによって、<xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="47760-109">The code initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it.</span></span> <span data-ttu-id="47760-110"><xref:System.Workflow.Runtime.WorkflowInstance> は、<xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> メソッドの呼び出しによって起動されます。</span><span class="sxs-lookup"><span data-stu-id="47760-110">The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.</span></span>  
  
 <span data-ttu-id="47760-111">このコード例は、Program.cs ファイルに含まれている、ワークフローのキャンセルを示す SDK サンプルの一部です。</span><span class="sxs-lookup"><span data-stu-id="47760-111">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="47760-112">詳細については、次を参照してください。[のワークフローの取り消し](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)です。</span><span class="sxs-lookup"><span data-stu-id="47760-112">For more information, see [Canceling a Workflow](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="47760-113">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="47760-113">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-114">ワークフロー インスタンスを中止します。</span><span class="sxs-lookup"><span data-stu-id="47760-114">Aborts the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-115">ワークフロー インスタンスは同期式で中止されます。つまり、メソッドはワークフロー インスタンスが中止された後に返されます。</span><span class="sxs-lookup"><span data-stu-id="47760-115">The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted.</span></span> <span data-ttu-id="47760-116">ワークフロー ランタイム エンジンはメモリ内のワークフロー インスタンスを無効にし、<xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> をクリアします。</span><span class="sxs-lookup"><span data-stu-id="47760-116">The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</span></span> <span data-ttu-id="47760-117">ワークフロー インスタンスが永続性サービスを使用していた場合、最後の永続性ポイント以降に実行された作業はすべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="47760-117">If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away.</span></span> <span data-ttu-id="47760-118">ワークフロー インスタンスが中止されると、ワークフロー ランタイム エンジンは <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="47760-118">After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event.</span></span> <span data-ttu-id="47760-119"><xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> を呼び出すことにより、ワークフロー インスタンスを再度読み込んで、その最後の永続性ポイントから開始することができます。</span><span class="sxs-lookup"><span data-stu-id="47760-119">You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point.</span></span>  
  
 <span data-ttu-id="47760-120">`Abort` は <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> と次の点で異なります。`Abort` はメモリ内のワークフロー インスタンスをクリアするだけで、最後の永続性ポイントからワークフロー インスタンスを再開できます。Terminate はメモリ内のワークフロー インスタンスをクリアし、インスタンスがメモリからクリアされたことを永続性サービスに通知します。</span><span class="sxs-lookup"><span data-stu-id="47760-120">`Abort` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> in that while `Abort` simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.</span></span> <span data-ttu-id="47760-121"><xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> の場合、これは、終了時にそのワークフロー インスタンスのすべての状態情報がデータベースから削除されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="47760-121">For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination.</span></span> <span data-ttu-id="47760-122">既に保存されている永続性ポイントからワークフロー インスタンスを再度読み込むことはできません。</span><span class="sxs-lookup"><span data-stu-id="47760-122">You will not be able to reload the workflow instance from a previously stored persistence point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-123">Workflow1 型のワークフロー インスタンスに対する Abort を呼び出す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-123">The following example demonstrates calling Abort on a workflow instance of type Workflow1.</span></span>  
  
 [!code-csharp[WF_Samples#13](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#13)]
 [!code-vb[WF_Samples#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-124">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-124">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyWorkflowChanges">
      <MemberSignature Language="C#" Value="public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyWorkflowChanges(class System.Workflow.ComponentModel.WorkflowChanges workflowChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyWorkflowChanges(System::Workflow::ComponentModel::WorkflowChanges ^ workflowChanges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowChanges" Type="System.Workflow.ComponentModel.WorkflowChanges" />
      </Parameters>
      <Docs>
        <param name="workflowChanges"><span data-ttu-id="47760-125">ワークフロー インスタンスの動的更新の内容を指定する <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" />。</span><span class="sxs-lookup"><span data-stu-id="47760-125">A <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> specifying dynamic updates for the workflow instance.</span></span></param>
        <summary><span data-ttu-id="47760-126"><see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> オブジェクトで指定された変更をワークフロー インスタンスに適用します。</span><span class="sxs-lookup"><span data-stu-id="47760-126">Applies changes to the workflow instance specified by the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-127">ワークフロー インスタンスがまだ中断していない場合、ワークフロー ランタイム エンジンはインスタンスを一時的に中断してから変更を適用します。</span><span class="sxs-lookup"><span data-stu-id="47760-127">If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-128"><xref:System.Workflow.Runtime.WorkflowInstance> オブジェクトの ApplyWorkflowChanges を呼び出す方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-128">The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  <span data-ttu-id="47760-129">この例は、Mainform.cs ファイルに含まれている注文処理ステート マシンの SDK サンプルです。</span><span class="sxs-lookup"><span data-stu-id="47760-129">This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.</span></span>  <span data-ttu-id="47760-130">詳細については、次を参照してください。、 [Ordering 状態マシン サンプル](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)です。</span><span class="sxs-lookup"><span data-stu-id="47760-130">For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).</span></span>  
  
 [!code-csharp[WF_Samples#89](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#89)]
 [!code-vb[WF_Samples#89](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-131">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-131">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItem">
      <MemberSignature Language="C#" Value="public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItem(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItem (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItem(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName"><span data-ttu-id="47760-132"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="47760-132">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</span></span></param>
        <param name="item"><span data-ttu-id="47760-133">キューに登録するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47760-133">The object to enqueue.</span></span></param>
        <param name="pendingWork"><span data-ttu-id="47760-134"><c>item</c> が配信されたときに送信者が通知を受けられるようにする <see cref="T:System.Workflow.Runtime.IPendingWork" />。</span><span class="sxs-lookup"><span data-stu-id="47760-134">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <c>item</c> is delivered.</span></span></param>
        <param name="workItem"><span data-ttu-id="47760-135"><see cref="T:System.Workflow.Runtime.IPendingWork" /> メソッドに渡すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47760-135">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</span></span></param>
        <summary><span data-ttu-id="47760-136">指定したワークフロー キューへのメッセージの同期ポストを行います。</span><span class="sxs-lookup"><span data-stu-id="47760-136">Posts a message to the specified workflow queue synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-137">指定した `item` に <xref:System.Workflow.Runtime.WorkflowQueue> を送信します。</span><span class="sxs-lookup"><span data-stu-id="47760-137">Sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span> <span data-ttu-id="47760-138">メッセージが配信されたときに通知を受けるには、サービスに <xref:System.Workflow.Runtime.IPendingWork> を実装して、`workItem` および <xref:System.Workflow.Runtime.IPendingWork> オブジェクトを <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> に渡します。</span><span class="sxs-lookup"><span data-stu-id="47760-138">If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="47760-139">そのような通知が不要な場合は、`Nothing` と `pendingWork` に null 参照 (Visual Basic の場合は `workItem`) を渡します。</span><span class="sxs-lookup"><span data-stu-id="47760-139">If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.</span></span>  
  
 <span data-ttu-id="47760-140">このメソッドをステート マシン ワークフローで使用すると、"キュー '{0}' は有効ではありません" というメッセージを持つ例外が発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="47760-140">When using this method with a state machine workflow, you might get an exception with the message "Queue '{0}' is not enabled."</span></span> <span data-ttu-id="47760-141">これは、ステート マシンの現在の状態では特定のイベントの処理方法を識別できないときに起こります。</span><span class="sxs-lookup"><span data-stu-id="47760-141">This happens when the current state of the state machine does not know how to handle a specific event.</span></span> <span data-ttu-id="47760-142">たとえば、現在の状態以外の状態に、キュー '{0}' で表現される <xref:System.Workflow.Activities.EventDrivenActivity> を含む <xref:System.Workflow.Activities.HandleExternalEventActivity> が含まれている場合です。</span><span class="sxs-lookup"><span data-stu-id="47760-142">For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="47760-143">メッセージは、送信された順序でワークフロー インスタンスで受信されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="47760-143">Messages are not guaranteed to be received by the workflow instance in the order that they were sent.</span></span> <span data-ttu-id="47760-144">たとえば、既存のキュー (キュー A) でメッセージを受信し、ワークフローによって別のキュー (キュー B) が生成され、最初のメッセージの後に送信された別のメッセージをリッスンする場合は、2 番目のメッセージが最初に届き、キューがまだ作成されていないために受信されない場合があります。</span><span class="sxs-lookup"><span data-stu-id="47760-144">For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet.</span></span> <span data-ttu-id="47760-145">この問題を回避するには、<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> を使用して、2 番目のキューが存在することを確認するまで、2 番目のメッセージを送信しないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="47760-145">To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-146"><xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> を使用する方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-146">The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="47760-147"><xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> イベントが発生すると、この例で定義されている `OnWorkflowIdled` メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="47760-147">When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called.</span></span> <span data-ttu-id="47760-148">このメソッドは、<xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> プロパティを使用してアイドル状態のワークフローを特定し、<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> メソッドを呼び出してキューに登録されているワークフロー インスタンスの項目のコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="47760-148">It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method.</span></span> <span data-ttu-id="47760-149">コードはコレクション全体を取得するまで繰り返され、ワークフローをアイドル状態にしたイベントを待機しているアクティビティを特定します。</span><span class="sxs-lookup"><span data-stu-id="47760-149">The code iterates over the collection to determine which activity is waiting for the event that idled the workflow.</span></span> <span data-ttu-id="47760-150">その後、<xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> メソッドとイベント キュー アイテムの名前を使用して、ワークフロー キューに例外を送信します。</span><span class="sxs-lookup"><span data-stu-id="47760-150">It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.</span></span>  
  
 <span data-ttu-id="47760-151">このコード例は、Program.cs ファイルに含まれている、ワークフローのキャンセルを示す SDK サンプルの一部です。</span><span class="sxs-lookup"><span data-stu-id="47760-151">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="47760-152">詳細については、次を参照してください。[のワークフローの取り消し](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)です。</span><span class="sxs-lookup"><span data-stu-id="47760-152">For more information, see [Canceling a Workflow](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47760-153"><paramref name="queueName" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="47760-153"><paramref name="queueName" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-154">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-154">The workflow runtime engine is not running.</span></span>  
  
 <span data-ttu-id="47760-155">- または -</span><span class="sxs-lookup"><span data-stu-id="47760-155">-or-</span></span>  
  
 <span data-ttu-id="47760-156"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> で指定された <paramref name="queueName" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="47760-156">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.</span></span>  
  
 <span data-ttu-id="47760-157">- または -</span><span class="sxs-lookup"><span data-stu-id="47760-157">-or-</span></span>  
  
 <span data-ttu-id="47760-158"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> で指定された <paramref name="queueName" /> が無効になっています。</span><span class="sxs-lookup"><span data-stu-id="47760-158">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItemOnIdle">
      <MemberSignature Language="C#" Value="public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItemOnIdle(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItemOnIdle (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItemOnIdle(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName"><span data-ttu-id="47760-159"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="47760-159">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</span></span></param>
        <param name="item"><span data-ttu-id="47760-160">キューに登録するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47760-160">The object to enqueue.</span></span></param>
        <param name="pendingWork"><span data-ttu-id="47760-161"><c>item</c> が配信されたときに送信者が通知を受けられるようにする <see cref="T:System.Workflow.Runtime.IPendingWork" />。</span><span class="sxs-lookup"><span data-stu-id="47760-161">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <c>item</c> is delivered.</span></span></param>
        <param name="workItem"><span data-ttu-id="47760-162"><see cref="T:System.Workflow.Runtime.IPendingWork" /> メソッドに渡すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47760-162">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</span></span></param>
        <summary><span data-ttu-id="47760-163">ワークフローがアイドル状態のときに、指定したワークフロー キューにメッセージをポストします。</span><span class="sxs-lookup"><span data-stu-id="47760-163">Posts a message to the specified workflow queue when the workflow is idle.</span></span> <span data-ttu-id="47760-164"><see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> は、ワークフローがアイドル ポイントに達するまで待機し、ワークフロー スケジューラがアイドル状態である (つまりアクティブな操作が実行されていない) ことを確認した後にキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="47760-164"><see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-165">ワークフロー インスタンスがアイドル状態になるまで待機してから、指定した `item` に <xref:System.Workflow.Runtime.WorkflowQueue> を送信します。</span><span class="sxs-lookup"><span data-stu-id="47760-165">Waits for the workflow instance to become idle and then sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span> <span data-ttu-id="47760-166">ワークフロー インスタンスが中断状態のときに <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> を呼び出すと、ワークフロー ランタイム エンジンは <xref:System.InvalidOperationException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="47760-166">If you call <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> while the workflow instance is suspended, the workflow runtime engine will throw an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="47760-167">メッセージが配信されたときに通知を受けるには、サービスに <xref:System.Workflow.Runtime.IPendingWork> を実装して、`workItem` および <xref:System.Workflow.Runtime.IPendingWork> オブジェクトを <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> に渡します。</span><span class="sxs-lookup"><span data-stu-id="47760-167">If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="47760-168">そのような通知が不要な場合は、`Nothing` と `pendingWork` に null 参照 (Visual Basic の場合は `workItem`) を渡します。</span><span class="sxs-lookup"><span data-stu-id="47760-168">If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.</span></span>  
  
 <span data-ttu-id="47760-169">このメソッドをステート マシン ワークフローで使用すると、"キュー '{0}' は有効ではありません" というメッセージを含む例外が発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="47760-169">When you are using this method with a state machine workflow, you might get an exception that contains the message "Queue '{0}' is not enabled."</span></span> <span data-ttu-id="47760-170">これは、ステート マシンの現在の状態では特定のイベントの処理方法を識別できないときに起こります。</span><span class="sxs-lookup"><span data-stu-id="47760-170">This occurs when the current state of the state machine does not know how to handle a specific event.</span></span> <span data-ttu-id="47760-171">たとえば、現在の状態以外の状態に、キュー '{0}' で表現される <xref:System.Workflow.Activities.EventDrivenActivity> を含む <xref:System.Workflow.Activities.HandleExternalEventActivity> が含まれている場合です。</span><span class="sxs-lookup"><span data-stu-id="47760-171">For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-172">次の例は、`EnqueueItemOnIdle` メソッドを使用してワークフロー インスタンスに情報を送信する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="47760-172">The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method.</span></span> <span data-ttu-id="47760-173">最初に WorkflowInstance オブジェクトが作成されて開始されます。次に <xref:System.Workflow.Runtime.IPendingWork> インターフェイスを実装するオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="47760-173">First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created.</span></span> <span data-ttu-id="47760-174">`EnqueueItemOnIdle` 呼び出されます、キュー名、エンキューされた項目および pendingWork オブジェクトのメソッドに渡される作業項目の文字列値で渡すことです。</span><span class="sxs-lookup"><span data-stu-id="47760-174">`EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.</span></span>  
  
 [!code-csharp[WF_Samples#12](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#12)]
 [!code-vb[WF_Samples#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47760-175"><paramref name="queueName" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="47760-175"><paramref name="queueName" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-176">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-176">The workflow runtime engine is not running.</span></span>  
  
 <span data-ttu-id="47760-177">- または -</span><span class="sxs-lookup"><span data-stu-id="47760-177">-or-</span></span>  
  
 <span data-ttu-id="47760-178">ワークフロー インスタンスが中断されています。</span><span class="sxs-lookup"><span data-stu-id="47760-178">The workflow instance is suspended.</span></span>  
  
 <span data-ttu-id="47760-179">- または -</span><span class="sxs-lookup"><span data-stu-id="47760-179">-or-</span></span>  
  
 <span data-ttu-id="47760-180"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> で指定された <paramref name="queueName" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="47760-180">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.</span></span>  
  
 <span data-ttu-id="47760-181">- または -</span><span class="sxs-lookup"><span data-stu-id="47760-181">-or-</span></span>  
  
 <span data-ttu-id="47760-182"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> で指定された <paramref name="queueName" /> が無効になっています。</span><span class="sxs-lookup"><span data-stu-id="47760-182">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="47760-183">比較対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47760-183">The object to compare.</span></span></param>
        <summary><span data-ttu-id="47760-184">指定したオブジェクトが <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> と等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="47760-184">Returns a value that indicates whether the specified object is equal to the <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</span></span></summary>
        <returns>
          <span data-ttu-id="47760-185">指定したオブジェクトがこの <see langword="true" /> に等しい場合は <see cref="T:System.Workflow.Runtime.WorkflowInstance" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="47760-185"><see langword="true" /> if the specified object is equal to this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-186">オブジェクトは、<xref:System.Workflow.Runtime.WorkflowInstance> クラスのインスタンスで、この <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> と同じ <xref:System.Workflow.Runtime.WorkflowInstance> を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="47760-186">The object must be an instance of the <xref:System.Workflow.Runtime.WorkflowInstance> class and have the same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> as this <xref:System.Workflow.Runtime.WorkflowInstance>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-187">ワークフロー インスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="47760-187">Returns the hash code for this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="47760-188">この <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> のハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="47760-188">The hash code for this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-189"><xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> は、<xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> の値に基づいて計算されたハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="47760-189"><xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> returns a hash code based on the value of <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowDefinition">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity GetWorkflowDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowDefinition () As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Activity ^ GetWorkflowDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-190">このワークフロー インスタンスのルート アクティビティを取得します。</span><span class="sxs-lookup"><span data-stu-id="47760-190">Retrieves the root activity for this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="47760-191"><see cref="T:System.Workflow.ComponentModel.Activity" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47760-191">An <see cref="T:System.Workflow.ComponentModel.Activity" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-192">ルート アクティビティを使用して、ワークフローのアクティビティ階層を移動できます。</span><span class="sxs-lookup"><span data-stu-id="47760-192">You can use the root activity to navigate the activity hierarchy of the workflow.</span></span>  
  
 <span data-ttu-id="47760-193">このメソッドはスレッド セーフではないため、ホストはこのメソッドの呼び出しを同期させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="47760-193">This method is not thread safe, so the host should synchronize its calls to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-194">ワークフロー インスタンスからワークフロー定義を取得する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-194">The following example demonstrates retrieving the workflow definition from a workflow instance.</span></span>  <span data-ttu-id="47760-195">この例は、Mainform.cs ファイルに含まれている注文処理ステート マシンの SDK サンプルです。</span><span class="sxs-lookup"><span data-stu-id="47760-195">This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.</span></span>  <span data-ttu-id="47760-196">詳細については、次を参照してください。、 [Ordering 状態マシン サンプル](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)です。</span><span class="sxs-lookup"><span data-stu-id="47760-196">For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).</span></span>  
  
 [!code-csharp[WF_Samples#86](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#86)]
 [!code-vb[WF_Samples#86](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#86)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowNextTimerExpiration">
      <MemberSignature Language="C#" Value="public DateTime GetWorkflowNextTimerExpiration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetWorkflowNextTimerExpiration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowNextTimerExpiration () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetWorkflowNextTimerExpiration();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-197">この <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> にタイマー メッセージが配信されるようスケジュールされている次の特定時点を返します。</span><span class="sxs-lookup"><span data-stu-id="47760-197">Returns the next point in time that this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> is scheduled to be delivered a timer message.</span></span></summary>
        <returns><span data-ttu-id="47760-198">この <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> にタイマー メッセージが配信される次の <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 時刻を表す DateTime 値。</span><span class="sxs-lookup"><span data-stu-id="47760-198">A DateTime value that represents the next <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> time this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> will be delivered a timer message.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="47760-199">次の例は、<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> メソッドを使用してワークフロー タイマー メッセージがさらにキューに登録されるかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="47760-199">The following example demonstrates using the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> method to determine if more workflow timer messages are enqueued.</span></span> <span data-ttu-id="47760-200">この例は、Program.cs ファイルに含まれているワークフローのスレッド処理の SDK サンプルです。</span><span class="sxs-lookup"><span data-stu-id="47760-200">This example is from the WorkflowThreading SDK sample, from the Program.cs file.</span></span> <span data-ttu-id="47760-201">詳細については、次を参照してください。[ワークフロー スレッド処理サンプル](http://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9)です。</span><span class="sxs-lookup"><span data-stu-id="47760-201">For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).</span></span>  
  
 [!code-csharp[WF_Samples#284](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#284)]
 [!code-vb[WF_Samples#284](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#284)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Workflow.Runtime.TimerEventSubscription" />
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowQueueData">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowQueueData () As ReadOnlyCollection(Of WorkflowQueueInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowQueueInfo ^&gt; ^ GetWorkflowQueueData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-202">このワークフロー インスタンスに関連付けられたワークフロー キューでの保留中の項目および定期受信されたアクティビティを格納した、<see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="47760-202">Gets a collection of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="47760-203"><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" />。</span><span class="sxs-lookup"><span data-stu-id="47760-203">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-204"><xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> は、<xref:System.Workflow.Runtime.WorkflowQueueInfo> オブジェクトのコレクションを返します。各オブジェクトはこのワークフロー インスタンスに関連付けられたワークフロー キューのうちの 1 つに対応し、その状態に関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="47760-204"><xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance.</span></span> <span data-ttu-id="47760-205"><xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType> は <xref:System.Workflow.Runtime.WorkflowQueue> での保留中の項目を格納し、<xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> は <xref:System.Workflow.Runtime.WorkflowQueue> での項目配信のために定期受信されたアクティビティのリストを格納します。</span><span class="sxs-lookup"><span data-stu-id="47760-205"><xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-206">次のコード例は、<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> メソッドを使用して、<xref:System.Workflow.Runtime.WorkflowInstance> オブジェクトに関連付けられたすべてのワークフロー キューの状態に関する情報を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="47760-206">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="47760-207"><xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> イベントが発生すると、この例で定義されている `OnWorkflowIdled` メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="47760-207">When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called.</span></span> <span data-ttu-id="47760-208">このメソッドは、<xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> プロパティを使用してアイドル状態のワークフローを特定し、<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> メソッドを呼び出してキューに登録されているワークフロー インスタンスの項目のコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="47760-208">It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method.</span></span> <span data-ttu-id="47760-209">コードはコレクション全体を取得するまで繰り返され、ワークフローをアイドル状態にしたイベントを待機しているアクティビティを特定します。</span><span class="sxs-lookup"><span data-stu-id="47760-209">The code iterates over the collection to determine which activity is waiting for the event that idled the workflow.</span></span> <span data-ttu-id="47760-210">その後、<xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> メソッドとイベント キュー アイテムの名前を使用して、ワークフロー キューに例外を送信します。</span><span class="sxs-lookup"><span data-stu-id="47760-210">It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.</span></span>  
  
 <span data-ttu-id="47760-211">このコード例は、Program.cs ファイルに含まれている、ワークフローのキャンセルを示す SDK サンプルの一部です。</span><span class="sxs-lookup"><span data-stu-id="47760-211">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="47760-212">詳細については、次を参照してください。[のワークフローの取り消し](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)です。</span><span class="sxs-lookup"><span data-stu-id="47760-212">For more information, see [Canceling a Workflow](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-213">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-213">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public Guid InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid InstanceId { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47760-214">ワークフロー インスタンスの一意の識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="47760-214">Gets the unique identifier for the workflow instance.</span></span></summary>
        <value><span data-ttu-id="47760-215">ワークフロー インスタンスの <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="47760-215">The <see cref="T:System.Guid" /> of the workflow instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-216"><xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> を使用して、ワークフロー インスタンスを参照できます。</span><span class="sxs-lookup"><span data-stu-id="47760-216">You can use <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> to reference the workflow instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-217"><xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> プロパティを使用して <xref:System.Workflow.Runtime.WorkflowInstance> オブジェクトに関する情報を取得する方法を、次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-217">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="47760-218">最初のコード スニペットは、<xref:System.Workflow.Runtime.WorkflowInstance> という名前の `instanceId` 変数を作成します。</span><span class="sxs-lookup"><span data-stu-id="47760-218">The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.</span></span>  
  
 [!code-csharp[WF_Samples#210](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#210)]
 [!code-vb[WF_Samples#210](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#210)]  
  
 <span data-ttu-id="47760-219">2 番目のスニペットは、<xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> メソッドが呼び出されると、`OrderEventArgs` コンストラクター呼び出しの最初のオブジェクトとして `CallBackForApproval` プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="47760-219">The second snippet uses the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.</span></span>  
  
 <span data-ttu-id="47760-220">このコード例は、OrderServiceImple.cs ファイルから抜粋した Listen SDK サンプルの一部です。</span><span class="sxs-lookup"><span data-stu-id="47760-220">This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file.</span></span> <span data-ttu-id="47760-221">詳細については、次を参照してください。[リッスン サンプル](http://msdn.microsoft.com/library/1cec0e82-7544-429f-b717-0fc25eb42b7f)です。</span><span class="sxs-lookup"><span data-stu-id="47760-221">For more information, see [Listen Sample](http://msdn.microsoft.com/library/1cec0e82-7544-429f-b717-0fc25eb42b7f).</span></span>  
  
 [!code-csharp[WF_Samples#211](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#211)]
 [!code-vb[WF_Samples#211](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#211)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-222">以前にアンロードされたワークフロー インスタンスを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="47760-222">Loads a previously unloaded workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-223"><xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> は同期式です。ワークフロー インスタンスを読み込める場合、<xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> は、ワークフロー インスタンスがメモリに読み込まれてワークフロー ランタイム エンジンによってスケジュールされた後に返されます。</span><span class="sxs-lookup"><span data-stu-id="47760-223"><xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is synchronous; if the workflow instance can be loaded, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine.</span></span> <span data-ttu-id="47760-224">ランタイムが <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> イベントを発生させるタイミングは、永続性サービスがワークフロー インスタンスをメモリに復元し終えてからワークフロー ランタイム エンジンがインスタンスをスケジュールし始めるまでの間です。</span><span class="sxs-lookup"><span data-stu-id="47760-224">The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-225">以前にアンロードされた <xref:System.Workflow.Runtime.WorkflowInstance> オブジェクトを読み込む方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-225">The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#10](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#10)]
 [!code-vb[WF_Samples#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-226">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-226">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReloadTrackingProfiles">
      <MemberSignature Language="C#" Value="public void ReloadTrackingProfiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadTrackingProfiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReloadTrackingProfiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReloadTrackingProfiles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-227">このワークフロー インスタンスの追跡プロファイルを再度読み込みます。</span><span class="sxs-lookup"><span data-stu-id="47760-227">Reload the tracking profiles for this workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-228">ランタイム追跡インフラストラクチャは、このワークフロー インスタンスの追跡チャネルに関連付けられた各 <xref:System.Workflow.Runtime.Tracking.TrackingProfile> を再度読み込みます。</span><span class="sxs-lookup"><span data-stu-id="47760-228">The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels.</span></span> <span data-ttu-id="47760-229">ワークフロー インスタンスがまだ中断状態になっていない場合、ワークフローは、追跡プロファイルが再度読み込まれる間、ランタイム追跡インフラストラクチャによって一時的に中断させられます。</span><span class="sxs-lookup"><span data-stu-id="47760-229">If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-230">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-230">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-231">中断状態になっているワークフロー インスタンスの実行を再開します。</span><span class="sxs-lookup"><span data-stu-id="47760-231">Resumes execution of a previously suspended workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-232">ホストは <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> を呼び出して、中断された状態のワークフロー インスタンスの実行を再開できます。</span><span class="sxs-lookup"><span data-stu-id="47760-232">The host can call <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> to resume execution of a workflow instance that has been previously suspended.</span></span> <span data-ttu-id="47760-233">ワークフロー インスタンスが中断状態になっていない場合、アクションは実行されません。</span><span class="sxs-lookup"><span data-stu-id="47760-233">If the workflow instance is not in the suspended state, no action is taken.</span></span> <span data-ttu-id="47760-234">ランタイムは、ワークフロー インスタンスが再開される直前に、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="47760-234">The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-235">中断状態のワークフロー インスタンスに対する Resume を呼び出す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-235">The following example demonstrates calling Resume on a previously suspended workflow instance.</span></span>  <span data-ttu-id="47760-236">この例は保留と終了の SDK サンプルです。</span><span class="sxs-lookup"><span data-stu-id="47760-236">This example is from the Suspend and Terminate SDK sample.</span></span>  <span data-ttu-id="47760-237">詳細については、次を参照してください。[保留と終了のサンプル](http://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517)です。</span><span class="sxs-lookup"><span data-stu-id="47760-237">For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).</span></span>  
  
 [!code-csharp[WF_Samples#172](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#172)]
 [!code-vb[WF_Samples#172](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#172)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-238">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-238">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-239">ワークフロー インスタンスの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="47760-239">Starts the execution of the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-240"><xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> は、このワークフロー インスタンスのルート アクティビティに対する <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="47760-240"><xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance.</span></span> <span data-ttu-id="47760-241"><xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> は、例外を検出すると、<xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> を呼び出すことによってワークフロー インスタンスを終了します。この呼び出しの際、例外の <xref:System.Exception.Message%2A> プロパティを終了の理由として渡します。</span><span class="sxs-lookup"><span data-stu-id="47760-241">If <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-242">次のコード例は、ワークフロー ホストで <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> メソッドを使用して <xref:System.Workflow.Runtime.WorkflowInstance> を開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="47760-242">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host.</span></span> <span data-ttu-id="47760-243">このコードでは、<xref:System.Workflow.Runtime.WorkflowRuntime> のインスタンスを作成してサービスをランタイムに追加し、推奨される <xref:System.Workflow.Runtime.WorkflowInstance> オブジェクトの作成方法を示します。</span><span class="sxs-lookup"><span data-stu-id="47760-243">The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="47760-244">これは <xref:System.Type> オブジェクトを作成し、作成したオブジェクトをホストが関連付けられたワークフロー オブジェクトの 1 つにキャストします。</span><span class="sxs-lookup"><span data-stu-id="47760-244">It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated.</span></span> <span data-ttu-id="47760-245">次にこのコードは、<xref:System.Workflow.Runtime.WorkflowInstance> メソッドを呼び出し、既に作成されている型をそれに渡すことによって、<xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="47760-245">The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it.</span></span> <span data-ttu-id="47760-246"><xref:System.Workflow.Runtime.WorkflowInstance> は、<xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> メソッドの呼び出しによって起動されます。</span><span class="sxs-lookup"><span data-stu-id="47760-246">The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.</span></span>  
  
 <span data-ttu-id="47760-247">このコード例は、Program.cs ファイルに含まれている、ワークフローのキャンセルを示す SDK サンプルの一部です。</span><span class="sxs-lookup"><span data-stu-id="47760-247">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="47760-248">詳細については、次を参照してください。[のワークフローの取り消し](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)です。</span><span class="sxs-lookup"><span data-stu-id="47760-248">For more information, see [Canceling a Workflow](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-249">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-249">The workflow runtime engine is not running.</span></span>  
  
 <span data-ttu-id="47760-250">- または -</span><span class="sxs-lookup"><span data-stu-id="47760-250">-or-</span></span>  
  
 <span data-ttu-id="47760-251">ワークフロー インスタンスが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="47760-251">The workflow instance has already been started.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend(System::String ^ error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="47760-252">ワークフロー インスタンスを中断する理由の説明。</span><span class="sxs-lookup"><span data-stu-id="47760-252">A description of the reason for suspending the workflow instance.</span></span></param>
        <summary><span data-ttu-id="47760-253">ワークフロー インスタンスを中断します。</span><span class="sxs-lookup"><span data-stu-id="47760-253">Suspends the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-254">ワークフロー インスタンスは同期式で中断されます。</span><span class="sxs-lookup"><span data-stu-id="47760-254">The workflow instance is suspended in a synchronous manner.</span></span> <span data-ttu-id="47760-255">ワークフロー インスタンスが既に中断している場合、アクションは実行されません。それ以外の場合、ワークフロー ランタイム エンジンはワークフロー インスタンスを中断し、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> イベントを発生させ、`reason` に <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> を渡します。</span><span class="sxs-lookup"><span data-stu-id="47760-255">If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> event and passes `reason` in a <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="47760-256"><xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> は、ワークフロー インスタンスをアンロードしません。</span><span class="sxs-lookup"><span data-stu-id="47760-256"><xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> does not unload the workflow instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-257"><xref:System.Workflow.Runtime.WorkflowInstance> オブジェクトに対する Suspend を呼び出す方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-257">The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#9](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#9)]
 [!code-vb[WF_Samples#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-258">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-258">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Terminate (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Terminate(System::String ^ error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="47760-259">ワークフロー インスタンスを終了する理由の説明。</span><span class="sxs-lookup"><span data-stu-id="47760-259">A description of the reason for terminating the workflow instance.</span></span></param>
        <summary><span data-ttu-id="47760-260">ワークフロー インスタンスを同期式で終了します。</span><span class="sxs-lookup"><span data-stu-id="47760-260">Terminates the workflow instance in a synchronous manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-261">ワークフロー インスタンスは同期式で終了します。</span><span class="sxs-lookup"><span data-stu-id="47760-261">The workflow instance is terminated in a synchronous manner.</span></span> <span data-ttu-id="47760-262">ホストは <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> を呼び出すことによってワークフロー インスタンスを終了します。</span><span class="sxs-lookup"><span data-stu-id="47760-262">The host calls <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> to terminate the workflow instance.</span></span> <span data-ttu-id="47760-263">ワークフロー ランタイム エンジンは、メモリ内のワークフロー インスタンスをクリアし、インスタンスがメモリからクリアされたことを永続性サービスに通知します。</span><span class="sxs-lookup"><span data-stu-id="47760-263">The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.</span></span> <span data-ttu-id="47760-264"><xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> の場合、これは、終了時にそのワークフロー インスタンスのすべての状態情報がデータベースから削除されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="47760-264">For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination.</span></span> <span data-ttu-id="47760-265">既に保存されている永続性ポイントからワークフロー インスタンスを再度読み込むことはできません。</span><span class="sxs-lookup"><span data-stu-id="47760-265">You will not be able to reload the workflow instance from a previously stored persistence point.</span></span>  
  
 <span data-ttu-id="47760-266">メモリ内のワークフロー インスタンスがクリアされて永続性サービスに終了が通知されると、`Terminate` メソッドは <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> イベントを発生させ、`reason` に含まれる <xref:System.Exception.Message%2A> の <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> プロパティに <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> を渡します。</span><span class="sxs-lookup"><span data-stu-id="47760-266">After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the `Terminate` method raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> event and passes `reason` in the <xref:System.Exception.Message%2A> property of a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> contained in the <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.</span></span>  
  
 <span data-ttu-id="47760-267">`Terminate` は <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> と次の点で異なります。Terminate はメモリ内のワークフロー インスタンスをクリアして永続性サービスに終了を通知します。`Abort` はメモリ内のワークフロー インスタンスをクリアするだけで、最後の永続性ポイントからワークフロー インスタンスを再開できます。</span><span class="sxs-lookup"><span data-stu-id="47760-267">`Terminate` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, `Abort` simply clears the in-memory workflow instance, which can then be restarted from the last persistence point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-268"><xref:System.Workflow.Runtime.WorkflowInstance> オブジェクトに対する Terminate を呼び出す方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-268">The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#8](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#8)]
 [!code-vb[WF_Samples#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-269">ワークフロー ランタイム エンジンが実行されていません。</span><span class="sxs-lookup"><span data-stu-id="47760-269">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryUnload">
      <MemberSignature Language="C#" Value="public bool TryUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.TryUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryUnload();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-270">メモリ内のワークフロー インスタンスが中断状態またはアイドル状態のときに、そのワークフロー インスタンスを永続ストアにアンロードします。</span><span class="sxs-lookup"><span data-stu-id="47760-270">Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.</span></span></summary>
        <returns>
          <span data-ttu-id="47760-271">ワークフロー インスタンスがアンロードされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="47760-271"><see langword="true" /> if the workflow instance was unloaded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-272">ワークフロー インスタンスがアイドル状態または中断状態の場合、<xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> は永続性サービスを使用することによって、メモリからワークフロー インスタンスを削除し、削除したワークフロー インスタンスをデータ ストアに永続化します。</span><span class="sxs-lookup"><span data-stu-id="47760-272">If the workflow instance is idle or suspended, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> uses the persistence service to remove the workflow instance from memory and persist it to a data store.</span></span> <span data-ttu-id="47760-273"><xref:System.Workflow.Runtime.WorkflowRuntime> に登録された永続性サービスがない場合、<xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> は <xref:System.InvalidOperationException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="47760-273">If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="47760-274">ランタイムを発生させる場合は、ワークフロー インスタンスが正常に永続化、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>イベント、および返します`true`です。</span><span class="sxs-lookup"><span data-stu-id="47760-274">If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event, and returns `true`.</span></span> <span data-ttu-id="47760-275"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 返します`false`が終了した場合は、ワークフロー インスタンスが既にアンロードされてが中止されました。 または、既に完了します。</span><span class="sxs-lookup"><span data-stu-id="47760-275"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> returns `false` if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.</span></span>  
  
 <span data-ttu-id="47760-276">ホストは <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> を使用して、アイドル状態のワークフローのシステム リソースを再利用できます。</span><span class="sxs-lookup"><span data-stu-id="47760-276">The host can use <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> to reclaim system resources from an idle workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-277">次の例は、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> イベントが発生したときに TryUnload メソッドを使用してワークフローをアンロードする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="47760-277">The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires.</span></span> <span data-ttu-id="47760-278">この例は、Program.cs ファイルに含まれている永続性サービスの使用の SDK サンプルです。</span><span class="sxs-lookup"><span data-stu-id="47760-278">This example is from the Using Persistence Services SDK sample, from the Program.cs file.</span></span> <span data-ttu-id="47760-279">詳細については、次を参照してください。[を使用した永続性サービス サンプル](http://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6)です。</span><span class="sxs-lookup"><span data-stu-id="47760-279">For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6).</span></span>  
  
 [!code-csharp[WF_Samples#280](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#280)]
 [!code-vb[WF_Samples#280](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#280)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-280">ワークフロー ランタイム エンジンに登録されている永続性サービスがありません。</span><span class="sxs-lookup"><span data-stu-id="47760-280">There is no persistence service registered with the workflow runtime engine.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unload ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Unload();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47760-281">メモリ内のワークフロー インスタンスを永続ストアにアンロードします。</span><span class="sxs-lookup"><span data-stu-id="47760-281">Unloads the workflow instance from memory to the persistence store.</span></span> <span data-ttu-id="47760-282">この呼び出しは、現在のスケジュール済み作業が完了するまで、またはトランザクション スコープが終了するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="47760-282">This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47760-283"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> は同期的です。つまり、実行するアクションが完了した後に制御が戻ります。</span><span class="sxs-lookup"><span data-stu-id="47760-283"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> is synchronous; that is, it returns after completing any action that it performs.</span></span> <span data-ttu-id="47760-284">ワークフロー インスタンスがアイドル状態でない場合、ランタイムはインスタンスを中断できるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="47760-284">If the workflow instance is not idle, the runtime waits until the instance can be interrupted.</span></span> <span data-ttu-id="47760-285">インスタンスを中断できるのは、現在のスケジュール済み作業項目の完了後のみです。この完了のタイミングは通常、現在実行中のアクティビティがその <xref:System.Workflow.ComponentModel.Activity.Execute%2A> メソッドから返されたときです。</span><span class="sxs-lookup"><span data-stu-id="47760-285">An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method.</span></span> <span data-ttu-id="47760-286">ただし、インスタンスが <xref:System.Workflow.ComponentModel.TransactionScopeActivity> を実行している場合、インスタンスを中断できるのは、トランザクション スコープが実行を完了してからです。</span><span class="sxs-lookup"><span data-stu-id="47760-286">However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted.</span></span> <span data-ttu-id="47760-287">アンロードは次に、永続性サービスを使用することによって、メモリからワークフロー インスタンスを削除し、削除したワークフロー インスタンスをデータ ストアに永続化します。</span><span class="sxs-lookup"><span data-stu-id="47760-287">Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store.</span></span> <span data-ttu-id="47760-288"><xref:System.Workflow.Runtime.WorkflowRuntime> に登録された永続性サービスがない場合、<xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> は <xref:System.InvalidOperationException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="47760-288">If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="47760-289">ワークフロー インスタンスが正常に永続化されると、ランタイムは <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="47760-289">If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.</span></span>  
  
 <span data-ttu-id="47760-290">ホストは <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> を使用して、アイドル状態のワークフローのシステム リソースを再利用できます。</span><span class="sxs-lookup"><span data-stu-id="47760-290">The host can use <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> to reclaim system resources from an idle workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47760-291"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> オブジェクトでの <xref:System.Workflow.Runtime.WorkflowInstance> の呼び出しを次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-291">The following example demonstrates calling <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#11](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#11)]
 [!code-vb[WF_Samples#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47760-292">ワークフロー ランタイム エンジンに登録されている永続性サービスがありません。</span><span class="sxs-lookup"><span data-stu-id="47760-292">There is no persistence service registered with the workflow runtime engine.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowRuntime">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowRuntime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ WorkflowRuntime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47760-293">このワークフロー インスタンスの <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="47760-293">Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for this workflow instance.</span></span></summary>
        <value><span data-ttu-id="47760-294">このワークフロー インスタンスが動作する実行環境を表す <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />。</span><span class="sxs-lookup"><span data-stu-id="47760-294">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> that represents the execution environment in which this workflow instance is running.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="47760-295"><xref:System.Workflow.Runtime.WorkflowRuntime> オブジェクトの実行環境 <xref:System.Workflow.Runtime.WorkflowInstance> にアクセスする例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="47760-295">The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#7](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#7)]
 [!code-vb[WF_Samples#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>