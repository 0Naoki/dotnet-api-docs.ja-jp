<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HttpApplicationState.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac516f2143bf2be7e6b84dc7a430caca84732d94bfd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16f2143bf2be7e6b84dc7a430caca84732d94bfd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Enables sharing of global information across multiple sessions and requests within an ASP.NET application.</source>
          <target state="translated">ASP.NET アプリケーションでの複数のセッションおよび要求で、グローバルな情報を共有できるようにします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>An ASP.NET application is the sum of all files, pages, handlers, modules, and code within the scope of a virtual directory and its subdirectories on a single Web server.</source>
          <target state="translated">ASP.NET アプリケーションは、すべてのファイル、ページ、ハンドラー、モジュール、および仮想ディレクトリとそのサブディレクトリ、単一の Web サーバー上のスコープ内のコードの合計です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A single instance of an <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class is created the first time a client requests any URL resource from within a particular ASP.NET application virtual directory.</source>
          <target state="translated">1 つのインスタンス、<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>クラスが初めてクライアントが特定の ASP.NET アプリケーション仮想ディレクトリ内のすべての URL リソースを要求を作成します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A separate single instance is created for each ASP.NET application on a Web server.</source>
          <target state="translated">Web サーバー上の ASP.NET アプリケーションごとに 1 つの独立したインスタンスが作成されます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A reference to each instance is then exposed via the intrinsic <ph id="ph1">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object.</source>
          <target state="translated">各インスタンスへの参照が、組み込みを介して公開される、<ph id="ph1">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>Application state is not shared across either a Web farm (in which an application is hosted across multiple servers) or a Web garden (in which an application is hosted across multiple processes on the same computer).</source>
          <target state="translated">アプリケーションの状態は、(アプリケーションがホストされている複数のサーバー) の Web ファームや Web ガーデン (アプリケーションがホストされている同じコンピューター上の複数のプロセス) のいずれかの間で共有されていません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The name of the object to be added to the collection.</source>
          <target state="translated">コレクションに追加されるオブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The value of the object.</source>
          <target state="translated">オブジェクトの値。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>Adds a new object to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">新しいオブジェクトを <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> コレクションに追加します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The following example adds two application variables named MyAppVar1 and MyAppVar2 to the Application collection.</source>
          <target state="translated">次の例では、名前付き MyAppVar1 および MyAppVar2 をアプリケーションのコレクションに 2 つのアプリケーション変数を追加します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>Gets the access keys in the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> コレクションのアクセス キーを取得します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>A string array of <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object names.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクト名の文字列配列。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>The following example fills a string array with all the object names in the application state collection.</source>
          <target state="translated">次の例では、アプリケーション状態のコレクション内のすべてのオブジェクト名を文字列配列を格納します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Clear">
          <source>Removes all objects from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> コレクションからすべてのオブジェクトを削除します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Clear">
          <source>The following example removes all <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> variables from the collection.</source>
          <target state="translated">次の例では、すべてを削除します<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>コレクションの変数です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Contents">
          <source>Gets a reference to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクトへの参照を取得します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>A reference to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクトへの参照。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>This property provides compatibility with earlier versions of ASP.</source>
          <target state="translated">このプロパティは、ASP の旧バージョンとの互換性を提供します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> object that is used to access the object names in the application state collection.</source>
          <target state="translated">次の例は、新しい作成<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>アプリケーション状態のコレクション内のオブジェクト名にアクセスするために使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Count">
          <source>Gets the number of objects in the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> コレクション内のオブジェクトの数を取得します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The number of item objects in the collection.</source>
          <target state="translated">コレクション内の項目のオブジェクト数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The default is 0.</source>
          <target state="translated">既定値は 0 です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The following example executes only if the number of objects in the collection exceeds five.</source>
          <target state="translated">次の例では、コレクション内のオブジェクトの数が 5 を超えた場合にのみを実行します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name or index.</source>
          <target state="translated">名前またはインデックスを使って <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The index of the application state object.</source>
          <target state="translated">アプリケーション状態オブジェクトのインデックス。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by numerical index.</source>
          <target state="translated">数値インデックスを使って <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> で参照されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The following example returns the first object (index = 0) from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">次の例は、最初のオブジェクトを返します (インデックス = 0) から、 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 、組み込みのコレクション<ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>オブジェクトおよびオブジェクトの新しい変数にコピーします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The name of the object.</source>
          <target state="translated">オブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name.</source>
          <target state="translated">名前を使って <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="name" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> で参照されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The following example returns an object named MyAppVar1 from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">次の例から MyAppVar1 をという名前のオブジェクトを返します、 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 、組み込みのコレクション<ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>オブジェクトおよびオブジェクトの新しい変数にコピーします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The index of the application state object.</source>
          <target state="translated">アプリケーション状態オブジェクトのインデックス。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object name by index.</source>
          <target state="translated">インデックスを使って <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクト名を取得します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The name under which the application state object was saved.</source>
          <target state="translated">アプリケーション状態オブジェクトを保存するために使用した名前。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The following example returns the names of all the objects in the application state collection and stores the names in a string array.</source>
          <target state="translated">次の例では、アプリケーションの状態コレクション内のすべてのオブジェクトの名前を返し、文字列配列の名前を格納します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Gets access to an object in an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> コレクション内のオブジェクトへのアクセスを取得します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>This property is overloaded to allow access to an object by name or numerical index.</source>
          <target state="translated">このプロパティは、名前インデックスまたは数値インデックスでオブジェクトにアクセスできるようにオーバーロードされます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The numerical index of the object in the collection.</source>
          <target state="translated">コレクション内のオブジェクトの数値インデックス。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>Gets a single <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by index.</source>
          <target state="translated">インデックスを使って <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクトを 1 つ取得します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> で参照されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The following example returns the first object (index = 0) from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">次の例は、最初のオブジェクトを返します (インデックス = 0) から、 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 、組み込みのコレクション<ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>オブジェクトおよびオブジェクトの新しい変数にコピーします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The name of the object in the collection.</source>
          <target state="translated">コレクション内のオブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>Gets the value of a single <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name.</source>
          <target state="translated">名前によって <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクトの値を 1 つ取得します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="name" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> で参照されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The following example returns an object named <ph id="ph1">`MyAppVar1`</ph> from the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph3">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">次の例は、という名前のオブジェクトを返します<ph id="ph1">`MyAppVar1`</ph>から、 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 、組み込みのコレクション<ph id="ph3">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>オブジェクトおよびオブジェクトの新しい変数にコピーします。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Lock">
          <source>Locks access to an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> variable to facilitate access synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 変数へのアクセスをロックして、アクセスを同期させます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>The <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class performs automatic locking and unlocking with the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph> properties and the <ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> and <ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>クラスを行い、自動ロックとロック解除、<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph>プロパティおよび<ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>、<ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph>と<ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>However, explicitly using the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> methods when you have a series of operations may be more efficient.</source>
          <target state="translated">ただし、明示的に使用して、<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph>メソッド、一連の操作がある場合は効率的である可能性があります。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph>メソッドと<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph>メソッドを他のセッションがローカルのセッションが変更された後に、までの 2 つのアプリケーション変数の値を変更することを防ぐためにします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>The name of the object to be removed from the collection.</source>
          <target state="translated">コレクションから削除されるオブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>Removes the named object from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> コレクションから名前付きオブジェクトを削除します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>The following example removes one application state variable from the collection.</source>
          <target state="translated">次の例では、1 つのアプリケーション状態変数をコレクションから削除します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source>Removes all objects from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> コレクションからすべてのオブジェクトを削除します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source><ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAll%2A&gt;</ph> is an internal call to <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAll%2A&gt;</ph> 内部呼び出しは、<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source>The following example removes all <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> variables from the collection.</source>
          <target state="translated">次の例では、すべてを削除します<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>コレクションの変数です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>The position in the collection of the item to remove.</source>
          <target state="translated">削除する項目のコレクション内の位置。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>Removes an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object from a collection by index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> オブジェクトをコレクションからインデックスを使用して削除します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>The following code example demonstrates how to insert two application variables into the collection, and then use the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> method to remove the first variable in a custom <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> object.</source>
          <target state="translated">次のコード例は、コレクションに 2 つのアプリケーションの変数を挿入し、使用して、<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph>をカスタムの最初の変数を削除する<ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The name of the object to be updated.</source>
          <target state="translated">更新されるオブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The updated value of the object.</source>
          <target state="translated">オブジェクトの更新された値。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>Updates the value of an object in an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> コレクション内のオブジェクトの値を更新します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The following example updates the value of an existing application state variable.</source>
          <target state="translated">次の例では、既存のアプリケーション状態変数の値を更新します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>Gets all objects declared by an <ph id="ph1">&lt;see langword="&amp;lt;object&amp;gt;" /&gt;</ph> tag where the scope is set to "Application" within the ASP.NET application.</source>
          <target state="translated">ASP.NET アプリケーション内でスコープが "Application" に設定されている、<ph id="ph1">&lt;see langword="&amp;lt;object&amp;gt;" /&gt;</ph> タグで宣言されたすべてのオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>A collection of objects on the page.</source>
          <target state="translated">ページ上のオブジェクトのコレクション。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>Application objects are defined in the Global.asax file inside the <ph id="ph1">`&lt;object runat="server" scope="Application"&gt; &lt;/object&gt;`</ph> tags.</source>
          <target state="translated">アプリケーション オブジェクトが、Global.asax ファイル内で定義されている、<ph id="ph1">`&lt;object runat="server" scope="Application"&gt; &lt;/object&gt;`</ph>タグ。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>The following example gets all application objects into a <ph id="ph1">&lt;xref:System.Web.HttpStaticObjectsCollection&gt;</ph> variable and executes a routine only if the number of objects is greater than 0.</source>
          <target state="translated">次の例に、すべてのアプリケーション オブジェクトを取得する、<ph id="ph1">&lt;xref:System.Web.HttpStaticObjectsCollection&gt;</ph>変数オブジェクトの数が 0 より大きい場合にのみ、ルーチンを実行します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>Unlocks access to an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> variable to facilitate access synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 変数へのアクセスのロックを解除して、アクセスを同期させます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>The <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class performs automatic locking and unlocking with the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph> properties and the <ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> and <ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>クラスを行い、自動ロックとロック解除、<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph>プロパティおよび<ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>、<ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph>と<ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>However, explicitly using the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> methods when you have a series of operations may be more efficient.</source>
          <target state="translated">ただし、明示的に使用して、<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph>メソッド、一連の操作がある場合は効率的である可能性があります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph>メソッドと<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph>メソッドを他のセッションがローカルのセッションが変更された後に、までの 2 つのアプリケーション変数の値を変更することを防ぐためにします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>