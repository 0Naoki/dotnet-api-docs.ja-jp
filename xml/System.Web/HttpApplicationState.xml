<Type Name="HttpApplicationState" FullName="System.Web.HttpApplicationState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="16f2143bf2be7e6b84dc7a430caca84732d94bfd" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30609676" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpApplicationState : System.Collections.Specialized.NameObjectCollectionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpApplicationState extends System.Collections.Specialized.NameObjectCollectionBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpApplicationState" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpApplicationState&#xA;Inherits NameObjectCollectionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpApplicationState sealed : System::Collections::Specialized::NameObjectCollectionBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.Specialized.NameObjectCollectionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e57c9-101">ASP.NET アプリケーションでの複数のセッションおよび要求で、グローバルな情報を共有できるようにします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e57c9-101">Enables sharing of global information across multiple sessions and requests within an ASP.NET application.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e57c9-102">ASP.NET アプリケーションは、すべてのファイル、ページ、ハンドラー、モジュール、および仮想ディレクトリとそのサブディレクトリ、単一の Web サーバー上のスコープ内のコードの合計です。</span><span class="sxs-lookup"><span data-stu-id="e57c9-102">An ASP.NET application is the sum of all files, pages, handlers, modules, and code within the scope of a virtual directory and its subdirectories on a single Web server.</span></span>  
  
 <span data-ttu-id="e57c9-103">1 つのインスタンス、<xref:System.Web.HttpApplicationState>クラスが初めてクライアントが特定の ASP.NET アプリケーション仮想ディレクトリ内のすべての URL リソースを要求を作成します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-103">A single instance of an <xref:System.Web.HttpApplicationState> class is created the first time a client requests any URL resource from within a particular ASP.NET application virtual directory.</span></span> <span data-ttu-id="e57c9-104">Web サーバー上の ASP.NET アプリケーションごとに 1 つの独立したインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e57c9-104">A separate single instance is created for each ASP.NET application on a Web server.</span></span> <span data-ttu-id="e57c9-105">各インスタンスへの参照が、組み込みを介して公開される、<xref:System.Web.HttpContext.Application%2A>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e57c9-105">A reference to each instance is then exposed via the intrinsic <xref:System.Web.HttpContext.Application%2A> object.</span></span>  
  
 <span data-ttu-id="e57c9-106">アプリケーションの状態は、(アプリケーションがホストされている複数のサーバー) の Web ファームや Web ガーデン (アプリケーションがホストされている同じコンピューター上の複数のプロセス) のいずれかの間で共有されていません。</span><span class="sxs-lookup"><span data-stu-id="e57c9-106">Application state is not shared across either a Web farm (in which an application is hosted across multiple servers) or a Web garden (in which an application is hosted across multiple processes on the same computer).</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e57c9-107">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e57c9-107">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Web.HttpContext" />
    <altmember cref="T:System.Web.HttpApplication" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e57c9-108">コレクションに追加されるオブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-108">The name of the object to be added to the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e57c9-109">オブジェクトの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-109">The value of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-110">新しいオブジェクトを <see cref="T:System.Web.HttpApplicationState" /> コレクションに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-110">Adds a new object to the <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-111">次の例では、名前付き MyAppVar1 および MyAppVar2 をアプリケーションのコレクションに 2 つのアプリケーション変数を追加します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-111">The following example adds two application variables named MyAppVar1 and MyAppVar2 to the Application collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Add Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Add Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllKeys">
      <MemberSignature Language="C#" Value="public string[] AllKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AllKeys" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.AllKeys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllKeys As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AllKeys { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-112">
            <see cref="T:System.Web.HttpApplicationState" /> コレクションのアクセス キーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-112">Gets the access keys in the <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e57c9-113">
            <see cref="T:System.Web.HttpApplicationState" /> オブジェクト名の文字列配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-113">A string array of <see cref="T:System.Web.HttpApplicationState" /> object names.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-114">次の例では、アプリケーション状態のコレクション内のすべてのオブジェクト名を文字列配列を格納します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-114">The following example fills a string array with all the object names in the application state collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.AllKeys Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.AllKeys Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.AllKeys Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.AllKeys Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-115">
            <see cref="T:System.Web.HttpApplicationState" /> コレクションからすべてのオブジェクトを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-115">Removes all objects from an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-116">次の例では、すべてを削除します<xref:System.Web.HttpApplicationState>コレクションの変数です。</span><span class="sxs-lookup"><span data-stu-id="e57c9-116">The following example removes all <xref:System.Web.HttpApplicationState> variables from the collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplicationState Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpApplicationState Contents" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Contents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Contents As HttpApplicationState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpApplicationState ^ Contents { System::Web::HttpApplicationState ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplicationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-117">
            <see cref="T:System.Web.HttpApplicationState" /> オブジェクトへの参照を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-117">Gets a reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e57c9-118">
            <see cref="T:System.Web.HttpApplicationState" /> オブジェクトへの参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-118">A reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e57c9-119">このプロパティは、ASP の旧バージョンとの互換性を提供します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-119">This property provides compatibility with earlier versions of ASP.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e57c9-120">次の例は、新しい作成<xref:System.Web.HttpApplicationState>アプリケーション状態のコレクション内のオブジェクト名にアクセスするために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e57c9-120">The following example creates a new <xref:System.Web.HttpApplicationState> object that is used to access the object names in the application state collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Contents Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Contents Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Contents Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Contents Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public override int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-121">
            <see cref="T:System.Web.HttpApplicationState" /> コレクション内のオブジェクトの数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-121">Gets the number of objects in the <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e57c9-122">コレクション内の項目のオブジェクト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-122">The number of item objects in the collection.</span>
          </span>
          <span data-ttu-id="e57c9-123">既定値は 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-123">The default is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-124">次の例では、コレクション内のオブジェクトの数が 5 を超えた場合にのみを実行します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-124">The following example executes only if the number of objects in the collection exceeds five.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Count Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Count Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-125">名前またはインデックスを使って <see cref="T:System.Web.HttpApplicationState" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-125">Gets an <see cref="T:System.Web.HttpApplicationState" /> object by name or index.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Get(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e57c9-126">アプリケーション状態オブジェクトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-126">The index of the application state object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-127">数値インデックスを使って <see cref="T:System.Web.HttpApplicationState" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-127">Gets an <see cref="T:System.Web.HttpApplicationState" /> object by numerical index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e57c9-128">
            <paramref name="index" /> で参照されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-128">The object referenced by <paramref name="index" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-129">次の例は、最初のオブジェクトを返します (インデックス = 0) から、 <xref:System.Web.HttpApplicationState> 、組み込みのコレクション<xref:System.Web.HttpContext.Application%2A>オブジェクトおよびオブジェクトの新しい変数にコピーします。</span><span class="sxs-lookup"><span data-stu-id="e57c9-129">The following example returns the first object (index = 0) from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Get1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Get1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Get1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Get1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e57c9-130">オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-130">The name of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-131">名前を使って <see cref="T:System.Web.HttpApplicationState" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-131">Gets an <see cref="T:System.Web.HttpApplicationState" /> object by name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e57c9-132">
            <paramref name="name" /> で参照されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-132">The object referenced by <paramref name="name" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e57c9-133">次の例から MyAppVar1 をという名前のオブジェクトを返します、 <xref:System.Web.HttpApplicationState> 、組み込みのコレクション<xref:System.Web.HttpContext.Application%2A>オブジェクトおよびオブジェクトの新しい変数にコピーします。</span><span class="sxs-lookup"><span data-stu-id="e57c9-133">The following example returns an object named MyAppVar1 from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.</span></span>  
  
```vb  
Dim MyObject As Object  
MyObject = Application.Get("MyAppVar1")  
```  
  
```csharp  
Object MyObject;  
MyObject = Application.Get("MyAppVar1");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public string GetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.GetKey(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKey (index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetKey(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e57c9-134">アプリケーション状態オブジェクトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-134">The index of the application state object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-135">インデックスを使って <see cref="T:System.Web.HttpApplicationState" /> オブジェクト名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-135">Gets an <see cref="T:System.Web.HttpApplicationState" /> object name by index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e57c9-136">アプリケーション状態オブジェクトを保存するために使用した名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-136">The name under which the application state object was saved.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-137">次の例では、アプリケーションの状態コレクション内のすべてのオブジェクトの名前を返し、文字列配列の名前を格納します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-137">The following example returns the names of all the objects in the application state collection and stores the names in a string array.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.GetKey Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.GetKey Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.GetKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.GetKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-138">
            <see cref="T:System.Web.HttpApplicationState" /> コレクション内のオブジェクトへのアクセスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-138">Gets access to an object in an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
          <span data-ttu-id="e57c9-139">このプロパティは、名前インデックスまたは数値インデックスでオブジェクトにアクセスできるようにオーバーロードされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-139">This property is overloaded to allow access to an object by name or numerical index.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e57c9-140">コレクション内のオブジェクトの数値インデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-140">The numerical index of the object in the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-141">インデックスを使って <see cref="T:System.Web.HttpApplicationState" /> オブジェクトを 1 つ取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-141">Gets a single <see cref="T:System.Web.HttpApplicationState" /> object by index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e57c9-142">
            <paramref name="index" /> で参照されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-142">The object referenced by <paramref name="index" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-143">次の例は、最初のオブジェクトを返します (インデックス = 0) から、 <xref:System.Web.HttpApplicationState> 、組み込みのコレクション<xref:System.Web.HttpContext.Application%2A>オブジェクトおよびオブジェクトの新しい変数にコピーします。</span><span class="sxs-lookup"><span data-stu-id="e57c9-143">The following example returns the first object (index = 0) from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.this1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.this1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.this1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.this1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); void set(System::String ^ name, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e57c9-144">コレクション内のオブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-144">The name of the object in the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-145">名前によって <see cref="T:System.Web.HttpApplicationState" /> オブジェクトの値を 1 つ取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-145">Gets the value of a single <see cref="T:System.Web.HttpApplicationState" /> object by name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e57c9-146">
            <paramref name="name" /> で参照されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-146">The object referenced by <paramref name="name" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-147">次の例は、という名前のオブジェクトを返します`MyAppVar1`から、 <xref:System.Web.HttpApplicationState> 、組み込みのコレクション<xref:System.Web.HttpContext.Application%2A>オブジェクトおよびオブジェクトの新しい変数にコピーします。</span><span class="sxs-lookup"><span data-stu-id="e57c9-147">The following example returns an object named `MyAppVar1` from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.this Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.this Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.this Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.this Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Lock" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Lock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-148">
            <see cref="T:System.Web.HttpApplicationState" /> 変数へのアクセスをロックして、アクセスを同期させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-148">Locks access to an <see cref="T:System.Web.HttpApplicationState" /> variable to facilitate access synchronization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e57c9-149"><xref:System.Web.HttpApplicationState>クラスを行い、自動ロックとロック解除、<xref:System.Web.HttpApplicationState.AllKeys%2A>と<xref:System.Web.HttpApplicationState.Count%2A>プロパティおよび<xref:System.Web.HttpApplicationState.Add%2A>、 <xref:System.Web.HttpApplicationState.Clear%2A>、 <xref:System.Web.HttpApplicationState.Get%2A>、 <xref:System.Web.HttpApplicationState.GetKey%2A>、 <xref:System.Web.HttpApplicationState.Remove%2A>、<xref:System.Web.HttpApplicationState.RemoveAt%2A>と<xref:System.Web.HttpApplicationState.Set%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e57c9-149">The <xref:System.Web.HttpApplicationState> class performs automatic locking and unlocking with the <xref:System.Web.HttpApplicationState.AllKeys%2A> and <xref:System.Web.HttpApplicationState.Count%2A> properties and the <xref:System.Web.HttpApplicationState.Add%2A>, <xref:System.Web.HttpApplicationState.Clear%2A>, <xref:System.Web.HttpApplicationState.Get%2A>, <xref:System.Web.HttpApplicationState.GetKey%2A>, <xref:System.Web.HttpApplicationState.Remove%2A>, <xref:System.Web.HttpApplicationState.RemoveAt%2A> and <xref:System.Web.HttpApplicationState.Set%2A> methods.</span></span> <span data-ttu-id="e57c9-150">ただし、明示的に使用して、<xref:System.Web.HttpApplicationState.Lock%2A>と<xref:System.Web.HttpApplicationState.UnLock%2A>メソッド、一連の操作がある場合は効率的である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e57c9-150">However, explicitly using the <xref:System.Web.HttpApplicationState.Lock%2A> and <xref:System.Web.HttpApplicationState.UnLock%2A> methods when you have a series of operations may be more efficient.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e57c9-151">次の例では、<xref:System.Web.HttpApplicationState.Lock%2A>メソッドと<xref:System.Web.HttpApplicationState.UnLock%2A>メソッドを他のセッションがローカルのセッションが変更された後に、までの 2 つのアプリケーション変数の値を変更することを防ぐためにします。</span><span class="sxs-lookup"><span data-stu-id="e57c9-151">The following example uses the <xref:System.Web.HttpApplicationState.Lock%2A> method and <xref:System.Web.HttpApplicationState.UnLock%2A> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpApplicationState.UnLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e57c9-152">コレクションから削除されるオブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-152">The name of the object to be removed from the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-153">
            <see cref="T:System.Web.HttpApplicationState" /> コレクションから名前付きオブジェクトを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-153">Removes the named object from an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-154">次の例では、1 つのアプリケーション状態変数をコレクションから削除します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-154">The following example removes one application state variable from the collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Remove Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Remove Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-155">
            <see cref="T:System.Web.HttpApplicationState" /> コレクションからすべてのオブジェクトを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-155">Removes all objects from an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e57c9-156"><xref:System.Web.HttpApplicationState.RemoveAll%2A> 内部呼び出しは、<xref:System.Web.HttpApplicationState.Clear%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e57c9-156"><xref:System.Web.HttpApplicationState.RemoveAll%2A> is an internal call to <xref:System.Web.HttpApplicationState.Clear%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e57c9-157">次の例では、すべてを削除します<xref:System.Web.HttpApplicationState>コレクションの変数です。</span><span class="sxs-lookup"><span data-stu-id="e57c9-157">The following example removes all <xref:System.Web.HttpApplicationState> variables from the collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.RemoveAll Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.RemoveAll Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.RemoveAll Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.RemoveAll Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e57c9-158">削除する項目のコレクション内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-158">The position in the collection of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-159">
            <see cref="T:System.Web.HttpApplicationState" /> オブジェクトをコレクションからインデックスを使用して削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-159">Removes an <see cref="T:System.Web.HttpApplicationState" /> object from a collection by index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-160">次のコード例は、コレクションに 2 つのアプリケーションの変数を挿入し、使用して、<xref:System.Web.HttpApplicationState.RemoveAt%2A>をカスタムの最初の変数を削除する<xref:System.Web.HttpApplicationState>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e57c9-160">The following code example demonstrates how to insert two application variables into the collection, and then use the <xref:System.Web.HttpApplicationState.RemoveAt%2A> method to remove the first variable in a custom <xref:System.Web.HttpApplicationState> object.</span></span>  
  
 [!code-aspx-csharp[HttpApplicationStateRemoveAt#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpApplicationStateRemoveAt/CS/httpapplicationstate_removeatcs.aspx#1)]
 [!code-aspx-vb[HttpApplicationStateRemoveAt#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpApplicationStateRemoveAt/VB/httpapplicationstate_removeatvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Set(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(System::String ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e57c9-161">更新されるオブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-161">The name of the object to be updated.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e57c9-162">オブジェクトの更新された値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-162">The updated value of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e57c9-163">
            <see cref="T:System.Web.HttpApplicationState" /> コレクション内のオブジェクトの値を更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-163">Updates the value of an object in an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e57c9-164">次の例では、既存のアプリケーション状態変数の値を更新します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-164">The following example updates the value of an existing application state variable.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Set Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Set Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Set Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Set Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticObjects">
      <MemberSignature Language="C#" Value="public System.Web.HttpStaticObjectsCollection StaticObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpStaticObjectsCollection StaticObjects" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.StaticObjects" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticObjects As HttpStaticObjectsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpStaticObjectsCollection ^ StaticObjects { System::Web::HttpStaticObjectsCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpStaticObjectsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-165">ASP.NET アプリケーション内でスコープが "Application" に設定されている、<see langword="&lt;object&gt;" /> タグで宣言されたすべてのオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-165">Gets all objects declared by an <see langword="&lt;object&gt;" /> tag where the scope is set to "Application" within the ASP.NET application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e57c9-166">ページ上のオブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-166">A collection of objects on the page.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e57c9-167">アプリケーション オブジェクトが、Global.asax ファイル内で定義されている、`<object runat="server" scope="Application"> </object>`タグ。</span><span class="sxs-lookup"><span data-stu-id="e57c9-167">Application objects are defined in the Global.asax file inside the `<object runat="server" scope="Application"> </object>` tags.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e57c9-168">次の例に、すべてのアプリケーション オブジェクトを取得する、<xref:System.Web.HttpStaticObjectsCollection>変数オブジェクトの数が 0 より大きい場合にのみ、ルーチンを実行します。</span><span class="sxs-lookup"><span data-stu-id="e57c9-168">The following example gets all application objects into a <xref:System.Web.HttpStaticObjectsCollection> variable and executes a routine only if the number of objects is greater than 0.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.StaticObjects Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.StaticObjects Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.StaticObjects Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.StaticObjects Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnLock">
      <MemberSignature Language="C#" Value="public void UnLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.UnLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e57c9-169">
            <see cref="T:System.Web.HttpApplicationState" /> 変数へのアクセスのロックを解除して、アクセスを同期させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e57c9-169">Unlocks access to an <see cref="T:System.Web.HttpApplicationState" /> variable to facilitate access synchronization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e57c9-170"><xref:System.Web.HttpApplicationState>クラスを行い、自動ロックとロック解除、<xref:System.Web.HttpApplicationState.AllKeys%2A>と<xref:System.Web.HttpApplicationState.Count%2A>プロパティおよび<xref:System.Web.HttpApplicationState.Add%2A>、 <xref:System.Web.HttpApplicationState.Clear%2A>、 <xref:System.Web.HttpApplicationState.Get%2A>、 <xref:System.Web.HttpApplicationState.GetKey%2A>、 <xref:System.Web.HttpApplicationState.Remove%2A>、<xref:System.Web.HttpApplicationState.RemoveAt%2A>と<xref:System.Web.HttpApplicationState.Set%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e57c9-170">The <xref:System.Web.HttpApplicationState> class performs automatic locking and unlocking with the <xref:System.Web.HttpApplicationState.AllKeys%2A> and <xref:System.Web.HttpApplicationState.Count%2A> properties and the <xref:System.Web.HttpApplicationState.Add%2A>, <xref:System.Web.HttpApplicationState.Clear%2A>, <xref:System.Web.HttpApplicationState.Get%2A>, <xref:System.Web.HttpApplicationState.GetKey%2A>, <xref:System.Web.HttpApplicationState.Remove%2A>, <xref:System.Web.HttpApplicationState.RemoveAt%2A> and <xref:System.Web.HttpApplicationState.Set%2A> methods.</span></span> <span data-ttu-id="e57c9-171">ただし、明示的に使用して、<xref:System.Web.HttpApplicationState.Lock%2A>と<xref:System.Web.HttpApplicationState.UnLock%2A>メソッド、一連の操作がある場合は効率的である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e57c9-171">However, explicitly using the <xref:System.Web.HttpApplicationState.Lock%2A> and <xref:System.Web.HttpApplicationState.UnLock%2A> methods when you have a series of operations may be more efficient.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e57c9-172">次の例では、<xref:System.Web.HttpApplicationState.Lock%2A>メソッドと<xref:System.Web.HttpApplicationState.UnLock%2A>メソッドを他のセッションがローカルのセッションが変更された後に、までの 2 つのアプリケーション変数の値を変更することを防ぐためにします。</span><span class="sxs-lookup"><span data-stu-id="e57c9-172">The following example uses the <xref:System.Web.HttpApplicationState.Lock%2A> method and <xref:System.Web.HttpApplicationState.UnLock%2A> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpApplicationState.Lock" />
      </Docs>
    </Member>
  </Members>
</Type>