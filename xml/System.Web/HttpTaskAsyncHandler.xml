<Type Name="HttpTaskAsyncHandler" FullName="System.Web.HttpTaskAsyncHandler">
  <TypeSignature Language="C#" Value="public abstract class HttpTaskAsyncHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HttpTaskAsyncHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpTaskAsyncHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HttpTaskAsyncHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpTaskAsyncHandler abstract : System::Web::IHttpAsyncHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="fe437-101">非同期タスクを処理するための、派生したタスク ハンドラー クラス が実装できるメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="fe437-101">Provides methods that a derived task handler class can implement in order to process an asynchronous task.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe437-102"><xref:System.Web.HttpTaskAsyncHandler>クラスに実装しなくても、非同期タスクを処理する簡単な方法が用意されています、<xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A>と<xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fe437-102">The <xref:System.Web.HttpTaskAsyncHandler> class provides a simplified way to handle asynchronous tasks without having to implement the <xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A> and <xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A> methods.</span></span>  <span data-ttu-id="fe437-103">非同期タスクのハンドラーを作成するには、オーバーライド、<xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A>メソッドおよび実装のカスタム タスクを使用して、コードを処理します。</span><span class="sxs-lookup"><span data-stu-id="fe437-103">To create a handler for an asynchronous task, you can override the <xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A> method and implement custom task handling code.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpTaskAsyncHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpTaskAsyncHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpTaskAsyncHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe437-104"><see cref="T:System.Web.HttpTaskAsyncHandler" /> クラスを初期化するために、派生クラスのコンストラクターから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="fe437-104">Called from constructors in derived classes to initialize the <see cref="T:System.Web.HttpTaskAsyncHandler" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpTaskAsyncHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe437-105">派生クラスでオーバーライドされると、タスク ハンドラー クラスのインスタンスを別の非同期タスクに再利用できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="fe437-105">When overridden in a derived class, gets a value that indicates whether the task handler class instance can be reused for another asynchronous task.</span></span></summary>
        <value>
          <span data-ttu-id="fe437-106">ハンドラーを再利用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fe437-106"><see langword="true" /> if the handler can be reused; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="fe437-107">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="fe437-107">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="fe437-108">HTTP コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="fe437-108">The HTTP context.</span></span></param>
        <summary><span data-ttu-id="fe437-109">派生クラスでオーバーライドされると、同期タスクを処理するコードを提供します。</span><span class="sxs-lookup"><span data-stu-id="fe437-109">When overridden in a derived class, provides code that handles a synchronous task.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="fe437-110">メソッドは実装されますが、同期タスクのいかなる既定の処理も提供しません。</span><span class="sxs-lookup"><span data-stu-id="fe437-110">The method is implemented but does not provide any default handling for synchronous tasks.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequestAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task ProcessRequestAsync (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ProcessRequestAsync(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProcessRequestAsync (context As HttpContext) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Threading::Tasks::Task ^ ProcessRequestAsync(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="fe437-111">HTTP コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="fe437-111">The HTTP context.</span></span></param>
        <summary><span data-ttu-id="fe437-112">派生クラスでオーバーライドされると、非同期タスクを処理するコードを提供します。</span><span class="sxs-lookup"><span data-stu-id="fe437-112">When overridden in a derived class, provides code that handles an asynchronous task.</span></span></summary>
        <returns><span data-ttu-id="fe437-113">非同期タスク。</span><span class="sxs-lookup"><span data-stu-id="fe437-113">The asynchronous task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe437-114">非同期タスクのカスタム ハンドラーを作成するには、上書き、<xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fe437-114">To create a custom handler for an asynchronous task, override the <xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.IHttpAsyncHandler.BeginProcessRequest">
      <MemberSignature Language="C#" Value="IAsyncResult IHttpAsyncHandler.BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback cb, object extraData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function BeginProcessRequest (context As HttpContext, cb As AsyncCallback, extraData As Object) As IAsyncResult Implements IHttpAsyncHandler.BeginProcessRequest" />
      <MemberSignature Language="C++ CLI" Value=" virtual IAsyncResult ^ System.Web.IHttpAsyncHandler.BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ cb, System::Object ^ extraData) = System::Web::IHttpAsyncHandler::BeginProcessRequest;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="cb" Type="System.AsyncCallback" />
        <Parameter Name="extraData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="fe437-115">HTTP コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="fe437-115">The HTTP context.</span></span></param>
        <param name="cb"><span data-ttu-id="fe437-116">メソッドの制御が戻ったときに呼び出すコールバック メソッド。</span><span class="sxs-lookup"><span data-stu-id="fe437-116">The callback method to invoke when the method returns.</span></span></param>
        <param name="extraData"><span data-ttu-id="fe437-117">タスクを処理するための追加データ。</span><span class="sxs-lookup"><span data-stu-id="fe437-117">Additional data for processing the task.</span></span></param>
        <summary><span data-ttu-id="fe437-118">HTTP タスク ハンドラーでタスクの非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="fe437-118">Initiates asynchronous processing of a task in an HTTP task handler.</span></span></summary>
        <returns><span data-ttu-id="fe437-119">非同期操作に関するステータス情報を含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fe437-119">An object that contains status data about the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe437-120">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fe437-120">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fe437-121">これは、<xref:System.Web.HttpTaskAsyncHandler> のインスタンスが <xref:System.Web.IHttpAsyncHandler> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fe437-121">It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.IHttpAsyncHandler.EndProcessRequest">
      <MemberSignature Language="C#" Value="void IHttpAsyncHandler.EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.IHttpAsyncHandler.EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Sub EndProcessRequest (result As IAsyncResult) Implements IHttpAsyncHandler.EndProcessRequest" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult ^ result) = System::Web::IHttpAsyncHandler::EndProcessRequest;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="fe437-122">非同期操作の状態。</span><span class="sxs-lookup"><span data-stu-id="fe437-122">The status of the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="fe437-123">HTTP タスク ハンドラーでタスクの非同期操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="fe437-123">Ends asynchronous processing of a task in an HTTP task handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe437-124">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fe437-124">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fe437-125">これは、<xref:System.Web.HttpTaskAsyncHandler> のインスタンスが <xref:System.Web.IHttpAsyncHandler> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fe437-125">It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>