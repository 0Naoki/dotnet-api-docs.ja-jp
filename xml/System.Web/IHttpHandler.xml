<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="98b2f8e81292b161daf8dee4c4562f466a977207" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30607366" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="13638-101">カスタム HTTP ハンドラーを使用して HTTP Web 要求を同期的に処理するために、ASP.NET に実装するコントラクトを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="13638-101">Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13638-102">事前定義された、特定の種類の共通言語仕様 (CLS) 準拠の言語での HTTP 要求を処理するカスタム HTTP ハンドラーを記述することができます。</span><span class="sxs-lookup"><span data-stu-id="13638-102">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any Common Language Specification (CLS) compliant language.</span></span> <span data-ttu-id="13638-103">定義されている実行可能コード、`HttpHandler`これら特定の要求に応答を従来の ASP または ASP.NET Web ページではなく、クラス、します。</span><span class="sxs-lookup"><span data-stu-id="13638-103">Executable code defined in the `HttpHandler` classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests.</span></span> <span data-ttu-id="13638-104">HTTP ハンドラーは、低レベルの要求と、IIS Web サーバーの応答サービスと対話する手段を提供し、プログラミング モデルがより単純ですが、ISAPI 拡張機能と同様に機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="13638-104">HTTP handlers give you a means of interacting with the low-level request and response services of the IIS Web server and provide functionality much like ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="13638-105">それを実装する必要があります、ハンドラーには、セッション状態の値がアクセスする場合、<xref:System.Web.SessionState.IRequiresSessionState>インターフェイス (マーカー インターフェイスにメソッドを持たない)。</span><span class="sxs-lookup"><span data-stu-id="13638-105">If your handler will access session state values, it must implement the <xref:System.Web.SessionState.IRequiresSessionState> interface (a marker interface with no methods).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="13638-106">別の要求で <see cref="T:System.Web.IHttpHandler" /> インスタンスを使用できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="13638-106">Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="13638-107">
            <see cref="T:System.Web.IHttpHandler" /> インスタンスが再利用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="13638-107">
              <see langword="true" /> if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13638-108">明示的に設定する、<xref:System.Web.IHttpHandler.IsReusable%2A>プロパティを`true`または`false`をオーバーライドするコードを入力して、<xref:System.Web.IHttpHandler.IsReusable%2A>プロパティ アクセサー (get アクセス操作子) です。</span><span class="sxs-lookup"><span data-stu-id="13638-108">You explicitly set the <xref:System.Web.IHttpHandler.IsReusable%2A> property to `true` or `false` by code you provide that overrides the <xref:System.Web.IHttpHandler.IsReusable%2A> property accessor (getter).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13638-109">次のコード例では、handler.aspx をという名前のページのクライアント要求に応答の HTTP 出力ストリームに 4 つの行のテキストを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="13638-109">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="13638-110">によって handler.aspx に対するすべての要求が処理されて、`MyHttpHandler`名前空間でクラス`HandlerExample`HandlerTest.dll アセンブリに含まれています。</span><span class="sxs-lookup"><span data-stu-id="13638-110">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="13638-111">HTTP 要求を処理するために使用する、組み込みのサーバー オブジェクト (<see langword="Request" />、<see langword="Response" />、<see langword="Session" />、<see langword="Server" /> など) への参照を提供する <see cref="T:System.Web.HttpContext" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="13638-111">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, and <see langword="Server" />) used to service HTTP requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="13638-112">
            <see cref="T:System.Web.IHttpHandler" /> インターフェイスを実装するカスタム <see langword="HttpHandler" /> によって、HTTP Web 要求の処理を有効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="13638-112">Enables processing of HTTP Web requests by a custom <see langword="HttpHandler" /> that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13638-113">カスタムの配置`HttpHandler`内のコード、<xref:System.Web.IHttpHandler.ProcessRequest%2A>仮想メソッドは、次の例で示すようにします。</span><span class="sxs-lookup"><span data-stu-id="13638-113">Place your custom `HttpHandler` code in the <xref:System.Web.IHttpHandler.ProcessRequest%2A> virtual method, as shown in the following example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13638-114">次のコード例では、handler.aspx をという名前のページのクライアント要求に応答の HTTP 出力ストリームに 4 つの行のテキストを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="13638-114">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="13638-115">によって handler.aspx に対するすべての要求が処理されて、`MyHttpHandler`名前空間でクラス`HandlerExample`HandlerTest.dll アセンブリに含まれています。</span><span class="sxs-lookup"><span data-stu-id="13638-115">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>