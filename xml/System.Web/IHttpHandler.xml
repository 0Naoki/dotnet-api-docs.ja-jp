<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e5655ad9711abf55e5f8999628a276496ace8de" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70729587" /></Metadata><TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8ebe1-101">カスタム HTTP ハンドラーを使用して HTTP Web 要求を同期的に処理するために、ASP.NET に実装するコントラクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-101">Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebe1-102">カスタム HTTP ハンドラーを記述して、共通言語仕様 (CLS) 準拠の言語で、事前に定義された特定の種類の HTTP 要求を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-102">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any Common Language Specification (CLS) compliant language.</span></span> <span data-ttu-id="8ebe1-103">従来の ASP または`HttpHandler` ASP.NET Web ページではなく、クラスで定義されている実行可能コードは、これらの特定の要求に応答します。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-103">Executable code defined in the `HttpHandler` classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests.</span></span> <span data-ttu-id="8ebe1-104">HTTP ハンドラーを使用すると、IIS Web サーバーの下位レベルの要求および応答サービスと対話することができ、ISAPI 拡張と同様の機能が提供されますが、プログラミングモデルはより単純になります。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-104">HTTP handlers give you a means of interacting with the low-level request and response services of the IIS Web server and provide functionality much like ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="8ebe1-105">ハンドラーがセッション状態の値にアクセスする場合は、 <xref:System.Web.SessionState.IRequiresSessionState>インターフェイスを実装する必要があります (メソッドのないマーカーインターフェイス)。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-105">If your handler will access session state values, it must implement the <xref:System.Web.SessionState.IRequiresSessionState> interface (a marker interface with no methods).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ebe1-106">別の要求で <see cref="T:System.Web.IHttpHandler" /> インスタンスを使用できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-106">Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</span></span></summary>
        <value><span data-ttu-id="8ebe1-107"><see cref="T:System.Web.IHttpHandler" /> インスタンスが再利用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-107"><see langword="true" /> if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebe1-108">プロパティは、 <xref:System.Web.IHttpHandler.IsReusable%2A>明示的に`true`また`false`は<xref:System.Web.IHttpHandler.IsReusable%2A>プロパティアクセサー (getter) をオーバーライドするコードによって設定します。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-108">You explicitly set the <xref:System.Web.IHttpHandler.IsReusable%2A> property to `true` or `false` by code you provide that overrides the <xref:System.Web.IHttpHandler.IsReusable%2A> property accessor (getter).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ebe1-109">次のコード例では、handler という名前のページに対するクライアント要求への応答として、4行のテキストを HTTP 出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-109">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="8ebe1-110">ハンドラーのすべての要求は、アセンブリハンドラーに`MyHttpHandler`含まれる名前空間`HandlerExample`のクラスによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-110">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="8ebe1-111">HTTP 要求を処理するために使用する、組み込みのサーバー オブジェクト (<see langword="Request" />、<see langword="Response" />、<see langword="Session" />、<see langword="Server" /> など) への参照を提供する <see cref="T:System.Web.HttpContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-111">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, and <see langword="Server" />) used to service HTTP requests.</span></span></param>
        <summary><span data-ttu-id="8ebe1-112"><see cref="T:System.Web.IHttpHandler" /> インターフェイスを実装するカスタム <see langword="HttpHandler" /> によって、HTTP Web 要求の処理を有効にします。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-112">Enables processing of HTTP Web requests by a custom <see langword="HttpHandler" /> that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ebe1-113">「例」 `HttpHandler`のセクションに示されているように、 [](#examples)カスタムコードを<xref:System.Web.IHttpHandler.ProcessRequest%2A>仮想メソッドに配置します。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-113">Place your custom `HttpHandler` code in the <xref:System.Web.IHttpHandler.ProcessRequest%2A> virtual method, as shown in the [Examples](#examples) section.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="8ebe1-114">次のコード例では、handler という名前のページに対するクライアント要求への応答として、4行のテキストを HTTP 出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-114">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="8ebe1-115">ハンドラーのすべての要求は、アセンブリハンドラーに`MyHttpHandler`含まれる名前空間`HandlerExample`のクラスによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="8ebe1-115">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
