<Type Name="HttpServerUtility" FullName="System.Web.HttpServerUtility">
  <TypeSignature Language="C#" Value="public sealed class HttpServerUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpServerUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpServerUtility" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpServerUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpServerUtility sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c9b97-101">Web 要求を処理するヘルパー メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-101">Provides helper methods for processing Web requests.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-102">メソッドとプロパティの<xref:System.Web.HttpServerUtility>クラスは、組み込みを通じて公開される<xref:System.Web.HttpContext.Server%2A>ASP.NET によって提供されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-102">The methods and properties of the <xref:System.Web.HttpServerUtility> class are exposed through the intrinsic <xref:System.Web.HttpContext.Server%2A> object provided by ASP.NET.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-103">Visual Studio の Web サイト プロジェクトとソース コードは、このトピックで使用可能な:[ダウンロード](http://go.microsoft.com/fwlink/?LinkId=192870)です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-103">A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192870).</span></span>  
  
 <span data-ttu-id="c9b97-104">次の例で使用する方法、<xref:System.Web.HttpServerUtility.HtmlEncode%2A>メソッドおよび<xref:System.Web.HttpServerUtility.UrlEncode%2A>のメソッド、<xref:System.Web.HttpServerUtility>クラスです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-104">The following example demonstrates how to use the <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method and the <xref:System.Web.HttpServerUtility.UrlEncode%2A> method of the <xref:System.Web.HttpServerUtility> class.</span></span> <span data-ttu-id="c9b97-105"><xref:System.Web.HttpServerUtility.HtmlEncode%2A>メソッドにより、任意のユーザーが指定した文字列入力は実行可能なスクリプトまたは HTML 要素の代わりにブラウザーで静的なテキストとしてレンダリングされますにすることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="c9b97-105">The <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method helps ensure that any user-supplied string input will be rendered as static text in browsers instead of executable script or HTML elements.</span></span> <span data-ttu-id="c9b97-106"><xref:System.Web.HttpServerUtility.UrlEncode%2A>正しく HTTP ストリームで送信されるように、メソッドは Url をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-106">The <xref:System.Web.HttpServerUtility.UrlEncode%2A> method encodes URLs so that they are correctly transmitted in the HTTP stream.</span></span>  
  
 [!code-aspx-csharp[System.Web.HttpServerUtility1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpServerUtility1/cs/HttpServerUtilityCS.aspx#1)]
 [!code-aspx-vb[System.Web.HttpServerUtility1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpServerUtility1/vb/HttpServerUtilityVB.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.HttpContext" />
  </Docs>
  <Members>
    <Member MemberName="ClearError">
      <MemberSignature Language="C#" Value="public void ClearError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.ClearError" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearError ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearError();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9b97-107">前回の例外を削除します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-107">Clears the previous exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9b97-108">次の例では、スローされた最後の例外をクリアします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-108">The following example clears the last exception that was thrown.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.GetLastError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9b97-109">COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-109">Creates a server instance of a COM object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (progID As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(System::String ^ progID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="c9b97-110">インスタンスを作成するオブジェクトのクラスまたは型。</span><span class="sxs-lookup"><span data-stu-id="c9b97-110">The class or type of object to create an instance of.</span></span></param>
        <summary><span data-ttu-id="c9b97-111">オブジェクトのプログラム ID (ProgID) で識別されている COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-111">Creates a server instance of a COM object identified by the object's programmatic identifier (ProgID).</span></span></summary>
        <returns><span data-ttu-id="c9b97-112">新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-112">The new object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9b97-113">次の例では、オブジェクトの ProgID を使用してオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-113">The following example creates an object by using the object's ProgID.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-114">オブジェクトのインスタンスを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="c9b97-114">An instance of the object could not be created.</span></span></exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c9b97-115">作成するオブジェクトを表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-115">A <see cref="T:System.Type" /> representing the object to create.</span></span></param>
        <summary><span data-ttu-id="c9b97-116">オブジェクトの型で識別されている COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-116">Creates a server instance of a COM object identified by the object's type.</span></span></summary>
        <returns><span data-ttu-id="c9b97-117">新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-117">The new object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectFromClsid">
      <MemberSignature Language="C#" Value="public object CreateObjectFromClsid (string clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObjectFromClsid(string clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectFromClsid (clsid As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObjectFromClsid(System::String ^ clsid);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="c9b97-118">インスタンスを作成するオブジェクトのクラス ID。</span><span class="sxs-lookup"><span data-stu-id="c9b97-118">The class identifier of the object to create an instance of.</span></span></param>
        <summary><span data-ttu-id="c9b97-119">オブジェクトのクラス ID (CLSID) で識別されている COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-119">Creates a server instance of a COM object identified by the object's class identifier (CLSID).</span></span></summary>
        <returns><span data-ttu-id="c9b97-120">新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-120">The new object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9b97-121">次の例で使用する方法、<xref:System.Web.HttpServerUtility.CreateObjectFromClsid%2A>メソッドを COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-121">The following example demonstrates how to use the <xref:System.Web.HttpServerUtility.CreateObjectFromClsid%2A> method to create a server instance of a COM object.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-122">オブジェクトのインスタンスを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="c9b97-122">An instance of the object could not be created.</span></span></exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Execute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9b97-123">指定したリソースのハンドラーを現在の要求のコンテキストで実行し、そのハンドラーを起動したページに実行を戻します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-123">Executes the handler for a specified resource in the context of the current request and returns execution to the page that invoked it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-124">実行する URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-124">The URL path to execute.</span></span></param>
        <summary><span data-ttu-id="c9b97-125">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-125">Executes the handler for the specified virtual path in the context of the current request.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-126"><xref:System.Web.HttpServerUtility.Execute%2A>メソッドは、新しいページの実行が完了した後に、元のページの実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-126">The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original page after execution of the new page is completed.</span></span> <span data-ttu-id="c9b97-127"><xref:System.Web.HttpServerUtility.Transfer%2A>メソッドが別のハンドラーの実行を無条件で転送します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-127">The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.</span></span>  
  
 <span data-ttu-id="c9b97-128">ASP.NET を検証しないによって配信されるリソースを表示する現在のユーザーが許可されている、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-128">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c9b97-129">ASP.NET が直接によって示されるハンドラーを呼び出しますが、元のリソースのハンドラーが呼び出される前に、ASP.NET 認証と承認ロジックを実行、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドとは、新しいリソースの認証と承認のロジックを再実行されません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-129">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Execute%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c9b97-130">アプリケーションのセキュリティ ポリシーでは、クライアントが適切なリソースへのアクセス許可を得ている必要がある場合、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-130">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c9b97-131">使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-131">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c9b97-132"><xref:System.Web.HttpResponse.Redirect%2A> ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-132"><xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c9b97-133">このリダイレクトは、システムへの新しい要求であるために、これがインターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認のロジックに加わっています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-133">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c9b97-134">ユーザーが使用するカスタム承認メソッドを組み込むことにより、リソースを表示するアクセス許可を持っていることを確認することができます、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>アプリケーション呼び出される前にメソッド、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-134">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-135">次の例では、現在のディレクトリに"Updateinfo.aspx".aspx ページが表示されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-135">The following example displays the .aspx page "Updateinfo.aspx" in the current directory.</span></span> <span data-ttu-id="c9b97-136">Updateinfo.aspx ページが表示された後、プログラムの実行は開始ページを返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-136">Program execution returns to the starting page after the Updateinfo.aspx page is displayed.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-137">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-137">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="c9b97-138">\- または</span><span class="sxs-lookup"><span data-stu-id="c9b97-138">\- or -</span></span>  
  
 <span data-ttu-id="c9b97-139"><paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c9b97-139">An error occurred while executing the handler specified by <paramref name="path" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c9b97-140"><paramref name="path" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-140"><paramref name="path" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="c9b97-141">\- または</span><span class="sxs-lookup"><span data-stu-id="c9b97-141">\- or -</span></span>  
  
 <span data-ttu-id="c9b97-142"><paramref name="path" /> は仮想パスではありません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-142"><paramref name="path" /> is not a virtual path.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, bool preserveForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-143">実行する URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-143">The URL path to execute.</span></span></param>
        <param name="preserveForm">
          <span data-ttu-id="c9b97-144"><see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-144"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c9b97-145">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行し、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-145">Executes the handler for the specified virtual path in the context of the current request and specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9b97-146">次の例は、.aspx ページを実行する方法を示します`Updateinfo.aspx`、現在の要求と保持で、<xref:System.Web.HttpRequest.QueryString%2A>と<xref:System.Web.HttpRequest.Form%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="c9b97-146">The following example shows how to execute the .aspx page `Updateinfo.aspx` in the current request and preserve the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections.</span></span> <span data-ttu-id="c9b97-147">プログラム実行後に開始ページに戻ります`Updateinfo.aspx`が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-147">Program execution returns to the starting page after `Updateinfo.aspx` is displayed.</span></span>  
  
 [!code-csharp[HttpServerUtility.Execute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute/CS/httpserverutility.execute_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute/VB/httpserverutility.execute_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-148">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-148">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="c9b97-149">\- または</span><span class="sxs-lookup"><span data-stu-id="c9b97-149">\- or -</span></span>  
  
 <span data-ttu-id="c9b97-150"><paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c9b97-150">An error occurred while executing the handler specified by <paramref name="path" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c9b97-151"><paramref name="path" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-151"><paramref name="path" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="c9b97-152">\- または</span><span class="sxs-lookup"><span data-stu-id="c9b97-152">\- or -</span></span>  
  
 <span data-ttu-id="c9b97-153"><paramref name="path" /> は仮想パスではありません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-153"><paramref name="path" /> is not a virtual path.</span></span></exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-154">実行する URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-154">The URL path to execute.</span></span></param>
        <param name="writer"><span data-ttu-id="c9b97-155">出力を取り込む <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-155">The <see cref="T:System.IO.TextWriter" /> to capture the output.</span></span></param>
        <summary><span data-ttu-id="c9b97-156">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-156">Executes the handler for the specified virtual path in the context of the current request.</span></span> <span data-ttu-id="c9b97-157"><see cref="T:System.IO.TextWriter" /> は、実行されたハンドラーからの出力を取り込みます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-157">A <see cref="T:System.IO.TextWriter" /> captures output from the executed handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-158"><xref:System.Web.HttpServerUtility.Execute%2A>メソッドは、指定された仮想パスの実行が完了した後に、元の要求の実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-158">The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the virtual path specified is completed.</span></span> <span data-ttu-id="c9b97-159"><xref:System.Web.HttpServerUtility.Transfer%2A>メソッドが別のハンドラーの実行を無条件で転送します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-159">The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.</span></span>  
  
 <span data-ttu-id="c9b97-160">ASP.NET を検証しないによって配信されるリソースを表示する現在のユーザーが許可されている、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-160">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c9b97-161">ASP.NET が直接によって示されるハンドラーを呼び出しますが、元のリソースのハンドラーが呼び出される前に、ASP.NET 認証と承認ロジックを実行、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドとは、新しいリソースの認証と承認のロジックを再実行されません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-161">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Execute%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c9b97-162">アプリケーションのセキュリティ ポリシーでは、クライアントが適切なリソースへのアクセス許可を得ている必要がある場合、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-162">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c9b97-163">使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-163">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c9b97-164"><xref:System.Web.HttpResponse.Redirect%2A> ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-164"><xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c9b97-165">このリダイレクトは、システムへの新しい要求であるために、これがインターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認のロジックに加わっています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-165">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c9b97-166">ユーザーが使用するカスタム承認メソッドを組み込むことにより、リソースを表示するアクセス許可を持っていることを確認することができます、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>アプリケーション呼び出される前にメソッド、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-166">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-167">次の例を実行、 `Login.aspx` 、サーバーの現在のディレクトリに ページし、ページを介してから出力を受け取る、<xref:System.IO.StringWriter>オブジェクト`writer`です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-167">The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`.</span></span> <span data-ttu-id="c9b97-168">受信した HTML ストリームを書き込みます`writer`http 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c9b97-168">It writes the HTML stream received from `writer` to the HTTP output stream.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-169">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-169">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="c9b97-170">\- または</span><span class="sxs-lookup"><span data-stu-id="c9b97-170">\- or -</span></span>  
  
 <span data-ttu-id="c9b97-171"><paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c9b97-171">An error occurred while executing the handler specified by <paramref name="path" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c9b97-172"><paramref name="path" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-172"><paramref name="path" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="c9b97-173">\- または</span><span class="sxs-lookup"><span data-stu-id="c9b97-173">\- or -</span></span>  
  
 <span data-ttu-id="c9b97-174"><paramref name="path" /> は仮想パスではありません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-174"><paramref name="path" /> is not a virtual path.</span></span></exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-175">実行する URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-175">The URL path to execute.</span></span></param>
        <param name="writer"><span data-ttu-id="c9b97-176">出力を取り込む <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-176">The <see cref="T:System.IO.TextWriter" /> to capture the output.</span></span></param>
        <param name="preserveForm">
          <span data-ttu-id="c9b97-177"><see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-177"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c9b97-178">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-178">Executes the handler for the specified virtual path in the context of the current request.</span></span> <span data-ttu-id="c9b97-179"><see cref="T:System.IO.TextWriter" /> はページからの出力を取り込み、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかをブール型のパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-179">A <see cref="T:System.IO.TextWriter" /> captures output from the page and a Boolean parameter specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-180"><xref:System.Web.HttpServerUtility.Execute%2A>メソッドは、指定した仮想パスの実行が完了した後に、元の要求の実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-180">The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the specified virtual path is completed.</span></span> <span data-ttu-id="c9b97-181"><xref:System.Web.HttpServerUtility.Transfer%2A>メソッドが別のハンドラーの実行を無条件で転送します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-181">The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.</span></span>  
  
 <span data-ttu-id="c9b97-182">ASP.NET を検証しないによって配信されるリソースを表示する現在のユーザーが許可されている、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-182">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c9b97-183">ASP.NET が直接によって示されるハンドラーを呼び出しますが、元のリソースのハンドラーが呼び出される前に、ASP.NET 認証と承認ロジックを実行、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドとは、新しいリソースの認証と承認のロジックを再実行されません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-183">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Execute%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c9b97-184">アプリケーションのセキュリティ ポリシーでは、クライアントが適切なリソースへのアクセス許可を得ている必要がある場合、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-184">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c9b97-185">使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-185">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c9b97-186"><xref:System.Web.HttpResponse.Redirect%2A> ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-186"><xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c9b97-187">このリダイレクトは、システムへの新しい要求であるために、これがインターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認のロジックに加わっています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-187">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c9b97-188">ユーザーが使用するカスタム承認メソッドを組み込むことにより、リソースを表示するアクセス許可を持っていることを確認することができます、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>アプリケーション呼び出される前にメソッド、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-188">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-189">次の例を実行、 `Login.aspx` 、サーバーの現在のディレクトリに ページし、ページを介してから出力を受け取る、<xref:System.IO.StringWriter>オブジェクト`writer`です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-189">The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`.</span></span> <span data-ttu-id="c9b97-190">受信した HTML ストリームを書き込みます`writer`http 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c9b97-190">It writes the HTML stream received from `writer` to the HTTP output stream.</span></span> <span data-ttu-id="c9b97-191">内容、<xref:System.Web.HttpRequest.Form%2A>と<xref:System.Web.HttpRequest.QueryString%2A>コレクションが保持されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-191">The contents of the <xref:System.Web.HttpRequest.Form%2A> and <xref:System.Web.HttpRequest.QueryString%2A> collections are preserved.</span></span>  
  
 [!code-csharp[HttpServerUtility.Execute02#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute02/CS/httpserverutility.execute02_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute02#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute02/VB/httpserverutility.execute02_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-192">現在の <see cref="T:System.Web.HttpContext" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-192">The current <see cref="T:System.Web.HttpContext" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span>  
  
 <span data-ttu-id="c9b97-193">\- または</span><span class="sxs-lookup"><span data-stu-id="c9b97-193">\- or -</span></span>  
  
 <span data-ttu-id="c9b97-194"><paramref name="path" /> がピリオド (.) で終わっています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-194"><paramref name="path" /> ends with a period (.).</span></span>  
  
 <span data-ttu-id="c9b97-195">\- または</span><span class="sxs-lookup"><span data-stu-id="c9b97-195">\- or -</span></span>  
  
 <span data-ttu-id="c9b97-196"><paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c9b97-196">An error occurred while executing the handler specified by <paramref name="path" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c9b97-197"><paramref name="path" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-197"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c9b97-198"><paramref name="path" /> は仮想パスではありません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-198"><paramref name="path" /> is not a virtual path.</span></span></exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Web.IHttpHandler handler, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (handler As IHttpHandler, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Web::IHttpHandler ^ handler, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="c9b97-199">現在の要求の転送先となる <see cref="T:System.Web.IHttpHandler" /> を実装する HTTP ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="c9b97-199">The HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> to transfer the current request to.</span></span></param>
        <param name="writer"><span data-ttu-id="c9b97-200">出力を取り込む <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-200">The <see cref="T:System.IO.TextWriter" /> to capture the output.</span></span></param>
        <param name="preserveForm">
          <span data-ttu-id="c9b97-201"><see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-201"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c9b97-202">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-202">Executes the handler for the specified virtual path in the context of the current request.</span></span> <span data-ttu-id="c9b97-203"><see cref="T:System.IO.TextWriter" /> は実行されたハンドラーからの出力を取り込み、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかをブール型のパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-203">A <see cref="T:System.IO.TextWriter" /> captures output from the executed handler and a Boolean parameter specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-204">事前定義された、特定の種類の共通言語仕様 (CLS) に準拠した任意の言語での HTTP 要求を処理するカスタム HTTP ハンドラーを記述することができます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-204">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS).</span></span> <span data-ttu-id="c9b97-205">従来の ASP (従来の ASP とも呼ばれます) のページまたは ASP.NET ページではなく HTTP ハンドラーのクラスで定義されている実行可能コードは、これらの特定の要求に応答します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-205">Executable code that is defined in the HTTP handler classes instead of  conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests.</span></span> <span data-ttu-id="c9b97-206">低レベルの要求とインターネット インフォメーション サービス (IIS) を実行している Web サーバーの応答サービスと対話する HTTP ハンドラーを使用して、機能が類似している ISAPI 拡張機能には、プログラミング モデルがより単純です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-206">HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="c9b97-207">ASP.NET を検証しないによって配信されるリソースを表示する現在のユーザーが許可されている、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-207">ASP.NET does not verify that the current user is authorized to view the resource that is delivered by the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c9b97-208">ASP.NET が直接で示されているハンドラーを呼び出しますが、元のリソースのハンドラーが呼び出される前に、ASP.NET 認証と承認ロジックを実行、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドとは、新しいリソースの認証と承認のロジックを再実行されません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-208">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler that is indicated by the <xref:System.Web.HttpServerUtility.Execute%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c9b97-209">アプリケーションのセキュリティ ポリシーでは、クライアント リソースにアクセスするために適切な承認を許可する必要がある場合、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-209">If the security policy for your application requires clients to have appropriate authorization to gain access to the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c9b97-210">使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-210">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c9b97-211"><xref:System.Web.HttpResponse.Redirect%2A>ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-211">The <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c9b97-212">このリダイレクトは、システムへの新しい要求であるため、IIS と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認のロジックにそれが加わっています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-212">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c9b97-213">ユーザーが使用するカスタム承認メソッドを組み込むことにより、リソースを表示するアクセス許可を持っていることを確認することができます、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>アプリケーション呼び出される前にメソッド、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-213">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-214"><paramref name="handler" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c9b97-214">An error occurred while executing the handler specified by <paramref name="handler" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9b97-215"><paramref name="handler" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-215">The <paramref name="handler" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="GetLastError">
      <MemberSignature Language="C#" Value="public Exception GetLastError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetLastError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.GetLastError" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastError () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetLastError();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9b97-216">前回の例外を返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-216">Returns the previous exception.</span></span></summary>
        <returns><span data-ttu-id="c9b97-217">スローされた前回の例外。</span><span class="sxs-lookup"><span data-stu-id="c9b97-217">The previous exception that was thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9b97-218">次の例では、HTTP 出力ストリームに、アプリケーションの最後のエラーの説明を出力します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-218">The following example prints a description of the application's last error to the HTTP output stream.</span></span> <span data-ttu-id="c9b97-219">エラーが発生しなかった場合は、「エラーなし」を出力します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-219">It prints "No Errors" if no errors have been encountered.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.ClearError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9b97-220">エンコードされた文字列をデコードして、無効な HTML 文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-220">Decodes a string that has been encoded to eliminate invalid HTML characters.</span></span>  
  
 <span data-ttu-id="c9b97-221"><see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-221">To encode or decode values outside of a web application, use the <see cref="T:System.Net.WebUtility" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public string HtmlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlDecode(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-222">デコードする HTML 文字列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-222">The HTML string to decode.</span></span></param>
        <summary><span data-ttu-id="c9b97-223">HTML エンコードされた文字列をデコードし、デコードした文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-223">Decodes an HTML-encoded string and returns the decoded string.</span></span></summary>
        <returns><span data-ttu-id="c9b97-224">デコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-224">The decoded text.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-225">HTML エンコードは、テキストがブラウザーに正しく表示され、ブラウザーで HTML として解釈されないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-225">HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML.</span></span> <span data-ttu-id="c9b97-226">たとえば、テキスト文字列には、小なり記号が含まれている場合 (\<) またはそれ以上不等号 (>)、ブラウザーではこれらの文字として解釈開始タグまたは HTML タグの終わりかっこです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-226">For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag.</span></span> <span data-ttu-id="c9b97-227">文字がエンコードされた HTML の場合は、文字列に変換されます`&lt;`と`&gt;`、それが原因で、ブラウザーで、不等号記号値を超えて正しくを表示します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-227">When the characters are HTML encoded, they are converted to the strings `&lt;` and `&gt;`, which causes the browser to display the less than sign and greater than sign correctly.</span></span> <span data-ttu-id="c9b97-228"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> サーバーに転送されたテキストをデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-228"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodes text that has been transmitted to the server.</span></span>  
  
 <span data-ttu-id="c9b97-229">このメソッドは、アクセスする便利な手段、<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-229">This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-230">このメソッドを使用して内部的には、<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-230">Internally, this method uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> to decode strings.</span></span>  
  
 <span data-ttu-id="c9b97-231">ASP.NET web ページの分離コード ファイル内のインスタンスにアクセス、<xref:System.Web.HttpServerUtility>クラスを通じて、`Server`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-231">In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property.</span></span> <span data-ttu-id="c9b97-232">分離コード ファイルに含まれていないクラスで使用`HttpContext.Current.Server`のインスタンスにアクセスする、<xref:System.Web.HttpServerUtility>クラスです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-232">In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.</span></span>  
  
 <span data-ttu-id="c9b97-233">外部では、web アプリケーションを使用、<xref:System.Net.WebUtility>クラス値をエンコードまたはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-233">Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-234">次の例には、関数が含まれています。 `LoadDecodedFile`、ファイルからデータをデコードすると、1 つの文字列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-234">The following example contains the function `LoadDecodedFile`, which decodes the data from a file and copies it into one string.</span></span>  
  
 [!code-aspx-csharp[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public void HtmlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-235">デコードする HTML 文字列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-235">The HTML string to decode.</span></span></param>
        <param name="output"><span data-ttu-id="c9b97-236">デコードされた文字列を格納する <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c9b97-236">The <see cref="T:System.IO.TextWriter" /> output stream that contains the decoded string.</span></span></param>
        <summary><span data-ttu-id="c9b97-237">HTML エンコードされた文字列をデコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-237">Decodes an HTML-encoded string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-238">HTML エンコードは、テキストがブラウザーに正しく表示され、ブラウザーで HTML として解釈されないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-238">HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML.</span></span> <span data-ttu-id="c9b97-239">たとえば、テキスト文字列には、小なり記号が含まれている場合 (\<) またはそれ以上不等号 (>)、ブラウザーではこれらの文字として解釈開始タグまたは HTML タグの終わりかっこです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-239">For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag.</span></span> <span data-ttu-id="c9b97-240">文字がエンコードされた HTML の場合は、文字列に変換されます`&lt;`と`&gt;`、それが原因で、ブラウザーで、不等号記号値を超えて正しくを表示します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-240">When the characters are HTML encoded, they are converted to the strings `&lt;` and `&gt;`, which causes the browser to display the less than sign and greater than sign correctly.</span></span>  
  
 <span data-ttu-id="c9b97-241"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> サーバーに転送されたテキストをデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-241"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodes text that has been transmitted to the server.</span></span>  
  
 <span data-ttu-id="c9b97-242"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-242"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-243">内部的には、<xref:System.Web.HttpServerUtility.HtmlDecode%2A>使用<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>に文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-243">Internally, <xref:System.Web.HttpServerUtility.HtmlDecode%2A> uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> to decode strings.</span></span>  
  
 <span data-ttu-id="c9b97-244"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-244">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-245">次の例では、HTML エンコードされた送信用 HTTP 経由で文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-245">The following example decodes a string that has been HTML-encoded for transmission over HTTP.</span></span> <span data-ttu-id="c9b97-246">という名前の指定された文字列をデコード`EncodedString`テキストが含まれています"これは、&lt;テスト文字列&gt;."、という名前の文字列にコピーして`DecodedString`として"これは、\<テスト文字列 > です。"です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-246">It decodes the supplied string named `EncodedString` which contains the text "This is a &lt;Test String&gt;.", and copies it into the string named `DecodedString` as "This is a \<Test String>.".</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9b97-247">ブラウザーに表示される文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-247">Encodes a string to be displayed in a browser.</span></span>  
  
 <span data-ttu-id="c9b97-248"><see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-248">To encode or decode values outside of a web application, use the <see cref="T:System.Net.WebUtility" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public string HtmlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlEncode(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-249">エンコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-249">The text string to encode.</span></span></param>
        <summary><span data-ttu-id="c9b97-250">文字列を HTML エンコードし、エンコードされた文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-250">HTML-encodes a string and returns the encoded string.</span></span></summary>
        <returns><span data-ttu-id="c9b97-251">HTML エンコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-251">The HTML-encoded text.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-252">HTML エンコードは、テキストがブラウザーに正しく表示され、ブラウザーで HTML として解釈されないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-252">HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML.</span></span> <span data-ttu-id="c9b97-253">たとえば、テキスト文字列には、小なり記号が含まれている場合 (\<) またはそれ以上不等号 (>)、ブラウザーではこれらの文字として解釈開始タグまたは HTML タグの終わりかっこです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-253">For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag.</span></span> <span data-ttu-id="c9b97-254">文字がエンコードされた HTML の場合は、文字列に変換されます`&lt;`と`&gt;`、それが原因で、ブラウザーで、不等号記号値を超えて正しくを表示します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-254">When the characters are HTML encoded, they are converted to the strings `&lt;` and `&gt;`, which causes the browser to display the less than sign and greater than sign correctly.</span></span>  
  
 <span data-ttu-id="c9b97-255">このメソッドは、アクセスする便利な手段、<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-255">This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-256">このメソッドを使用して内部的には、<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-256">Internally, this method uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c9b97-257">ASP.NET web ページの分離コード ファイル内のインスタンスにアクセス、<xref:System.Web.HttpServerUtility>クラスを通じて、`Server`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-257">In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property.</span></span> <span data-ttu-id="c9b97-258">分離コード ファイルに含まれていないクラスで使用`HttpContext.Current.Server`のインスタンスにアクセスする、<xref:System.Web.HttpServerUtility>クラスです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-258">In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.</span></span>  
  
 <span data-ttu-id="c9b97-259">外部では、web アプリケーションを使用、<xref:System.Net.WebUtility>クラス値をエンコードまたはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-259">Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-260">次の例では、方法に値を HTML エンコードする可能性のあるコードのアンセーフ コードを示します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-260">The following example shows how to HTML-encode a value that potentially codes unsafe code.</span></span> <span data-ttu-id="c9b97-261">コードは、web ページの分離コード ファイルに存在します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-261">The code resides in the code-behind file for a web page.</span></span> <span data-ttu-id="c9b97-262">エンコードする値は、のみを例を簡略化し、HTML エンコードする場合があります値の型を表示するには、この例では、ハードコーディングです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-262">The value to encode is hard-coded in this example only to simplify the example and show the type of value you might HTML-encode.</span></span> <span data-ttu-id="c9b97-263">通常は HTML エンコードをユーザーまたは要求から受信した値です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-263">Typically, you would HTML-encode a value that you received from the user or the request.</span></span> <span data-ttu-id="c9b97-264">`Result` 指す、`Literal`コントロール。</span><span class="sxs-lookup"><span data-stu-id="c9b97-264">`Result` refers to a `Literal` control.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/default.aspx.vb#1)]  
  
 <span data-ttu-id="c9b97-265">次の例は似ていますが、前の例を示して 方法を HTML エンコードするクラス内の値されていないこと、分離コード ファイル。</span><span class="sxs-lookup"><span data-stu-id="c9b97-265">The next example is similar to the previous example except it shows how to HTML-encode a value from within a class that is not in the code-behind file.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public void HtmlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-266">エンコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-266">The string to encode.</span></span></param>
        <param name="output"><span data-ttu-id="c9b97-267">エンコードされた文字列を格納している <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c9b97-267">The <see cref="T:System.IO.TextWriter" /> output stream that contains the encoded string.</span></span></param>
        <summary><span data-ttu-id="c9b97-268">文字列を HTML エンコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-268">HTML-encodes a string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-269">HTML エンコーディングとは、ブラウザーで、ブラウザーで HTML として解釈されないテキストが正しく表示されることすることを確認します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-269">HTML encoding ensures that text will be correctly displayed in the browser, not interpreted by the browser as HTML.</span></span> <span data-ttu-id="c9b97-270">たとえば、テキスト文字列には、小なり記号が含まれている場合 (\<) またはそれ以上不等号 (>)、ブラウザーではこれらの文字として解釈開始タグまたは HTML タグの終わりかっこです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-270">For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as an opening or closing bracket of an HTML tag.</span></span> <span data-ttu-id="c9b97-271">これら 2 つの文字の HTML エンコードでは`&lt;`と`&gt;`、それぞれ、それが原因で、ブラウザーで、不等号記号値を超えて正しくを表示します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-271">The HTML encoding of these two characters is `&lt;` and `&gt;`, respectively, which causes the browser to display the less than sign and greater than sign correctly.</span></span>  
  
 <span data-ttu-id="c9b97-272"><xref:System.Web.HttpServerUtility.HtmlEncode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-272"><xref:System.Web.HttpServerUtility.HtmlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-273">内部的には、<xref:System.Web.HttpServerUtility.HtmlEncode%2A>使用<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-273">Internally, <xref:System.Web.HttpServerUtility.HtmlEncode%2A> uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c9b97-274"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-274">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-275">次の例では、http 伝送用の文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-275">The following example encodes a string for transmission by HTTP.</span></span> <span data-ttu-id="c9b97-276">という名前の文字列をエンコード`TestString`、テキストが含まれています"これは、\<テスト文字列 > です。"、という名前の文字列にコピーすると`EncodedString`として"これは、&lt;テスト文字列&gt;。"です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-276">It encodes the string named `TestString`, which contains the text "This is a \<Test String>.", and copies it into the string named `EncodedString` as "This is a &lt;Test String&gt;.".</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9b97-277">サーバーのコンピューター名を取得します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-277">Gets the server's computer name.</span></span></summary>
        <value><span data-ttu-id="c9b97-278">ローカル コンピューターの名前。</span><span class="sxs-lookup"><span data-stu-id="c9b97-278">The name of the local computer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9b97-279">次の例では、文字列変数として、サーバーのコンピューター名を格納します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-279">The following example stores the server's computer name as a string variable.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-280">コンピューター名が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-280">The computer name cannot be found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-281">Web アプリケーション内の仮想パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-281">The virtual path in the Web application.</span></span></param>
        <summary><span data-ttu-id="c9b97-282">指定した仮想パスに対応する物理ファイル パスを返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-282">Returns the physical file path that corresponds to the specified virtual path.</span></span></summary>
        <returns><span data-ttu-id="c9b97-283"><paramref name="path" /> に対応する、Web サーバー上の物理ファイル パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-283">The physical file path on the Web server that corresponds to <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-284">場合`path`は`null`、<xref:System.Web.HttpServerUtility.MapPath%2A>メソッド パスの現在の要求を格納するディレクトリの完全な物理パスを返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-284">If `path` is `null`, the <xref:System.Web.HttpServerUtility.MapPath%2A> method returns the full physical path of the directory that contains the current request for the path.</span></span> <span data-ttu-id="c9b97-285">相対パスは、既存のファイルまたはフォルダーの値を返すには、このメソッドを指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-285">The relative path does not need to specify an existing file or folder for this method to return a value.</span></span> <span data-ttu-id="c9b97-286">ただし、Web アプリケーションの外部でパスを指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-286">However, you cannot specify a path outside of the Web application.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c9b97-287"><xref:System.Web.HttpServerUtility.MapPath%2A>メソッドに可能性のあるホスティング環境に関する機密情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-287">The <xref:System.Web.HttpServerUtility.MapPath%2A> method potentially contains sensitive information about the hosting environment.</span></span> <span data-ttu-id="c9b97-288">戻り値をユーザーに表示されません必要があります。</span><span class="sxs-lookup"><span data-stu-id="c9b97-288">The return value should not be displayed to users.</span></span>  
  
 <span data-ttu-id="c9b97-289">Web アプリケーションに存在する`C:\ExampleSites\TestMapPath`は、次の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-289">A Web application that resides at `C:\ExampleSites\TestMapPath` would return the following results:</span></span>  
  
|<span data-ttu-id="c9b97-290">要求します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-290">Request from</span></span>|`path`|<span data-ttu-id="c9b97-291">戻り値</span><span class="sxs-lookup"><span data-stu-id="c9b97-291">Returned value</span></span>|  
|------------------|------------|--------------------|  
|<span data-ttu-id="c9b97-292">RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c9b97-292">RootLevelPage.aspx</span></span>|`null`|<span data-ttu-id="c9b97-293">C:\ExampleSites\TestMapPath</span><span class="sxs-lookup"><span data-stu-id="c9b97-293">C:\ExampleSites\TestMapPath</span></span>|  
|<span data-ttu-id="c9b97-294">RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c9b97-294">RootLevelPage.aspx</span></span>|<span data-ttu-id="c9b97-295">"/DownOneLevel/DownLevelPage.aspx"</span><span class="sxs-lookup"><span data-stu-id="c9b97-295">"/DownOneLevel/DownLevelPage.aspx"</span></span>|<span data-ttu-id="c9b97-296">C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c9b97-296">C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx</span></span>|  
|<span data-ttu-id="c9b97-297">RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c9b97-297">RootLevelPage.aspx</span></span>|<span data-ttu-id="c9b97-298">"/NotRealFolder"</span><span class="sxs-lookup"><span data-stu-id="c9b97-298">"/NotRealFolder"</span></span>|<span data-ttu-id="c9b97-299">C:\ExampleSites\TestMapPath\NotRealFolder</span><span class="sxs-lookup"><span data-stu-id="c9b97-299">C:\ExampleSites\TestMapPath\NotRealFolder</span></span>|  
|<span data-ttu-id="c9b97-300">RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c9b97-300">RootLevelPage.aspx</span></span>|<span data-ttu-id="c9b97-301">"../OutsideApplication"</span><span class="sxs-lookup"><span data-stu-id="c9b97-301">"../OutsideApplication"</span></span>|<xref:System.Web.HttpException>|  
|<span data-ttu-id="c9b97-302">/DownOneLevel/DownLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c9b97-302">/DownOneLevel/DownLevelPage.aspx</span></span>|`null`|<span data-ttu-id="c9b97-303">C:\ExampleSites\TestMapPath\DownOneLevel</span><span class="sxs-lookup"><span data-stu-id="c9b97-303">C:\ExampleSites\TestMapPath\DownOneLevel</span></span>|  
|<span data-ttu-id="c9b97-304">/DownOneLevel/DownLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c9b97-304">/DownOneLevel/DownLevelPage.aspx</span></span>|<span data-ttu-id="c9b97-305">"../RootLevelPage.aspx"</span><span class="sxs-lookup"><span data-stu-id="c9b97-305">"../RootLevelPage.aspx"</span></span>|<span data-ttu-id="c9b97-306">C:\ExampleSites\TestMapPath\RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c9b97-306">C:\ExampleSites\TestMapPath\RootLevelPage.aspx</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-307">次の例では、相対仮想パスの物理ファイルを取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-307">The following example shows how to retrieve the physical file of a relative virtual path.</span></span> <span data-ttu-id="c9b97-308">コードは、web ページの分離コード ファイル内に存在し、既定値を利用して`Server`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-308">The code resides in the code-behind file for a web page and utilizes the default `Server` object.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/default.aspx.vb#1)]  
  
 <span data-ttu-id="c9b97-309">次の例は似ていますが、前の例に、分離コード ファイルに含まれていないクラス内からの物理パスを取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-309">The next example is similar to the previous example except it shows how to retrieve a physical path from within a class that is not in the code-behind file.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-310">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-310">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span>
        
<span data-ttu-id="c9b97-311">- または -</span><span class="sxs-lookup"><span data-stu-id="c9b97-311">-or-</span></span> 
        
<span data-ttu-id="c9b97-312"><paramref name="path" /> は物理パスです。仮想パスを指定してください。</span><span class="sxs-lookup"><span data-stu-id="c9b97-312"><paramref name="path" /> is a physical path, but a virtual path was expected.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptTimeout">
      <MemberSignature Language="C#" Value="public int ScriptTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScriptTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScriptTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9b97-313">要求タイムアウト値を秒単位で取得し、設定します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-313">Gets and sets the request time-out value in seconds.</span></span></summary>
        <value><span data-ttu-id="c9b97-314">要求のタイムアウト値設定。</span><span class="sxs-lookup"><span data-stu-id="c9b97-314">The time-out value setting for requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-315"><xref:System.Web.HttpServerUtility.ScriptTimeout%2A>プロパティは、設定を Web.config ファイルで設定できる、`executionTimeout`要素の属性です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-315">The <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> property can be set in the Web.config file by setting the `executionTimeout` attribute of the  element.</span></span> <span data-ttu-id="c9b97-316">使用したプログラムによるタイムアウトの設定、<xref:System.Web.HttpServerUtility.ScriptTimeout%2A>プロパティがこの Web.config 設定より優先されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-316">Setting the time-out programmatically with the <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> property takes precedence over the Web.config setting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9b97-317">設定した場合、`debug`する要素の属性`true`Web.config ファイルの値で<xref:System.Web.HttpServerUtility.ScriptTimeout%2A>は無視されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-317">If you set the `debug` attribute of the  element to `true` in the Web.config file, the value of <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> will be ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-318">次の例では、60 秒を要求のタイムアウト時間を設定します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-318">The following example sets the request time-out period to 60 seconds.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-319">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-319">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9b97-320">タイムアウト時間が <see langword="null" /> です。または、それ以外の設定ができませんでした。</span><span class="sxs-lookup"><span data-stu-id="c9b97-320">The time-out period is <see langword="null" /> or otherwise could not be set.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transfer">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9b97-321">現在のページの実行を終了し、現在の要求に対して新しいページの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-321">Terminates execution of the current page and starts execution of a new page for the current request.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-322">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-322">The URL path of the new page on the server to execute.</span></span></param>
        <summary><span data-ttu-id="c9b97-323">現在の要求に対して、現在のページの実行を終了し、指定された URL パスを使用して新しいページの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-323">For the current request, terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-324">転送先のページには、別の .aspx ページをする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c9b97-324">The page transferred to should be another .aspx page.</span></span> <span data-ttu-id="c9b97-325">たとえば、.asp ファイルまたは .asmx ページへの転送が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-325">For instance, a transfer to an .asp or .asmx page is not valid.</span></span> <span data-ttu-id="c9b97-326"><xref:System.Web.HttpServerUtility.Transfer%2A>メソッドが保持されます、<xref:System.Web.HttpRequest.QueryString%2A>と<xref:System.Web.HttpRequest.Form%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="c9b97-326">The <xref:System.Web.HttpServerUtility.Transfer%2A> method preserves the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections.</span></span>  
  
 <span data-ttu-id="c9b97-327"><xref:System.Web.HttpServerUtility.Transfer%2A> 呼び出し<xref:System.Web.HttpResponse.End%2A>、どのがスローされます、<xref:System.Threading.ThreadAbortException>完了時に例外です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-327"><xref:System.Web.HttpServerUtility.Transfer%2A> calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.</span></span>  
  
 <span data-ttu-id="c9b97-328">ASP.NET を検証しないによって配信されるリソースを表示する現在のユーザーが許可されている、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-328">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c9b97-329">ASP.NET が直接によって示されるハンドラーを呼び出しますが、元のリソースのハンドラーが呼び出される前に、ASP.NET 認証と承認ロジックを実行、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドとは、新しいリソースの認証と承認のロジックを再実行されません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-329">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Transfer%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c9b97-330">アプリケーションのセキュリティ ポリシーでは、クライアントが適切なリソースへのアクセス許可を得ている必要がある場合、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-330">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c9b97-331">使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-331">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c9b97-332"><xref:System.Web.HttpResponse.Redirect%2A>メソッドは、ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-332">The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c9b97-333">このリダイレクトは、システムへの新しい要求であるために、これがインターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認のロジックに加わっています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-333">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c9b97-334">ユーザーが使用するカスタム承認メソッドを組み込むことにより、リソースを表示するアクセス許可を持っていることを確認することができます、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>アプリケーション呼び出される前にメソッド、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-334">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path, bool preserveForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-335">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-335">The URL path of the new page on the server to execute.</span></span></param>
        <param name="preserveForm">
          <span data-ttu-id="c9b97-336"><see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-336"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c9b97-337">現在のページの実行を終了し、指定された URL パスを使用して新しいページの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-337">Terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.</span></span> <span data-ttu-id="c9b97-338"><see cref="P:System.Web.HttpRequest.QueryString" /> コレクションと <see cref="P:System.Web.HttpRequest.Form" /> コレクションを削除するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-338">Specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-339">転送先のページには、別の .aspx ページをする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c9b97-339">The page transferred to should be another .aspx page.</span></span> <span data-ttu-id="c9b97-340">たとえば、.asp ファイルまたは .asmx ページへの転送が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-340">For instance, a transfer to an .asp or .asmx page is not valid.</span></span>  
  
 <span data-ttu-id="c9b97-341"><xref:System.Web.HttpServerUtility.Transfer%2A> 呼び出し<xref:System.Web.HttpResponse.End%2A>、どのがスローされます、<xref:System.Threading.ThreadAbortException>完了時に例外です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-341"><xref:System.Web.HttpServerUtility.Transfer%2A> calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.</span></span>  
  
 <span data-ttu-id="c9b97-342">設定した場合、`preserveForm`パラメーターを`true`、対象のページは、前のページのビュー ステートを使用してアクセスするようになります、<xref:System.Web.UI.Page.PreviousPage%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-342">If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.</span></span>  
  
 <span data-ttu-id="c9b97-343">セキュリティのために、おく必要があります、`enableViewStateMac`属性に設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-343">For security purposes, you should keep the `enableViewStateMac` attribute set to `true`.</span></span> <span data-ttu-id="c9b97-344">ASP.NET を検証しないによって配信されるリソースを表示する現在のユーザーが許可されている、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-344">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c9b97-345">ASP.NET が直接によって示されるハンドラーを呼び出しますが、元のリソースのハンドラーが呼び出される前に、ASP.NET 認証と承認ロジックを実行、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドとは、新しいリソースの認証と承認のロジックを再実行されません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-345">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Transfer%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c9b97-346">アプリケーションのセキュリティ ポリシーでは、クライアントが適切なリソースへのアクセス許可を得ている必要がある場合、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-346">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c9b97-347">使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-347">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c9b97-348"><xref:System.Web.HttpResponse.Redirect%2A>メソッドは、ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-348">The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c9b97-349">このリダイレクトは、システムへの新しい要求であるために、これがインターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認のロジックに加わっています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-349">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c9b97-350">ユーザーが使用するカスタム承認メソッドを組み込むことにより、リソースを表示するアクセス許可を持っていることを確認することができます、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>アプリケーション呼び出される前にメソッド、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-350">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-351">次の例では、現在のページと同じディレクトリに新しいページを実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-351">The following example executes a new page in the same directory as the current page.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="c9b97-352">現在のページ要求がコールバックです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-352">The current page request is a callback.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(class System.Web.IHttpHandler handler, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (handler As IHttpHandler, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::Web::IHttpHandler ^ handler, bool preserveForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="c9b97-353">現在の要求の転送先となる <see cref="T:System.Web.IHttpHandler" /> を実装する HTTP ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="c9b97-353">The HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> to transfer the current request to.</span></span></param>
        <param name="preserveForm">
          <span data-ttu-id="c9b97-354"><see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-354"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c9b97-355">現在のページの実行を終了し、カスタム HTTP ハンドラーを使用して新しい要求の実行を開始します。このハンドラーは、<see cref="T:System.Web.IHttpHandler" /> インターフェイスを実装し、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-355">Terminates execution of the current page and starts execution of a new request by using a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface and specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-356">事前定義された、特定の種類の共通言語仕様 (CLS) に準拠した任意の言語での HTTP 要求を処理するカスタム HTTP ハンドラーを記述することができます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-356">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS).</span></span> <span data-ttu-id="c9b97-357">従来の ASP (従来の ASP とも呼ばれます) のページまたは ASP.NET ページではなく HTTP ハンドラーのクラスで定義されている実行可能コードは、これらの特定の要求に応答します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-357">Executable code that is defined in the HTTP handler classes instead of conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests.</span></span> <span data-ttu-id="c9b97-358">低レベルの要求とインターネット インフォメーション サービス (IIS) を実行している Web サーバーの応答サービスと対話する HTTP ハンドラーを使用して、機能が類似している ISAPI 拡張機能には、プログラミング モデルがより単純です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-358">HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="c9b97-359">設定した場合、`preserveForm`パラメーターを`true`、対象のページは、前のページのビュー ステートを使用してアクセスするようになります、<xref:System.Web.UI.Page.PreviousPage%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-359">If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.</span></span>  
  
 <span data-ttu-id="c9b97-360">セキュリティのために、おく必要があります、`enableViewStateMac`属性に設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-360">For security purposes, you should keep the `enableViewStateMac` attribute set to `true`.</span></span> <span data-ttu-id="c9b97-361">ASP.NET を検証しないによって配信されるリソースを表示する現在のユーザーが許可されている、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-361">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c9b97-362">ASP.NET が直接によって示されるハンドラーを呼び出しますが、元のリソースのハンドラーが呼び出される前に、ASP.NET 認証と承認ロジックを実行、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド、および新しいリソースの再実行されませんが認証および承認ロジック。</span><span class="sxs-lookup"><span data-stu-id="c9b97-362">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Transfer%2A> method, and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c9b97-363">アプリケーションのセキュリティ ポリシーでは、クライアントが適切なリソースへのアクセス許可を得ている必要がある場合、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-363">If the security policy for your application requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c9b97-364">使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-364">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c9b97-365"><xref:System.Web.HttpResponse.Redirect%2A>メソッドは、ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-365">The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c9b97-366">このリダイレクトは、システムへの新しい要求であるため、IIS と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認のロジックにそれが加わっています。</span><span class="sxs-lookup"><span data-stu-id="c9b97-366">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c9b97-367">ユーザーが使用するカスタム承認メソッドを組み込むことにより、リソースを表示するアクセス許可を持っていることを確認することができます、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>アプリケーション呼び出される前にメソッド、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-367">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="c9b97-368">現在のページ要求がコールバックです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-368">The current page request is a callback.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransferRequest">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9b97-369">指定した URL の非同期実行を行います。</span><span class="sxs-lookup"><span data-stu-id="c9b97-369">Performs an asynchronous execution of the specified URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-370"><xref:System.Web.HttpServerUtility.TransferRequest%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="c9b97-370"><xref:System.Web.HttpServerUtility.TransferRequest%2A> was introduced in the .NET Framework version 3.5.</span></span> <span data-ttu-id="c9b97-371">.NET Framework の概要については、次を参照してください。[バージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-371">For summary information about the .NET Framework, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-372">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-372">The URL path of the new page on the server to execute.</span></span></param>
        <summary><span data-ttu-id="c9b97-373">指定した URL の非同期実行を行います。</span><span class="sxs-lookup"><span data-stu-id="c9b97-373">Performs an asynchronous execution of the specified URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-374">このメソッドのオーバー ロードを呼び出す、<xref:System.Web.HttpServerUtility.TransferRequest%2A>を持つオーバー ロード、`preserveForm`パラメーターに設定`false`、`method`パラメーターに設定`null`、`headers`パラメーターに設定`null`、および`preserveUser`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-374">This method overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to `false`, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`.</span></span> <span data-ttu-id="c9b97-375">詳細については、「解説」セクションを参照してください。<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-375">For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c9b97-376">この要求を実行するには、[!INCLUDE[iisver](~/includes/iisver-md.md)] の統合パイプライン モードが必要です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-376">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/includes/iisver-md.md)].</span></span></exception>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-377">要求を処理するサーバーが使用できません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-377">The server is not available to handle the request.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9b97-378"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-378">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9b97-379"><paramref name="path" /> パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-379">The <paramref name="path" /> parameter is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-380">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-380">The URL path of the new page on the server to execute.</span></span></param>
        <param name="preserveForm">
          <span data-ttu-id="c9b97-381"><see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-381"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.Form" /> collection; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.Form" /> collection.</span></span></param>
        <summary><span data-ttu-id="c9b97-382">指定した URL の非同期実行を行い、クエリ文字列パラメーターを保持します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-382">Performs an asynchronous execution of the specified URL and preserves query string parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-383">このオーバー ロードを呼び出す、<xref:System.Web.HttpServerUtility.TransferRequest%2A>を持つオーバー ロード、`preserveForm`パラメーターに、渡された値を設定、`method`パラメーターに設定`null`、`headers`パラメーターに設定`null`、および`preserveUser`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-383">This overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to the value passed in, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`.</span></span> <span data-ttu-id="c9b97-384">詳細については、「解説」セクションを参照してください。<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-384">For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.</span></span>  
  
 <span data-ttu-id="c9b97-385"><xref:System.Web.HttpServerUtility.TransferRequest%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="c9b97-385"><xref:System.Web.HttpServerUtility.TransferRequest%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="c9b97-386">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c9b97-386">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c9b97-387">この要求を実行するには、[!INCLUDE[iisver](~/includes/iisver-md.md)] の統合パイプライン モードが必要です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-387">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/includes/iisver-md.md)].</span></span></exception>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-388">要求を処理するサーバーが使用できません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-388">The server is not available to handle the request.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9b97-389"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-389">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9b97-390"><paramref name="path" /> パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-390">The <paramref name="path" /> parameter is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-391">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-391">The URL path of the new page on the server to execute.</span></span></param>
        <param name="preserveForm">
          <span data-ttu-id="c9b97-392"><see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-392"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.Form" /> collection; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.Form" /> collection.</span></span></param>
        <param name="method"><span data-ttu-id="c9b97-393">新しい要求の実行で使用する HTTP メソッド。</span><span class="sxs-lookup"><span data-stu-id="c9b97-393">The HTTP method to use in the execution of the new request.</span></span></param>
        <param name="headers"><span data-ttu-id="c9b97-394">新しい要求の要求ヘッダーの <see cref="T:System.Collections.Specialized.NameValueCollection" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-394">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of request headers for the new request.</span></span></param>
        <summary><span data-ttu-id="c9b97-395">指定した HTTP メソッドおよびヘッダーを使用して、指定した URL の非同期実行を行います。</span><span class="sxs-lookup"><span data-stu-id="c9b97-395">Performs an asynchronous execution of the specified URL using the specified HTTP method and headers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-396">このメソッドは、統合パイプライン モードでを実行するときは使用[!INCLUDE[iisver](~/includes/iisver-md.md)]正しい要求コンテキストを持つ対象の要求の実行中に 1 つのリソースの種類から別に転送する要求の処理を許可します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-396">This method is used when running with the integrated pipeline mode in [!INCLUDE[iisver](~/includes/iisver-md.md)] to allow request processing to be transferred from one resource type to another while executing the target request with the correct request context.</span></span> <span data-ttu-id="c9b97-397">たとえば、使用することができます、 <xref:System.Web.HttpServerUtility.TransferRequest%2A> XML ページに対する要求に ASPX ページの要求を転送する方法です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-397">For example, you can use the <xref:System.Web.HttpServerUtility.TransferRequest%2A> method to transfer a request for an ASPX page to a request for an XML page.</span></span>  
  
 <span data-ttu-id="c9b97-398"><xref:System.Web.HttpServerUtility.TransferRequest%2A>メソッドは、指定された URL は次の条件の実行を非同期の子を実行します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-398">The <xref:System.Web.HttpServerUtility.TransferRequest%2A> method performs an asynchronous child execution of the specified URL with the following conditions:</span></span>  
  
-   <span data-ttu-id="c9b97-399">場合、`path`パラメーター クエリ文字列を指定する、新しいクエリ文字列として使用されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-399">If the `path` parameter specifies a query string, it will be used as the new query string.</span></span> <span data-ttu-id="c9b97-400">クエリ文字列が含まれていない場合、要求のクエリ文字列は再利用されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-400">If no query string is included, the query string of the request will be re-used.</span></span>  
  
-   <span data-ttu-id="c9b97-401">場合、`method`パラメーターを指定すると、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-401">If the `method` parameter is specified, it will be used.</span></span> <span data-ttu-id="c9b97-402">場合は`null`、元の要求の HTTP メソッドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-402">If it is `null`, the HTTP method of the original request will be used.</span></span>  
  
-   <span data-ttu-id="c9b97-403">場合、`preserveForm`パラメーターは`true`要求の現在のエンティティ ボディが対象の要求を使用できます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-403">If the `preserveForm` parameter is `true`, the current entity body of the request will be available to the target request.</span></span> <span data-ttu-id="c9b97-404">これにより、により、フォーム ポストし、転送にアップロードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-404">This allows form posts and uploads to be transferred.</span></span>  
  
-   <span data-ttu-id="c9b97-405">ユーザー id が元の要求に設定されている場合、id は、新しい要求に転送されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-405">If the user identity is currently set on the original request, the identity will be transferred to the new request.</span></span> <span data-ttu-id="c9b97-406">これにより、認証済みの要求で新しい要求の認証の結果を再利用できます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-406">This allows authenticated requests to re-use the result of the authentication for the new request.</span></span> <span data-ttu-id="c9b97-407">ユーザーを転送するしたくない場合は、ユーザーを設定`null`転送する前に元の要求にします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-407">If you do not want the user to be transferred, set the user to `null` on the original request before transferring.</span></span>  
  
-   <span data-ttu-id="c9b97-408">場合、`headers`パラメーターを指定すると、新しい要求が、指定したヘッダーで実行されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-408">If the `headers` parameter is specified, the new request will execute with the specified headers.</span></span> <span data-ttu-id="c9b97-409">これにより、要求ヘッダーと、新しい要求の cookie を変更するために使用するか、元の要求の受信場所を指定する特殊なヘッダーを追加します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-409">This can be used to modify the request headers and cookies for the new request, or add a special header that specifies where the original request was received.</span></span>  
  
     <span data-ttu-id="c9b97-410">このメソッドは、<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29>メソッドのオーバー ロードで、`preserveUser`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-410">This method calls the <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> method overload with the `preserveUser` parameter set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c9b97-411">この要求を実行するには、統合モードで実行している [!INCLUDE[iisver](~/includes/iisver-md.md)] が必要です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-411">The request requires [!INCLUDE[iisver](~/includes/iisver-md.md)] running in integrated mode.</span></span></exception>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-412">要求を処理するサーバーが使用できません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-412">The server is not available to handle the request.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9b97-413"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-413">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9b97-414"><paramref name="path" /> パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-414">The <paramref name="path" /> parameter is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers, bool preserveUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection, preserveUser As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers, bool preserveUser);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="preserveUser" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c9b97-415">パス。</span><span class="sxs-lookup"><span data-stu-id="c9b97-415">The path.</span></span></param>
        <param name="preserveForm">
          <span data-ttu-id="c9b97-416"><see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-416"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.Form" /> collection; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.Form" /> collection.</span></span></param>
        <param name="method"><span data-ttu-id="c9b97-417">新しい要求で使用する HTTP メソッド。</span><span class="sxs-lookup"><span data-stu-id="c9b97-417">The HTTP method to use in the new request.</span></span></param>
        <param name="headers"><span data-ttu-id="c9b97-418">新しい要求の要求ヘッダーを含む <see cref="T:System.Collections.Specialized.NameValueCollection" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-418">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> object that contains request headers for the new request.</span></span></param>
        <param name="preserveUser">
          <span data-ttu-id="c9b97-419">ユーザー id を保持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9b97-419"><see langword="true" /> to preserve the user identity; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="c9b97-420">このメソッドの他のメソッド オーバーロードは、このパラメーターが <see langword="true" /> に設定された状態でこのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-420">The other method overloads of this method call this overload with this parameter set to <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c9b97-421">指定した HTTP メソッド、ヘッダー、およびパスを使用して、指定した URL の非同期実行を実行します。また、任意でユーザー id とフォーム値を保持します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-421">Performs an asynchronous execution of the specified URL using the specified HTTP method, headers, and path, and optionally preserves form values and the user identity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-422">詳細については、「解説」セクションを参照してください。<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-422">For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c9b97-423">この要求を実行するには、[!INCLUDE[iisver](~/includes/iisver-md.md)] の統合パイプライン モードが必要です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-423">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/includes/iisver-md.md)].</span></span></exception>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c9b97-424">要求を処理するサーバーが使用できません。</span><span class="sxs-lookup"><span data-stu-id="c9b97-424">The server is not available to handle the request.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9b97-425"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-425">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9b97-426"><paramref name="path" /> パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-426">The <paramref name="path" /> parameter is invalid.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9b97-427">HTTP 伝送用にエンコードされた文字列をデコードし、URL の形でサーバーに送信します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-427">Decodes a string that was encoded for HTTP transmission and then sent to the server in a URL.</span></span>  
  
 <span data-ttu-id="c9b97-428"><see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-428">To encode or decode values outside of a web application, use the <see cref="T:System.Net.WebUtility" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public string UrlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlDecode(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-429">デコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-429">The text string to decode.</span></span></param>
        <summary><span data-ttu-id="c9b97-430">文字列を URL デコードし、デコードされた文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-430">URL-decodes a string and returns the decoded string.</span></span></summary>
        <returns><span data-ttu-id="c9b97-431">デコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-431">The decoded text.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-432">URL エンコードにより、すべてのブラウザーが URL 文字列のテキストを正しく送信されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-432">URL encoding ensures that all browsers will correctly transmit text in URL strings.</span></span> <span data-ttu-id="c9b97-433">質問などの文字 (?) をマークする、アンパサンド (&)、スラッシュ記号 (/)、および空白の切り捨てやブラウザーによっては、破損している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c9b97-433">Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers.</span></span> <span data-ttu-id="c9b97-434">この結果、これらの文字をエンコードする必要があります`<a>`タグまたはクエリ文字列を文字列再で送信できる要求文字列内のブラウザー。</span><span class="sxs-lookup"><span data-stu-id="c9b97-434">As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.</span></span>  
  
 <span data-ttu-id="c9b97-435">このメソッドは、アクセスする便利な手段、<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-435">This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-436">このメソッドを使用して内部的には、<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-436">Internally, this method uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> to decode strings.</span></span>  
  
 <span data-ttu-id="c9b97-437">ASP.NET web ページの分離コード ファイル内のインスタンスにアクセス、<xref:System.Web.HttpServerUtility>クラスを通じて、`Server`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-437">In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property.</span></span> <span data-ttu-id="c9b97-438">分離コード ファイルに含まれていないクラスで使用`HttpContext.Current.Server`のインスタンスにアクセスする、<xref:System.Web.HttpServerUtility>クラスです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-438">In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.</span></span>  
  
 <span data-ttu-id="c9b97-439">外部では、web アプリケーションを使用、<xref:System.Net.WebUtility>クラス値をエンコードまたはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-439">Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-440">例を次にどのように値を URL デコードをから取得するクエリ文字列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-440">The following example shows how to URL-decode a value that is retrieved from the query string.</span></span> <span data-ttu-id="c9b97-441">コードは、web ページの分離コード ファイルに存在します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-441">The code resides in the code-behind file for a web page.</span></span> <span data-ttu-id="c9b97-442">`ReturnPage` 指す、`HyperLink`コントロール。</span><span class="sxs-lookup"><span data-stu-id="c9b97-442">`ReturnPage` refers to a `HyperLink` control.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/default.aspx.vb#1)]  
  
 <span data-ttu-id="c9b97-443">次の例は似ていますが、前の例を示して 方法を URL デコード クラス内の値されていないこと、分離コード ファイル。</span><span class="sxs-lookup"><span data-stu-id="c9b97-443">The next example is similar to the previous example except it shows how to URL-decode a value from within a class that is not in the code-behind file.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public void UrlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-444">デコードする HTML 文字列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-444">The HTML string to decode.</span></span></param>
        <param name="output"><span data-ttu-id="c9b97-445">デコードされた文字列を格納する <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c9b97-445">The <see cref="T:System.IO.TextWriter" /> output stream that contains the decoded string.</span></span></param>
        <summary><span data-ttu-id="c9b97-446">URL 形式で受け取った HTML 文字列をデコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームへ送信します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-446">Decodes an HTML string received in a URL and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-447">URL エンコードにより、すべてのブラウザーが URL 文字列のテキストを正しく送信されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-447">URL encoding ensures that all browsers will correctly transmit text in URL strings.</span></span> <span data-ttu-id="c9b97-448">質問などの文字 (?) をマークする、アンパサンド (&)、スラッシュ記号 (/)、および空白の切り捨てやブラウザーによっては、破損している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c9b97-448">Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers.</span></span> <span data-ttu-id="c9b97-449">この結果、これらの文字をエンコードする必要があります`<a>`タグまたはクエリ文字列を文字列再で送信できる要求文字列内のブラウザー。</span><span class="sxs-lookup"><span data-stu-id="c9b97-449">As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.</span></span>  
  
 <span data-ttu-id="c9b97-450"><xref:System.Web.HttpServerUtility.UrlDecode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-450"><xref:System.Web.HttpServerUtility.UrlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-451">内部的には、<xref:System.Web.HttpServerUtility.UrlDecode%2A>使用<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>に文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-451">Internally, <xref:System.Web.HttpServerUtility.UrlDecode%2A> uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> to decode strings.</span></span>  
  
 <span data-ttu-id="c9b97-452"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-452">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-453">次の例は、という名前の文字列をデコード`EncodedString`(URL で受信した) という名前の文字列に`DecodedString`です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-453">The following example decodes the string named `EncodedString` (received in a URL) into the string named `DecodedString`.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9b97-454">URL を使用して Web サーバーからクライアントへ信頼性のある HTTP 伝送を行うために、文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-454">Encodes a string for reliable HTTP transmission from the Web server to a client through the URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-455"><xref:System.Web.HttpServerUtility.UrlEncode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-455"><xref:System.Web.HttpServerUtility.UrlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-456">内部的には、<xref:System.Web.HttpServerUtility.UrlEncode%2A>使用<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-456">Internally, <xref:System.Web.HttpServerUtility.UrlEncode%2A> uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c9b97-457"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-457">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public string UrlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlEncode(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-458">URL エンコードするテキスト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-458">The text to URL-encode.</span></span></param>
        <summary><span data-ttu-id="c9b97-459">文字列を URL エンコードし、エンコードされた文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-459">URL-encodes a string and returns the encoded string.</span></span></summary>
        <returns><span data-ttu-id="c9b97-460">URL エンコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-460">The URL-encoded text.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-461">URL エンコードにより、すべてのブラウザーが URL 文字列のテキストを正しく送信されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-461">URL encoding ensures that all browsers will correctly transmit text in URL strings.</span></span> <span data-ttu-id="c9b97-462">質問などの文字 (?) をマークする、アンパサンド (&)、スラッシュ記号 (/)、および空白の切り捨てやブラウザーによっては、破損している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c9b97-462">Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers.</span></span> <span data-ttu-id="c9b97-463">この結果、これらの文字をエンコードする必要があります`<a>`タグまたはクエリ文字列を文字列再で送信できる要求文字列内のブラウザー。</span><span class="sxs-lookup"><span data-stu-id="c9b97-463">As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.</span></span>  
  
 <span data-ttu-id="c9b97-464">このメソッドは、アクセスする便利な手段、<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-464">This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-465">このメソッドを使用して内部的には、<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-465">Internally, this method uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c9b97-466">ASP.NET web ページの分離コード ファイル内のインスタンスにアクセス、<xref:System.Web.HttpServerUtility>クラスを通じて、`Server`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-466">In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property.</span></span> <span data-ttu-id="c9b97-467">分離コード ファイルに含まれていないクラスで使用`HttpContext.Current.Server`のインスタンスにアクセスする、<xref:System.Web.HttpServerUtility>クラスです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-467">In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.</span></span>  
  
 <span data-ttu-id="c9b97-468">外部では、web アプリケーションを使用、<xref:System.Net.WebUtility>クラス値をエンコードまたはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-468">Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-469">例を次にどのように値を URL エンコードするとして使用されているハイパーリンクのクエリ文字列値です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-469">The following example shows how to URL-encode a value that is used as a query string value of a hyperlink.</span></span> <span data-ttu-id="c9b97-470">コードは、web ページの分離コード ファイルに存在します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-470">The code resides in the code-behind file for a web page.</span></span> <span data-ttu-id="c9b97-471">エンコードする値は、のみを例を簡略化し、URL エンコードする場合があります値の型を表示するには、この例では、ハードコーディングです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-471">The value to encode is hard-coded in this example only to simplify the example and show the type of value you might URL-encode.</span></span> <span data-ttu-id="c9b97-472">通常は URL エンコードをユーザーまたは要求から受信した値です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-472">Typically, you would URL-encode a value that you received from the user or the request.</span></span> <span data-ttu-id="c9b97-473">`NextPage` 指す、`HyperLink`コントロール。</span><span class="sxs-lookup"><span data-stu-id="c9b97-473">`NextPage` refers to a `HyperLink` control.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/default.aspx.vb#1)]  
  
 <span data-ttu-id="c9b97-474">次の例は似ていますが、前の例を示して 方法 URL エンコードするクラス内の値されていないこと、分離コード ファイル。</span><span class="sxs-lookup"><span data-stu-id="c9b97-474">The next example is similar to the previous example except it shows how to URL-encode a value from within a class that is not in the code-behind file.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public void UrlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-475">エンコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-475">The text string to encode.</span></span></param>
        <param name="output"><span data-ttu-id="c9b97-476">エンコードされた文字列を格納している <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c9b97-476">The <see cref="T:System.IO.TextWriter" /> output stream that contains the encoded string.</span></span></param>
        <summary><span data-ttu-id="c9b97-477">文字列を URL エンコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-477">URL-encodes a string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-478">URL エンコードにより、すべてのブラウザーが URL 文字列のテキストを正しく送信されます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-478">URL encoding ensures that all browsers will correctly transmit text in URL strings.</span></span> <span data-ttu-id="c9b97-479">質問などの文字 (?) をマークする、アンパサンド (&)、スラッシュ記号 (/)、および空白の切り捨てやブラウザーによっては、破損している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c9b97-479">Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers.</span></span> <span data-ttu-id="c9b97-480">この結果、これらの文字をエンコードする必要があります`<a>`タグまたはクエリ文字列を文字列再で送信できる要求文字列内のブラウザー。</span><span class="sxs-lookup"><span data-stu-id="c9b97-480">As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.</span></span>  
  
 <span data-ttu-id="c9b97-481"><xref:System.Web.HttpServerUtility.UrlEncode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-481"><xref:System.Web.HttpServerUtility.UrlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c9b97-482">内部的には、<xref:System.Web.HttpServerUtility.UrlEncode%2A>使用<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-482">Internally, <xref:System.Web.HttpServerUtility.UrlEncode%2A> uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c9b97-483"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-483">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9b97-484">次の例では、http 伝送用の文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c9b97-484">The following example encodes a string for transmission by HTTP.</span></span> <span data-ttu-id="c9b97-485">という名前の文字列をエンコード`TestString`、テキストが含まれています"これは、\<テスト文字列 > です。"、という名前の文字列にコピーすると`EncodedString`として"この + は + + % 3cTest + 文字列 % 3e。"です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-485">It encodes the string named `TestString`, which contains the text "This is a \<Test String>.", and copies it into the string named `EncodedString` as "This+is+a+%3cTest+String%3e.".</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="public string UrlPathEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlPathEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlPathEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlPathEncode(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c9b97-486">URL エンコードするテキスト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-486">The text to URL-encode.</span></span></param>
        <summary><span data-ttu-id="c9b97-487">使用しないでください。ブラウザーの互換性のためだけのものです。</span><span class="sxs-lookup"><span data-stu-id="c9b97-487">Do not use; intended only for browser compatibility.</span></span> <span data-ttu-id="c9b97-488"><see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" /> を使用してください。</span><span class="sxs-lookup"><span data-stu-id="c9b97-488">Use <see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="c9b97-489">URL エンコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c9b97-489">The URL encoded text.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlTokenDecode">
      <MemberSignature Language="C#" Value="public static byte[] UrlTokenDecode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlTokenDecode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenDecode (input As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlTokenDecode(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="c9b97-490">デコードする URL 文字列トークン。</span><span class="sxs-lookup"><span data-stu-id="c9b97-490">The URL string token to decode.</span></span></param>
        <summary><span data-ttu-id="c9b97-491">URL 文字列トークンをデコードし、base 64 を使用して等価なバイト配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-491">Decodes a URL string token to its equivalent byte array using base 64 digits.</span></span></summary>
        <returns><span data-ttu-id="c9b97-492">デコードされた URL 文字列トークンが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-492">The byte array containing the decoded URL string token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-493"><xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>メソッドは、base64 の数字としてバイナリ データをエンコード、URL 文字列トークンを等価のバイト配列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-493">The <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> method converts a URL string token, which encodes binary data as base 64 digits, to its equivalent byte array representation.</span></span> <span data-ttu-id="c9b97-494">使用して、<xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>トークンをデコードするメソッドは、URL で送信しを使用してエンコードされた、<xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-494">Use the <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> method to decode tokens transmitted on the URL and encoded by using the <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>.</span></span>  
  
 <span data-ttu-id="c9b97-495"><xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>場合、メソッドは空のバイト配列を返しますが、`input`パラメーターが 1 未満の長さ。</span><span class="sxs-lookup"><span data-stu-id="c9b97-495">The <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> method will return an empty byte array if the `input` parameter has a length of less than one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9b97-496"><paramref name="input" /> パラメーターの値が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-496">The value of the <paramref name="input" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="UrlTokenEncode">
      <MemberSignature Language="C#" Value="public static string UrlTokenEncode (byte[] input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlTokenEncode(unsigned int8[] input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenEncode (input As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlTokenEncode(cli::array &lt;System::Byte&gt; ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="c9b97-497">エンコードするバイト配列。</span><span class="sxs-lookup"><span data-stu-id="c9b97-497">The byte array to encode.</span></span></param>
        <summary><span data-ttu-id="c9b97-498">Base64 形式の文字を使用して、バイト配列を等価の文字列表現にエンコードします。この文字列表現は、URL での送信で使用できます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-498">Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL.</span></span></summary>
        <returns><span data-ttu-id="c9b97-499">バイト配列の *length* が 2 以上の場合はエンコードされたトークンを格納している文字列。それ以外の場合は空の文字列 ("")。</span><span class="sxs-lookup"><span data-stu-id="c9b97-499">The string containing the encoded token if the byte array *length* is greater than one; otherwise, an empty string ("").</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9b97-500"><xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>メソッドがバイト配列を base 64 でエンコードされた等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="c9b97-500">The <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> method converts a byte array into an equivalent string representation encoded with base 64 digits.</span></span> <span data-ttu-id="c9b97-501">生成される文字列トークンは、URL に送信できます。</span><span class="sxs-lookup"><span data-stu-id="c9b97-501">The resulting string token can be transmitted on the URL.</span></span>  
  
 <span data-ttu-id="c9b97-502"><xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>場合に、空の文字列を返す、`input`パラメーターが 1 未満の長さ。</span><span class="sxs-lookup"><span data-stu-id="c9b97-502">The <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> will return an empty string if the `input` parameter has a length of less than one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9b97-503"><paramref name="input" /> パラメーターの値が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c9b97-503">The value of the <paramref name="input" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>