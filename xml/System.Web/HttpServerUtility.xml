<Type Name="HttpServerUtility" FullName="System.Web.HttpServerUtility">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8381d0d075557d47b605e30bc35e285da0fa62f7" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51918681" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpServerUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpServerUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpServerUtility" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpServerUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpServerUtility sealed" />
  <TypeSignature Language="F#" Value="type HttpServerUtility = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Web 要求を処理するヘルパー メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドとプロパティの<xref:System.Web.HttpServerUtility>クラスは、組み込みを通じて公開される<xref:System.Web.HttpContext.Server%2A>ASP.NET が提供するオブジェクト。  
  
   
  
## Examples  
 Visual Studio の Web サイトのプロジェクトとソース コードはこのトピックと共に使用できます:[ダウンロード](https://go.microsoft.com/fwlink/?LinkId=192870)します。  
  
 次の例では、使用する方法、<xref:System.Web.HttpServerUtility.HtmlEncode%2A>メソッドと<xref:System.Web.HttpServerUtility.UrlEncode%2A>のメソッド、<xref:System.Web.HttpServerUtility>クラス。 <xref:System.Web.HttpServerUtility.HtmlEncode%2A>メソッドにより、スクリプトの実行可能ファイルまたは HTML 要素ではなくブラウザーで静的なテキストとして表示する任意のユーザーが指定した文字列を入力することを確認します。 <xref:System.Web.HttpServerUtility.UrlEncode%2A>メソッドが HTTP ストリームで正しく送信されるように、Url をエンコードします。  
  
 [!code-aspx-csharp[System.Web.HttpServerUtility1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpServerUtility1/cs/HttpServerUtilityCS.aspx#1)]
 [!code-aspx-vb[System.Web.HttpServerUtility1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpServerUtility1/vb/HttpServerUtilityVB.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.HttpContext" />
  </Docs>
  <Members>
    <Member MemberName="ClearError">
      <MemberSignature Language="C#" Value="public void ClearError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.ClearError" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearError ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearError();" />
      <MemberSignature Language="F#" Value="member this.ClearError : unit -&gt; unit" Usage="httpServerUtility.ClearError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>前回の例外を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、最後にスローされた例外をクリアします。  
  
 [!code-csharp[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.GetLastError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>COM オブジェクトのサーバー インスタンスを作成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (progID As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string -&gt; obj" Usage="httpServerUtility.CreateObject progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">インスタンスを作成するオブジェクトのクラスまたは型。</param>
        <summary>オブジェクトのプログラム ID (ProgID) で識別されている COM オブジェクトのサーバー インスタンスを作成します。</summary>
        <returns>新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、オブジェクトの ProgID を使用してオブジェクトを作成します。  
  
 [!code-csharp[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">オブジェクトのインスタンスを作成できませんでした。</exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : Type -&gt; obj" Usage="httpServerUtility.CreateObject type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">作成するオブジェクトを表す <see cref="T:System.Type" />。</param>
        <summary>オブジェクトの型で識別されている COM オブジェクトのサーバー インスタンスを作成します。</summary>
        <returns>新しいオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectFromClsid">
      <MemberSignature Language="C#" Value="public object CreateObjectFromClsid (string clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObjectFromClsid(string clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectFromClsid (clsid As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObjectFromClsid(System::String ^ clsid);" />
      <MemberSignature Language="F#" Value="member this.CreateObjectFromClsid : string -&gt; obj" Usage="httpServerUtility.CreateObjectFromClsid clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">インスタンスを作成するオブジェクトのクラス ID。</param>
        <summary>オブジェクトのクラス ID (CLSID) で識別されている COM オブジェクトのサーバー インスタンスを作成します。</summary>
        <returns>新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、使用する方法、 <xref:System.Web.HttpServerUtility.CreateObjectFromClsid%2A> COM オブジェクトのサーバー インスタンスを作成します。  
  
 [!code-csharp[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">オブジェクトのインスタンスを作成できませんでした。</exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Execute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したリソースのハンドラーを現在の要求のコンテキストで実行し、そのハンドラーを起動したページに実行を戻します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Execute : string -&gt; unit" Usage="httpServerUtility.Execute path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">実行する URL パス。</param>
        <summary>指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A>メソッドは、新しいページの実行が完了した後に元のページの実行を継続します。 <xref:System.Web.HttpServerUtility.Transfer%2A>メソッドが別のハンドラーの実行を無条件で転送します。  
  
 ASP.NET では、現在のユーザーは、によって提供されるリソースを表示する権限が検証されません、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。 ASP.NET がで示されたハンドラーを直接呼び出しますが、ASP.NET の承認と認証ロジックの実行元のリソースのハンドラーが呼び出される前に、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドと、新しい認証および承認ロジックを再実行されませんリソースです。 アプリケーションのセキュリティ ポリシーには、クライアントがリソースにアクセスする適切な承認が必要とする場合は、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。  
  
 使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。 <xref:System.Web.HttpResponse.Redirect%2A> ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。 このリダイレクトは、システムへの新しい要求であるために、インターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認ロジックをそれが加わっています。  
  
 ユーザーが使用するカスタム承認方式を組み込むことにより、リソースを表示するアクセス許可を持っていることを確認できる、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>メソッド アプリケーション呼び出しの前に、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。  
  
   
  
## Examples  
 次の例では、現在のディレクトリに"Updateinfo.aspx".aspx ページが表示されます。 Updateinfo.aspx ページが表示された後、プログラムの実行は開始ページを返します。  
  
 [!code-csharp[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。  
  
\- または 
<paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
\- または 
 <paramref name="path" /> は仮想パスではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * bool -&gt; unit" Usage="httpServerUtility.Execute (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">実行する URL パス。</param>
        <param name="preserveForm">
          <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</param>
        <summary>指定した仮想パスのハンドラーを現在の要求のコンテキストで実行し、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、.aspx ページを実行する方法を示します`Updateinfo.aspx`で、現在の要求と保持、<xref:System.Web.HttpRequest.QueryString%2A>と<xref:System.Web.HttpRequest.Form%2A>コレクション。 プログラム実行後の最初のページに戻ります`Updateinfo.aspx`が表示されます。  
  
 [!code-csharp[HttpServerUtility.Execute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute/CS/httpserverutility.execute_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute/VB/httpserverutility.execute_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。  
  
\- または 
<paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
\- または 
 <paramref name="path" /> は仮想パスではありません。</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.Execute (path, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="path">実行する URL パス。</param>
        <param name="writer">出力を取り込む <see cref="T:System.IO.TextWriter" />。</param>
        <summary>指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。 <see cref="T:System.IO.TextWriter" /> は、実行されたハンドラーからの出力を取り込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A>メソッドは、指定した仮想パスの実行が完了した後に元の要求の実行を継続します。 <xref:System.Web.HttpServerUtility.Transfer%2A>メソッドが別のハンドラーの実行を無条件で転送します。  
  
 ASP.NET では、現在のユーザーは、によって提供されるリソースを表示する権限が検証されません、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。 ASP.NET がで示されたハンドラーを直接呼び出しますが、ASP.NET の承認と認証ロジックの実行元のリソースのハンドラーが呼び出される前に、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドと、新しい認証および承認ロジックを再実行されませんリソースです。 アプリケーションのセキュリティ ポリシーには、クライアントがリソースにアクセスする適切な承認が必要とする場合は、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。  
  
 使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。 <xref:System.Web.HttpResponse.Redirect%2A> ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。 このリダイレクトは、システムへの新しい要求であるために、インターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認ロジックをそれが加わっています。  
  
 ユーザーが使用するカスタム承認方式を組み込むことにより、リソースを表示するアクセス許可を持っていることを確認できる、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>メソッド アプリケーション呼び出しの前に、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。  
  
   
  
## Examples  
 次の例では、実行、`Login.aspx`ページで、現在のディレクトリ内のサーバーとを使用してページから、出力を受け取って、<xref:System.IO.StringWriter>オブジェクト`writer`します。 受信した HTML ストリームを書き込みます`writer`を HTTP 出力ストリーム。  
  
 [!code-csharp[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。  
  
\- または 
<paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
\- または 
 <paramref name="path" /> は仮想パスではありません。</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (path, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">実行する URL パス。</param>
        <param name="writer">出力を取り込む <see cref="T:System.IO.TextWriter" />。</param>
        <param name="preserveForm">
          <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</param>
        <summary>指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。 <see cref="T:System.IO.TextWriter" /> はページからの出力を取り込み、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかをブール型のパラメーターで指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A>メソッドは、指定された仮想パスの実行が完了した後に元の要求の実行を継続します。 <xref:System.Web.HttpServerUtility.Transfer%2A>メソッドが別のハンドラーの実行を無条件で転送します。  
  
 ASP.NET では、現在のユーザーは、によって提供されるリソースを表示する権限が検証されません、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。 ASP.NET がで示されたハンドラーを直接呼び出しますが、ASP.NET の承認と認証ロジックの実行元のリソースのハンドラーが呼び出される前に、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドと、新しい認証および承認ロジックを再実行されませんリソースです。 アプリケーションのセキュリティ ポリシーには、クライアントがリソースにアクセスする適切な承認が必要とする場合は、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。  
  
 使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。 <xref:System.Web.HttpResponse.Redirect%2A> ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。 このリダイレクトは、システムへの新しい要求であるために、インターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認ロジックをそれが加わっています。  
  
 ユーザーが使用するカスタム承認方式を組み込むことにより、リソースを表示するアクセス許可を持っていることを確認できる、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>メソッド アプリケーション呼び出しの前に、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。  
  
   
  
## Examples  
 次の例では、実行、`Login.aspx`ページで、現在のディレクトリ内のサーバーとを使用してページから、出力を受け取って、<xref:System.IO.StringWriter>オブジェクト`writer`します。 受信した HTML ストリームを書き込みます`writer`を HTTP 出力ストリーム。 内容、<xref:System.Web.HttpRequest.Form%2A>と<xref:System.Web.HttpRequest.QueryString%2A>コレクションが保持されます。  
  
 [!code-csharp[HttpServerUtility.Execute02#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute02/CS/httpserverutility.execute02_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute02#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute02/VB/httpserverutility.execute02_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">現在の <see cref="T:System.Web.HttpContext" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。  
  
\- または 
 <paramref name="path" /> がピリオド (.) で終わっています。  
  
\- または 
<paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は仮想パスではありません。</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Web.IHttpHandler handler, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (handler As IHttpHandler, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Web::IHttpHandler ^ handler, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Web.IHttpHandler * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (handler, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler">現在の要求の転送先となる <see cref="T:System.Web.IHttpHandler" /> を実装する HTTP ハンドラー。</param>
        <param name="writer">出力を取り込む <see cref="T:System.IO.TextWriter" />。</param>
        <param name="preserveForm">
          <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</param>
        <summary>指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。 <see cref="T:System.IO.TextWriter" /> は実行されたハンドラーからの出力を取り込み、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかをブール型のパラメーターで指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 共通言語仕様 (CLS) に準拠した任意の言語で HTTP 要求の特定、定義済みの型を処理するカスタム HTTP ハンドラーを記述できます。 従来の ASP (従来の ASP とも呼ばれます) ページまたは ASP.NET ページではなく HTTP ハンドラー クラスで定義されている実行可能コードは、これらの特定の要求に応答します。 低レベルの要求とインターネット インフォメーション サービス (IIS) を実行している Web サーバーの応答サービスを操作する HTTP ハンドラーを使用して、次のような機能を提供する ISAPI 拡張機能がより単純なプログラミング モデル。  
  
 ASP.NET では、現在のユーザーは、によって配信されるリソースを表示する権限が検証されません、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。 ASP.NET がで示されたハンドラーを直接呼び出しますが、ASP.NET の承認と認証ロジックの実行元のリソースのハンドラーが呼び出される前に、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドの認証および承認ロジックを再実行されませんし、新しいリソース。 アプリケーションのセキュリティ ポリシーには、クライアントがリソースにアクセスする適切な承認が必要とする場合は、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。  
  
 使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。 <xref:System.Web.HttpResponse.Redirect%2A>ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。 このリダイレクトは、システムへの新しい要求であるために、IIS と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認ロジックをそれが加わっています。  
  
 ユーザーが使用するカスタム承認方式を組み込むことにより、リソースを表示するアクセス許可を持っていることを確認できる、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>メソッド アプリケーション呼び出しの前に、<xref:System.Web.HttpServerUtility.Execute%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="handler" /> によって指定されているハンドラーの実行中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="handler" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="GetLastError">
      <MemberSignature Language="C#" Value="public Exception GetLastError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetLastError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.GetLastError" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastError () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetLastError();" />
      <MemberSignature Language="F#" Value="member this.GetLastError : unit -&gt; Exception" Usage="httpServerUtility.GetLastError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>前回の例外を返します。</summary>
        <returns>スローされた前回の例外。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、HTTP 出力ストリームに、アプリケーションの最後のエラーの説明を出力します。 エラーが発生しなかった場合は、「エラーなし」を出力します。  
  
 [!code-csharp[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.ClearError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>エンコードされた文字列をデコードして、無効な HTML 文字を削除します。  
  
<see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public string HtmlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string -&gt; string" Usage="httpServerUtility.HtmlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">デコードする HTML 文字列。</param>
        <summary>HTML エンコードされた文字列をデコードし、デコードした文字列を返します。</summary>
        <returns>デコードされたテキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML エンコードは、テキストが、ブラウザーに正しく表示され、ブラウザーで HTML として解釈されないことを確認します。 たとえば、テキスト文字列には、小なり記号が含まれている場合 (\<) 以上、ブラウザーで開くまたは HTML タグの右角かっことこれらの文字は解釈不等号 (>)、します。 文字列への変換の文字が HTML エンコードの場合は、`&lt;`と`&gt;`、それが原因で、不等号以降より小記号として正しく表示するブラウザー。 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> サーバーに転送されているテキストをデコードします。  
  
 このメソッドは、アクセスする便利な方法、<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 このメソッドを使用して内部的には、<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>文字列をデコードします。  
  
 ASP.NET web ページの分離コード ファイルでのインスタンスにアクセス、<xref:System.Web.HttpServerUtility>クラスを通じて、`Server`プロパティ。 分離コード ファイルに含まれていないクラスで使用`HttpContext.Current.Server`のインスタンスにアクセスする、<xref:System.Web.HttpServerUtility>クラス。  
  
 Web アプリケーションでは、外部で使用して、<xref:System.Net.WebUtility>エンコードまたはデコード値クラス。  
  
   
  
## Examples  
 次の例は、関数を含む`LoadDecodedFile`、ファイルからデータをデコードして、1 つの文字列にコピーします。  
  
 [!code-aspx-csharp[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public void HtmlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">デコードする HTML 文字列。</param>
        <param name="output">デコードされた文字列を格納する <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</param>
        <summary>HTML エンコードされた文字列をデコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML エンコードは、テキストが、ブラウザーに正しく表示され、ブラウザーで HTML として解釈されないことを確認します。 たとえば、テキスト文字列には、小なり記号が含まれている場合 (\<) 以上、ブラウザーで開くまたは HTML タグの右角かっことこれらの文字は解釈不等号 (>)、します。 文字列への変換の文字が HTML エンコードの場合は、`&lt;`と`&gt;`、それが原因で、不等号以降より小記号として正しく表示するブラウザー。  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> サーバーに転送されているテキストをデコードします。  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 内部的には、<xref:System.Web.HttpServerUtility.HtmlDecode%2A>使用<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>文字列をデコードします。  
  
 <xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。  
  
   
  
## Examples  
 次の例では、HTML エンコードされた送信用 HTTP 経由で文字列をデコードします。 という名前の指定された文字列をデコード`EncodedString`テキストが含まれています"これは、&lt;テスト文字列&gt;."、という名前の文字列にコピーして`DecodedString`として"これは、\<テスト文字列 >."です。  
  
 [!code-csharp[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ブラウザーに表示される文字列をエンコードします。  
  
<see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public string HtmlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string -&gt; string" Usage="httpServerUtility.HtmlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">エンコードする文字列。</param>
        <summary>文字列を HTML エンコードし、エンコードされた文字列を返します。</summary>
        <returns>HTML エンコードされたテキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML エンコードは、テキストが、ブラウザーに正しく表示され、ブラウザーで HTML として解釈されないことを確認します。 たとえば、テキスト文字列には、小なり記号が含まれている場合 (\<) 以上、ブラウザーで開くまたは HTML タグの右角かっことこれらの文字は解釈不等号 (>)、します。 文字列への変換の文字が HTML エンコードの場合は、`&lt;`と`&gt;`、それが原因で、不等号以降より小記号として正しく表示するブラウザー。  
  
 このメソッドは、アクセスする便利な方法、<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 このメソッドを使用して内部的には、<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。  
  
 ASP.NET web ページの分離コード ファイルでのインスタンスにアクセス、<xref:System.Web.HttpServerUtility>クラスを通じて、`Server`プロパティ。 分離コード ファイルに含まれていないクラスで使用`HttpContext.Current.Server`のインスタンスにアクセスする、<xref:System.Web.HttpServerUtility>クラス。  
  
 Web アプリケーションでは、外部で使用して、<xref:System.Net.WebUtility>エンコードまたはデコード値クラス。  
  
   
  
## Examples  
 次の例では、どの値を HTML エンコードする可能性のあるコード アンセーフ コードを示します。 コードは、web ページの分離コード ファイルに存在します。 エンコードする値は、のみを例を簡略化し、HTML エンコードする場合があります値の型を表示するには、この例では、ハードコーディングします。 通常と HTML エンコード、ユーザーまたは要求から受信した値。 `Result` 指す、`Literal`コントロール。  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/default.aspx.vb#1)]  
  
 表示されますが、次の例は前の例のような方法を HTML エンコードするクラス内の値でない分離コード ファイルにします。  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public void HtmlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">エンコードする文字列。</param>
        <param name="output">エンコードされた文字列を格納している <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</param>
        <summary>文字列を HTML エンコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ブラウザーで HTML として解釈されない、ブラウザーでテキストが正しく表示されることにより、HTML エンコードします。 たとえば、テキスト文字列には、小なり記号が含まれている場合 (\<) 以上不等号 (>)、ブラウザーではこれらの文字として解釈タグまたは HTML タグの右角かっこです。 これら 2 つの文字の HTML エンコードでは`&lt;`と`&gt;`、それぞれ、それが原因で、不等号以降より小記号として正しく表示するブラウザー。  
  
 <xref:System.Web.HttpServerUtility.HtmlEncode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 内部的には、<xref:System.Web.HttpServerUtility.HtmlEncode%2A>使用<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。  
  
 <xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。  
  
   
  
## Examples  
 次の例では、HTTP で伝送用の文字列をエンコードします。 という名前の文字列をエンコード`TestString`、テキストが含まれています"これは、\<テスト文字列 >."、という名前の文字列にコピーして`EncodedString`として"これは、&lt;テスト文字列&gt;。"です。  
  
 [!code-csharp[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Web.HttpServerUtility.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバーのコンピューター名を取得します。</summary>
        <value>ローカル コンピューターの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、文字列変数として、サーバーのコンピューター名を格納します。  
  
 [!code-csharp[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">コンピューター名が見つかりません。</exception>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.MapPath : string -&gt; string" Usage="httpServerUtility.MapPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Web アプリケーション内の仮想パス。</param>
        <summary>指定した仮想パスに対応する物理ファイル パスを返します。</summary>
        <returns>
          <paramref name="path" /> に対応する、Web サーバー上の物理ファイル パス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`path`は`null`、<xref:System.Web.HttpServerUtility.MapPath%2A>メソッドは、パスの現在の要求を含むディレクトリの完全な物理パスを返します。 相対パスは、既存のファイルまたはフォルダーの値を返すには、このメソッドを指定する必要はありません。 ただし、Web アプリケーションの外部でパスを指定することはできません。  
  
> [!IMPORTANT]
>  <xref:System.Web.HttpServerUtility.MapPath%2A>メソッドに可能性のあるホスティング環境に関する機密情報が含まれています。 戻り値は、ユーザーには表示されません。  
  
 Web アプリケーションに配置されている`C:\ExampleSites\TestMapPath`次の結果が返されます。  
  
|要求します。|`path`|戻り値|  
|------------------|------------|--------------------|  
|RootLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath|  
|RootLevelPage.aspx|"/DownOneLevel/DownLevelPage.aspx"|C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx|  
|RootLevelPage.aspx|"/NotRealFolder"|C:\ExampleSites\TestMapPath\NotRealFolder|  
|RootLevelPage.aspx|"../OutsideApplication"|<xref:System.Web.HttpException>|  
|/DownOneLevel/DownLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath\DownOneLevel|  
|/DownOneLevel/DownLevelPage.aspx|"../RootLevelPage.aspx"|C:\ExampleSites\TestMapPath\RootLevelPage.aspx|  
  
   
  
## Examples  
 次の例では、物理ファイルの相対仮想パスを取得する方法を示します。 コードは、web ページの分離コード ファイル内に存在し、既定値を利用して`Server`オブジェクト。  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/default.aspx.vb#1)]  
  
 次の例は、点を除いて、分離コード ファイルに含まれていないクラス内からの物理パスを取得する方法を示します、前の例に似ています。  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。
        
- または - 
<paramref name="path" /> は物理パスです。仮想パスを指定してください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptTimeout">
      <MemberSignature Language="C#" Value="public int ScriptTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScriptTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScriptTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptTimeout : int with get, set" Usage="System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求タイムアウト値を秒単位で取得し、設定します。</summary>
        <value>要求のタイムアウト値設定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.ScriptTimeout%2A>を設定して、Web.config ファイルでプロパティを設定できる、`executionTimeout`要素の属性。 プログラムでタイムアウトの設定、<xref:System.Web.HttpServerUtility.ScriptTimeout%2A>プロパティは、Web.config 設定よりも優先されます。  
  
> [!NOTE]
>  設定した場合、`debug`する要素の属性`true`Web.config ファイルの値で<xref:System.Web.HttpServerUtility.ScriptTimeout%2A>は無視されます。  
  
   
  
## Examples  
 次の例では、要求のタイムアウト時間を 60 秒に設定します。  
  
 [!code-csharp[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">タイムアウト時間が <see langword="null" /> です。または、それ以外の設定ができませんでした。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transfer">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のページの実行を終了し、現在の要求に対して新しいページの実行を開始します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string -&gt; unit" Usage="httpServerUtility.Transfer path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">サーバー上にある、実行する新しいページの URL パス。</param>
        <summary>現在の要求に対して、現在のページの実行を終了し、指定された URL パスを使用して新しいページの実行を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送先のページは、別の .aspx ページにあります。 たとえば、.asp、または .asmx ページへの転送が無効です。 <xref:System.Web.HttpServerUtility.Transfer%2A>メソッドが保持されます、<xref:System.Web.HttpRequest.QueryString%2A>と<xref:System.Web.HttpRequest.Form%2A>コレクション。  
  
 <xref:System.Web.HttpServerUtility.Transfer%2A> 呼び出し<xref:System.Web.HttpResponse.End%2A>、どのがスローされます、<xref:System.Threading.ThreadAbortException>完了時に例外。  
  
 ASP.NET では、現在のユーザーは、によって提供されるリソースを表示する権限が検証されません、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。 ASP.NET がで示されたハンドラーを直接呼び出しますが、ASP.NET の承認と認証ロジックの実行元のリソースのハンドラーが呼び出される前に、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドと、新しい認証および承認ロジックを再実行されませんリソースです。 アプリケーションのセキュリティ ポリシーには、クライアントがリソースにアクセスする適切な承認が必要とする場合は、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。  
  
 使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。 <xref:System.Web.HttpResponse.Redirect%2A>メソッドは、ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。 このリダイレクトは、システムへの新しい要求であるために、インターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認ロジックをそれが加わっています。  
  
 ユーザーが使用するカスタム承認方式を組み込むことにより、リソースを表示するアクセス許可を持っていることを確認できる、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>メソッド アプリケーション呼び出しの前に、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string * bool -&gt; unit" Usage="httpServerUtility.Transfer (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">サーバー上にある、実行する新しいページの URL パス。</param>
        <param name="preserveForm">
          <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</param>
        <summary>現在のページの実行を終了し、指定された URL パスを使用して新しいページの実行を開始します。 <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションと <see cref="P:System.Web.HttpRequest.Form" /> コレクションを削除するかどうかを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送先のページは、別の .aspx ページにあります。 たとえば、.asp、または .asmx ページへの転送が無効です。  
  
 <xref:System.Web.HttpServerUtility.Transfer%2A> 呼び出し<xref:System.Web.HttpResponse.End%2A>、どのがスローされます、<xref:System.Threading.ThreadAbortException>完了時に例外。  
  
 設定した場合、`preserveForm`パラメーターを`true`、移動先のページを使用して、前のページのビュー ステートにアクセスできる、<xref:System.Web.UI.Page.PreviousPage%2A>プロパティ。  
  
 セキュリティのために、おく必要があります、`enableViewStateMac`属性に設定`true`します。 ASP.NET では、現在のユーザーは、によって提供されるリソースを表示する権限が検証されません、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。 ASP.NET がで示されたハンドラーを直接呼び出しますが、ASP.NET の承認と認証ロジックの実行元のリソースのハンドラーが呼び出される前に、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッドと、新しい認証および承認ロジックを再実行されませんリソースです。 アプリケーションのセキュリティ ポリシーには、クライアントがリソースにアクセスする適切な承認が必要とする場合は、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。  
  
 使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。 <xref:System.Web.HttpResponse.Redirect%2A>メソッドは、ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。 このリダイレクトは、システムへの新しい要求であるために、インターネット インフォメーション サービス (IIS) と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認ロジックをそれが加わっています。  
  
 ユーザーが使用するカスタム承認方式を組み込むことにより、リソースを表示するアクセス許可を持っていることを確認できる、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>メソッド アプリケーション呼び出しの前に、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。  
  
   
  
## Examples  
 次の例では、現在のページと同じディレクトリに新しいページを実行します。  
  
 [!code-csharp[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">現在のページ要求がコールバックです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(class System.Web.IHttpHandler handler, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (handler As IHttpHandler, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::Web::IHttpHandler ^ handler, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : System.Web.IHttpHandler * bool -&gt; unit" Usage="httpServerUtility.Transfer (handler, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler">現在の要求の転送先となる <see cref="T:System.Web.IHttpHandler" /> を実装する HTTP ハンドラー。</param>
        <param name="preserveForm">
          <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は、<see langword="true" />。<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアする場合は、<see langword="false" />。</param>
        <summary>現在のページの実行を終了し、カスタム HTTP ハンドラーを使用して新しい要求の実行を開始します。このハンドラーは、<see cref="T:System.Web.IHttpHandler" /> インターフェイスを実装し、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 共通言語仕様 (CLS) に準拠した任意の言語で HTTP 要求の特定、定義済みの型を処理するカスタム HTTP ハンドラーを記述できます。 従来の ASP (従来の ASP とも呼ばれます) ページまたは ASP.NET ページではなく HTTP ハンドラー クラスで定義されている実行可能コードは、これらの特定の要求に応答します。 低レベルの要求とインターネット インフォメーション サービス (IIS) を実行している Web サーバーの応答サービスを操作する HTTP ハンドラーを使用して、次のような機能を提供する ISAPI 拡張機能がより単純なプログラミング モデル。  
  
 設定した場合、`preserveForm`パラメーターを`true`、移動先のページを使用して、前のページのビュー ステートにアクセスできる、<xref:System.Web.UI.Page.PreviousPage%2A>プロパティ。  
  
 セキュリティのために、おく必要があります、`enableViewStateMac`属性に設定`true`します。 ASP.NET では、現在のユーザーは、によって提供されるリソースを表示する権限が検証されません、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。 ASP.NET がで示されたハンドラーを直接呼び出しますが、ASP.NET の承認と認証ロジックの実行元のリソースのハンドラーが呼び出される前に、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド、および新しいは再実行は認証と承認ロジックリソースです。 アプリケーションのセキュリティ ポリシーには、クライアントがリソースにアクセスする適切な承認が必要とする場合は、アプリケーションを強制またはカスタムのアクセス制御メカニズムを提供します。  
  
 使用して強制することができます、<xref:System.Web.HttpResponse.Redirect%2A>メソッドの代わりに、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。 <xref:System.Web.HttpResponse.Redirect%2A>メソッドは、ブラウザーが、新しいリソースを要求するクライアント側リダイレクトを実行します。 このリダイレクトは、システムへの新しい要求であるために、IIS と ASP.NET の両方のセキュリティ ポリシーのすべての認証と承認ロジックをそれが加わっています。  
  
 ユーザーが使用するカスタム承認方式を組み込むことにより、リソースを表示するアクセス許可を持っていることを確認できる、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>メソッド アプリケーション呼び出しの前に、<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">現在のページ要求がコールバックです。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransferRequest">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URL の非同期実行を行います。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> .NET Framework version 3.5 で導入されました。 .NET Framework の概要については、次を参照してください。[バージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string -&gt; unit" Usage="httpServerUtility.TransferRequest path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">サーバー上にある、実行する新しいページの URL パス。</param>
        <summary>指定した URL の非同期実行を行います。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドのオーバー ロードを呼び出す、<xref:System.Web.HttpServerUtility.TransferRequest%2A>オーバー ロード、`preserveForm`パラメーターに設定`false`、`method`パラメーターに設定`null`、`headers`パラメーターに設定`null`、および`preserveUser`パラメーターに設定`true`します。 詳細については、「解説」セクションを参照してください。<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>オーバー ロードします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">この要求には、[!INCLUDE[iisver](~/includes/iisver-md.md)] の統合パイプライン モードが必要です。</exception>
        <exception cref="T:System.Web.HttpException">要求を処理するサーバーが使用できません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> パラメーターが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">サーバー上にある、実行する新しいページの URL パス。</param>
        <param name="preserveForm">
          <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</param>
        <summary>指定した URL の非同期実行を行い、クエリ文字列パラメーターを保持します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロードを呼び出す、<xref:System.Web.HttpServerUtility.TransferRequest%2A>オーバー ロード、`preserveForm`パラメーターに渡される値を設定、`method`パラメーターに設定`null`、`headers`パラメーターに設定`null`、および`preserveUser`パラメーター セット`true`します。 詳細については、「解説」セクションを参照してください。<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>します。  
  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> .NET Framework version 3.5 で導入されました。  詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">この要求には、[!INCLUDE[iisver](~/includes/iisver-md.md)] の統合パイプライン モードが必要です。</exception>
        <exception cref="T:System.Web.HttpException">要求を処理するサーバーが使用できません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> パラメーターが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="path">サーバー上にある、実行する新しいページの URL パス。</param>
        <param name="preserveForm">
          <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</param>
        <param name="method">新しい要求の実行で使用する HTTP メソッド。</param>
        <param name="headers">新しい要求の要求ヘッダーの <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>指定した HTTP メソッドおよびヘッダーを使用して、指定した URL の非同期実行を行います。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 統合パイプライン モードで実行するときにこのメソッドが使用される[!INCLUDE[iisver](~/includes/iisver-md.md)]正しい要求コンテキストを持つ対象の要求の実行中に 1 つのリソースの種類から別に転送する要求の処理を許可します。 たとえば、使用することができます、 <xref:System.Web.HttpServerUtility.TransferRequest%2A> XML ページに対する要求に ASPX ページの要求を転送する方法。  
  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A>メソッドは、次の条件を指定した URL の子の非同期実行を実行します。  
  
-   場合、`path`パラメーターは、クエリ文字列を指定します、これは、新しいクエリ文字列として使用します。 クエリ文字列が含まれていない場合は、要求のクエリ文字列が再利用になります。  
  
-   場合、`method`パラメーターを指定すると、それが使用されます。 場合は`null`、元の要求の HTTP メソッドが使用されます。  
  
-   場合、`preserveForm`パラメーターが`true`要求の現在のエンティティ ボディが使用可能、対象の要求になります。 これにより、フォーム ポストし、転送にアップロードします。  
  
-   ユーザー id が元の要求に設定されている場合、id は、新しい要求に転送されます。 これにより、認証済みの要求で新しい要求の認証の結果を再利用できます。 転送するユーザーにしたくない場合に、ユーザーを設定`null`転送する前に元の要求にします。  
  
-   場合、`headers`パラメーターを指定すると、指定したヘッダーで、新しい要求が実行されます。 これにより、要求ヘッダーと、新しい要求の cookie を変更するために使用するか、元の要求の受信場所を指定する特殊なヘッダーを追加します。  
  
     このメソッドは、<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29>メソッドのオーバー ロードで、`preserveUser`パラメーターに設定`true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">この要求を実行するには、統合モードで実行している [!INCLUDE[iisver](~/includes/iisver-md.md)] が必要です。</exception>
        <exception cref="T:System.Web.HttpException">要求を処理するサーバーが使用できません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> パラメーターが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers, bool preserveUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection, preserveUser As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers, bool preserveUser);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers, preserveUser)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="preserveUser" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">パス。</param>
        <param name="preserveForm">
          <see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</param>
        <param name="method">新しい要求で使用する HTTP メソッド。</param>
        <param name="headers">新しい要求の要求ヘッダーを含む <see cref="T:System.Collections.Specialized.NameValueCollection" /> オブジェクト。</param>
        <param name="preserveUser">ユーザー id を保持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドの他のメソッド オーバーロードは、このパラメーターが <see langword="true" /> に設定された状態でこのオーバーロードを呼び出します。</param>
        <summary>指定した HTTP メソッド、ヘッダー、およびパスを使用して、指定した URL の非同期実行を実行します。また、任意でユーザー id とフォーム値を保持します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、「解説」セクションを参照してください。<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">この要求には、[!INCLUDE[iisver](~/includes/iisver-md.md)] の統合パイプライン モードが必要です。</exception>
        <exception cref="T:System.Web.HttpException">要求を処理するサーバーが使用できません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> パラメーターが正しくありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>HTTP 伝送用にエンコードされた文字列をデコードし、URL の形でサーバーに送信します。  
  
<see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public string UrlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string -&gt; string" Usage="httpServerUtility.UrlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">デコードする文字列。</param>
        <summary>文字列を URL デコードし、デコードされた文字列を返します。</summary>
        <returns>デコードされたテキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのブラウザーは正しく URL 文字列のテキストを送信することにより、URL エンコードします。 質問などの文字 (?) をマークする、アンパサンド (&)、スラッシュ記号 (/)、および空白の切り捨てやブラウザーによっては、破損している可能性があります。 この結果、これらの文字をエンコードする必要があります`<a>`タグまたはでクエリ文字列、文字列が再送信できる要求文字列内のブラウザー。  
  
 このメソッドは、アクセスする便利な方法、<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 このメソッドを使用して内部的には、<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>文字列をデコードします。  
  
 ASP.NET web ページの分離コード ファイルでのインスタンスにアクセス、<xref:System.Web.HttpServerUtility>クラスを通じて、`Server`プロパティ。 分離コード ファイルに含まれていないクラスで使用`HttpContext.Current.Server`のインスタンスにアクセスする、<xref:System.Web.HttpServerUtility>クラス。  
  
 Web アプリケーションでは、外部で使用して、<xref:System.Net.WebUtility>エンコードまたはデコード値クラス。  
  
   
  
## Examples  
 どの値を URL デコードに取得されるクエリ文字列から次の例は。 コードは、web ページの分離コード ファイルに存在します。 `ReturnPage` 指す、`HyperLink`コントロール。  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/default.aspx.vb#1)]  
  
 表示されますが、次の例は前の例のような方法を URL デコード クラス内の値でない分離コード ファイルにします。  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public void UrlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">デコードする HTML 文字列。</param>
        <param name="output">デコードされた文字列を格納する <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</param>
        <summary>URL 形式で受け取った HTML 文字列をデコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームへ送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのブラウザーは正しく URL 文字列のテキストを送信することにより、URL エンコードします。 質問などの文字 (?) をマークする、アンパサンド (&)、スラッシュ記号 (/)、および空白の切り捨てやブラウザーによっては、破損している可能性があります。 この結果、これらの文字をエンコードする必要があります`<a>`タグまたはでクエリ文字列、文字列が再送信できる要求文字列内のブラウザー。  
  
 <xref:System.Web.HttpServerUtility.UrlDecode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 内部的には、<xref:System.Web.HttpServerUtility.UrlDecode%2A>使用<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>文字列をデコードします。  
  
 <xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。  
  
   
  
## Examples  
 次の例は、という名前の文字列をデコード`EncodedString`(URL で受信済み) という名前の文字列に`DecodedString`します。  
  
 [!code-csharp[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>URL を使用して Web サーバーからクライアントへ信頼性のある HTTP 伝送を行うために、文字列をエンコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 内部的には、<xref:System.Web.HttpServerUtility.UrlEncode%2A>使用<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。  
  
 <xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public string UrlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string -&gt; string" Usage="httpServerUtility.UrlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">URL エンコードするテキスト。</param>
        <summary>文字列を URL エンコードし、エンコードされた文字列を返します。</summary>
        <returns>URL エンコードされたテキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのブラウザーは正しく URL 文字列のテキストを送信することにより、URL エンコードします。 質問などの文字 (?) をマークする、アンパサンド (&)、スラッシュ記号 (/)、および空白の切り捨てやブラウザーによっては、破損している可能性があります。 この結果、これらの文字をエンコードする必要があります`<a>`タグまたはでクエリ文字列、文字列が再送信できる要求文字列内のブラウザー。  
  
 このメソッドは、アクセスする便利な方法、<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 このメソッドを使用して内部的には、<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。  
  
 ASP.NET web ページの分離コード ファイルでのインスタンスにアクセス、<xref:System.Web.HttpServerUtility>クラスを通じて、`Server`プロパティ。 分離コード ファイルに含まれていないクラスで使用`HttpContext.Current.Server`のインスタンスにアクセスする、<xref:System.Web.HttpServerUtility>クラス。  
  
 Web アプリケーションでは、外部で使用して、<xref:System.Net.WebUtility>エンコードまたはデコード値クラス。  
  
   
  
## Examples  
 どの値を URL エンコードするために使用されるハイパーリンクのクエリ文字列値として次の例を示します。 コードは、web ページの分離コード ファイルに存在します。 エンコードする値は、のみを例を簡略化し、URL エンコードする場合があります値の型を表示するには、この例では、ハードコーディングします。 通常、するは URL エンコード、ユーザーまたは要求から受信した値。 `NextPage` 指す、`HyperLink`コントロール。  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/default.aspx.vb#1)]  
  
 表示されますが、次の例は前の例のような方法を URL エンコードするクラス内の値でない分離コード ファイルにします。  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public void UrlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">エンコードする文字列。</param>
        <param name="output">エンコードされた文字列を格納している <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</param>
        <summary>文字列を URL エンコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのブラウザーは正しく URL 文字列のテキストを送信することにより、URL エンコードします。 質問などの文字 (?) をマークする、アンパサンド (&)、スラッシュ記号 (/)、および空白の切り捨てやブラウザーによっては、破損している可能性があります。 この結果、これらの文字をエンコードする必要があります`<a>`タグまたはでクエリ文字列、文字列が再送信できる要求文字列内のブラウザー。  
  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> アクセスする便利な方法は、<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>実行時に ASP.NET アプリケーションからのメソッド。 内部的には、<xref:System.Web.HttpServerUtility.UrlEncode%2A>使用<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>文字列をエンコードします。  
  
 <xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。  
  
   
  
## Examples  
 次の例では、HTTP で伝送用の文字列をエンコードします。 という名前の文字列をエンコード`TestString`、テキストが含まれています"これは、\<テスト文字列 >."、という名前の文字列にコピーして`EncodedString`として"この + は + %3ctest + 文字列 %3e。"です。  
  
 [!code-csharp[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="public string UrlPathEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlPathEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlPathEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlPathEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlPathEncode : string -&gt; string" Usage="httpServerUtility.UrlPathEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">URL エンコードするテキスト。</param>
        <summary>使用しないでください。ブラウザーの互換性のためだけのものです。 <see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" /> を使用してください。</summary>
        <returns>URL エンコードされたテキスト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlTokenDecode">
      <MemberSignature Language="C#" Value="public static byte[] UrlTokenDecode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlTokenDecode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenDecode (input As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlTokenDecode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenDecode : string -&gt; byte[]" Usage="System.Web.HttpServerUtility.UrlTokenDecode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">デコードする URL 文字列トークン。</param>
        <summary>URL 文字列トークンをデコードし、base 64 を使用して等価なバイト配列を作成します。</summary>
        <returns>デコードされた URL 文字列トークンが格納されたバイト配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>メソッドが、バイナリ データを base 64 でエンコード、URL 文字列トークンを等価なバイト配列形式に変換します。 使用して、<xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>トークンをデコードするメソッドは、URL で送信しを使用してエンコード、<xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>します。  
  
 <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>場合、メソッドは空のバイト配列を返しますが、`input`パラメーターが 1 未満の長さ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> パラメーターの値が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="UrlTokenEncode">
      <MemberSignature Language="C#" Value="public static string UrlTokenEncode (byte[] input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlTokenEncode(unsigned int8[] input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenEncode (input As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlTokenEncode(cli::array &lt;System::Byte&gt; ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenEncode : byte[] -&gt; string" Usage="System.Web.HttpServerUtility.UrlTokenEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="input">エンコードするバイト配列。</param>
        <summary>Base64 形式の文字を使用して、バイト配列を等価の文字列表現にエンコードします。この文字列表現は、URL での送信で使用できます。</summary>
        <returns>バイト配列の *length* が 2 以上の場合はエンコードされたトークンを格納している文字列。それ以外の場合は空の文字列 ("")。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>メソッドが、base 64 でエンコードされた等価の文字列形式にバイト配列を変換します。 結果の文字列トークンは、URL で送信できます。  
  
 <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>場合、空の文字列を返しますが、`input`パラメーターが 1 未満の長さ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> パラメーターの値が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>