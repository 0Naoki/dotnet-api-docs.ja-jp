<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9400e38d0e86f78825a1539468c98397e83c3420" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52236284" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>並列ループおよび並列領域に対するサポートを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.Parallel>クラスには、各ループ、および一連のステートメントの実行の一般的な操作、ループなどの並列の置き換えをライブラリに基づくデータが用意されています。  
  
   
  
## Examples  
 この例では、複数の言語コンストラクトを使用して並列ループを実装するためのいくつかの方法を示します。  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe>すべてのパブリックおよびプロテクト メンバー<see cref="T:System.Threading.Tasks.Parallel" />スレッド セーフでは、複数のスレッドから同時に使用される可能性があります。</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">.NET Framework による並列プログラミングのサンプル</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>反復処理が並列で実行される可能性のある <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる <see langword="for" /> (Visual Basic における <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 2 つの引数と共に提供されます。  
  
-   <xref:System.Int32>反復カウントを表す値です。  
  
-   A<xref:System.Threading.Tasks.ParallelLoopState>インスタンスを使用して、途中で、ループから抜け出すことができます。 <xref:System.Threading.Tasks.ParallelLoopState>オブジェクトが、コンパイラによって作成された; ユーザー コードでインスタンス化することはできません。  
  
 呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド通知、`for`操作を現在後のイテレーションが実行する必要はありません。 ただし、現在の前にすべてのイテレーション 1 つがありますがまだ実行していない場合に実行されます。  
  
 そのため、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>内で、従来の中断操作の使用と似ています`for`などの言語でのループ、C# の場合は、完璧な代替ではありませんたとえば、現在のイテレーションがありませんが間違いなくされる保証はありません。実行します。  
  
 現在のものが必要ない前にすべてのイテレーションを実行する場合は、使用、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドを使用してではなく<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>します。 呼び出す<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>通知、`for`ループ作業は既に完了しているかどうか、現在の反復処理の前後にあるためすべてに関係なく、残りのすべてのイテレーションを破棄できることが必要です。 ただしで<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>、に関するその他のイテレーションは実行されませんの保証はありません。  
  
 ループが途中で終了した場合、<xref:System.Threading.Tasks.ParallelLoopResult>返される構造体は、ループの完了に関連する情報を含めることができます。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐに返します。  
  
   
  
## Examples  
 次の例では、並列ループの最大 100 個のイテレーションを実行します。 各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。 ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>メソッドが呼び出されます。 例のインデックスがより大きいイテレーションなしの出力として、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>への呼び出し後のプロパティ値の開始、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>メソッド。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>メソッドが呼び出されると、各反復処理を呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType>別のイテレーションが呼び出されているかどうかを確認するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>メソッド。 プロパティの値が場合`true`、イテレーションの値を確認します、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>反復処理が並列で実行される可能性のある <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 反復回数で提供されます (<xref:System.Int32>) をパラメーターとして。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐに返します。  
  
   
  
## Examples  
 次の例では、<xref:System.Threading.Tasks.Parallel.For%2A>メソッドのランダム バイトを生成するデリゲートの呼び出しで 100 の値し、その合計を計算します。  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、64 ビットのインデックスを持つ <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 次のパラメーターと共に提供されます: 反復カウント (<xref:System.Int64>)、および<xref:System.Threading.Tasks.ParallelLoopState>インスタンスを使用して、途中で、ループから抜け出すことがあります。  
  
 呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド通知、`for`操作を現在後のイテレーションを実行する必要はありませんが、現在の前にすべてのイテレーションの操作を行います。  
  
 ブレークを呼び出すことは、従来の中断操作を使用すると似ていますそのため、`for`などの言語でのループ、C# の場合は、完璧な代替ではありません。 たとえば、保証はありません、イテレーション後、現在の 1 つは間違いなく実行されません。  
  
 現在のものが必要ない前にすべてのイテレーションを実行する場合は、使用、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドを使用してではなく<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>します。 呼び出す<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>通知、`for`ループ作業は既に完了しているかどうか、現在の反復処理の前後にあるためすべてに関係なく、残りのすべてのイテレーションを破棄できることが必要です。 ただしで<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>、に関するその他のイテレーションは実行されませんの保証はありません。  
  
 ループが途中で終了した場合、<xref:System.Threading.Tasks.ParallelLoopResult>返される構造体は、ループの完了に関連する情報を含めることができます。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐを返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>反復処理が並列で実行される可能性のある、64 ビットのインデックスを持つ <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 反復回数で提供されます (<xref:System.Int64>) をパラメーターとして。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐに返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 次のパラメーターと共に提供されます: 反復カウント (<xref:System.Int32>)、および<xref:System.Threading.Tasks.ParallelLoopState>インスタンスを使用して、途中で、ループから抜け出すことがあります。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐに返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループ オプションを構成できる <see langword="for" /> (Visual Basic における <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 反復回数で提供されます (<xref:System.Int32>) をパラメーターとして。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐを返します。  
  
   
  
## Examples  
 次の例では、並列ループを取り消す方法を示します。  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、64 ビットのインデックスを持つ <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 次のパラメーターと共に提供されます: 反復カウント (<xref:System.Int64>)、および<xref:System.Threading.Tasks.ParallelLoopState>インスタンスを使用して、途中で、ループから抜け出すことがあります。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐに返します。  
  
   
  
## Examples  
 次の例は、使用する方法を示します、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>メソッドを<xref:System.Threading.Tasks.ParallelOptions>オブジェクト。  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>イテレーションが並列で実行される可能性があり、ループ オプションを構成できる、64 ビットのインデックスを持つ <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 64 ビットのインデックスをサポートしています。 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 反復回数で提供されます (<xref:System.Int64>) をパラメーターとして。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐを返します。  
  
   
  
## Examples  
 次の例は、使用する方法を示します<xref:System.Threading.Tasks.ParallelOptions>カスタム タスク スケジューラを指定します。  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 次のパラメーターと共に提供されます。 反復カウント (<xref:System.Int32>)、<xref:System.Threading.Tasks.ParallelLoopState>に途中で、ループから抜け出すことができますのインスタンスと同じスレッドで実行されるイテレーション間で共有できるいくつかのローカル状態。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するタスクごと 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐを返します。  
  
 このメソッドを使用して、例では、次を参照してください。[方法: スレッド ローカル変数を使用する Parallel.For ループを記述](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、64 ビットのインデックスとスレッド ローカル データを持つ <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 次のパラメーターと共に提供されます。 反復カウント (<xref:System.Int64>)、<xref:System.Threading.Tasks.ParallelLoopState>に途中で、ループから抜け出すことができますのインスタンスと同じタスクを実行するイテレーション間で共有できるいくつかのローカル状態。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するタスクごと 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐを返します。  
  
 このメソッドを使用して、例では、次を参照してください。[方法: スレッド ローカル変数を使用する Parallel.For ループを記述](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 次のパラメーターと共に提供されます。 反復カウント (<xref:System.Int32>)、<xref:System.Threading.Tasks.ParallelLoopState>に途中で、ループから抜け出すことができますのインスタンスと同じタスクを実行するイテレーション間で共有できるいくつかのローカル状態。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するタスクごと 1 回呼び出されます。 このデリゲートは、複数のスレッドで同時に呼び出すことがあります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐを返します。  
  
   
  
## Examples  
 次の例では、スレッド ローカル変数を使用して、多くの時間のかかる操作の結果の合計を計算します。 この例では、4 の並列処理の次数を制限します。  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="fromInclusive">開始インデックス。ここで指定したインデックスから処理が開始されます。</param>
        <param name="toExclusive">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="localInit">各スレッドのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各スレッドのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、64 ビットのインデックスとスレッド ローカル データを持つ <see langword="for" /> (Visual Basic の場合は <see langword="For" />) ループを実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートがイテレーションの範囲の値ごとに 1 回呼び出される (`fromInclusive`、 `toExclusive`)。 次のパラメーターと共に提供されます。 反復カウント (<xref:System.Int64>)、<xref:System.Threading.Tasks.ParallelLoopState>に途中で、ループから抜け出すことができますのインスタンスと同じスレッドで実行されるイテレーション間で共有できるいくつかのローカル状態。  
  
 `localInit`デリゲートがスレッドごとに、ループの実行に参加し、これらの各スレッドの初期のローカル状態を返す 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各スレッドの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各スレッドで本文の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各スレッドのローカル状態に対して最後のアクションを実行するスレッドあたり 1 回呼び出されます。 このデリゲートは、複数のスレッドで同時に呼び出すことがあります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 場合`fromInclusive`がより大きいまたは等しい`toExclusive`メソッドは、イテレーションを実行することがなくすぐを返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>反復処理が並列で実行される可能性のある <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each " />) 操作を実行します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <param name="source">元のデータ ソースを格納している順序付け可能なパーティショナー。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> に対して、反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">順序付け可能のパーティショナー、<paramref name="source" /> の <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。  
  
または 
順序付け可能のパーティショナー、ソースの <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> プロパティは <see langword="false" /> を返します。  
  
または 
ソースの順序付け可能なパーティショナーのすべてのメソッドは、<see langword="null" /> を返します。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <param name="source">元のデータ ソースを格納しているパーティショナー。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> パーティショナーの <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。  
  
または 
<paramref name="source" /> パーティショナーのメソッドは <see langword="null" /> を返します。  
  
または 
<paramref name="source" /> パーティショナーの <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> メソッドが正しいパーティション数を返しません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <param name="source">元のデータ ソースを格納しているパーティショナー。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、反復処理が並列で実行される可能性のある <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
   
  
## Examples  
 次の例で使用するための範囲のパーティショナーを実装する方法を示しています<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:。  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> パーティショナーの <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。  
  
または 
<paramref name="source" /> パーティショナー内のメソッドが <see langword="null" /> を返したときにスローされる例外。  
  
または 
<paramref name="source" /> パーティショナーの <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> メソッドが正しいパーティション数を返しません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、64 ビットのインデックスを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 次のパラメーターと共に提供されます: 現在の要素を<xref:System.Threading.Tasks.ParallelLoopState>に途中で、ループから抜け出すことができますのインスタンスと現在の要素のインデックス (<xref:System.Int64>)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 次のパラメーターと共に提供されます: 現在の要素と<xref:System.Threading.Tasks.ParallelLoopState>インスタンスを使用して、途中で、ループから抜け出すことがあります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性のある <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 現在の要素と共にパラメーターとして提供されます。  
  
   
  
## Examples  
 次の例では、<xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29>母音とテキスト ファイル内の空白以外の文字の数をカウントするメソッド。 ここで、<xref:System.Threading.Tasks.ParallelLoopResult>メソッドによって返される値は無視されます。 操作を並列で実行できるため、必ず分割不可能な操作は、カウンター変数をインクリメントして、複数のスレッドが同時に、カウンター変数にアクセスするにしないでに注意してください。 例では、この目的のため、`lock`ステートメント (c#) および`SyncLock`ステートメント (Visual Basic) でします。  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <param name="source">元のデータ ソースを格納している順序付け可能なパーティショナー。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <exception cref="T:System.InvalidOperationException">順序付け可能のパーティショナー、<paramref name="source" /> の <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。  
  
または 
順序付け可能のパーティショナー、<paramref name="source" /> の <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> プロパティは <see langword="false" /> を返します。  
  
または 
順序付け可能なパーティショナー、<paramref name="source" /> 内のメソッドが <see langword="null" /> を返したときにスローされる例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <param name="source">元のデータ ソースを格納しているパーティショナー。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> パーティショナーの <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。  
  
または 
<paramref name="source" /> パーティショナー内のメソッドが <see langword="null" /> を返したときにスローされる例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <param name="source">元のデータ ソースを格納しているパーティショナー。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> パーティショナーの <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。  
  
または 
<paramref name="source" /> パーティショナー内のメソッドが <see langword="null" /> を返したときにスローされる例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、64 ビットのインデックスを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 次のパラメーターと共に提供されます: 現在の要素を<xref:System.Threading.Tasks.ParallelLoopState>に途中で、ループから抜け出すことができますのインスタンスと現在の要素のインデックス (<xref:System.Int64>)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 次のパラメーターと共に提供されます: 現在の要素と<xref:System.Threading.Tasks.ParallelLoopState>インスタンスを使用して、途中で、ループから抜け出すことがあります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 現在の要素と共にパラメーターとして提供されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="source">元のデータ ソースを格納している順序付け可能なパーティショナー。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するタスクごと 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
          <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> の <see cref="T:System.Collections.Concurrent.Partitioner" /> プロパティは <see langword="false" /> を返します。またはパーティショナーは <see langword="null" /> パーティションを返します。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="source">元のデータ ソースを格納しているパーティショナー。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 `localInit`スレッドごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するタスクごと 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
          <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> の <see cref="T:System.Collections.Concurrent.Partitioner" /> プロパティは <see langword="false" /> を返します。またはパーティショナーは <see langword="null" /> パーティションを返します。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 次のパラメーターと共に提供されます。 現在の要素を<xref:System.Threading.Tasks.ParallelLoopState>インスタンスを使用して、途中で、ループから抜け出すことがあります、現在の要素のインデックス (<xref:System.Int64>)、および実行するイテレーション間で共有できるいくつかのローカルの状態同じスレッド。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するタスクごと 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 次のパラメーターと共に提供されます: 現在の要素を<xref:System.Threading.Tasks.ParallelLoopState>に途中で、ループから抜け出すことができますのインスタンスと同じスレッドで実行されるイテレーション間で共有できるいくつかのローカル状態。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するスレッドあたり 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
   
  
## Examples  
 次の例は、使用する方法を示します、<xref:System.Threading.Tasks.Parallel.ForEach%2A>ローカル状態を持つメソッド。  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="source">元のデータ ソースを格納している順序付け可能なパーティショナー。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、64 ビットのインデックスとスレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各スレッドで本文の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するタスクごと 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> または <paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
          <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> の <see cref="T:System.Collections.Concurrent.Partitioner" /> プロパティは <see langword="false" /> を返します。またはパーティショナーは <see langword="null" /> パーティションを返します。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <paramref name="source" /> の要素の型。</typeparam>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="source">元のデータ ソースを格納しているパーティショナー。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のパーティション構成を上書きする場合、このオーバー ロードが提供されます。 たとえば、小さなループ本体は、範囲をパーティション分割によるメリット可能性があります。 <xref:System.Threading.Tasks.Parallel.ForEach%2A>メソッドは、動的なパーティション分割をサポートするカスタム パーティショナーを受け取ります。 このオーバー ロードは、静的な範囲パーティション分割によるメリットが小さなループ本体を持つシナリオに対して提供されます。 パーティショナーは動的パーティションをサポートする必要があります。  詳細については、次を参照してください。 [PLINQ および TPL 用のカスタム パーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)と[方法: 動的パーティションを実装](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)します。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するタスクごと 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" />
          <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> の <see cref="T:System.Collections.Concurrent.Partitioner" /> プロパティは <see langword="false" /> を返します。またはパーティショナーは <see langword="null" /> パーティションを返します。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データと 64 ビットのインデックスを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 次のパラメーターと共に提供されます。 現在の要素を<xref:System.Threading.Tasks.ParallelLoopState>インスタンスを使用して、途中で、ループから抜け出すことがあります、現在の要素のインデックス (<xref:System.Int64>)、および実行するイテレーション間で共有できるいくつかのローカルの状態同じスレッド。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するスレッドあたり 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">ソース内のデータの型。</typeparam>
        <typeparam name="TLocal">スレッド ローカル データの型。</typeparam>
        <param name="source">列挙可能なデータ ソース。</param>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="localInit">各タスクのローカル データの初期状態を返す関数デリゲート。</param>
        <param name="body">1 回の反復処理につき 1 回呼び出されるデリゲート。</param>
        <param name="localFinally">各タスクのローカル状態に対して最後の操作を行うデリゲート。</param>
        <summary>
          <see cref="T:System.Collections.IEnumerable" /> に対して、反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</summary>
        <returns>完了したループの部分に関する情報を格納している構造。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body`デリゲートが内の各要素に対して 1 回呼び出される、`source`列挙可能な。 次のパラメーターと共に提供されます: 現在の要素を<xref:System.Threading.Tasks.ParallelLoopState>に途中で、ループから抜け出すことができますのインスタンスと同じスレッドで実行されるイテレーション間で共有できるいくつかのローカル状態。  
  
 `localInit`タスクごとに、ループの実行に参加し、それらのタスクのそれぞれの初期のローカル状態を返すデリゲートが 1 回呼び出されます。 これらの初期状態は、最初に渡される`body`各タスクでの呼び出し。 次に、以降の本文のすべての呼び出しは、次の本文の呼び出しに渡される可能性がある変更された状態値を返します。 最後に、各タスクの本体の最後の呼び出しに渡される状態値を返します、`localFinally`を委任します。 `localFinally`デリゲートが各タスクのローカル状態に対して最後のアクションを実行するスレッドあたり 1 回呼び出されます。 このデリゲートは複数のタスクで同時に呼び出す可能性があります。したがって、共有変数へのアクセスを同期する必要があります。  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは、既存タスクが完了すると、その実行の有効期間にわたってスレッドよりも多くのタスクを使用することがあり、新しいタスクは置き換えられます。 これにより、基になる<xref:System.Threading.Tasks.TaskScheduler>オブジェクトを追加する機会、変更、またはループのサービスのスレッドを削除します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="body" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localInit" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="localFinally" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
        <exception cref="T:System.AggregateException">すべてのスレッドでスローされたすべての個別の例外を含む例外。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">並列ループ</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された一連のアクションの各アクションを実行します (場合によっては並列で)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions">実行対象の <see cref="T:System.Action" /> の配列。</param>
        <summary>指定された一連のアクションの各アクションを実行します (場合によっては並列で)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを並列に可能性のある一連の操作を実行できます。  
  
 または並列で実行するかどうか、操作が実行される順序に関する保証は行われません。 指定された操作が完了するまで、通常や例外的な終了のため完了が発生するかどうかに関係なく、このメソッドは返しません。  
  
 詳細については、「[How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)」を参照してください。  
  
   
  
## Examples  
 この例では、使用、<xref:System.Threading.Tasks.Parallel.Invoke%2A>他のメソッド、匿名のデリゲートとラムダ式を持つメソッド。  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actions" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">
          <paramref name="actions" /> 配列内のアクションが例外をスローしたときにスローされる例外。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="actions" /> 配列に <see langword="null" /> 要素が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions">この操作の動作を構成するオブジェクト。</param>
        <param name="actions">実行対象のアクションの配列。</param>
        <summary>操作がユーザーによって取り消されていない限り、指定された各アクションを実行します。アクションは並列で実行される可能性があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを並列に可能性のある一連の操作を実行できます。 渡されたキャンセル トークン、<xref:System.Threading.Tasks.ParallelOptions>構造体には、全体の操作をキャンセルする呼び出し元ができるようにします。 詳細については、「[マネージド スレッドのキャンセル](~/docs/standard/threading/cancellation-in-managed-threads.md)」を参照してください。  
  
 または並列で実行するかどうか、操作が実行される順序に関する保証は行われません。 指定された操作が完了するまで、通常や例外的な終了のため完了が発生するかどうかに関係なく、このメソッドは返しません。  
  
 詳細については、「[How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationToken" /> が設定されます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actions" /> 引数が <see langword="null" /> です。  
  
または 
<paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.AggregateException">
          <paramref name="actions" /> 配列内のアクションが例外をスローしたときにスローされる例外。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="actions" /> 配列に <see langword="null" /> 要素が含まれています。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</exception>
      </Docs>
    </Member>
  </Members>
</Type>