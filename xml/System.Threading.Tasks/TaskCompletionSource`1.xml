<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskCompletionSource`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52de3645476c627ddb3a294805715dabada484129.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2de3645476c627ddb3a294805715dabada484129</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>The type of the result value assocatied with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> に関連付けられている結果値の型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Represents the producer side of a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> unbound to a delegate, providing access to the consumer side through the <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> property.</source>
          <target state="translated">デリゲートに関連付けられていない <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> のプロデューサー側を表し、<ph id="ph2">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> プロパティを通じてコンシューマー側へのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>In many scenarios, it is useful to enable a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> to represent an external asynchronous operation.</source>
          <target state="translated">多くのシナリオを有効にすると便利です、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>を外部の非同期操作を表します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> is provided for this purpose.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> この目的で提供されます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>It enables the creation of a task that can be handed out to consumers, and those consumers can use the members of the task as they would any other.</source>
          <target state="translated">これコンシューマーに渡すことができるタスクを作成できの他のようにそれらのコンシューマーがタスクのメンバーを使用できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>However, unlike most tasks, the state of a task created by a TaskCompletionSource is controlled explicitly by the methods on TaskCompletionSource.</source>
          <target state="translated">ただし、ほとんどのタスクとは異なり、TaskCompletionSource によって作成されたタスクの状態がで明示的に制御 TaskCompletionSource のメソッドです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>This enables the completion of the external asynchronous operation to be propagated to the underlying Task.</source>
          <target state="translated">これにより、基になるタスクに反映されるまで外部の非同期操作を完了できます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>The separation also ensures that consumers are not able to transition the state without access to the corresponding TaskCompletionSource.</source>
          <target state="translated">分離では、コンシューマーに対応する TaskCompletionSource へのアクセスなしの状態を変更することができないことも保証されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>For more information, see the entry <bpt id="p1">[</bpt>The Nature of TaskCompletionSource<ph id="ph1">\&lt;</ph>TResult&gt;<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">詳細については、エントリを参照してください。 <bpt id="p1">[</bpt>、TaskCompletionSource 性質<ph id="ph1">\&lt;</ph>TResult &gt;<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx)</ept> .NET ブログでの並列プログラミングでします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>The <bpt id="p1">[</bpt>Parallel Extensions samples<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=165717)</ept> also contain examples of how to use <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">[</bpt>並列拡張機能サンプル<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=165717)</ept>を使用する方法の例を含めることも<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>:</source>
          <target state="translated">次の例を使用する方法を示しています、 <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>All members of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> are thread-safe and may be used from multiple threads concurrently.</source>
          <target state="translated">すべてのメンバー<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>スレッド セーフでは、複数のスレッドから同時に使用することがあります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> object.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
          <source>The state to use as the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>'s AsyncState.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の AsyncState として使用する状態。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> with the specified state.</source>
          <target state="translated">指定された状態を使用して、<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
          <source>The options to use when creating the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の作成時に使用するオプション。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> with the specified options.</source>
          <target state="translated">指定されたオプションを使用して、<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> created by this instance and accessible through its <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.Task%2A&gt;</ph> property will be instantiated using the specified <ph id="ph3">`creationOptions`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>このインスタンスが作成され、経由でアクセスできる、<ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.Task%2A&gt;</ph>プロパティを指定してインスタンス化されます<ph id="ph3">`creationOptions`</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> represent options invalid for use with a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> は、<ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> で使用には無効なオプションを表します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The state to use as the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>'s AsyncState.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の AsyncState として使用する状態。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The options to use when creating the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の作成時に使用するオプション。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> with the specified state and options.</source>
          <target state="translated">指定された状態とオプションを使用して、<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> represent options invalid for use with a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> は、<ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> で使用には無効なオプションを表します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> state.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> を <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> 状態へ遷移させます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>, or if the underlying <ph id="ph5">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has already been disposed.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> は既に 3 つの最終的な状態、<ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>、<ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>、<ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> のいずれかにあります。または、基になる <ph id="ph5">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> が既に破棄されています。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> オブジェクトを <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状態へ遷移させます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The collection of exceptions to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> に関連付ける例外のコレクション。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state and binds a collection of exception objects to it.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> を <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状態へ移行し、例外オブジェクトのコレクションをそれにバインドします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> が破棄されました。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> 引数が null です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>There are one or more null elements in <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> には 1 つまたは複数の null 要素があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> が既に次の 3 つの最終状態のいずれかです: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>、<ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>、または <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>The exception to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> に関連付ける例外。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state and binds it to a specified exception.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> を <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状態に移行させ、それを指定の例外にバインドします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> が破棄されました。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>The <ph id="ph1">&lt;paramref name="exception" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exception" /&gt;</ph> 引数が null です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> が既に次の 3 つの最終状態のいずれかです: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>、<ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>、または <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
          <source>The result value to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> に関連付ける結果値。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> state.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> を <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> 状態へ遷移させます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> が破棄されました。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> が既に次の 3 つの最終状態のいずれかです: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>、<ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>、または <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> created by this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> によって作成される <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> created by this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> によって作成される <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>This property enables a consumer to access the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> that is controlled by this instance.</source>
          <target state="translated">このプロパティを使用すると、アクセスするコンシューマー、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>は、このインスタンスによって制御されます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> object, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property of this <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object returns <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.WaitingForActivation&gt;</ph></source>
          <target state="translated">作成するときに、<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>オブジェクト、<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>このプロパティ<ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>オブジェクトを返します。 <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.WaitingForActivation&gt;</ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A&gt;</ph> methods (and their "Try" variants) on this instance all result in the relevant state transitions on this underlying Task.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A&gt;</ph>メソッド ("Try"変化形) このインスタンスとこれに関連する状態遷移のすべての結果のタスクの基になります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> state.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> 状態への遷移を試みます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> state.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> 状態への遷移を試みます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
          <source>True if the operation was successful; false if the operation was unsuccessful or the object has already been disposed.</source>
          <target state="translated">操作が正常に終了した場合は true。操作が失敗した場合またはオブジェクトが既に破棄されている場合は false。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
          <source>This operation will return false if the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">この操作は false が返されます場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>は既に 3 つの最終的な状態のいずれかの: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>、 <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>、または<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
          <source>This method also returns false if the underlying <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> has already been disposed.</source>
          <target state="translated">このメソッドは、場合も false を返します、基になる<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source>A cancellation token.</source>
          <target state="translated">キャンセル トークン。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> state and enables a cancellation token to be stored in the canceled task.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> 状態への遷移を試みるとともに、キャンセル トークンをキャンセルされたタスクに格納できるようにします。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source>The method returns false if the underlying <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object is already in one of the following three final states.</source>
          <target state="translated">場合、false を返します、基になる<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>オブジェクトは既に次の 3 つの最終的な状態のいずれかにします。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source>This method also returns <ph id="ph1">`false`</ph> if the underlying <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object has already been disposed.</source>
          <target state="translated">このメソッドも返します<ph id="ph1">`false`</ph>場合、基になる<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>オブジェクトは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> オブジェクトの <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状態への遷移を試みます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The collection of exceptions to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> に関連付ける例外のコレクション。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state and binds a collection of exception objects to it.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状態への移行を試み、例外オブジェクトのコレクションをそれにバインドします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>True if the operation was successful; otherwise, false.</source>
          <target state="translated">操作が正常に終了した場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>This operation will return false if the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">この操作は false が返されます場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>は既に 3 つの最終的な状態のいずれかの: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>、 <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>、または<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> が破棄されました。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> 引数が null です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>There are one or more null elements in <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> には 1 つまたは複数の null 要素があります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> collection is empty.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> コレクションが空です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>The exception to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> に関連付ける例外。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state and binds it to a specified exception.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状態への移行を試み、それを指定の例外にバインドします。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>True if the operation was successful; otherwise, false.</source>
          <target state="translated">操作が正常に終了した場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>This operation will return false if the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">この操作は false が返されます場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>は既に 3 つの最終的な状態のいずれかの: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>、 <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>、または<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> が破棄されました。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>The <ph id="ph1">&lt;paramref name="exception" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exception" /&gt;</ph> 引数が null です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>The result value to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> に関連付ける結果値。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> state.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> 状態への遷移を試みます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>True if the operation was successful; otherwise, false.</source>
          <target state="translated">操作が正常に終了した場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>This operation will return false if the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">この操作は false が返されます場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>は既に 3 つの最終的な状態のいずれかの: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>、 <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>、または<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>This method also returns false if the underlying <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> has already been disposed.</source>
          <target state="translated">このメソッドは、場合も false を返します、基になる<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>は既に破棄されています。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>