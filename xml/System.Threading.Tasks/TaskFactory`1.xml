<Type Name="TaskFactory&lt;TResult&gt;" FullName="System.Threading.Tasks.TaskFactory&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="389b84e684a1b9e4839d2eb66fcce77e213b7e71" /><Meta Name="ms.sourcegitcommit" Value="f55040f35c19a83c85beb55243330558f6e369be" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="06/10/2019" /><Meta Name="ms.locfileid" Value="66819089" /></Metadata><TypeSignature Language="C#" Value="public class TaskFactory&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory`1&lt;TResult&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory(Of TResult)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory&lt;'Result&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="303c5-101">このクラスのメソッドによって作成される <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトの戻り値。</span><span class="sxs-lookup"><span data-stu-id="303c5-101">The return value of the <see cref="T:System.Threading.Tasks.Task`1" /> objects that the methods of this class create.</span></span></typeparam>
    <summary><span data-ttu-id="303c5-102"><see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを作成およびスケジュールするためのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="303c5-102">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-103">.NET Framework では、2 つのファクトリの作成とタスクのスケジュールを提供します。</span><span class="sxs-lookup"><span data-stu-id="303c5-103">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="303c5-104"><xref:System.Threading.Tasks.TaskFactory>クラスを作成する<xref:System.Threading.Tasks.Task>と<xref:System.Threading.Tasks.Task%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-104">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
-   <span data-ttu-id="303c5-105"><xref:System.Threading.Tasks.TaskFactory%601>クラスで、作成<xref:System.Threading.Tasks.Task%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-105">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="303c5-106"><xref:System.Threading.Tasks.TaskFactory%601>クラスは、次を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="303c5-106">The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="303c5-107">タスクを作成しを呼び出してすぐに開始、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="303c5-107">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="303c5-108">作成して既定以外の引数を必要とするタスクを実行するには、このメソッドのオーバー ロードを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="303c5-108">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="303c5-109">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>メソッドを構成値、既定値はタスクを作成してすぐに開始する最も簡単な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="303c5-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="303c5-110">呼び出すことによって、配列内のタスクのいずれかが完了したときに起動するタスクを作成、<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A>または<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="303c5-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="303c5-111">呼び出すことによって、配列内のすべてのタスクが完了したときに起動するタスクを作成、<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A>または<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="303c5-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="303c5-112">静的な<xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType>プロパティは、既定値を返します<xref:System.Threading.Tasks.TaskFactory%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="303c5-113">いずれかを呼び出すことができます、<xref:System.Threading.Tasks.TaskFactory%601>クラスのコンス トラクターを構成する、<xref:System.Threading.Tasks.Task%601>オブジェクトを<xref:System.Threading.Tasks.TaskFactory%601>クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates.</span></span> <span data-ttu-id="303c5-114">次の例では、新しい<xref:System.Threading.Tasks.TaskFactory%601>が指定されたキャンセル トークン、タスク作成オプション、継続のオプション、およびカスタマイズされたタスク スケジューラのタスクを作成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)]
 [!code-vb[TPL_Factories#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)]  
  
 <span data-ttu-id="303c5-115">ほとんどの場合は、新しいインスタンスを作成する必要はありません<xref:System.Threading.Tasks.TaskFactory%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="303c5-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance.</span></span> <span data-ttu-id="303c5-116">静的なを使用する代わりに、<xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType>プロパティで、既定値を使用するファクトリ オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="303c5-116">Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="303c5-117">新しいタスクを開始またはタスクの継続を定義するメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="303c5-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="303c5-118">例については、例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="303c5-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="303c5-119">次のコードの例では、静的な<xref:System.Threading.Tasks.Task%601.Factory%2A>プロパティを 2 つの呼び出しを行う、<xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="303c5-119">The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="303c5-120">最初のタスクでは、2 つ目は、ユーザーのマイ ドキュメント ディレクトリのサブディレクトリの名前が設定された文字列配列を返します、ユーザーの [マイ ドキュメント] のディレクトリ内のファイル名が設定された文字列配列を返します。</span><span class="sxs-lookup"><span data-stu-id="303c5-120">The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="303c5-121">呼び出して、<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType>メソッドで、実行が完了した後、2 つのタスクによって返される配列内のファイルとディレクトリの数に関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="303c5-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="303c5-122">すべてのパブリックおよびプロテクト メンバー<see cref="T:System.Threading.Tasks.TaskFactory`1" />スレッド セーフでは、複数のスレッドから同時に使用される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="303c5-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-123">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-123">Task Parallel Library (TPL)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="303c5-124"><see cref="T:System.Threading.Tasks.TaskFactory`1" /> インスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="303c5-124">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-125">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-125">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="303c5-126">既定の構成を使用して、<see cref="T:System.Threading.Tasks.TaskFactory`1" /> インスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="303c5-126">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-127">このコンス トラクターを作成、<xref:System.Threading.Tasks.TaskFactory%601>既定の構成とインスタンス。</span><span class="sxs-lookup"><span data-stu-id="303c5-127">This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration.</span></span> <span data-ttu-id="303c5-128"><xref:System.Threading.Tasks.TaskCreationOptions>プロパティに初期化されます<xref:System.Threading.Tasks.TaskCreationOptions.None>、<xref:System.Threading.Tasks.TaskContinuationOptions>プロパティに初期化されます<xref:System.Threading.Tasks.TaskContinuationOptions.None>、および<xref:System.Threading.Tasks.TaskScheduler>プロパティは、現在のスケジューラに初期化されます (を参照してください<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="303c5-128">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-129">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-129">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="303c5-130">ファクトリ メソッドの呼び出し時に他の取り消しトークンが明示的に指定されていない場合に、この <see cref="T:System.Threading.Tasks.TaskFactory" /> によって作成されたタスクに割り当てられる既定の取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-130">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</span></span></param>
        <summary><span data-ttu-id="303c5-131">既定の構成を使用して、<see cref="T:System.Threading.Tasks.TaskFactory`1" /> インスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="303c5-131">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-132">このコンス トラクターを作成、<xref:System.Threading.Tasks.TaskFactory%601>既定の構成とインスタンス。</span><span class="sxs-lookup"><span data-stu-id="303c5-132">This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration.</span></span> <span data-ttu-id="303c5-133"><xref:System.Threading.Tasks.TaskCreationOptions>プロパティに初期化されます<xref:System.Threading.Tasks.TaskCreationOptions.None>、<xref:System.Threading.Tasks.TaskContinuationOptions>プロパティに初期化されます<xref:System.Threading.Tasks.TaskContinuationOptions.None>、および<xref:System.Threading.Tasks.TaskScheduler>プロパティは、現在のスケジューラに初期化されます (を参照してください<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="303c5-133">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-134">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-134">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="303c5-135">この <see cref="T:System.Threading.Tasks.TaskFactory`1" /> を使用して作成されたタスクをスケジュールするときに使用するスケジューラ。</span><span class="sxs-lookup"><span data-stu-id="303c5-135">The scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span> <span data-ttu-id="303c5-136">null 値は、<see cref="T:System.Threading.Tasks.TaskScheduler" /> を使用する必要があることを示します。</span><span class="sxs-lookup"><span data-stu-id="303c5-136">A null value indicates that the current <see cref="T:System.Threading.Tasks.TaskScheduler" /> should be used.</span></span></param>
        <summary><span data-ttu-id="303c5-137">指定された構成を使用して、<see cref="T:System.Threading.Tasks.TaskFactory`1" /> インスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="303c5-137">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-138">このコンス トラクターで、<xref:System.Threading.Tasks.TaskCreationOptions>プロパティに初期化されます<xref:System.Threading.Tasks.TaskCreationOptions.None>、<xref:System.Threading.Tasks.TaskContinuationOptions>プロパティに初期化されます<xref:System.Threading.Tasks.TaskContinuationOptions.None>、および<xref:System.Threading.Tasks.TaskScheduler>プロパティに初期化されます`scheduler`がある場合を除き、`null`で、この場合、プロパティは、現在のスケジューラに初期化 (を参照してください<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="303c5-138">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-139">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-139">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-140">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-140">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-141">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-141">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="303c5-142">この <see cref="T:System.Threading.Tasks.TaskFactory`1" /> を使用してタスクを作成するときに使用する既定のオプション。</span><span class="sxs-lookup"><span data-stu-id="303c5-142">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-143">この <see cref="T:System.Threading.Tasks.TaskFactory`1" /> を使用して継続タスクを作成するときに使用する既定のオプション。</span><span class="sxs-lookup"><span data-stu-id="303c5-143">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <summary><span data-ttu-id="303c5-144">指定された構成を使用して、<see cref="T:System.Threading.Tasks.TaskFactory`1" /> インスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="303c5-144">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-145">このコンス トラクターで、<xref:System.Threading.Tasks.TaskCreationOptions>プロパティに初期化されます`creationOptions`、<xref:System.Threading.Tasks.TaskContinuationOptions>プロパティに初期化されます`continuationOptions`、および<xref:System.Threading.Tasks.TaskScheduler>プロパティは、現在のスケジューラに初期化 (を参照してください<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="303c5-145">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-146"><paramref name="creationOptions" />、または <paramref name="continuationOptions" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-146"><paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-147">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-147">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-148">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-148">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-149">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-149">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="303c5-150">ファクトリ メソッドの呼び出し時に他の取り消しトークンが明示的に指定されていない場合に、この <see cref="T:System.Threading.Tasks.TaskFactory" /> によって作成されたタスクに割り当てられる既定の取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-150">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-151">この <see cref="T:System.Threading.Tasks.TaskFactory`1" /> を使用してタスクを作成するときに使用する既定のオプション。</span><span class="sxs-lookup"><span data-stu-id="303c5-151">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-152">この <see cref="T:System.Threading.Tasks.TaskFactory`1" /> を使用して継続タスクを作成するときに使用する既定のオプション。</span><span class="sxs-lookup"><span data-stu-id="303c5-152">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="303c5-153">この <see cref="T:System.Threading.Tasks.TaskFactory`1" /> を使用して作成されたタスクをスケジュールするときに使用する既定のスケジューラ。</span><span class="sxs-lookup"><span data-stu-id="303c5-153">The default scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span> <span data-ttu-id="303c5-154">null 値は <see cref="P:System.Threading.Tasks.TaskScheduler.Current" /> を使用する必要があることを示します。</span><span class="sxs-lookup"><span data-stu-id="303c5-154">A null value indicates that <see cref="P:System.Threading.Tasks.TaskScheduler.Current" /> should be used.</span></span></param>
        <summary><span data-ttu-id="303c5-155">指定された構成を使用して、<see cref="T:System.Threading.Tasks.TaskFactory`1" /> インスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="303c5-155">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-156">このコンス トラクターで、<xref:System.Threading.Tasks.TaskCreationOptions>プロパティに初期化されます`creationOptions`、<xref:System.Threading.Tasks.TaskContinuationOptions>プロパティに初期化されます`continuationOptions`、および<xref:System.Threading.Tasks.TaskScheduler>プロパティに初期化されます`scheduler`がある場合を除き、`null`で、この場合、プロパティは、現在のスケジューラに初期化 (を参照してください<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="303c5-156">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-157"><paramref name="creationOptions" />、または <paramref name="continuationOptions" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-157"><paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-158">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-158">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-159">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-159">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-160">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-160">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="303c5-161">このタスク ファクトリの既定のキャンセル トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="303c5-161">Gets the default cancellation token for this task factory.</span></span></summary>
        <value><span data-ttu-id="303c5-162">このタスク ファクトリの既定のキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-162">The default cancellation token for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-163">このプロパティは、別のキャンセル トークンの値がタスクのファクトリ メソッドへの呼び出し時に明示的に指定されていない場合、このファクトリによって作成されたすべてのタスクに割り当てられる既定のキャンセル トークンを返します。</span><span class="sxs-lookup"><span data-stu-id="303c5-163">This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-164">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-165">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-165">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="303c5-166">このタスク ファクトリの <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 列挙値を取得します。</span><span class="sxs-lookup"><span data-stu-id="303c5-166">Gets the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> enumeration value for this task factory.</span></span></summary>
        <value><span data-ttu-id="303c5-167">このタスク ファクトリの既定の継続オプションを示す列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-167">One of the enumeration values that specifies the default continuation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-168">このプロパティは、このファクトリの継続のオプションに既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="303c5-168">This property returns the default continuation options for this factory.</span></span> <span data-ttu-id="303c5-169">これらについては、その他のオプションは、このファクトリのメソッドの呼び出し中に明示的に指定されていない限り、すべての継続タスクを作成に使用します。</span><span class="sxs-lookup"><span data-stu-id="303c5-169">They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-170">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-170">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-171">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-171">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="303c5-172">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-172">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-173">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-173">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-174">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-174">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-175">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-175">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="303c5-176">継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-176">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-177"><paramref name="tasks" /> 配列内のすべてのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-177">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="303c5-178">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-178">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="303c5-179">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-179">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-180">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-180">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-181"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-181">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-182"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-182"><paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-183">または</span><span class="sxs-lookup"><span data-stu-id="303c5-183">-or-</span></span> 
<span data-ttu-id="303c5-184"><paramref name="continuationFunction" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-184">The <paramref name="continuationFunction" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-185"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-185">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-186">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-186">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-187">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-187">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-188">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-188">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="303c5-189">継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-189">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-190"><paramref name="tasks" /> 配列内のすべてのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-190">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-191">新しい継続タスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-191">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="303c5-192">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-192">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="303c5-193">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-193">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-194">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-194">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-195"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-195">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="303c5-196">または</span><span class="sxs-lookup"><span data-stu-id="303c5-196">-or-</span></span> 
<span data-ttu-id="303c5-197"><paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-197">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-198"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-198">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-199">または</span><span class="sxs-lookup"><span data-stu-id="303c5-199">-or-</span></span> 
 <span data-ttu-id="303c5-200"><paramref name="continuationFunction" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="303c5-200"><paramref name="continuationFunction" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-201"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-201">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-202">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-202">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-203">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-203">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-204">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-204">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="303c5-205">継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-205">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-206"><paramref name="tasks" /> 配列内のすべてのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-206">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-207">作成された継続タスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-207">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="303c5-208"><see langword="NotOn*" /> および <see langword="OnlyOn*" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="303c5-208">The <see langword="NotOn*" /> and <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="303c5-209">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-209">Creates a continuation task that will be started upon the completion of a set of provided Tasks.</span></span></summary>
        <returns><span data-ttu-id="303c5-210">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-210">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-211">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-211">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-212"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-212">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-213"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-213">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-214">または</span><span class="sxs-lookup"><span data-stu-id="303c5-214">-or-</span></span> 
<span data-ttu-id="303c5-215"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-215">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-216"><paramref name="continuationOptions" /> 引数に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-216">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-217"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-217">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-218">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-218">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-219">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-219">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-220">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-220">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="303c5-221">継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-221">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-222"><paramref name="tasks" /> 配列内のすべてのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-222">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-223">新しい継続タスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-223">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-224">作成された継続タスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-224">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="303c5-225"><see langword="NotOn*" /> および <see langword="OnlyOn*" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="303c5-225">The <see langword="NotOn*" /> and <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="303c5-226">作成された継続タスクをスケジュールするときに使用するスケジューラ。</span><span class="sxs-lookup"><span data-stu-id="303c5-226">The scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="303c5-227">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-227">Creates a continuation task that will be started upon the completion of a set of provided Tasks.</span></span></summary>
        <returns><span data-ttu-id="303c5-228">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-228">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-229">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-229">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-230"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-230">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-231">または</span><span class="sxs-lookup"><span data-stu-id="303c5-231">-or-</span></span> 
<span data-ttu-id="303c5-232"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-232">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-233">または</span><span class="sxs-lookup"><span data-stu-id="303c5-233">-or-</span></span> 
<span data-ttu-id="303c5-234"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-234">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-235"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-235">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-236"><paramref name="continuationOptions" /> に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-236"><paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-237"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-237">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="303c5-238">または</span><span class="sxs-lookup"><span data-stu-id="303c5-238">-or-</span></span> 
<span data-ttu-id="303c5-239"><paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-239">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-240">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-240">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-241">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-241">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-242">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-242">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="303c5-243">継続元の <paramref name="tasks" /> の結果の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-243">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="303c5-244">継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-244">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-245"><paramref name="tasks" /> 配列内のすべてのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-245">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="303c5-246">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-246">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="303c5-247">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-247">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-248">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-248">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-249"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-249">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-250"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-250">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-251">または</span><span class="sxs-lookup"><span data-stu-id="303c5-251">-or-</span></span> 
<span data-ttu-id="303c5-252"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-252">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-253"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-253">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-254">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-254">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-255">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-255">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-256">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-256">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="303c5-257">継続元の <paramref name="tasks" /> の結果の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-257">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="303c5-258">継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-258">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-259"><paramref name="tasks" /> 配列内のすべてのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-259">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-260">新しい継続タスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-260">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="303c5-261">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-261">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="303c5-262">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-262">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-263">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-263">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-264"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-264">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="303c5-265">または</span><span class="sxs-lookup"><span data-stu-id="303c5-265">-or-</span></span> 
<span data-ttu-id="303c5-266"><paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-267"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-267">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-268">または</span><span class="sxs-lookup"><span data-stu-id="303c5-268">-or-</span></span> 
<span data-ttu-id="303c5-269"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-269">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-270"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-270">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-271">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-271">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-272">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-272">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-273">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-273">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="303c5-274">継続元の <paramref name="tasks" /> の結果の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-274">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="303c5-275">継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-275">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-276"><paramref name="tasks" /> 配列内のすべてのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-276">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-277">作成された継続タスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-277">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="303c5-278"><see langword="NotOn*" /> および <see langword="OnlyOn*" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="303c5-278">The <see langword="NotOn*" /> and <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="303c5-279">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-279">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="303c5-280">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-280">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-281">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-281">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-282"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-282">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-283"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-283">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-284">または</span><span class="sxs-lookup"><span data-stu-id="303c5-284">-or-</span></span> 
<span data-ttu-id="303c5-285"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-285">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-286"><paramref name="continuationOptions" /> 引数に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-286">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-287"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-287">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-288">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-288">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-289">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-289">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-290">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-290">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="303c5-291">継続元の <paramref name="tasks" /> の結果の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-291">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="303c5-292">継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-292">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-293"><paramref name="tasks" /> 配列内のすべてのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-293">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-294">新しい継続タスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-294">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-295">作成された継続タスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-295">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="303c5-296"><see langword="NotOn*" /> および <see langword="OnlyOn*" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="303c5-296">The <see langword="NotOn*" /> and <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="303c5-297">作成された継続タスクをスケジュールするときに使用するスケジューラ。</span><span class="sxs-lookup"><span data-stu-id="303c5-297">The scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="303c5-298">指定された一連のタスクの完了時に開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-298">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="303c5-299">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-299">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-300">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-300">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-301"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-301">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-302">または</span><span class="sxs-lookup"><span data-stu-id="303c5-302">-or-</span></span> 
<span data-ttu-id="303c5-303"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-303">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-304">または</span><span class="sxs-lookup"><span data-stu-id="303c5-304">-or-</span></span> 
<span data-ttu-id="303c5-305"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-305">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-306"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-306">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-307"><paramref name="continuationOptions" /> 引数に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-307">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-308"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-308">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="303c5-309">または</span><span class="sxs-lookup"><span data-stu-id="303c5-309">-or-</span></span> 
<span data-ttu-id="303c5-310"><paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-310">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-311">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-311">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-312">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-312">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-313">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-313">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="303c5-314">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-314">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-315">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-315">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-316">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-316">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-317">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-317">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="303c5-318">いずれかのタスクが完了したときに開始される継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-318">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-319"><paramref name="tasks" /> 配列内のいずれかのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-319">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="303c5-320">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-320">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="303c5-321">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-321">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-322">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-322">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-323"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-323">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-324"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-324">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-325">または</span><span class="sxs-lookup"><span data-stu-id="303c5-325">-or-</span></span> 
<span data-ttu-id="303c5-326"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-326">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-327"><paramref name="tasks" /> 配列に null 値が含まれているか、空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-327">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-328">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-328">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-329">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-329">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-330">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-330">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="303c5-331">いずれかのタスクが完了したときに開始される継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-331">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-332"><paramref name="tasks" /> 配列内のいずれかのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-332">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-333">新しい継続タスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-333">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="303c5-334">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-334">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="303c5-335">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-335">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-336">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-336">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-337"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-337">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="303c5-338">または</span><span class="sxs-lookup"><span data-stu-id="303c5-338">-or-</span></span> 
<span data-ttu-id="303c5-339"><paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-339">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-340"><paramref name="tasks" /> 配列が null です。</span><span class="sxs-lookup"><span data-stu-id="303c5-340">The <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="303c5-341">または</span><span class="sxs-lookup"><span data-stu-id="303c5-341">-or-</span></span> 
<span data-ttu-id="303c5-342"><paramref name="continuationFunction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="303c5-342">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-343"><paramref name="tasks" /> 配列は null 値を含みます。</span><span class="sxs-lookup"><span data-stu-id="303c5-343">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="303c5-344">または</span><span class="sxs-lookup"><span data-stu-id="303c5-344">-or-</span></span> 
<span data-ttu-id="303c5-345"><paramref name="tasks" /> 配列が空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-345">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-346">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-346">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-347">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-347">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-348">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-348">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="303c5-349">いずれかのタスクが完了したときに開始される継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-349">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-350"><paramref name="tasks" /> 配列内のいずれかのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-350">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-351">作成された継続タスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-351">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="303c5-352"><see langword="NotOn*" /> および <see langword="OnlyOn*" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="303c5-352">The <see langword="NotOn*" /> and <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="303c5-353">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-353">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="303c5-354">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-354">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-355">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-355">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-356"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-356">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-357"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-357">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-358">または</span><span class="sxs-lookup"><span data-stu-id="303c5-358">-or-</span></span> 
<span data-ttu-id="303c5-359"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-359">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-360"><paramref name="continuationOptions" /> 引数に無効な列挙値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-360">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-361"><paramref name="tasks" /> 配列は null 値を含みます。</span><span class="sxs-lookup"><span data-stu-id="303c5-361">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="303c5-362">または</span><span class="sxs-lookup"><span data-stu-id="303c5-362">-or-</span></span> 
<span data-ttu-id="303c5-363"><paramref name="tasks" /> 配列が空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-363">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-364">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-364">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-365">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-365">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-366">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-366">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="303c5-367">いずれかのタスクが完了したときに開始される継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-367">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-368"><paramref name="tasks" /> 配列内のいずれかのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-368">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-369">新しい継続タスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-369">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-370">作成された継続タスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-370">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="303c5-371"><see langword="NotOn*" /> および <see langword="OnlyOn*" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="303c5-371">The <see langword="NotOn*" /> and <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="303c5-372">作成された継続タスクをスケジュールするときに使用するタスク スケジューラー。</span><span class="sxs-lookup"><span data-stu-id="303c5-372">The task scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="303c5-373">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-373">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="303c5-374">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-374">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-375">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-375">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-376"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-376">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-377">または</span><span class="sxs-lookup"><span data-stu-id="303c5-377">-or-</span></span> 
<span data-ttu-id="303c5-378"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-378">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-379">または</span><span class="sxs-lookup"><span data-stu-id="303c5-379">-or-</span></span> 
<span data-ttu-id="303c5-380"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-380">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-381"><paramref name="tasks" /> 配列は null 値を含みます。</span><span class="sxs-lookup"><span data-stu-id="303c5-381">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="303c5-382">または</span><span class="sxs-lookup"><span data-stu-id="303c5-382">-or-</span></span> 
<span data-ttu-id="303c5-383"><paramref name="tasks" /> 配列が空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-383">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-384"><paramref name="continuationOptions" /> 引数に無効な <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-384">The <paramref name="continuationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-385"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-385">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="303c5-386">または</span><span class="sxs-lookup"><span data-stu-id="303c5-386">-or-</span></span> 
<span data-ttu-id="303c5-387"><paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-387">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-388">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-388">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-389">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-389">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-390">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-390">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="303c5-391">継続元の <paramref name="tasks" /> の結果の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-391">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="303c5-392">いずれかのタスクが完了したときに開始される継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-392">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-393"><paramref name="tasks" /> 配列内のいずれかのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-393">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="303c5-394">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-394">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="303c5-395">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-395">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-396">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-396">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-397"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-397">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-398"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-398">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-399">または</span><span class="sxs-lookup"><span data-stu-id="303c5-399">-or-</span></span> 
<span data-ttu-id="303c5-400"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-400">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-401"><paramref name="tasks" /> 配列は null 値を含みます。</span><span class="sxs-lookup"><span data-stu-id="303c5-401">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="303c5-402">または</span><span class="sxs-lookup"><span data-stu-id="303c5-402">-or-</span></span> 
<span data-ttu-id="303c5-403"><paramref name="tasks" /> 配列が空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-403">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-404">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-404">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-405">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-405">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-406">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-406">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="303c5-407">継続元の <paramref name="tasks" /> の結果の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-407">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="303c5-408">いずれかのタスクが完了したときに開始される継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-408">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-409"><paramref name="tasks" /> 配列内のいずれかのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-409">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-410">新しい継続タスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-410">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="303c5-411">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-411">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="303c5-412">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-412">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-413">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-413">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-414"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-414">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="303c5-415">または</span><span class="sxs-lookup"><span data-stu-id="303c5-415">-or-</span></span> 
<span data-ttu-id="303c5-416"><paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-416">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-417"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-417">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-418">または</span><span class="sxs-lookup"><span data-stu-id="303c5-418">-or-</span></span> 
<span data-ttu-id="303c5-419"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-419">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-420"><paramref name="tasks" /> 配列は null 値を含みます。</span><span class="sxs-lookup"><span data-stu-id="303c5-420">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="303c5-421">または</span><span class="sxs-lookup"><span data-stu-id="303c5-421">-or-</span></span> 
<span data-ttu-id="303c5-422"><paramref name="tasks" /> 配列が空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-422">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-423">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-423">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-424">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-424">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-425">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-425">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="303c5-426">継続元の <paramref name="tasks" /> の結果の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-426">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="303c5-427">いずれかのタスクが完了したときに開始される継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-427">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-428"><paramref name="tasks" /> 配列内のいずれかのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-428">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-429">作成された継続タスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-429">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="303c5-430"><see langword="NotOn*" /> および <see langword="OnlyOn*" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="303c5-430">The <see langword="NotOn*" /> and <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="303c5-431">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-431">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="303c5-432">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-432">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-433">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-433">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-434"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-434">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-435"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-435">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-436">または</span><span class="sxs-lookup"><span data-stu-id="303c5-436">-or-</span></span> 
<span data-ttu-id="303c5-437"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-437">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-438"><paramref name="continuationOptions" /> 引数に無効な列挙値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-438">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-439"><paramref name="tasks" /> 配列は null 値を含みます。</span><span class="sxs-lookup"><span data-stu-id="303c5-439">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="303c5-440">または</span><span class="sxs-lookup"><span data-stu-id="303c5-440">-or-</span></span> 
<span data-ttu-id="303c5-441"><paramref name="tasks" /> 配列が空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-441">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-442">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-442">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-443">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-443">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-444">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-444">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="303c5-445">継続元の <paramref name="tasks" /> の結果の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-445">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="303c5-446">いずれかのタスクが完了したときに開始される継続タスクの配列。</span><span class="sxs-lookup"><span data-stu-id="303c5-446">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="303c5-447"><paramref name="tasks" /> 配列内のいずれかのタスクが完了したときに非同期的に実行する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-447">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-448">新しい継続タスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-448">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="303c5-449">作成された継続タスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-449">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="303c5-450"><see langword="NotOn*" /> および <see langword="OnlyOn*" /> の値が無効です。</span><span class="sxs-lookup"><span data-stu-id="303c5-450">The <see langword="NotOn*" /> and <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="303c5-451">作成された継続 <see cref="T:System.Threading.Tasks.TaskScheduler" /> をスケジュールするときに使用する <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-451">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="303c5-452">指定された一連のタスクのうち任意のタスクが完了したときに開始される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-452">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="303c5-453">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-453">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-454">完了した後、タスクは、これらの状態のいずれかで: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="303c5-454">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-455"><paramref name="tasks" /> 配列が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-455">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-456">または</span><span class="sxs-lookup"><span data-stu-id="303c5-456">-or-</span></span> 
<span data-ttu-id="303c5-457"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-457">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-458">または</span><span class="sxs-lookup"><span data-stu-id="303c5-458">-or-</span></span> 
<span data-ttu-id="303c5-459"><paramref name="scheduler" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="303c5-459">The <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="303c5-460"><paramref name="tasks" /> 配列は null 値を含みます。</span><span class="sxs-lookup"><span data-stu-id="303c5-460">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="303c5-461">または</span><span class="sxs-lookup"><span data-stu-id="303c5-461">-or-</span></span> 
<span data-ttu-id="303c5-462"><paramref name="tasks" /> 配列が空です。</span><span class="sxs-lookup"><span data-stu-id="303c5-462">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-463"><paramref name="continuationOptions" /> 引数が、TaskContinuationOptions の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="303c5-463">The <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-464"><paramref name="tasks" /> 配列の要素の 1 つは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="303c5-464">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="303c5-465">または</span><span class="sxs-lookup"><span data-stu-id="303c5-465">-or-</span></span> 
<span data-ttu-id="303c5-466"><paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-466">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-467">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-467">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="303c5-468">継続タスクを使用したタスクの連結</span><span class="sxs-lookup"><span data-stu-id="303c5-468">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="303c5-469">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="303c5-469">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="303c5-470">このタスク ファクトリの <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 列挙値を取得します。</span><span class="sxs-lookup"><span data-stu-id="303c5-470">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> enumeration value for this task factory.</span></span></summary>
        <value><span data-ttu-id="303c5-471">このタスク ファクトリの既定の作成オプションを示す列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-471">One of the enumeration values that specifies the default creation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-472">このプロパティは、このファクトリの作成オプションに既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="303c5-472">This property returns the default creation options for this factory.</span></span> <span data-ttu-id="303c5-473">これらについては、その他のオプションは、このファクトリのメソッドの呼び出し中に明示的に指定されていない限り、すべてのタスクを作成に使用します。</span><span class="sxs-lookup"><span data-stu-id="303c5-473">They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-474">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-474">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-475">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-475">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="303c5-476">新しいタスク インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-476">Creates a task instance.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-477">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-477">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-478">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-478">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="303c5-479">完了時に <paramref name="endMethod" /> の処理が開始される <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-479">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-480">完了した <paramref name="asyncResult" /> を処理する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-480">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="303c5-481">指定された <see cref="T:System.IAsyncResult" /> の完了時に終了メソッド関数を実行するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-481">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="303c5-482">非同期操作を表す <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-482">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-483"><paramref name="asyncResult" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-483">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-484">または</span><span class="sxs-lookup"><span data-stu-id="303c5-484">-or-</span></span> 
<span data-ttu-id="303c5-485"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-485">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-486">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-486">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-487">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-487">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="303c5-488">非同期操作を開始するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-488">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-489">非同期操作を終了するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-489">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-490"><paramref name="beginMethod" /> デリゲートによって使用されるデータを格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-490">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="303c5-491">非同期プログラミング モデルのパターンに準拠した開始メソッドと終了メソッドの組み合わせを表すタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-491">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="303c5-492">非同期操作を表す作成されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-492">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-493">このメソッドによってスローされた例外のスロー、`beginMethod`します。</span><span class="sxs-lookup"><span data-stu-id="303c5-493">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="303c5-494">例外の`endmethod`返されたタスクを待機している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="303c5-494">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-495"><paramref name="beginMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-495">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-496">または</span><span class="sxs-lookup"><span data-stu-id="303c5-496">-or-</span></span> 
<span data-ttu-id="303c5-497"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-497">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-498">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-498">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-499">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-499">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="303c5-500">完了時に <paramref name="endMethod" /> の処理が開始される <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-500">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-501">完了した <paramref name="asyncResult" /> を処理する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-501">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-502">作成されたタスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-502">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="303c5-503">指定された <see cref="T:System.IAsyncResult" /> の完了時に終了メソッド関数を実行するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-503">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="303c5-504">非同期操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-504">A task that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-505"><paramref name="asyncResult" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-505">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-506">または</span><span class="sxs-lookup"><span data-stu-id="303c5-506">-or-</span></span> 
<span data-ttu-id="303c5-507"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-507">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-508"><paramref name="creationOptions" /> 引数に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-508">The <paramref name="creationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-509">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-509">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-510">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-510">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="303c5-511">非同期操作を開始するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-511">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-512">非同期操作を終了するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-512">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-513"><paramref name="beginMethod" /> デリゲートによって使用されるデータを格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-513">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-514">作成されたタスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-514">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="303c5-515">非同期プログラミング モデルのパターンに準拠した開始メソッドと終了メソッドの組み合わせを表すタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-515">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="303c5-516">非同期操作を表す作成された <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-516">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-517">このメソッドによってスローされた例外のスロー、`beginMethod`します。</span><span class="sxs-lookup"><span data-stu-id="303c5-517">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="303c5-518">例外の`endmethod`返されたタスクを待機している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="303c5-518">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-519"><paramref name="beginMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-519">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-520">または</span><span class="sxs-lookup"><span data-stu-id="303c5-520">-or-</span></span> 
<span data-ttu-id="303c5-521"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-521">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-522"><paramref name="creationOptions" /> 引数に無効な値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-522">The <paramref name="creationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-523">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-523">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-524">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-524">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="303c5-525">完了時に <paramref name="endMethod" /> の処理が開始される <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-525">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-526">完了した <paramref name="asyncResult" /> を処理する関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-526">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-527">作成されたタスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-527">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="303c5-528">終了メソッドを実行するタスクをスケジュールするときに使用するタスク スケジューラー。</span><span class="sxs-lookup"><span data-stu-id="303c5-528">The task scheduler that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="303c5-529">指定された <see cref="T:System.IAsyncResult" /> の完了時に終了メソッド関数を実行するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-529">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="303c5-530">非同期操作を表す作成されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-530">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-531"><paramref name="asyncResult" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-531">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-532">または</span><span class="sxs-lookup"><span data-stu-id="303c5-532">-or-</span></span> 
<span data-ttu-id="303c5-533"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-533">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-534">または</span><span class="sxs-lookup"><span data-stu-id="303c5-534">-or-</span></span> 
<span data-ttu-id="303c5-535"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-535">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-536"><paramref name="creationOptions" /> パラメーターは無効な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="303c5-536">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-537">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-537">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-538">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-538">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="303c5-539"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-539">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="303c5-540">非同期操作を開始するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-540">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-541">非同期操作を終了するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-541">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="303c5-542"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-542">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-543"><paramref name="beginMethod" /> デリゲートによって使用されるデータを格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-543">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="303c5-544">非同期プログラミング モデルのパターンに準拠した開始メソッドと終了メソッドの組み合わせを表すタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-544">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="303c5-545">非同期操作を表す作成されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-545">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-546">このメソッドによってスローされた例外のスロー、`beginMethod`します。</span><span class="sxs-lookup"><span data-stu-id="303c5-546">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="303c5-547">例外の`endmethod`返されたタスクを待機している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="303c5-547">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-548"><paramref name="beginMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-548">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-549">または</span><span class="sxs-lookup"><span data-stu-id="303c5-549">-or-</span></span> 
<span data-ttu-id="303c5-550"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-550">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-551">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-551">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-552">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-552">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="303c5-553"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-553">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="303c5-554">非同期操作を開始するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-554">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-555">非同期操作を終了するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-555">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="303c5-556"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-556">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-557"><paramref name="beginMethod" /> デリゲートによって使用されるデータを格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-557">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-558">作成されたタスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-558">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="303c5-559">非同期プログラミング モデルのパターンに準拠した開始メソッドと終了メソッドの組み合わせを表すタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-559">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="303c5-560">非同期操作を表す作成されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-560">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-561">このメソッドによってスローされた例外のスロー、`beginMethod`します。</span><span class="sxs-lookup"><span data-stu-id="303c5-561">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="303c5-562">例外の`endmethod`返されたタスクを待機している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="303c5-562">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-563"><paramref name="beginMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-563">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-564">または</span><span class="sxs-lookup"><span data-stu-id="303c5-564">-or-</span></span> 
<span data-ttu-id="303c5-565"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-565">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-566"><paramref name="creationOptions" /> パラメーターは無効な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="303c5-566">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-567">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-567">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-568">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-568">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="303c5-569"><paramref name="beginMethod" /> デリゲートに渡される第 2 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-569">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="303c5-570"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-570">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="303c5-571">非同期操作を開始するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-571">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-572">非同期操作を終了するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-572">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="303c5-573"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-573">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="303c5-574"><paramref name="beginMethod" /> デリゲートに渡される第 2 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-574">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-575"><paramref name="beginMethod" /> デリゲートによって使用されるデータを格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-575">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="303c5-576">非同期プログラミング モデルのパターンに準拠した開始メソッドと終了メソッドの組み合わせを表すタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-576">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="303c5-577">非同期操作を表す作成されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-577">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-578">このメソッドによってスローされた例外のスロー、`beginMethod`します。</span><span class="sxs-lookup"><span data-stu-id="303c5-578">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="303c5-579">例外の`endmethod`返されたタスクを待機している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="303c5-579">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-580"><paramref name="beginMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-580">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-581">または</span><span class="sxs-lookup"><span data-stu-id="303c5-581">-or-</span></span> 
<span data-ttu-id="303c5-582"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-582">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-583">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-583">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-584">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-584">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="303c5-585"><paramref name="beginMethod" /> デリゲートに渡される第 2 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-585">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="303c5-586"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-586">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="303c5-587">非同期操作を開始するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-587">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-588">非同期操作を終了するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-588">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="303c5-589"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-589">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="303c5-590"><paramref name="beginMethod" /> デリゲートに渡される第 2 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-590">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-591"><paramref name="beginMethod" /> デリゲートによって使用されるデータを格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-591">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-592">作成された <see cref="T:System.Threading.Tasks.Task`1" /> の動作を制御するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-592">An object that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="303c5-593">非同期プログラミング モデルのパターンに準拠した開始メソッドと終了メソッドの組み合わせを表すタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-593">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="303c5-594">非同期操作を表す作成されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-594">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-595">このメソッドによってスローされた例外のスロー、`beginMethod`します。</span><span class="sxs-lookup"><span data-stu-id="303c5-595">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="303c5-596">例外の`endmethod`返されたタスクを待機している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="303c5-596">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-597"><paramref name="beginMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-597">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-598">または</span><span class="sxs-lookup"><span data-stu-id="303c5-598">-or-</span></span> 
<span data-ttu-id="303c5-599"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-599">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-600"><paramref name="creationOptions" /> パラメーターは無効な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="303c5-600">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-601">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-601">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-602">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-602">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="303c5-603"><paramref name="beginMethod" /> デリゲートに渡される第 2 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-603">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="303c5-604"><paramref name="beginMethod" /> デリゲートに渡される第 3 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-604">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="303c5-605"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-605">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="303c5-606">非同期操作を開始するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-606">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-607">非同期操作を終了するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-607">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="303c5-608"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-608">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="303c5-609"><paramref name="beginMethod" /> デリゲートに渡される第 2 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-609">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="303c5-610"><paramref name="beginMethod" /> デリゲートに渡される第 3 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-610">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-611"><paramref name="beginMethod" /> デリゲートによって使用されるデータを格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-611">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="303c5-612">非同期プログラミング モデルのパターンに準拠した開始メソッドと終了メソッドの組み合わせを表すタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-612">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="303c5-613">非同期操作を表す作成されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-613">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-614">このメソッドによってスローされた例外のスロー、`beginMethod`します。</span><span class="sxs-lookup"><span data-stu-id="303c5-614">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="303c5-615">例外の`endmethod`返されたタスクを待機している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="303c5-615">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-616"><paramref name="beginMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-616">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-617">または</span><span class="sxs-lookup"><span data-stu-id="303c5-617">-or-</span></span> 
<span data-ttu-id="303c5-618"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-618">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-619">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-619">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-620">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-620">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="303c5-621"><paramref name="beginMethod" /> デリゲートに渡される第 2 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-621">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="303c5-622"><paramref name="beginMethod" /> デリゲートに渡される第 3 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-622">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="303c5-623"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数の型。</span><span class="sxs-lookup"><span data-stu-id="303c5-623">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="303c5-624">非同期操作を開始するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-624">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="303c5-625">非同期操作を終了するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-625">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="303c5-626"><paramref name="beginMethod" /> デリゲートに渡される第 1 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-626">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="303c5-627"><paramref name="beginMethod" /> デリゲートに渡される第 2 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-627">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="303c5-628"><paramref name="beginMethod" /> デリゲートに渡される第 3 引数。</span><span class="sxs-lookup"><span data-stu-id="303c5-628">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-629"><paramref name="beginMethod" /> デリゲートによって使用されるデータを格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-629">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-630">作成されたタスクの動作を制御するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-630">An object that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="303c5-631">非同期プログラミング モデルのパターンに準拠した開始メソッドと終了メソッドの組み合わせを表すタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="303c5-631">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="303c5-632">非同期操作を表す作成されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-632">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-633">このメソッドによってスローされた例外のスロー、`beginMethod`します。</span><span class="sxs-lookup"><span data-stu-id="303c5-633">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="303c5-634">例外の`endmethod`返されたタスクを待機している場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="303c5-634">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-635"><paramref name="beginMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-635">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-636">または</span><span class="sxs-lookup"><span data-stu-id="303c5-636">-or-</span></span> 
<span data-ttu-id="303c5-637"><paramref name="endMethod" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-637">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-638"><paramref name="creationOptions" /> パラメーターは無効な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="303c5-638">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-639">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-639">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-640">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-640">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="303c5-641">このタスク ファクトリのタスク スケジューラーを取得します。</span><span class="sxs-lookup"><span data-stu-id="303c5-641">Gets the task scheduler for this task factory.</span></span></summary>
        <value><span data-ttu-id="303c5-642">このタスク ファクトリのタスク スケジューラー。</span><span class="sxs-lookup"><span data-stu-id="303c5-642">The task scheduler for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-643">このプロパティは、このファクトリの既定のスケジューラを返します。</span><span class="sxs-lookup"><span data-stu-id="303c5-643">This property returns the default scheduler for this factory.</span></span> <span data-ttu-id="303c5-644">他のスケジューラがこのファクトリのメソッドの呼び出し中に明示的に指定されていない場合は、すべてのタスクをスケジュールすることに使用されます。</span><span class="sxs-lookup"><span data-stu-id="303c5-644">It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="303c5-645">このプロパティを返す場合`null`、<xref:System.Threading.Tasks.TaskScheduler.Current%2A>使用されます。</span><span class="sxs-lookup"><span data-stu-id="303c5-645">If this property returns `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will be used.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-646">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-646">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-647">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-647">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="303c5-648">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-648">Creates and starts a task.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-649">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-649">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-650">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-650">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="303c5-651">タスクを通じて取得される結果を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-651">A function delegate that returns the future result to be available through the task.</span></span></param>
        <summary><span data-ttu-id="303c5-652">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-652">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="303c5-653">開始されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-653">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-654">呼び出す`StartNew`のいずれかを使用して、タスクの作成と同等の機能は、<xref:System.Threading.Tasks.Task%601>コンス トラクター、および、呼び出し元、<xref:System.Threading.Tasks.Task.Start%2A>メソッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="303c5-654">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="303c5-655">ただし、作成とスケジュール設定を分離する必要があります、しない限り、`StartNew`シンプルさとパフォーマンスの両方のアプローチをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="303c5-655">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-656"><paramref name="function" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-656">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-657">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-657">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-658">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-658">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="303c5-659">タスクを通じて取得される結果を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-659">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-660"><paramref name="function" /> デリゲートが使用するデータを格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-660">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <summary><span data-ttu-id="303c5-661">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-661">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="303c5-662">開始されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-662">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-663">呼び出す`StartNew`のいずれかを使用して、タスクの作成と同等の機能は、<xref:System.Threading.Tasks.Task%601>コンス トラクターと、呼び出し元、<xref:System.Threading.Tasks.Task.Start%2A>メソッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="303c5-663">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="303c5-664">ただし、作成とスケジュール設定を分離する必要があります、しない限り、`StartNew`シンプルさとパフォーマンスの両方のアプローチをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="303c5-664">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-665"><paramref name="function" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-665">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-666">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-666">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-667">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-667">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="303c5-668">タスクを通じて取得される結果を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-668">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-669">新しいタスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-669">The cancellation token that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="303c5-670">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-670">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="303c5-671">開始されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-671">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-672">呼び出す`StartNew`のいずれかを使用して、タスクの作成と同等の機能は、<xref:System.Threading.Tasks.Task%601>コンス トラクターと、呼び出し元、<xref:System.Threading.Tasks.Task.Start%2A>メソッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="303c5-672">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="303c5-673">ただし、作成とスケジュール設定を分離する必要があります、しない限り、`StartNew`シンプルさとパフォーマンスの両方のアプローチをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="303c5-673">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-674"><paramref name="cancellationToken" /> を作成したキャンセル トークンのソースが破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-674">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-675"><paramref name="function" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-675">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-676">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-676">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-677">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-677">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="303c5-678">タスクを通じて取得される結果を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-678">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-679">作成されたタスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-679">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="303c5-680">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-680">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="303c5-681">開始された <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="303c5-681">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-682">呼び出す`StartNew`のいずれかを使用して、タスクの作成と同等の機能は、<xref:System.Threading.Tasks.Task%601>コンス トラクターと、呼び出し元、<xref:System.Threading.Tasks.Task.Start%2A>メソッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="303c5-682">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="303c5-683">ただし、作成とスケジュール設定を分離する必要があります、しない限り、`StartNew`シンプルさとパフォーマンスの両方のアプローチをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="303c5-683">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-684"><paramref name="function" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-684">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-685"><paramref name="creationOptions" /> パラメーターは無効な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="303c5-685">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-686">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-686">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-687">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-687">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="303c5-688">タスクを通じて取得される結果を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-688">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-689"><paramref name="function" /> デリゲートが使用するデータを格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-689">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-690">新しいタスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-690">The cancellation token that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="303c5-691">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-691">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="303c5-692">開始されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-692">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-693">呼び出す`StartNew`のいずれかを使用して、タスクの作成と同等の機能は、<xref:System.Threading.Tasks.Task%601>コンス トラクターと、呼び出し元、<xref:System.Threading.Tasks.Task.Start%2A>メソッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="303c5-693">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="303c5-694">ただし、作成とスケジュール設定を分離する必要があります、しない限り、`StartNew`シンプルさとパフォーマンスの両方のアプローチをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="303c5-694">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-695"><paramref name="cancellationToken" /> を作成したキャンセル トークンのソースが破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-695">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-696"><paramref name="function" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-696">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-697">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-697">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-698">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-698">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="303c5-699">タスクを通じて取得される結果を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-699">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-700"><paramref name="function" /> デリゲートが使用するデータを格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-700">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-701">作成されたタスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-701">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="303c5-702">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-702">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="303c5-703">開始されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-703">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-704">呼び出す`StartNew`のいずれかを使用して、タスクの作成と同等の機能は、<xref:System.Threading.Tasks.Task%601>コンス トラクターと、呼び出し元、<xref:System.Threading.Tasks.Task.Start%2A>メソッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="303c5-704">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="303c5-705">ただし、作成とスケジュール設定を分離する必要があります、しない限り、`StartNew`シンプルさとパフォーマンスの両方のアプローチをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="303c5-705">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-706"><paramref name="function" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-706">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-707"><paramref name="creationOptions" /> パラメーターは無効な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="303c5-707">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-708">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-708">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-709">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-709">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="303c5-710">タスクを通じて取得される結果を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-710">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-711">新しいタスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-711">The cancellation token that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-712">作成されたタスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-712">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="303c5-713">作成されたタスクをスケジュールするときに使用するタスク スケジューラ。</span><span class="sxs-lookup"><span data-stu-id="303c5-713">The task scheduler that is used to schedule the created task.</span></span></param>
        <summary><span data-ttu-id="303c5-714">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-714">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="303c5-715">開始されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-715">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-716">呼び出す`StartNew`のいずれかを使用して、タスクの作成と同等の機能は、<xref:System.Threading.Tasks.Task%601>コンス トラクターと、呼び出し元、<xref:System.Threading.Tasks.Task.Start%2A>メソッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="303c5-716">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="303c5-717">ただし、作成とスケジュール設定を分離する必要があります、しない限り、`StartNew`シンプルさとパフォーマンスの両方のアプローチをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="303c5-717">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-718"><paramref name="cancellationToken" /> を作成したキャンセル トークンのソースが破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-718">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-719"><paramref name="function" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-719">The <paramref name="function" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-720">または</span><span class="sxs-lookup"><span data-stu-id="303c5-720">-or-</span></span> 
<span data-ttu-id="303c5-721"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-721">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-722"><paramref name="creationOptions" /> パラメーターは無効な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="303c5-722">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-723">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-723">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-724">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-724">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="303c5-725">タスクを通じて取得される結果を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="303c5-725">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="303c5-726"><paramref name="function" /> デリゲートが使用するデータを格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="303c5-726">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="303c5-727">新しいタスクに割り当てられる取り消しトークン。</span><span class="sxs-lookup"><span data-stu-id="303c5-727">The cancellation token that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="303c5-728">作成されたタスクの動作を制御する列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="303c5-728">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="303c5-729">作成されたタスクをスケジュールするときに使用するタスク スケジューラ。</span><span class="sxs-lookup"><span data-stu-id="303c5-729">The task scheduler that is used to schedule the created task.</span></span></param>
        <summary><span data-ttu-id="303c5-730">タスクを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="303c5-730">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="303c5-731">開始されたタスク。</span><span class="sxs-lookup"><span data-stu-id="303c5-731">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="303c5-732">呼び出す`StartNew`のいずれかを使用して、タスクの作成と同等の機能は、<xref:System.Threading.Tasks.Task%601>コンス トラクターと、呼び出し元、<xref:System.Threading.Tasks.Task.Start%2A>メソッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="303c5-732">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="303c5-733">ただし、作成とスケジュール設定を分離する必要があります、しない限り、`StartNew`シンプルさとパフォーマンスの両方のアプローチをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="303c5-733">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="303c5-734"><paramref name="cancellationToken" /> を作成したキャンセル トークンのソースが破棄されています。</span><span class="sxs-lookup"><span data-stu-id="303c5-734">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="303c5-735"><paramref name="function" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-735">The <paramref name="function" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="303c5-736">または</span><span class="sxs-lookup"><span data-stu-id="303c5-736">-or-</span></span> 
<span data-ttu-id="303c5-737"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="303c5-737">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="303c5-738"><paramref name="creationOptions" /> パラメーターは無効な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="303c5-738">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="303c5-739">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="303c5-739">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="303c5-740">TPL と他の非同期パターンの使用</span><span class="sxs-lookup"><span data-stu-id="303c5-740">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
