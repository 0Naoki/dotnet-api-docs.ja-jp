<Type Name="ParallelLoopResult" FullName="System.Threading.Tasks.ParallelLoopResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aaa9c092e2e2124e8efb4e840559731edc48c799" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70628544" /></Metadata><TypeSignature Language="C#" Value="public struct ParallelLoopResult" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ParallelLoopResult extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopResult" />
  <TypeSignature Language="VB.NET" Value="Public Structure ParallelLoopResult" />
  <TypeSignature Language="C++ CLI" Value="public value class ParallelLoopResult" />
  <TypeSignature Language="F#" Value="type ParallelLoopResult = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9241e-101"><see cref="T:System.Threading.Tasks.Parallel" /> ループの実行の完了ステータスを示します。</span><span class="sxs-lookup"><span data-stu-id="9241e-101">Provides completion status on the execution of a <see cref="T:System.Threading.Tasks.Parallel" /> loop.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9241e-102">が<xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> true を返した場合、ループは、ループのすべての反復処理が実行されるように完了まで実行されます。</span><span class="sxs-lookup"><span data-stu-id="9241e-102">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns true, then the loop ran to completion, such that all iterations of the loop were executed.</span></span> <span data-ttu-id="9241e-103">が<xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> false を返し、 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>  null を返した場合、の呼び出しが、ループの終了処理の途中で終了しました。 <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A></span><span class="sxs-lookup"><span data-stu-id="9241e-103">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns null, a call to <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> was used to end the loop prematurely.</span></span> <span data-ttu-id="9241e-104">が<xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> false を返し、 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>  null 以外の整数値を返す場合、は、ループを途中で終了するために使用されました。 <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A></span><span class="sxs-lookup"><span data-stu-id="9241e-104">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns a non-null integral value, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was used to end the loop prematurely.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9241e-105">のすべてのパブリック<see cref="T:System.Threading.Tasks.ParallelLoopResult" />メンバーはスレッドセーフであり、複数のスレッドから同時に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9241e-105">All public members of <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> are thread safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="9241e-106">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="9241e-106">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Threading.Tasks.ParallelLoopResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9241e-107">ループが完了するまで実行されたかどうか (ループのすべての反復処理が実行され、ループが途中終了要求を受け取らなかったかどうか) を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9241e-107">Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.</span></span></summary>
        <value><span data-ttu-id="9241e-108">ループが完了するまで実行された場合は true。それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="9241e-108">true if the loop ran to completion; otherwise false;</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9241e-109"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出した反復処理のうち、最も下位の反復処理のインデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="9241e-109">Gets the index of the lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="9241e-110">Break ステートメントを呼び出した反復処理のうち、最も下位の反復処理を表す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="9241e-110">Returns an integer that represents the lowest iteration from which the Break statement was called.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9241e-111">が<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>使用されていない場合、このプロパティは null を返します。</span><span class="sxs-lookup"><span data-stu-id="9241e-111">If <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was not employed, this property will return null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
