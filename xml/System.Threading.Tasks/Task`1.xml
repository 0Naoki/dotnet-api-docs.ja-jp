<Type Name="Task&lt;TResult&gt;" FullName="System.Threading.Tasks.Task&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="45373ee4dcebcddee1d766d0390eef269ce7e2f2" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48641310" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Task&lt;TResult&gt; : System.Threading.Tasks.Task" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task`1&lt;TResult&gt; extends System.Threading.Tasks.Task" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Task(Of TResult)&#xA;Inherits Task" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class Task : System::Threading::Tasks::Task" />
  <TypeSignature Language="F#" Value="type Task&lt;'Result&gt; = class&#xA;    inherit Task" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Threading.Tasks.Task</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}, Result = {DebuggerDisplayResultDescription}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_FutureDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TResult">
      <span data-ttu-id="7e93c-101">この <see cref="T:System.Threading.Tasks.Task`1" /> によって生成される結果の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e93c-101">The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="7e93c-102">値を返すことができる非同期操作を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e93c-102">Represents an asynchronous operation that can return a value.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-103"><xref:System.Threading.Tasks.Task%601>クラスの値を返すが、通常は単一の操作が非同期的に実行を表します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-103">The <xref:System.Threading.Tasks.Task%601> class represents a single operation that returns a value and that usually executes asynchronously.</span></span> <span data-ttu-id="7e93c-104"><xref:System.Threading.Tasks.Task%601> オブジェクトは、中央のコンポーネントの 1 つ、[タスクベースの非同期パターン](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).NET Framework 4 で初めて導入されました。</span><span class="sxs-lookup"><span data-stu-id="7e93c-104"><xref:System.Threading.Tasks.Task%601> objects are one of the central components of the [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="7e93c-105">によって、作業が実行されるため、<xref:System.Threading.Tasks.Task%601>オブジェクト通常は非同期的に実行スレッド プールのスレッドで同期的に、メイン アプリケーション スレッドで使用できますではなく、<xref:System.Threading.Tasks.Task.Status%2A>プロパティだけでなく<xref:System.Threading.Tasks.Task.IsCanceled%2A>、<xref:System.Threading.Tasks.Task.IsCompleted%2A>と<xref:System.Threading.Tasks.Task.IsFaulted%2A>プロパティ、タスクの状態を判断します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-105">Because the work performed by a <xref:System.Threading.Tasks.Task%601> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="7e93c-106">ほとんどの場合、ラムダ式は、タスクを実行する作業の指定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-106">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="7e93c-107"><xref:System.Threading.Tasks.Task%601> インスタンスは、さまざまな方法で作成できます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-107"><xref:System.Threading.Tasks.Task%601> instances may be created in a variety of ways.</span></span> <span data-ttu-id="7e93c-108">以降で使用できますが、最も一般的なアプローチ、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]は、静的な<xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType>または<xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-108">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7e93c-109">これらのメソッドは、既定値を使用して、追加のパラメーターを取得しなくてもタスクを開始する簡単な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-109">These methods provide a simple way to start a task by using default values and without acquiring additional parameters.</span></span> <span data-ttu-id="7e93c-110">次の例では、<xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType>メソッドをループし、ループのイテレーションの数を表示するタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-110">The following example uses the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task\`1#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/run1.vb#6)]  
  
 <span data-ttu-id="7e93c-111">代わりに、およびタスクを開始する最も一般的な方法、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]は、静的な<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>または<xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-111">An alternative, and the most common way to start a task in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is to call the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7e93c-112"><xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType>プロパティから返さ、<xref:System.Threading.Tasks.TaskFactory>オブジェクト、および<xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType>プロパティが返す、<xref:System.Threading.Tasks.TaskFactory%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7e93c-112">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object, and the <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="7e93c-113">オーバー ロードの`StartNew`メソッドを使用すると、引数を渡す、タスクの作成オプションを定義およびタスク スケジューラを指定します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-113">Overloads of their `StartNew` method let you pass arguments, define task creation options, and specify a task scheduler.</span></span> <span data-ttu-id="7e93c-114">次の例では、<xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType>タスクを開始するメソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-114">The following example uses the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="7e93c-115">このメソッドは、前の例のコードには</span><span class="sxs-lookup"><span data-stu-id="7e93c-115">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task\`1#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="7e93c-116">詳細な例については、次を参照してください。[タスクベースの非同期プログラミング](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-116">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
 <span data-ttu-id="7e93c-117"><xref:System.Threading.Tasks.Task%601>クラスには、タスクを初期化するが、実行のスケジュールをそのしないコンス トラクターも用意されています。</span><span class="sxs-lookup"><span data-stu-id="7e93c-117">The <xref:System.Threading.Tasks.Task%601> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="7e93c-118">パフォーマンス向上のため、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>と`Task.Factory.StartNew`メソッドは、推奨されるメカニズムの作成と計算のタスクをスケジュールが、タスクの作成とスケジュールを区切る必要がありますシナリオでは、コンス トラクターを使用する可能性があります、およびタスクの<xref:System.Threading.Tasks.Task.Start%2A>は後で実行するためのタスクをスケジュールするメソッドを使用し、可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7e93c-118">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> and `Task.Factory.StartNew` methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <xref:System.Threading.Tasks.Task.Start%2A> method may then be used to schedule the task for execution at a later time.</span></span>  
  
 <span data-ttu-id="7e93c-119">対象に、デスクトップ アプリ以降、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]を作成し、タスクを呼び出すスレッドのカルチャがスレッドのコンテキストの一部になります。</span><span class="sxs-lookup"><span data-stu-id="7e93c-119">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="7e93c-120">つまり、タスクが実行されるスレッドの現在のカルチャに関係なく、タスクの現在のカルチャは、呼び出し元スレッドのカルチャです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-120">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="7e93c-121">前のバージョンの .NET Framework のバージョンを対象とするアプリを[!INCLUDE[net_v46](~/includes/net-v46-md.md)]タスクのカルチャは、タスクが実行されるスレッドのカルチャ。</span><span class="sxs-lookup"><span data-stu-id="7e93c-121">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="7e93c-122">詳細については、の「カルチャとタスク ベースの非同期操作」セクションを参照してください、<xref:System.Globalization.CultureInfo>トピック。</span><span class="sxs-lookup"><span data-stu-id="7e93c-122">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span> <span data-ttu-id="7e93c-123">ストア アプリが設定および既定のカルチャを取得するで、Windows ランタイムに従うことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="7e93c-123">Note that Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<span data-ttu-id="7e93c-124">使用する値を返さない操作で、<xref:System.Threading.Tasks.Task>クラス。</span><span class="sxs-lookup"><span data-stu-id="7e93c-124">For operations that do not return a value, you use the <xref:System.Threading.Tasks.Task> class.</span></span> <span data-ttu-id="7e93c-125">参照型ではなく、値型であるより軽量タスクの c# 7 で開発している場合は、使用、<xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType>構造体。 c# 7 以降ではサポートされています。</span><span class="sxs-lookup"><span data-stu-id="7e93c-125">If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType> structure; it is supported starting with C# 7.</span></span> 
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="7e93c-126">すべてのメンバー<see cref="T:System.Threading.Tasks.Task`1" />を除く<see cref="M:System.Threading.Tasks.Task.Dispose" />スレッド セーフなは、複数のスレッドから同時に使用できます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e93c-126">All members of <see cref="T:System.Threading.Tasks.Task`1" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task" />
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
      <span data-ttu-id="7e93c-127">タスク並列ライブラリ (TPL)</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e93c-127">Task Parallel Library (TPL)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
      <span data-ttu-id="7e93c-128">タスク ベースの非同期プログラミング</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e93c-128">Task-based Asynchronous Programming</span>
      </span>
    </related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">
      <span data-ttu-id="7e93c-129">.NET Framework による並列プログラミングのサンプル</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e93c-129">Samples for Parallel Programming with the .NET Framework</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7e93c-130">新しい <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-130">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As Func(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; function" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="7e93c-131">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-131">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="7e93c-132">関数の実行が完了すると、タスクの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが関数の結果値を返すように設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-132">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-133">指定の関数で新しい <see cref="T:System.Threading.Tasks.Task`1" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-133">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-134">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task%601>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType>と<xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-134">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="7e93c-135">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-135">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e93c-136">次の例では、パブリッシュされたブックを表すテキスト ファイル内の単語のおおよその数をカウントします。</span><span class="sxs-lookup"><span data-stu-id="7e93c-136">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="7e93c-137">各タスクは、ファイルを開いて、内容全体を非同期的に読み取り、および正規表現を使用してワード カウントを計算する責任を負います。</span><span class="sxs-lookup"><span data-stu-id="7e93c-137">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="7e93c-138"><xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType>メソッドが呼び出され、各書籍のワード カウントをコンソールに表示する前にすべてのタスクが完了したことを確認します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-138">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> method is called to ensure that all tasks have completed before displaying the word count of each book to the console.</span></span>  
  
 <span data-ttu-id="7e93c-139">オブジェクトのインスタンス化は、例では、各ファイルがあることを確認できるように、この例では、オブジェクトの実行から区切られます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-139">Object instantiation is separated from object execution in this example so that the example can ensure that each file exists.</span></span> <span data-ttu-id="7e93c-140">一致しない場合は、不足しているファイルの名前が表示されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-140">If they do not,  it displays the name of the missing file.</span></span> <span data-ttu-id="7e93c-141">それ以外の場合、呼び出し、<xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType>メソッドを各タスクを起動します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-141">Otherwise, it calls the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to launch each task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run3.vb#2)]  
  
 <span data-ttu-id="7e93c-142">正規表現パターン`\p{P}*\s+`0、1、または複数の区切り文字の後ろに 1 つまたは複数の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-142">The regular expression pattern `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more white-space characters.</span></span> <span data-ttu-id="7e93c-143">一致の合計数が、おおよそのワード カウントと等しいことが前提としています。</span><span class="sxs-lookup"><span data-stu-id="7e93c-143">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-144">
            <paramref name="function" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-144">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-145">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-145">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-146">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-146">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, !TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As Func(Of Object, TResult), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="7e93c-147">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-147">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="7e93c-148">関数の実行が完了すると、タスクの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが関数の結果値を返すように設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-148">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-149">アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-149">An object representing data to be used by the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-150">指定の関数と状態で新しい <see cref="T:System.Threading.Tasks.Task`1" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-150">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-151">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task%601>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-151">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7e93c-152">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-152">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-153">
            <paramref name="function" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-153">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-154">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-154">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-155">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-155">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="7e93c-156">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-156">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="7e93c-157">関数の実行が完了すると、タスクの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが関数の結果値を返すように設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-157">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-158">このタスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-158">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to this task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-159">指定の関数で新しい <see cref="T:System.Threading.Tasks.Task`1" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-159">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-160">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task%601>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>と<xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-160">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="7e93c-161">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-161">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-162">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-162">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-163">
            <paramref name="function" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-163">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-164">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-164">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-165">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-165">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As Func(Of TResult), creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="7e93c-166">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-166">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="7e93c-167">関数の実行が完了すると、タスクの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが関数の結果値を返すように設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-167">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="7e93c-168">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-168">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-169">指定の関数と作成オプションを使用して新しい <see cref="T:System.Threading.Tasks.Task`1" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-169">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-170">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task%601>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-170">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7e93c-171">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-171">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-172">
            <paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-172">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-173">
            <paramref name="function" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-173">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-174">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-174">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-175">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-175">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, state, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="7e93c-176">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-176">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="7e93c-177">関数の実行が完了すると、タスクの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが関数の結果値を返すように設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-177">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-178">関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-178">An object representing data to be used by the function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-179">新しいタスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-179">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to the new task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-180">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task`1" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-180">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-181">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task%601>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-181">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7e93c-182">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-182">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-183">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-183">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-184">
            <paramref name="function" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-184">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-185">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-185">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-186">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-186">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, state, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="7e93c-187">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-187">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="7e93c-188">関数の実行が完了すると、タスクの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが関数の結果値を返すように設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-188">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-189">関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-189">An object representing data to be used by the function.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="7e93c-190">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-190">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-191">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task`1" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-191">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-192">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task%601>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-192">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7e93c-193">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-193">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-194">
            <paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-194">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-195">
            <paramref name="function" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-195">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-196">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-196">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-197">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-197">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="7e93c-198">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-198">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="7e93c-199">関数の実行が完了すると、タスクの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが関数の結果値を返すように設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-199">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-200">新しいタスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-200">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="7e93c-201">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-201">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-202">指定の関数と作成オプションを使用して新しい <see cref="T:System.Threading.Tasks.Task`1" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-202">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-203">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task%601>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-203">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="7e93c-204">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-204">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-205">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-205">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-206">
            <paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-206">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-207">
            <paramref name="function" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-207">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-208">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-208">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-209">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-209">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, state, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="7e93c-210">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-210">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="7e93c-211">関数の実行が完了すると、タスクの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティが関数の結果値を返すように設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-211">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-212">関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-212">An object representing data to be used by the function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-213">新しいタスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-213">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to the new task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="7e93c-214">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-214">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-215">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task`1" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-215">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-216">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task%601>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-216">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7e93c-217">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-217">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-218">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-218">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-219">
            <paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-219">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-220">
            <paramref name="function" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-220">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-221">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-221">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-222">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-222">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable&lt;TResult&gt; ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1&lt;!TResult&gt; ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable&lt;TResult&gt; ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="override this.ConfigureAwait : bool -&gt; System.Runtime.CompilerServices.ConfiguredTaskAwaitable&lt;'Result&gt;" Usage="task.ConfigureAwait continueOnCapturedContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext">
          <span data-ttu-id="7e93c-223">継続をキャプチャされた元のコンテキストにマーシャリングする場合は true。それ以外の場合は false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-223">true to attempt to marshal the continuation back to the original context captured; otherwise, false.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-224">この <see cref="T:System.Threading.Tasks.Task`1" /> を待機するために使用する awaiter を構成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-224">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-225">このタスクを待機するために使用するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-225">An object used to await this task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7e93c-226">別のタスクが完了したときに実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-226">Creates a continuation task that executes when another task completes.</span>
          </span>
        </summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-227">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-227">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-228">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-228">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-229">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-229">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult))) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith continuationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-230">先行する <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-230">An action to run when the antecedent <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-231">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-231">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-232">対象タスクの完了時に、非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-232">Creates a continuation that executes asynchronously when the target task completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-233">新しい継続タスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-233">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-234">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早期終了により完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-234">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e93c-235">次の例では、Sieve of Eratosthenes を使用して、1 と、ユーザーが入力した値の間の素数を計算する継続元タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-235">The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user.</span></span> <span data-ttu-id="7e93c-236">配列は、素数に関する情報を保持するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-236">An array is used to hold information about the prime numbers.</span></span> <span data-ttu-id="7e93c-237">配列のインデックスが、数を表し、要素の値は、その数が複合かどうかを示します (その値は`true`) 素数か (その値は`false`)。</span><span class="sxs-lookup"><span data-stu-id="7e93c-237">The array index represents the number, and the element's value indicates whether that number is composite (its value is `true`) or prime (its value is `false`).</span></span> <span data-ttu-id="7e93c-238">このタスクは、整数の配列の素数を抽出し、表示することを担当する継続タスクに渡されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-238">This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1.ContinueWith#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continue2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task\`1.ContinueWith#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continue2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-239">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-239">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-240">
            <paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-240">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-241">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-241">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-242">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-242">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-243">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-243">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult), Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-244">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-244">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-245">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトが引数としてデリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-245">When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-246">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-246">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-247">状態の情報を渡される継続と、ターゲット <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-247">Creates a continuation that that is passed state information and that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-248">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-248">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-249">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-249">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e93c-250">次の例では、2 ~ 20 の間の整数が渡されますし、最初の 10 個の指数部を格納する配列を返すタスクを作成します (n から<sup>1</sup> n<sup>10</sup>) 数。</span><span class="sxs-lookup"><span data-stu-id="7e93c-250">The following example creates a task that is passed an integer between 2 and 20 and returns an array that contains the first ten exponents (from n<sup>1</sup> to n<sup>10</sup>) of that number.</span></span> <span data-ttu-id="7e93c-251">継続タスクは、指数部を表示する責任を負います。</span><span class="sxs-lookup"><span data-stu-id="7e93c-251">A continuation task is then responsible for displaying the exponents.</span></span> <span data-ttu-id="7e93c-252">これには、継続元と元の番号、継続元が生成されますが指数部の両方が渡されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-252">It is passed both the antecedent and the original number whose exponents the antecedent generates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1.ContinueWith#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continuewith3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task\`1.ContinueWith#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continuewith3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-253">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-253">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-254">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-254">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-255">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-255">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-256">実行すると、完了したタスクにデリゲートが引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-256">When run, the delegate is passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-257">新しい継続タスクに渡されるキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-257">The cancellation token that is passed to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-258">対象の <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に、非同期的に実行するキャンセル可能な継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-258">Creates a cancelable continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-259">新しい継続タスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-259">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-260">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-260">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e93c-261">次の例では、Sieve of Eratosthenes を使用して、1 と、ユーザーが入力した値の間の素数を計算する継続元タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-261">The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user.</span></span> <span data-ttu-id="7e93c-262">配列は、素数に関する情報を保持するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-262">An array is used to hold information about the prime numbers.</span></span> <span data-ttu-id="7e93c-263">配列のインデックスが、数を表し、要素の値は、その数が複合かどうかを示します (その値は`true`) 素数か (その値は`false`)。</span><span class="sxs-lookup"><span data-stu-id="7e93c-263">The array index represents the number, and the element's value indicates whether that number is composite (its value is `true`) or prime (its value is `false`).</span></span> <span data-ttu-id="7e93c-264">このタスクは、整数の配列の素数を抽出し、表示することを担当する継続タスクに渡されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-264">This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.</span></span>  
  
 <span data-ttu-id="7e93c-265">キャンセル トークンは、継続元と継続タスクの両方に渡されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-265">A cancellation token is passed to both the antecedent and the continuation task.</span></span> <span data-ttu-id="7e93c-266">A<xref:System.Timers.Timer?displayProperty=nameWithType>オブジェクトは、100 ミリ秒のタイムアウト値を定義するために使用します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-266">A <xref:System.Timers.Timer?displayProperty=nameWithType> object is used to define a timeout value of 100 milliseconds.</span></span> <span data-ttu-id="7e93c-267">イベントが発生する場合、<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>メソッドが呼び出され、キャンセル トークンは、タスクのキャンセルを要求するために使用します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-267">If the event fires, the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method is called, and the cancellation token is used to request cancellation of the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continue1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task\`1.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continue1.vb#1)]  
  
 <span data-ttu-id="7e93c-268">タイムアウト間隔が経過すると、約 100,000 の値を提供する通常、および<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>イベントを発生させる、および設定する、取り消し要求。</span><span class="sxs-lookup"><span data-stu-id="7e93c-268">Typically, supplying a value of about 100,000 causes the timeout interval to expire and the <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event to fire, and the cancellation request to be set.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-269">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-269">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
          <span data-ttu-id="7e93c-270">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-270">-or-</span>
          </span>
          <span data-ttu-id="7e93c-271">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-271">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-272">
            <paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-272">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-273">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-273">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-274">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-274">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-275">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-275">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult)), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-276">
            <c>continuationOptions</c> で指定した条件に従って実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-276">An action to according the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="7e93c-277">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-277">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="7e93c-278">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-278">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="7e93c-279">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-279">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-280">
            <paramref name="continuationOptions" /> で指定した条件に従って実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-280">Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-281">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-281">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-282">返された<xref:System.Threading.Tasks.Task>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="7e93c-282">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="7e93c-283">を通じて、継続条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="7e93c-283">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 <span data-ttu-id="7e93c-284">詳細については、「[継続タスクを使用したタスクの連結](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7e93c-284">For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-285">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-285">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-286">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-286">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-287">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-287">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-288">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-288">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-289">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-289">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-290">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-290">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult)), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-291">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-291">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-292">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-292">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="7e93c-293">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-293">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-294">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-294">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-295">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-295">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-296">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-296">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-297">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-297">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-298">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-298">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="7e93c-299">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-299">-or-</span>
          </span>
          <span data-ttu-id="7e93c-300">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-300">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-301">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-301">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-302">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-302">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-303">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-303">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-304">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-304">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-305">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-305">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-306">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-306">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-307">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-307">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-308">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-308">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-309">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-309">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-310">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-310">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-311">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-311">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-312">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-312">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-313">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-313">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult), Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-314">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-314">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-315">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-315">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-316">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-316">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="7e93c-317">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-317">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="7e93c-318">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-318">This includes criteria, such  as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-319">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-319">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-320">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-320">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-321">返された<xref:System.Threading.Tasks.Task>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="7e93c-321">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="7e93c-322">を通じて、継続条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="7e93c-322">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-323">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-323">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-324">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-324">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-325">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-325">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult), Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-326">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-326">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-327">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-327">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-328">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-328">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="7e93c-329">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-329">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-330">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-330">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-331">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-331">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-332">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-332">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-333">
            <paramref name="scheduler" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-333">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-334">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-334">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-335">
            <c>continuationOptions</c> で指定した条件に従って実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-335">An action to run according the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="7e93c-336">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-336">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-337">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-337">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="7e93c-338">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-338">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="7e93c-339">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-339">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="7e93c-340">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-340">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-341">
            <paramref name="continuationOptions" /> で指定した条件に従って実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-341">Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-342">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-342">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-343">返された<xref:System.Threading.Tasks.Task>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="7e93c-343">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="7e93c-344">使用条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="7e93c-344">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span> <span data-ttu-id="7e93c-345">詳細については、「[継続タスクを使用したタスクの連結](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7e93c-345">For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-346">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-346">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
          <span data-ttu-id="7e93c-347">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-347">-or-</span>
          </span>
          <span data-ttu-id="7e93c-348">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-348">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-349">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-349">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="7e93c-350">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-350">-or-</span>
          </span>
          <span data-ttu-id="7e93c-351">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-351">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-352">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-352">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-353">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-353">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-354">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-354">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-355">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-355">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="7e93c-356">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-356">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-357">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-357">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-358">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-358">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-359">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-359">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="7e93c-360">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-360">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="7e93c-361">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-361">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as  well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="7e93c-362">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-362">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-363">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-363">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-364">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-364">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-365">返された<xref:System.Threading.Tasks.Task>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="7e93c-365">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="7e93c-366">使用条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="7e93c-366">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-367">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-367">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-368">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-368">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-369">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-369">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-370">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-370">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), TNewResult)) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith continuationFunction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-371">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-371">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-372">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-372">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-373">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-373">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-374">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-374">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-375">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-375">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-376">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-376">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-377">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-377">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-378">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-378">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-379">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-379">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-380">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-380">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-381">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-381">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-382">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-382">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-383">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-383">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-384">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-384">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-385">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-385">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-386">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-386">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-387">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-387">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-388">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-388">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e93c-389">次の例では、継続タスクのチェーンを作成します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-389">The following example creates a chain of continuation tasks.</span></span> <span data-ttu-id="7e93c-390">各タスクは、現在の時刻、<xref:System.DateTime>の状態の引数のオブジェクト、<xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%2CSystem.Object%7D%2CSystem.Object%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-390">Each task provides the current time, a <xref:System.DateTime> object, for the state argument of the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%2CSystem.Object%7D%2CSystem.Object%29> method.</span></span> <span data-ttu-id="7e93c-391">各<xref:System.DateTime>値は、継続タスクが作成された時刻を表します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-391">Each <xref:System.DateTime> value represents the time at which the continue task is created.</span></span> <span data-ttu-id="7e93c-392">各タスクが 1 秒間には、その結果として生成<xref:System.DateTime>タスクが終了する時間を表す値です。</span><span class="sxs-lookup"><span data-stu-id="7e93c-392">Each task produces as its result a second <xref:System.DateTime> value that represents the time at which the task finishes.</span></span> <span data-ttu-id="7e93c-393">すべてのタスクが完了すると、例では、各継続タスクを開始および終了する日付と時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-393">After all tasks finish, the example displays the date and times at which each continuation task starts and finishes.</span></span>  
  
 [!code-csharp[TPL_ContinuationState#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_continuationstate/cs/continuationstate.cs#1)]
 [!code-vb[TPL_ContinuationState#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_continuationstate/vb/continuationstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-394">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-394">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-395">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-395">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-396">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-396">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-397">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-397">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-398">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-398">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-399">新しいタスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-399">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-400">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-400">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-401">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-401">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-402">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-402">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-403">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-403">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
          <span data-ttu-id="7e93c-404">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-404">-or-</span>
          </span>
          <span data-ttu-id="7e93c-405">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-405">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-406">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-406">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-407">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-407">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-408">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-408">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-409">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-409">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), TNewResult), continuationOptions As TaskContinuationOptions) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-410">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-410">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-411">
            <c>continuationOptions</c> で指定した条件に従って実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-411">A function to run according the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="7e93c-412">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-412">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="7e93c-413">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-413">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="7e93c-414">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-414">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-415">
            <paramref name="continuationOptions" /> で指定した条件に従って実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-415">Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-416">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-416">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-417">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-417">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 <span data-ttu-id="7e93c-418">`continuationFunction`を実行すると、返す必要があります、 <xref:System.Threading.Tasks.Task%601>.</span><span class="sxs-lookup"><span data-stu-id="7e93c-418">The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>..</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-419">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-419">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-420">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-420">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-421">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-421">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-422">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-422">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-423">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-423">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-424">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-424">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), TNewResult), scheduler As TaskScheduler) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-425">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-425">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-426">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-426">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-427">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-427">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="7e93c-428">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-428">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-429">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-429">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-430">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-430">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-431">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-431">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-432">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-432">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-433">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-433">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="7e93c-434">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-434">-or-</span>
          </span>
          <span data-ttu-id="7e93c-435">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-435">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-436">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-436">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-437">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-437">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-438">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-438">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-439">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-439">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-440">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-440">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-441">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-441">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-442">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-442">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-443">新しいタスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-443">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-444">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-444">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-445">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-445">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-446">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-446">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-447">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-447">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-448">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-448">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-449">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-449">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-450">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-450">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-451">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-451">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-452">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-452">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-453">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-453">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="7e93c-454">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-454">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="7e93c-455">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-455">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-456">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-456">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-457">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-457">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-458">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-458">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 <span data-ttu-id="7e93c-459">`continuationFunction`を実行すると、返す必要があります、<xref:System.Threading.Tasks.Task%601>します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-459">The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="7e93c-460">このタスクの完了の状態は、ContinueWith の呼び出しから返されるタスクに転送されます。</span><span class="sxs-lookup"><span data-stu-id="7e93c-460">This task's completion state will be transferred to the task returned from the ContinueWith call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-461">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-461">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-462">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-462">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-463">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-463">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object, scheduler As TaskScheduler) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-464">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-464">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-465">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-465">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-466">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-466">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-467">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-467">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="7e93c-468">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-468">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-469">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-469">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-470">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-470">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-471">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-471">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-472">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-472">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-473">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-473">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-474">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-474">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-475">
            <c>continuationOptions</c> で指定した条件に従って実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-475">A function to run according the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="7e93c-476">実行すると、この完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-476">When run, the delegate will be passed as an argument this completed task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-477">新しいタスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-477">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="7e93c-478">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-478">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="7e93c-479">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-479">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="7e93c-480">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-480">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-481">
            <paramref name="continuationOptions" /> で指定した条件に従って実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-481">Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-482">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-482">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-483">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-483">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 <span data-ttu-id="7e93c-484">`continuationFunction`を実行すると、返す必要があります、<xref:System.Threading.Tasks.Task%601>します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-484">The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-485">
            <see cref="T:System.Threading.Tasks.Task`1" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-485">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
          <span data-ttu-id="7e93c-486">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-486">-or-</span>
          </span>
          <span data-ttu-id="7e93c-487">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-487">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-488">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-488">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="7e93c-489">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-489">-or-</span>
          </span>
          <span data-ttu-id="7e93c-490">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-490">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-491">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-491">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-492">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-492">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-493">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-493">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-494">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-494">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="7e93c-495">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-495">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="7e93c-496">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-496">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="7e93c-497">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-497">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7e93c-498">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-498">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7e93c-499">新しいタスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-499">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="7e93c-500">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-500">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="7e93c-501">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-501">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="7e93c-502">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-502">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e93c-503">ターゲットの <see cref="T:System.Threading.Tasks.Task`1" /> が完了したときに実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-503">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-504">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-504">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-505">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7e93c-505">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 <span data-ttu-id="7e93c-506">`continuationFunction`を実行すると、返す必要があります、<xref:System.Threading.Tasks.Task%601>します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-506">The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="7e93c-507">このタスクの完了状態から返されるタスクに転送されます、<xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=nameWithType>呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-507">This task's completion state will be transferred to the task returned from the <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=nameWithType> call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e93c-508">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-508">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e93c-509">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-509">The  <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7e93c-510">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-510">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="7e93c-511">継続タスクを使用したタスクの連結</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-511">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory&lt;TResult&gt; Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory`1&lt;!TResult&gt; Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task`1.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory&lt;TResult&gt; ^ Factory { System::Threading::Tasks::TaskFactory&lt;TResult&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Factory : System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="System.Threading.Tasks.Task&lt;'Result&gt;.Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e93c-512">
            <see cref="T:System.Threading.Tasks.Task`1" /> インスタンスを作成して構成するためのファクトリ メソッドへアクセスを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-512">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e93c-513">さまざまな <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを作成できるファクトリ オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-513">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-514">このプロパティの既定のインスタンスを返します、<xref:System.Threading.Tasks.TaskFactory%601>パラメーターなしで呼び出すことによって作成されたものと同じであるクラス<xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=nameWithType>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="7e93c-514">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory%601> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="7e93c-515">次のプロパティ値があります。</span><span class="sxs-lookup"><span data-stu-id="7e93c-515">It has the following property values:</span></span>  
  
|<span data-ttu-id="7e93c-516">プロパティ</span><span class="sxs-lookup"><span data-stu-id="7e93c-516">Property</span></span>|<span data-ttu-id="7e93c-517">[値]</span><span class="sxs-lookup"><span data-stu-id="7e93c-517">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory%601.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory%601.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory%601.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory%601.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="7e93c-518">`null`、または <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="7e93c-518">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="7e93c-519">このプロパティの最も一般的な使用が作成して 1 回の呼び出しで新しいタスクを開始するには、<xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-519">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e93c-520">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>メソッドを作成する最も簡単な方法を提供する、<xref:System.Threading.Tasks.Task%601>既定の構成値を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7e93c-520">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task%601> object with default configuration values.</span></span>  
  
 <span data-ttu-id="7e93c-521">次のコードの例では、静的な<xref:System.Threading.Tasks.Task%601.Factory%2A>プロパティを次の 3 つの呼び出しを行う、<xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-521">The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make three calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7e93c-522">初めての起動、`Task<Int32>`オブジェクトで、1 を返すラムダ式を実行します。</span><span class="sxs-lookup"><span data-stu-id="7e93c-522">The first starts a `Task<Int32>` object, which executes a lambda expression that returns 1.</span></span> <span data-ttu-id="7e93c-523">2 つ目の開始、`Task<Test>`オブジェクトで、新しいをインスタンス化するラムダ式を実行`Test`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="7e93c-523">The second starts a `Task<Test>` object, which executes a lambda expression that instantiates a new `Test` instance.</span></span> <span data-ttu-id="7e93c-524">3 番目の開始を ' タスク < 文字列</span><span class="sxs-lookup"><span data-stu-id="7e93c-524">The third starts a \`Task<String</span></span>]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-525">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-525">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-526">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-526">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt; GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter`1&lt;!TResult&gt; GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter&lt;TResult&gt; GetAwaiter();" />
      <MemberSignature Language="F#" Value="override this.GetAwaiter : unit -&gt; System.Runtime.CompilerServices.TaskAwaiter&lt;'Result&gt;" Usage="task.GetAwaiter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e93c-527">この <see cref="T:System.Threading.Tasks.Task`1" /> を待機するために使用する awaiter を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-527">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e93c-528">awaiter のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-528">An awaiter instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-529">このメソッドは、コード内で直接使用ではなく、コンパイラのユーザーのものです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-529">This method is intended for compiler user rather than use directly in code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public TResult Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TResult Result" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task`1.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TResult Result { TResult get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : 'Result" Usage="System.Threading.Tasks.Task&lt;'Result&gt;.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e93c-530">この <see cref="T:System.Threading.Tasks.Task`1" /> の結果値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-530">Gets the result value of this <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e93c-531">結果値<see cref="T:System.Threading.Tasks.Task`1" />タスクの型パラメーターと同じ型であります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-531">The result value of this <see cref="T:System.Threading.Tasks.Task`1" />, which is of the same type as the task's type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e93c-532">非同期操作が完了するまで呼び出し元のスレッドをブロックするプロパティの get アクセサーにアクセスします。呼び出すことと同じである、<xref:System.Threading.Tasks.Task.Wait%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7e93c-532">Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <xref:System.Threading.Tasks.Task.Wait%2A> method.</span></span>  
  
 <span data-ttu-id="7e93c-533">これは格納され、後続の呼び出しですぐに返される操作の結果が利用できると、<xref:System.Threading.Tasks.Task%601.Result%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="7e93c-533">Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <xref:System.Threading.Tasks.Task%601.Result%2A> property.</span></span> <span data-ttu-id="7e93c-534">タスクの操作中に例外が発生した場合、またはタスクがキャンセルされた場合に、注意してください、<xref:System.Threading.Tasks.Task%601.Result%2A>プロパティが値を返しません。</span><span class="sxs-lookup"><span data-stu-id="7e93c-534">Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <xref:System.Threading.Tasks.Task%601.Result%2A> property does not return a value.</span></span> <span data-ttu-id="7e93c-535">スローされますが代わりに、値プロパティにアクセスしようとすると、<xref:System.AggregateException>例外。</span><span class="sxs-lookup"><span data-stu-id="7e93c-535">Instead, attempting to access the property value throws an <xref:System.AggregateException> exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e93c-536">次の例は、各ディレクトリ、コマンドラインの引数として渡される名前のファイル内のバイト数を計算するコマンド ライン ユーティリティです。</span><span class="sxs-lookup"><span data-stu-id="7e93c-536">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="7e93c-537">ディレクトリにファイルが含まれている場合、インスタンス化するラムダ式を実行します。、<xref:System.IO.FileStream>ディレクトリ内の各ファイル オブジェクトの値を取得し、<xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="7e93c-537">If the directory contains files, it executes a lambda expression that instantiates a <xref:System.IO.FileStream> object for each file in the directory and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="7e93c-538">単純に呼び出して、ディレクトリにファイルが含まれていない場合、<xref:System.Threading.Tasks.Task.FromResult%2A>タスクを作成するメソッドが<xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>プロパティがゼロ (0)。</span><span class="sxs-lookup"><span data-stu-id="7e93c-538">If a directory contains no files, it simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0).</span></span> <span data-ttu-id="7e93c-539">ディレクトリのすべてのファイルのバイト数の合計数はから利用可能なタスクの終了時に、<xref:System.Threading.Tasks.Task%601.Result%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="7e93c-539">When the tasks finish, the total number of bytes in all a directory's files is available from the <xref:System.Threading.Tasks.Task%601.Result%2A> property.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="7e93c-540">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-540">The task was canceled.</span>
          </span>
          <span data-ttu-id="7e93c-541">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-541">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="7e93c-542">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-542">-or-</span>
          </span>
          <span data-ttu-id="7e93c-543">タスクの実行時に例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-543">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="7e93c-544">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-544">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="7e93c-545">タスク並列ライブラリ (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-545">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="7e93c-546">タスク ベースの非同期プログラミング</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-546">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-return-a-value-from-a-task.md">
          <span data-ttu-id="7e93c-547">方法: タスクから値を返す</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e93c-547">How to: Return a Value from a Task</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>