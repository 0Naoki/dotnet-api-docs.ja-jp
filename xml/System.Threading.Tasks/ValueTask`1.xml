<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ValueTask`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55f78221c1b0cfa096a6ac681b4867a96f0e80e0e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f78221c1b0cfa096a6ac681b4867a96f0e80e0e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>The result.</source>
          <target state="translated">結果。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>Provides a value type that wraps a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> and a <ph id="ph2">&lt;typeparamref name="TResult" /&gt;</ph>, only one of which is used.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> と <ph id="ph2">&lt;typeparamref name="TResult" /&gt;</ph> をラップする値の型を提供します。使用するのは一方だけです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>A method may return an instance of this value type when it's likely that the result of its operation will be available synchronously, and when it's expected to be invoked so frequently that the cost of allocating a new <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> for each call will be prohibitive.</source>
          <target state="translated">メソッドの場合、その操作の結果に利用可能な同期をとってなりとすると想定がこの値の型のインスタンスが呼び出されたら頻繁に割り当てる新しいコストを返す可能性があります<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>の各呼び出しは非常に大きいされます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>There are tradeoffs to using a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> instead of a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">使用するトレードオフがある、<ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>の代わりに、<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For example, while a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> can help avoid an allocation in the case where the successful result is available synchronously, it also contains two fields, whereas a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> as a reference type is a single field.</source>
          <target state="translated">などの<ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>一方も 2 つのフィールドを含むが、成功した結果が利用可能な同期の場合、割り当てを防ぐことができます、<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>参照として型は 1 つのフィールドです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>This means that a method call returns two fields worth of data instead of one, which is more data to copy.</source>
          <target state="translated">つまり、メソッドの呼び出しを返すことではなく、1 つのデータの価値がある 2 つのフィールドは多くのデータをコピーします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>It also means, that if a method that returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> is awaited within an async method, the state machine for that async method will be larger, because it must store a struct containing two fields instead of a single reference.</source>
          <target state="translated">する場合を返すメソッド、<ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>非同期メソッドで、ステート マシン内で 1 つの参照ではなく 2 つのフィールドを含む構造体を格納する必要がありますので、非同期メソッドがサイズが大きくなるは待機します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For uses other than consuming the result of an asynchronous operation using await, <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> can lead to a more convoluted programming model that requires more allocations.</source>
          <target state="translated">使用して、非同期操作の結果を消費して以外の使用が await の<ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>を複数の割り当てを必要とする複雑なプログラミング モデルにつながることができます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For example, consider a method that could return either a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> with a cached task as a common result or a <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>.</source>
          <target state="translated">たとえば、いずれかを返す可能性のあるメソッド、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>一般的な結果として、キャッシュされたタスクで、または<ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>If the consumer of the result wants to use it as a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> in a method like <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>, the <ph id="ph4">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> must first be converted to a <ph id="ph5">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using <ph id="ph6">&lt;xref:System.Threading.Tasks.ValueTask%601.AsTask%2A&gt;</ph>, leading to an allocation that would have been avoided if a cached <ph id="ph7">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> had been used in the first place.</source>
          <target state="translated">結果のコンシューマーとして使用するかどうか、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>のようなメソッドで<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>、<ph id="ph4">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>最初に変換する必要があります、<ph id="ph5">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>を使用して<ph id="ph6">&lt;xref:System.Threading.Tasks.ValueTask%601.AsTask%2A&gt;</ph>、先頭は回避できた場合は、割り当てに、キャッシュされた<ph id="ph7">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>のため、最初に使用されていた。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>As such, the default choice for any asynchronous method should be to return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">返す非同期メソッドの既定の選択肢は、ような場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>または<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>Only if performance analysis proves it worthwhile should a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> be used instead of a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">パフォーマンス分析の身元を証明価値のある場合にのみにする必要があります、<ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>の代わりに使用する、<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>There is no non-generic version of <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>, as the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.CompletedTask&gt;</ph> property may be used to hand back a successfully completed singleton in the case where a method returning a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> completes synchronously and successfully.</source>
          <target state="translated">非ジェネリック バージョンが存在しない<ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>、として、<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.CompletedTask&gt;</ph>プロパティは、メソッドを返す場合は、正常に完了した場合は、シングルトンを送り返すを使用することがあります、<ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph>同期および正常に完了します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>The use of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> type is supported starting with C# 7, and is not supported by any version of Visual Basic.</source>
          <target state="translated">使用、<ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>種類は、7 (C#) で始まるがサポートされ、任意のバージョンの Visual Basic ではサポートされていません。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>The task.</source>
          <target state="translated">タスク。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> class using the supplied task that represents the operation.</source>
          <target state="translated">操作を表す指定されたタスクを使用して、<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>The <ph id="ph1">&lt;paramref name="task" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="task" /&gt;</ph> 引数が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
          <source>The result.</source>
          <target state="translated">結果。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> class using the supplied result of a successful operation.</source>
          <target state="translated">成功した操作の指定された結果を使用して、<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.AsTask">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that represents this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> を表す <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.AsTask">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that is wrapped in this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> if one exists, or a new <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that represents the result.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> でラップされる <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> オブジェクト (存在する場合)、または、結果を表す新しい <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attempt to marshal the continuation back to the captured context; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、キャプチャされたコンテキストに継続をマーシャリングします。そうしない場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph> にします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source>Configures an awaiter for this value.</source>
          <target state="translated">この値の awaiter を構成します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source>The configured awaiter.</source>
          <target state="translated">構成済み awaiter。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.CreateAsyncMethodBuilder">
          <source>Creates a method builder for use with an async method.</source>
          <target state="translated">非同期のメソッドで使用するためにメソッドのビルダーを作成します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.CreateAsyncMethodBuilder">
          <source>The created builder.</source>
          <target state="translated">作成したビルダー。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source>The object to compare with the current object.</source>
          <target state="translated">現在のオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source>Determines whether the specified object is equal to the current object.</source>
          <target state="translated">指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is equal to the current object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したオブジェクトが現在のオブジェクトと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source>The object to compare with the current object.</source>
          <target state="translated">現在のオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> object is equal to the current <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> object.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> オブジェクトが、現在の <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> オブジェクトと等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is equal to the current object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したオブジェクトが現在のオブジェクトと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
          <source>Creates an awaiter for this value.</source>
          <target state="translated">この値の awaiter を作成します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
          <source>The awaiter.</source>
          <target state="translated">awaiter。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">このインスタンスのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
          <source>The hash code for the current object.</source>
          <target state="translated">現在のオブジェクトのハッシュ コード。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
          <source>Gets a value that indicates whether this object represents a canceled operation.</source>
          <target state="translated">このオブジェクトが取り消された操作を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a canceled operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> このオブジェクトが、取り消された操作を表している場合それ以外の場合、<ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
          <source>Gets a value that indicates whether this object represents a completed operation.</source>
          <target state="translated">このオブジェクトが完了した操作を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a completed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> このオブジェクトが完了した操作を表している場合それ以外の場合、<ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
          <source>Gets a value that indicates whether this object represents a successfully completed operation.</source>
          <target state="translated">このオブジェクトが正常に完了した操作を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a successfully completed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> このオブジェクトを正常に完了した操作を表している場合それ以外の場合、<ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
          <source>Gets a value that indicates whether this object represents a failed operation.</source>
          <target state="translated">このオブジェクトが失敗した操作を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a failed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> このオブジェクトが失敗した操作を表している場合それ以外の場合、<ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The first value to compare.</source>
          <target state="translated">比較する最初の値です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The second value to compare.</source>
          <target state="translated">比較する 2 番目の値です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>Compares two values for equality.</source>
          <target state="translated">2 つの値が等しいかどうかを比較します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">2 つの <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> 値が等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The first value to compare.</source>
          <target state="translated">比較する最初の値です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The seconed value to compare.</source>
          <target state="translated">比較する 2 番目の値です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are unequal.</source>
          <target state="translated">2 つの <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> 値が等しくないかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are not equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">2 つの <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> 値が等しくない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>Gets the result.</source>
          <target state="translated">結果を取得します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>The result.</source>
          <target state="translated">結果。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>If this <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> wraps a successful result, this property returns it directly.</source>
          <target state="translated">この場合<ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>成功した結果、このプロパティは、それを直接返しますをラップします。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>If it wraps a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, the behavior of <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601.Result%2A&gt;</ph> is similar to the behavior of accessing <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> on the wrapped task: if the task hasn't completed, accessing the property blocks the calling thread until it completes; if the task has completed successfully, the property returns the result; if the task has faulted or was cancellecd, accessing the property throws an exception.</source>
          <target state="translated">これをラップする場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>の動作<ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601.Result%2A&gt;</ph>へのアクセスの動作に似ています<ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph>ラップされたタスクで: タスクが完了していない場合、プロパティにアクセスする、呼び出しスレッドがブロックです完了するまで、タスクが完了した場合。プロパティが正常に結果を返すタスクは、エラーが発生したか、cancellecd が、プロパティにアクセスする、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>The thrown exception is not wrapped in an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, which is different from the behavior of <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> in the same situation.</source>
          <target state="translated">スローされた例外にラップされていない、<ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>とは別の動作から<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph>同じ状況でします。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ToString">
          <source>Returns a string that represents the current object.</source>
          <target state="translated">現在のオブジェクトを表す文字列を返します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ToString">
          <source>A string that represents the current object.</source>
          <target state="translated">現在のオブジェクトを表す文字列。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>