<Type Name="Task" FullName="System.Threading.Tasks.Task">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c16340e471c95a0473b0f16f55090f971e888200" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51308312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task extends System.Object implements class System.IAsyncResult, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task" />
  <TypeSignature Language="VB.NET" Value="Public Class Task&#xA;Implements IAsyncResult, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="F#" Value="type Task = class&#xA;    interface IAsyncResult&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b3e5a-101">非同期操作を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3e5a-101">Represents an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
   
## Remarks  
 <span data-ttu-id="b3e5a-102"><xref:System.Threading.Tasks.Task>クラスを返さない値を通常は 1 回の操作が非同期的に実行を表します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-102">The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously.</span></span> <span data-ttu-id="b3e5a-103"><xref:System.Threading.Tasks.Task> オブジェクトは、中央のコンポーネントの 1 つ、[タスクベースの非同期パターン](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).NET Framework 4 で初めて導入されました。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-103"><xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="b3e5a-104">によって、作業が実行されるため、<xref:System.Threading.Tasks.Task>オブジェクト通常は非同期的に実行スレッド プールのスレッドで同期的に、メイン アプリケーション スレッドで使用できますではなく、<xref:System.Threading.Tasks.Task.Status%2A>プロパティだけでなく<xref:System.Threading.Tasks.Task.IsCanceled%2A>、<xref:System.Threading.Tasks.Task.IsCompleted%2A>と<xref:System.Threading.Tasks.Task.IsFaulted%2A>プロパティ、タスクの状態を判断します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-104">Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="b3e5a-105">ほとんどの場合、ラムダ式は、タスクを実行する作業の指定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-105">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="b3e5a-106">使用する値を返す操作で、<xref:System.Threading.Tasks.Task%601>クラス。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-106">For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.</span></span>  
  
 <span data-ttu-id="b3e5a-107">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="b3e5a-107">In this section:</span></span>  
  
 <span data-ttu-id="b3e5a-108">[タスクのインスタンス化の例](#Instant) </span><span class="sxs-lookup"><span data-stu-id="b3e5a-108">[Task instantiation examples](#Instant) </span></span>  
 <span data-ttu-id="b3e5a-109">[作成して、タスクを実行します。](#Creating) </span><span class="sxs-lookup"><span data-stu-id="b3e5a-109">[Creating and executing a task](#Creating) </span></span>  
 <span data-ttu-id="b3e5a-110">[タスクの作成と実行の分離](#Separating) </span><span class="sxs-lookup"><span data-stu-id="b3e5a-110">[Separating task creation and execution](#Separating) </span></span>  
 <span data-ttu-id="b3e5a-111">[1 つまたは複数のタスクを完了するを待機](#WaitingForOne) </span><span class="sxs-lookup"><span data-stu-id="b3e5a-111">[Waiting for one or more tasks to complete](#WaitingForOne) </span></span>  
 <span data-ttu-id="b3e5a-112">[タスクとカルチャ](#Culture) </span><span class="sxs-lookup"><span data-stu-id="b3e5a-112">[Tasks and culture](#Culture) </span></span>  
 [<span data-ttu-id="b3e5a-113">デバッガーの開発者向け</span><span class="sxs-lookup"><span data-stu-id="b3e5a-113">For debugger developers</span></span>](#Debugger)  

 <a name="Instant"></a>     
## <a name="task-instantiation"></a><span data-ttu-id="b3e5a-114">タスクのインスタンス化</span><span class="sxs-lookup"><span data-stu-id="b3e5a-114">Task instantiation</span></span>  
 <span data-ttu-id="b3e5a-115">次の例では、作成し、4 つのタスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-115">The following example creates and executes four tasks.</span></span> <span data-ttu-id="b3e5a-116">3 つのタスクの実行、<xref:System.Action%601>という名前のデリゲート`action`、型の引数を受け入れる<xref:System.Object>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-116">Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>.</span></span> <span data-ttu-id="b3e5a-117">4 番目のタスクは、ラムダ式を実行します (、<xref:System.Action>デリゲート)、タスク作成メソッドの呼び出しでインラインで定義されています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-117">A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method.</span></span> <span data-ttu-id="b3e5a-118">各タスクがインスタンス化され、別の方法で実行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-118">Each task is instantiated and run in a different way:</span></span>  
  
-   <span data-ttu-id="b3e5a-119">タスク`t1`タスク クラスのコンス トラクターを呼び出すことによってインスタンス化されますが、呼び出しによって開始されたが、<xref:System.Threading.Tasks.Task.Start>タスクの後にのみメソッド`t2`が開始します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-119">Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.</span></span>  
  
-   <span data-ttu-id="b3e5a-120">タスク`t2`がインスタンス化され、1 つのメソッド呼び出しの呼び出しによって開始された、<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-120">Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="b3e5a-121">タスク`t3`がインスタンス化され、1 つのメソッド呼び出しの呼び出しによって開始された、<xref:System.Threading.Tasks.Task.Run%28System.Action%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-121">Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
-   <span data-ttu-id="b3e5a-122">タスク`t4`を呼び出して、メイン スレッドで同期的に実行が、<xref:System.Threading.Tasks.Task.RunSynchronously>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-122">Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.</span></span>  
  
 <span data-ttu-id="b3e5a-123">タスク`t4`同期的に、実行、アプリケーションのメイン スレッドで実行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-123">Because task `t4` executes synchronously, it executes on the main application thread.</span></span> <span data-ttu-id="b3e5a-124">残りのタスク実行非同期的に通常 1 つまたは複数のスレッド プール スレッドでします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-124">The remaining tasks execute asynchronously typically on one or more thread pool threads.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)]
 [!code-vb[System.Threading.Tasks.Task#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)] 
    
<a name="Creating"></a>   
## <a name="creating-and-executing-a-task"></a><span data-ttu-id="b3e5a-125">作成して、タスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-125">Creating and executing a task</span></span>  
 <span data-ttu-id="b3e5a-126"><xref:System.Threading.Tasks.Task> インスタンスは、さまざまな方法で作成できます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-126"><xref:System.Threading.Tasks.Task> instances may be created in a variety of ways.</span></span> <span data-ttu-id="b3e5a-127">以降で使用できますが、最も一般的なアプローチ、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]は、静的な<xref:System.Threading.Tasks.Task.Run%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-127">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method.</span></span> <span data-ttu-id="b3e5a-128"><xref:System.Threading.Tasks.Task.Run%2A>メソッドは、既定値を使用してタスクを開始する簡単な方法を提供します。 追加のパラメーターを必要もありません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-128">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters.</span></span> <span data-ttu-id="b3e5a-129">次の例では、<xref:System.Threading.Tasks.Task.Run%28System.Action%29>メソッドをループし、ループのイテレーションの数を表示するタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-129">The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  
  
 <span data-ttu-id="b3e5a-130">代わりに、およびタスクを開始する最も一般的な方法[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、静的なの<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-130">An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-131"><xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType>プロパティが返す、<xref:System.Threading.Tasks.TaskFactory>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-131">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="b3e5a-132">オーバー ロード、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>メソッドを使用して、タスク作成オプションとタスク スケジューラに渡すパラメーターを指定できます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-132">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method let you specify parameters to pass to the task creation options and a task scheduler.</span></span> <span data-ttu-id="b3e5a-133">次の例では、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>タスクを開始するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="b3e5a-134">このメソッドは、前の例のコードには</span><span class="sxs-lookup"><span data-stu-id="b3e5a-134">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="b3e5a-135">詳細な例については、次を参照してください。[タスクベースの非同期プログラミング](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-135">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
<a name="Separating"></a>   
## <a name="separating-task-creation-and-execution"></a><span data-ttu-id="b3e5a-136">タスクの作成と実行の分離</span><span class="sxs-lookup"><span data-stu-id="b3e5a-136">Separating task creation and execution</span></span>  
 <span data-ttu-id="b3e5a-137"><xref:System.Threading.Tasks.Task>クラスには、タスクを初期化するが、実行のスケジュールをそのしないコンス トラクターも用意されています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-137">The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="b3e5a-138">パフォーマンス向上のため、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>または<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>メソッドが作成および計算のタスクをスケジュールするための推奨メカニズムが、シナリオの作成とスケジュール設定を区切る必要があります、コンス トラクターを使用して、呼び出して、<xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType>メソッドは後で実行するためのタスクをスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-138">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution at a later time.</span></span>  
  
<a name="WaitingForOne"></a>   
## <a name="waiting-for-one-or-more-tasks-to-complete"></a><span data-ttu-id="b3e5a-139">1 つまたは複数のタスクを完了するを待機</span><span class="sxs-lookup"><span data-stu-id="b3e5a-139">Waiting for one or more tasks to complete</span></span>  
 <span data-ttu-id="b3e5a-140">タスクは通常、スレッド プールのスレッドで非同期的に実行、ために、作成およびタスクを開始するスレッドは、タスクのインスタンスを作成するとすぐに実行を続行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-140">Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.</span></span> <span data-ttu-id="b3e5a-141">場合によっては、呼び出し元のスレッドは、メイン アプリケーション スレッド、アプリは終了前に、タスクが実際に実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-141">In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.</span></span> <span data-ttu-id="b3e5a-142">他の実行で、アプリケーションのロジックは、1 つまたは複数のタスクの実行が完了した場合にのみ、呼び出し元のスレッドが実行を続行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-142">In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.</span></span> <span data-ttu-id="b3e5a-143">呼び出し元のスレッドの実行を同期して、非同期タスクが起動を呼び出して、`Wait`メソッドを 1 つまたは複数のタスクが完了するまで待ちます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-143">You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.</span></span>  
  
 <span data-ttu-id="b3e5a-144">1 つのタスクが完了するまで待つ、呼び出すことができます、<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-144">To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-145">呼び出し、<xref:System.Threading.Tasks.Task.Wait%2A>メソッドは、1 つのクラス インスタンスの実行が完了するまで、呼び出し元のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-145">A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.</span></span>  
  
 <span data-ttu-id="b3e5a-146">次の例では、パラメーターなし<xref:System.Threading.Tasks.Task.Wait>メソッドが、タスクが完了するまで、無条件で待機します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-146">The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes.</span></span> <span data-ttu-id="b3e5a-147">タスクが呼び出すことによって作業をシミュレート、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドを 2 秒間スリープ状態になります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-147">The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to sleep for two seconds.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]
 [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  
  
 <span data-ttu-id="b3e5a-148">タスクが完了することも条件付きで待機できます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-148">You can also conditionally wait for a task to complete.</span></span> <span data-ttu-id="b3e5a-149"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29>と<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29>メソッドは、タスクが完了するまで、呼び出し元のスレッドをブロックまたはタイムアウト間隔が経過すると、先に達した。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-149">The <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.</span></span> <span data-ttu-id="b3e5a-150">次の例では、2 秒間スリープ状態が定義されている 1 秒のタイムアウト値、呼び出しスレッドは、タイムアウトになるまでブロックするタスクを起動するため、前に、タスクには、実行が完了しました。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-150">Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]
 [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  
  
 <span data-ttu-id="b3e5a-151">呼び出して、キャンセル トークンを指定することも、<xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29>と<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-151">You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods.</span></span> <span data-ttu-id="b3e5a-152">場合、トークンの<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>プロパティは`true`なったり`true`中に、<xref:System.Threading.Tasks.Task.Wait%2A>メソッドを実行して、メソッドはスロー、<xref:System.OperationCanceledException>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-152">If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true` or becomes `true` while the <xref:System.Threading.Tasks.Task.Wait%2A> method is executing, the method throws an <xref:System.OperationCanceledException>.</span></span>  
  
 <span data-ttu-id="b3e5a-153">場合によっては、待機することがあります、タスクが注意が完了するがない、一連のタスクを実行して、最初の。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-153">In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.</span></span>  <span data-ttu-id="b3e5a-154">この目的で、いずれかのオーバー ロードを呼び出すことができます、<xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-154">For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="b3e5a-155">次の例では、乱数ジェネレーターで間隔を決定のそれぞれのスリープ状態になり、3 つのタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-155">The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.</span></span> <span data-ttu-id="b3e5a-156"><xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29>メソッドは最初のタスクが完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-156">The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete.</span></span> <span data-ttu-id="b3e5a-157">3 つのタスクの状態に関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-157">The example then displays information about the status of all three tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]
 [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  
  
 <span data-ttu-id="b3e5a-158">すべての一連のタスクが呼び出すことによって完了するを待機することも、<xref:System.Threading.Tasks.Task.WaitAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-158">You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method.</span></span> <span data-ttu-id="b3e5a-159">次の例では、10 個のタスクを作成し、すべて 10 を完了するまで待機し、それらの状態を表示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-159">The following example creates ten tasks, waits for all ten to complete, and then displays their status.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]
 [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  
  
 <span data-ttu-id="b3e5a-160">1 つまたは複数のタスクが完了するを待機する場合、実行中のタスクでスローされた例外を呼び出すスレッドに伝達されているに注意してください、`Wait`メソッドを次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-160">Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows.</span></span> <span data-ttu-id="b3e5a-161">12 のタスクを正常に完了する 3 つと、例外がスローの 3 つを起動します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-161">It launches 12 tasks, three of which complete normally and three of which throw an exception.</span></span> <span data-ttu-id="b3e5a-162">残りの 6 つのタスクの 3 つが、開始する前に取り消されます、3 つが、実行中に取り消されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-162">Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing.</span></span> <span data-ttu-id="b3e5a-163">例外がスローされた、<xref:System.Threading.Tasks.Task.WaitAll%2A>によって処理されるメソッドの呼び出しとは、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-163">Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]
 [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  
  
 <span data-ttu-id="b3e5a-164">タスク ベースの非同期操作での例外処理の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-164">For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="tasks-and-culture"></a><span data-ttu-id="b3e5a-165">タスクとカルチャ</span><span class="sxs-lookup"><span data-stu-id="b3e5a-165">Tasks and culture</span></span>  
 <span data-ttu-id="b3e5a-166">対象に、デスクトップ アプリ以降、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]を作成し、タスクを呼び出すスレッドのカルチャがスレッドのコンテキストの一部になります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-166">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="b3e5a-167">つまり、タスクが実行されるスレッドの現在のカルチャに関係なく、タスクの現在のカルチャは、呼び出し元スレッドのカルチャです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-167">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="b3e5a-168">前のバージョンの .NET Framework のバージョンを対象とするアプリを[!INCLUDE[net_v46](~/includes/net-v46-md.md)]タスクのカルチャは、タスクが実行されるスレッドのカルチャ。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-168">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="b3e5a-169">詳細については、の「カルチャとタスク ベースの非同期操作」セクションを参照してください、<xref:System.Globalization.CultureInfo>トピック。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-169">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b3e5a-170">ストア アプリでは、設定と既定のカルチャの取得での Windows ランタイムに従います。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-170">Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<a name="Debugger"></a>   
## <a name="for-debugger-developers"></a><span data-ttu-id="b3e5a-171">デバッガーの開発者向け</span><span class="sxs-lookup"><span data-stu-id="b3e5a-171">For debugger developers</span></span>  
 <span data-ttu-id="b3e5a-172">開発者はカスタムのデバッガーを実装する、タスクのいくつかの内部、プライベート メンバーが役立ちます (リリースごとに変更可能性があります) 可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-172">For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).</span></span> <span data-ttu-id="b3e5a-173">`m_taskId`のバッキング ストアとして、フィールド、<xref:System.Threading.Tasks.Task.Id%2A>ただしへのアクセスをデバッガーから直接には、このフィールドがあります、プロパティの getter メソッドで同じ値にアクセスするよりも効率的プロパティ (、`s_taskIdCounter`カウンターは、使用されるタスクの [次へ] の使用可能な ID を取得する)。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-173">The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task).</span></span> <span data-ttu-id="b3e5a-174">同様に、`m_stateFlags`フィールドからもアクセスできる情報は、タスクの現在のライフ サイクル ステージに関する情報を格納する、<xref:System.Threading.Tasks.Task.Status%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-174">Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="b3e5a-175">`m_action`フィールドは、タスクのデリゲートへの参照を格納し、`m_stateObject`フィールドには、開発者がタスクに渡される非同期の状態が格納されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-175">The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer.</span></span> <span data-ttu-id="b3e5a-176">スタック フレームを解析するデバッガーに対して、最後に、`InternalWait`メソッドには、タスクが待機操作を入力する場合の潜在的なマーカーが機能します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-176">Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.</span></span>   
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b3e5a-177">すべてのメンバー<see cref="T:System.Threading.Tasks.Task" />を除く<see cref="M:System.Threading.Tasks.Task.Dispose" />スレッド セーフなは、複数のスレッドから同時に使用できます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3e5a-177">All members of <see cref="T:System.Threading.Tasks.Task" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task`1" />
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
      <span data-ttu-id="b3e5a-178">タスク並列ライブラリ (TPL)</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3e5a-178">Task Parallel Library (TPL)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
      <span data-ttu-id="b3e5a-179">タスク ベースの非同期プログラミング</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3e5a-179">Task-based Asynchronous Programming</span>
      </span>
    </related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">
      <span data-ttu-id="b3e5a-180">.NET Framework による並列プログラミングのサンプル</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3e5a-180">Samples for Parallel Programming with the .NET Framework</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-181">新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-181">Initializes a new <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task action" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-182">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-182">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-183">指定したアクションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-183">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-184">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType>または<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-184">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-185">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-185">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-186">次の例では、<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29>でファイル名を取得するタスクを作成するコンス トラクターは、ディレクトリを指定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-186">The following example uses the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to create tasks that retrieve the filenames in specified directories.</span></span> <span data-ttu-id="b3e5a-187">すべてのタスクを 1 つのファイル名の書き込み<xref:System.Collections.Concurrent.ConcurrentBag%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-187">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="b3e5a-188">例を呼び出して、<xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29>に書き込まれるファイル名の合計数を表示し、すべてのタスクが完了したら、いることを確認する方法、<xref:System.Collections.Concurrent.ConcurrentBag%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-188">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/ctor1.vb#1)]  
  
 <span data-ttu-id="b3e5a-189">次の例は、これは、使用する点を除いて同じですが、<xref:System.Threading.Tasks.Task.Run%28System.Action%29>メソッドをインスタンス化し、1 つの操作でタスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-189">The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation.</span></span> <span data-ttu-id="b3e5a-190">メソッドを返します、<xref:System.Threading.Tasks.Task>タスクを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-190">The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-191">
            <paramref name="action" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-191">The <paramref name="action" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.Task.Run(System.Action)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-192">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-192">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-193">新しいタスクが観察する <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-193">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-194">指定したアクションおよび <see cref="T:System.Threading.Tasks.Task" /> で新しい <see cref="T:System.Threading.CancellationToken" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-194">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-195">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>と<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-195">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="b3e5a-196">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-196">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="b3e5a-197">詳細については、次を参照してください。[タスクの並列化 (タスク並列ライブラリ)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)と[マネージ スレッドのキャンセル](~/docs/standard/threading/cancellation-in-managed-threads.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-197">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-198">次の例では、 <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> C:\Windows\System32 ディレクトリ内のファイルを反復処理するタスクを作成するコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-198">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructor to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="b3e5a-199">ラムダ式の呼び出し、<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>に各ファイルに関する情報を追加するメソッドを<xref:System.Collections.Generic.List%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-199">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="b3e5a-200">各のデタッチされた入れ子のタスクによって呼び出される、<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>ループは、キャンセル トークンの状態をチェックし、キャンセルが要求される場合は、<xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-200">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-201"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>メソッドがスローされます、<xref:System.OperationCanceledException>で処理される例外を`catch`ブロック呼び出し元のスレッドを呼び出すと、<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-201">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="b3e5a-202"><xref:System.Threading.Tasks.Task.Start%2A>タスクを開始するのにはメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-202">The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-203">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-203">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-204">
            <paramref name="action" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-204">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-205">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-205">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b3e5a-206">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-206">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-207">指定したアクションと作成オプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-207">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-208">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-208">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-209">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-209">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-210">
            <paramref name="action" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-210">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-211">
            <paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-211">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-212">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-212">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-213">アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-213">An object representing data to be used by the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-214">指定したアクションと状態で新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-214">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-215">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-215">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-216">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-216">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-217">次の例では、6 文字の単語の配列を定義します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-217">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="b3e5a-218">各単語がへの引数として渡されます、<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29>コンス トラクターを持つ<xref:System.Action%601>デリゲートは、word で文字にスクランブルをかけるし、元の単語とそのスクランブルされたバージョンを表示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-218">Each word is then passed as an argument to the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/startnew3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-219">
            <paramref name="action" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-219">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-220">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-220">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-221">新しいタスクが観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-221">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b3e5a-222">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-222">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-223">指定したアクションと作成オプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-223">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-224">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-224">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-225">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-225">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="b3e5a-226">詳細については、次を参照してください。[タスクの並列化 (タスク並列ライブラリ)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)と[タスクのキャンセル](~/docs/standard/parallel-programming/task-cancellation.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-226">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-227">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-227">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-228">
            <paramref name="action" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-228">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-229">
            <paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-229">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-230">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-230">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-231">アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-231">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-232">新しいタスクが観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-232">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-233">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-233">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-234">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-234">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-235">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-235">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-236">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-236">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-237">
            <paramref name="action" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-237">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-238">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-238">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-239">アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-239">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b3e5a-240">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-240">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-241">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-241">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-242">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-242">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-243">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-243">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-244">
            <paramref name="action" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-244">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-245">
            <paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-245">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-246">タスクで実行するコードを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-246">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-247">アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-247">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-248">新しいタスクが観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-248">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe..</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b3e5a-249">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-249">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-250">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-250">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-251">インスタンスを作成する最も一般的な方法、このコンス トラクターを呼び出すのではなく、<xref:System.Threading.Tasks.Task>オブジェクトとタスクは、静的なを呼び出すことによって、起動<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-251">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-252">このコンス トラクターによって提供される唯一の利点は、タスクの呼び出しから分離するオブジェクトのインスタンス化できることです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-252">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-253">
            <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-253">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-254">
            <paramref name="action" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-254">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-255">
            <paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-255">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.Threading.Tasks.Task.AsyncState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-256">
            <see cref="T:System.Threading.Tasks.Task" /> が作成されたときに渡される状態オブジェクトを取得します。渡されなかった場合は null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-256">Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-257">タスクの作成時にそのタスクに渡された状態データを表す <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-257">An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-258">オブジェクトにそのデータを取得する元の型にキャストします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-258">Cast the object back to the original type to retrieve its data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CompletedTask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.Task CompletedTask" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CompletedTask" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompletedTask As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::Task ^ CompletedTask { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedTask : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.CompletedTask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-259">既に正常に完了したタスクを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-259">Gets a task that has already completed successfully.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-260">正常に完了したタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-260">The successfully completed task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-261">このプロパティは、タスクを返しますが<xref:System.Threading.Tasks.Task.Status%2A>プロパティに設定されて<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-261">This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="b3e5a-262">値を返し、実行が完了するタスクを作成するには、<xref:System.Threading.Tasks.Task.FromResult%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-262">To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.</span></span>  
  
 <span data-ttu-id="b3e5a-263">常に、このプロパティの値を取得する繰り返し試行では、同じインスタンスを返す可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-263">Repeated attempts to retrieve this property value may not always return the same instance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="member this.ConfigureAwait : bool -&gt; System.Runtime.CompilerServices.ConfiguredTaskAwaitable" Usage="task.ConfigureAwait continueOnCapturedContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext">
          <span data-ttu-id="b3e5a-264">継続をキャプチャされた元のコンテキストにマーシャリングする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-264">
              <see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-265">この <see cref="T:System.Threading.Tasks.Task" /> を待機するために使用する awaiter を構成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-265">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-266">このタスクを待機するために使用するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-266">An object used to await this task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-267">ターゲットの <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-267">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith continuationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-268">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-268">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-269">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-269">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-270">ターゲットの <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-270">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-271">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-271">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-272">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-272">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-273">次の例では、100 のランダムな日付と時刻の値を含む配列を設定するタスクを定義します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-273">The following example defines a task that populates an array with 100 random date and time values.</span></span> <span data-ttu-id="b3e5a-274">使用して、<xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29>メソッドを配列が完全に設定した後、最も古いと最新の日付値を選択します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-274">It uses the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> method to select the earliest and the latest date values once the array is fully populated.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/cs/continuewith1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/vb/continuewith1.vb#1)]  
  
 <span data-ttu-id="b3e5a-275">コンソール アプリケーションは、継続タスクの実行前に終了可能性がありますので、<xref:System.Threading.Tasks.Task.Wait>メソッドを呼び出して、継続は、例が終了する前に実行が完了したことを確認します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-275">Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.</span></span>  
  
 <span data-ttu-id="b3e5a-276">たとえば、次を参照してください。[を使用して継続タスクをタスクの連結](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-276">For an additional example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-277">
            <paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-277">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-278">タスクの完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-278">An action to run when the task completes.</span>
          </span>
          <span data-ttu-id="b3e5a-279">実行されると、完了したタスクと、呼び出し元が指定する状態オブジェクトが、引数としてデリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-279">When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-280">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-280">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-281">呼び出し元から提供される状態情報を受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-281">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-282">新しい継続タスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-282">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-283">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、またはキャンセルにより早く終了するために完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-283">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-284">
            <paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-284">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-285">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-285">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-286">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-286">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-287">新しい継続タスクに割り当てられる <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-287">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-288">キャンセル トークンを受け取って、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期的に実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-288">Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-289">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-289">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-290">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-290">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-291">トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> は、既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-291">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-292">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-292">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-293">指定した <c>continuationOptions</c> に従って実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-293">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="b3e5a-294">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-294">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b3e5a-295">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-295">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="b3e5a-296">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-296">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-297">対象のタスクが完了したときに、指定した <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> に従って実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-297">Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-298">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-298">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-299">返された<xref:System.Threading.Tasks.Task>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-299">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="b3e5a-300">を通じて、継続条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-300">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-301">次の例を使用して<xref:System.Threading.Tasks.TaskContinuationOptions>に継続元タスクの完了時に同期的に継続タスクを実行するように指定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-301">The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes.</span></span> <span data-ttu-id="b3e5a-302">(指定したタスクが時間によって既に完了したかどうか<xref:System.Threading.Tasks.Task.ContinueWith%2A>が呼び出されると、同期、スレッドの呼び出し元で継続が実行する<xref:System.Threading.Tasks.Task.ContinueWith%2A>)。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-302">(If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span></span>  
  
```csharp  
  
public class TaskCounter  
{  
   private volatile int _count;  
  
   public void Track(Task t)  
   {  
      if (t == null) throw new ArgumentNullException("t");  
      Interlocked.Increment(ref _count);  
      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  
   }  
  
   public int NumberOfActiveTasks { get { return _count; } }  
}  
  
```  
  
```vb  
  
Public Class TaskCounter  
   Private _count as Integer  
  
   Public Sub Track(ByVal t as Task)  
      If t is Nothing Then Throw New ArgumentNullException("t")  
      Interlocked.Increment(_count)  
      t.ContinueWith(Sub(ct)  
                        Interlocked.Decrement(_count)  
                     End Sub,  
                     TaskContinuationOptions.ExecuteSynchronously)  
   End Sub  
  
   Public ReadOnly Property NumberOfActiveTasks As Integer  
      Get  
         Return _count  
      End Get  
   End Property  
End Class  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-303">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-303">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-304">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-304">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-305">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-305">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-306">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-306">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-307">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-307">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-308">ターゲットの <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-308">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-309">継続タスクは、指定されたスケジューラを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-309">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-310">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-310">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-311">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-311">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-312">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-312">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-313">
            <paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-313">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b3e5a-314">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-314">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-315">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-315">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-316">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-316">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-317">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-317">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-318">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-318">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-319">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-319">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-320">呼び出し元から提供される状態情報およびキャンセル トークンを受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> の完了時に非同期的に実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-320">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-321">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-321">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-322">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-322">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-323">
            <paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-323">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-324">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-324">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-325">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-325">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-326">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-326">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-327">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-327">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b3e5a-328">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-328">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="b3e5a-329">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-329">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-330">呼び出し元から提供される状態情報を受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-330">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-331">継続タスクは、指定した一連の条件に基づいて実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-331">The continuation executes based on a set of specified conditions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-332">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-332">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-333">返された<xref:System.Threading.Tasks.Task>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-333">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="b3e5a-334">を通じて、継続条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-334">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-335">
            <paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-335">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-336">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-336">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-337">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-337">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-338">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-338">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-339">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-339">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-340">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-340">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-341">呼び出し元から提供される状態情報を受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期的に実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-341">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-342">継続タスクは、指定されたスケジューラを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-342">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-343">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-343">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-344">返された<xref:System.Threading.Tasks.Task>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-344">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-345">
            <paramref name="scheduler" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-345">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-346">指定した <c>continuationOptions</c> に従って実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-346">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="b3e5a-347">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-347">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-348">新しい継続タスクに割り当てられる <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-348">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b3e5a-349">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-349">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="b3e5a-350">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-350">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-351">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-351">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-352">対象のタスクが完了したときに、指定した <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> に従って実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-352">Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
          <span data-ttu-id="b3e5a-353">この継続タスクは、キャンセル トークンを受け取り、指定されたスケジューラを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-353">The continuation receives a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-354">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-354">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-355">返された<xref:System.Threading.Tasks.Task>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-355">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="b3e5a-356">使用条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-356">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-357">次に作業を実行するバック グラウンドでと、ユーザー インターフェイス スレッド ContinueWith の使用例を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-357">The following is an example of using ContinueWith to run work both in the background and on the user interface threads.</span></span>  
  
```csharp  
  
private void Button1_Click(object sender, EventArgs e)  
{  
   var backgroundScheduler = TaskScheduler.Default;  
   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  
   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  
                         backgroundScheduler).  
   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  
                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  
                             backgroundScheduler).  
                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  
}  
  
```  
  
```vb  
  
Private Sub Button1_Click(ByVal sender As System.Object,   
                          ByVal e As System.EventArgs) Handles Button1.Click  
   Dim backgroundScheduler = TaskScheduler.Default  
   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  
  
   Task.Factory.StartNew(Sub()  
                           DoBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUI()  
                         End Sub, uiScheduler).ContinueWith(Sub(t)  
                            DoAnotherBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUIAgain()  
                         End Sub, uiScheduler)  
End Sub  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-358">トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> は、既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-358">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-359">
            <paramref name="continuationAction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-359">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="b3e5a-360">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-360">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-361">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-361">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-362">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-362">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="b3e5a-363">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-363">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-364">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-364">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-365">継続アクションによって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-365">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-366">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-366">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b3e5a-367">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-367">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="b3e5a-368">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-368">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-369">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-369">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-370">呼び出し元から提供される状態情報およびキャンセル トークンを受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-370">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-371">継続タスクは、指定した一連の条件に基づき、指定したスケジューラを使用して実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-371">The continuation executes based on a set of specified conditions and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-372">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-372">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-373">返された<xref:System.Threading.Tasks.Task>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-373">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="b3e5a-374">使用条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-374">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-375">
            <paramref name="scheduler" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-375">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-376">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-376">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-377">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-377">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith continuationFunction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-378">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-378">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-379">
            <see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-379">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-380">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-380">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-381">対象の <see cref="T:System.Threading.Tasks.Task`1" /> が完了して値を返したときに非同期的に実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-381">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-382">新しい継続タスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-382">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-383">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-383">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-384">次の例では、ContinueWith メソッドを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-384">The following example shows how to use the ContinueWith method:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationsimple.cs#03)]
 [!code-vb[System.Threading.Tasks.Task#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationsimple.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-385">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-385">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-386">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-386">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-387">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-387">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-388">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-388">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-389">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-389">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-390">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-390">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-391">呼び出し元から提供される状態情報を受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期的に実行され、値を返す継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-391">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-392">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-392">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-393">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-393">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-394">
            <paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-394">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-395">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-395">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-396">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-396">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-397">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-397">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-398">新しい継続タスクに割り当てられる <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-398">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-399">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了して値を返したときに非同期的に実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-399">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="b3e5a-400">この継続タスクは、キャンセル トークンを受け取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-400">The continuation receives a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-401">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-401">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-402">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-402">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-403">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-403">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="b3e5a-404">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-404">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-405">トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> は、既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-405">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-406">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-406">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-407">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-407">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-408">
            <c>continuationOptions</c> で指定した条件に従って実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-408">A function to run according to the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="b3e5a-409">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-409">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b3e5a-410">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-410">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="b3e5a-411">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-411">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-412">指定された継続のオプションに従って実行され、値を返す継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-412">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-413">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-413">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-414">返された<xref:System.Threading.Tasks.Task%601>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-414">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="b3e5a-415">を通じて、継続条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-415">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-416">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-416">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-417">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-417">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-418">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-418">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-419">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-419">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-420">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-420">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-421">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-421">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-422">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-422">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-423">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了して値を返したときに非同期的に実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-423">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="b3e5a-424">継続タスクは、指定されたスケジューラを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-424">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-425">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-425">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-426">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-426">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-427">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-427">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-428">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-428">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="b3e5a-429">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-429">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-430">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-430">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-431">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-431">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-432">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-432">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-433">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-433">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-434">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-434">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-435">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-435">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-436">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了して値を返したときに非同期的に実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-436">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="b3e5a-437">この継続タスクは、呼び出し元から提供される状態情報とキャンセル トークンを受け取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-437">The continuation receives caller-supplied state information and a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-438">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-438">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-439">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-439">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-440">
            <paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-440">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-441">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-441">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-442">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-442">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-443">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-443">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-444">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-444">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-445">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-445">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b3e5a-446">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-446">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="b3e5a-447">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-447">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-448">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに、指定したタスク継続オプションに基づいて実行される継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-448">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-449">この継続タスクは、呼び出し元から提供される状態情報を受け取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-449">The continuation receives caller-supplied state information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-450">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-450">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-451">返された<xref:System.Threading.Tasks.Task%601>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-451">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="b3e5a-452">を通じて、継続条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-452">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-453">
            <paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-453">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-454">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-454">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-455">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-455">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-456">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-456">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-457">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-457">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-458">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-458">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-459">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-459">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-460">ターゲットの <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期に実行する継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-460">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-461">この継続タスクは、呼び出し元から提供される状態情報を受け取り、指定したスケジューラを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-461">The continuation receives caller-supplied state information and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-462">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-462">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-463">返された<xref:System.Threading.Tasks.Task%601>はスケジュールされません実行の現在のタスクが完了するまで正常に完了するまで実行されて、ハンドルされない例外、エラー、または取り消されることによって早い段階を終了によって完了するかどうか。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-463">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-464">
            <paramref name="scheduler" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-464">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-465">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-465">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-466">指定した <c>continuationOptions</c> に従って実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-466">A function to run according to the specified <c>continuationOptions.</c></span>
          </span>
          <span data-ttu-id="b3e5a-467">実行すると、完了したタスクがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-467">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-468">新しい継続タスクに割り当てられる <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-468">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b3e5a-469">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-469">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="b3e5a-470">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-470">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-471">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-471">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-472">指定された継続のオプションに従って実行され、値を返す継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-472">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
          <span data-ttu-id="b3e5a-473">継続タスクは、キャンセル トークンを渡され、指定されたスケジューラを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-473">The continuation is passed a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-474">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-474">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-475">返された<xref:System.Threading.Tasks.Task%601>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-475">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="b3e5a-476">使用条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-476">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-477">次の例では、継続のオプションでの ContinueWith メソッドを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-477">The following example shows how to use the ContinueWith method with continuation options:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Task#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-478">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-478">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="b3e5a-479">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-479">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-480">トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> は、既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-480">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-481">
            <paramref name="continuationFunction" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-481">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="b3e5a-482">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-482">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-483">
            <paramref name="scheduler" /> 引数が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-483">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-484">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-484">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-485">継続タスクによって生成される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-485">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="b3e5a-486">
            <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-486">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="b3e5a-487">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-487">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b3e5a-488">継続関数によって使用されるデータを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-488">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-489">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-489">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b3e5a-490">継続タスクのスケジュールおよびその動作を設定するオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-490">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="b3e5a-491">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-491">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-492">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-492">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-493">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに、指定したタスク継続オプションに基づいて実行され、値を返す継続タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-493">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="b3e5a-494">この継続タスクは、呼び出し元から提供される状態情報とキャンセル トークンを受け取り、指定したスケジューラを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-494">The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-495">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-495">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-496">返された<xref:System.Threading.Tasks.Task%601>現在のタスクが完了するまで実行のスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-496">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="b3e5a-497">使用条件が指定されている場合、`continuationOptions`パラメーターが満たされていない、継続タスクは取り消されますの代わりにスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-497">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-498">
            <paramref name="scheduler" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-498">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-499">
            <paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-499">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-500">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-500">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.Task.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-501">このタスクの作成に使用される <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-501">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-502">このタスクの作成に使用される <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-502">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentId">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; CurrentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Nullable`1&lt;int32&gt; CurrentId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CurrentId" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentId As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Nullable&lt;int&gt; CurrentId { Nullable&lt;int&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentId : Nullable&lt;int&gt;" Usage="System.Threading.Tasks.Task.CurrentId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-503">現在実行中の <see cref="T:System.Threading.Tasks.Task" /> の ID を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-503">Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-504">システムによって現在実行中のタスクに割り当てられた整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-504">An integer that was assigned by the system to the currently-executing task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-505"><xref:System.Threading.Tasks.Task.CurrentId%2A> `static` (`Shared` Visual basic)、タスクを実行しているコードから、現在実行中のタスクの識別子を取得するために使用するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-505"><xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.</span></span> <span data-ttu-id="b3e5a-506">異なり、<xref:System.Threading.Tasks.Task.Id%2A>プロパティで、特定の識別子を返します<xref:System.Threading.Tasks.Task>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-506">It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance.</span></span> <span data-ttu-id="b3e5a-507">取得しようとした場合、<xref:System.Threading.Tasks.Task.CurrentId%2A>タスクを実行しているコードの外部からの値、プロパティを返す`null`します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-507">If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.</span></span>  
  
 <span data-ttu-id="b3e5a-508">競合は非常にまれですが、タスクの識別子とは限りません一意であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-508">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.Id" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delay">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-509">遅延後に完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-509">Creates a task that will complete after a time delay.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (millisecondsDelay As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="static member Delay : int -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay millisecondsDelay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="b3e5a-510">戻されるタスクが完了するまでに待機するミリ秒数。無期限に待機する場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-510">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-511">指定したミリ秒後に完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-511">Creates a task that completes after a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-512">遅延を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-512">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-513"><xref:System.Threading.Tasks.Task.Delay%2A>メソッドは通常、すべての操作またはタスクの一部を指定した時間間隔の遅延を使用します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-513">The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval.</span></span> <span data-ttu-id="b3e5a-514">ほとんどの場合、遅延時間が導入されています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-514">Most commonly, the time delay is introduced:</span></span>  
  
-   <span data-ttu-id="b3e5a-515">次の例として、タスクの先頭を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-515">At the beginning of the task, as the following example shows.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]
     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  
  
-   <span data-ttu-id="b3e5a-516">タスクを実行すると中にいずれかの時点します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-516">Sometime while the task is executing.</span></span> <span data-ttu-id="b3e5a-517">この場合、呼び出し、<xref:System.Threading.Tasks.Task.Delay%2A>メソッドの次の例のように、タスク内の子タスクとして実行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-517">In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows.</span></span> <span data-ttu-id="b3e5a-518">以降、タスクを呼び出します、<xref:System.Threading.Tasks.Task.Delay%2A>メソッドが非同期的に実行されるを使用して完了する、親タスクが待機する必要があります、`await`キーワード。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-518">Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]
     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  
  
 <span data-ttu-id="b3e5a-519">指定した時間の遅延の後、タスクが完了した、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-519">After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="b3e5a-520">このメソッドは、システム クロックに依存します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-520">This method depends on the system clock.</span></span> <span data-ttu-id="b3e5a-521">つまり、エントリの場合、遅延時間は、システム時計の解像度が等しく約、`millisecondsDelay`引数は、Windows システムでは、約 15 ミリ秒であるシステム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-521">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-522">次の例の簡単な使用を示しています、<xref:System.Threading.Tasks.Task.Delay%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-522">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-523">
            <paramref name="millisecondsDelay" /> 引数は -1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-523">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (delay As TimeSpan) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="static member Delay : TimeSpan -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay delay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="b3e5a-524">戻されるタスクが完了するまでに待機する時間。無期限に待機する場合は <see langword="TimeSpan.FromMilliseconds(-1)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-524">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-525">指定の時間間隔後に完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-525">Creates a task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-526">遅延を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-526">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-527">指定した時間の遅延の後、タスクが完了した<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-527">After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="b3e5a-528">使用シナリオとその他の例では、ドキュメントを参照して、<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-528">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="b3e5a-529">このメソッドは、システム クロックに依存します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-529">This method depends on the system clock.</span></span> <span data-ttu-id="b3e5a-530">つまり、エントリの場合、遅延時間は、システム時計の解像度が等しく約、`delay`引数は、Windows システムでは、約 15 ミリ秒であるシステム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-530">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-531">次の例の簡単な使用を示しています、<xref:System.Threading.Tasks.Task.Delay%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-531">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-532">
            <paramref name="delay" /> は、<see langword="TimeSpan.FromMillseconds(-1)" /> 以外の負の時間間隔を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-532">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="b3e5a-533">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-533">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-534">
            <paramref name="delay" /> 引数の <see cref="P:System.TimeSpan.TotalMilliseconds" />プロパティが <see cref="F:System.Int32.MaxValue" /> より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-534">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Delay : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay (millisecondsDelay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="b3e5a-535">戻されるタスクが完了するまでに待機するミリ秒数。無期限に待機する場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-535">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-536">タスクの完了の待機中に観察するキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-536">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-537">指定したミリ秒後に完了するキャンセル可能なタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-537">Creates a cancellable task that completes after a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-538">遅延を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-538">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-539">指定した時間の遅延の前にキャンセル トークンがシグナル通知された場合、<xref:System.Threading.Tasks.TaskCanceledException>で例外の結果と、タスクが完了した、<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-539">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="b3e5a-540">タスクが完了して、それ以外の場合、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>遅延指定の時間が経過した後の状態します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-540">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="b3e5a-541">使用シナリオとその他の例では、ドキュメントを参照して、<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-541">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="b3e5a-542">このメソッドは、システム クロックに依存します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-542">This method depends on the system clock.</span></span> <span data-ttu-id="b3e5a-543">つまり、エントリの場合、遅延時間は、システム時計の解像度が等しく約、`millisecondsDelay`引数は、Windows システムでは、約 15 ミリ秒であるシステム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-543">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-544">次の例への呼び出しが含まれるタスクの起動、<xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29>秒の遅延を 1 つのメソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-544">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> method with a one second delay.</span></span> <span data-ttu-id="b3e5a-545">待機時間の間隔が経過する前に、トークンが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-545">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="b3e5a-546">出力の例で示すは、その結果、<xref:System.Threading.Tasks.TaskCanceledException>スローされると、タスクの<xref:System.Threading.Tasks.Task.Status%2A>プロパティに設定されて<xref:System.Threading.Tasks.TaskStatus.Canceled>。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-546">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-547">
            <paramref name="millisecondsDelay" /> 引数は -1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-547">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="b3e5a-548">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-548">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-549">指定された <paramref name="cancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-549">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Delay : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay (delay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="b3e5a-550">戻されるタスクが完了するまでに待機する時間。無期限に待機する場合は <see langword="TimeSpan.FromMilliseconds(-1)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-550">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-551">タスクの完了の待機中に観察するキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-551">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-552">指定の時間間隔後に完了するキャンセル可能タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-552">Creates a cancellable task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-553">遅延を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-553">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-554">指定した時間の遅延の前にキャンセル トークンがシグナル通知された場合、<xref:System.Threading.Tasks.TaskCanceledException>で例外の結果と、タスクが完了した、<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-554">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="b3e5a-555">タスクが完了して、それ以外の場合、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>遅延指定の時間が経過した後の状態します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-555">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="b3e5a-556">使用シナリオとその他の例では、ドキュメントを参照して、<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-556">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="b3e5a-557">このメソッドは、システム クロックに依存します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-557">This method depends on the system clock.</span></span> <span data-ttu-id="b3e5a-558">つまり、エントリの場合、遅延時間は、システム時計の解像度が等しく約、`delay`引数は、Windows システムでは、約 15 ミリ秒であるシステム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-558">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-559">次の例への呼び出しが含まれるタスクの起動、 <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> 1.5 秒の遅延を持つメソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-559">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method with a 1.5 second delay.</span></span> <span data-ttu-id="b3e5a-560">待機時間の間隔が経過する前に、トークンが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-560">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="b3e5a-561">出力の例で示すは、その結果、<xref:System.Threading.Tasks.TaskCanceledException>スローされると、タスクの<xref:System.Threading.Tasks.Task.Status%2A>プロパティに設定されて<xref:System.Threading.Tasks.TaskStatus.Canceled>。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-561">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay4.vb#4)]  
  
 <span data-ttu-id="b3e5a-562">この例が、潜在的な競合状態が含まれることに注意してください。 トークンが取り消されたときに、遅延を非同期に実行するタスクに依存します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-562">Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled.</span></span> <span data-ttu-id="b3e5a-563">呼び出しから 1.5 秒の遅延が、<xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29>メソッドでは、可能性の仮定がなります、考えられることを呼び出し、<xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29>メソッドは、トークンが取り消される前に返すことができます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-563">Although the 1.5 second delay from the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method makes that assumption likely, it is nevertheless possible that the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method could return before the token is cancelled.</span></span> <span data-ttu-id="b3e5a-564">その場合は、例では、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-564">In that case, the example produces the following output:</span></span>  
  
```  
Task t Status: RanToCompletion, Result: 42  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-565">
            <paramref name="delay" /> は、<see langword="TimeSpan.FromMillseconds(-1)" /> 以外の負の時間間隔を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-565">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="b3e5a-566">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-566">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-567">
            <paramref name="delay" /> 引数の <see cref="P:System.TimeSpan.TotalMilliseconds" />プロパティが <see cref="F:System.Int32.MaxValue" /> より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-567">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="b3e5a-568">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-568">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-569">指定された <paramref name="cancellationToken" /> は既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-569">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-570">
            <see cref="T:System.Threading.Tasks.Task" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-570">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="task.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-571">
            <see cref="T:System.Threading.Tasks.Task" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-571">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-572"><xref:System.Threading.Tasks.Task>クラスが実装する、<xref:System.IDisposable>インターフェイスも実装するリソースを使用して内部的にいるため<xref:System.IDisposable>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-572">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="b3e5a-573">ただし場合に、特に対象とするアプリ、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]または後を呼び出す必要がない<xref:System.Threading.Tasks.Task.Dispose%2A>パフォーマンスやスケーラビリティのテストを示します、しない限り、使用パターンに基づいて、アプリのパフォーマンスはタスクを破棄して向上します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-573">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="b3e5a-574">詳細については、次を参照してください。[タスクを破棄する必要がありますか?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) .NET ブログでの並列プログラミングにします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-574">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b3e5a-575">タスクが最終的な状態、<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、または <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> のいずれでもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-575">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="task.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="b3e5a-576">
            <see cref="M:System.Threading.Tasks.Task.Dispose" /> が呼び出されたことが原因でこのメソッドが呼び出されているかどうかを示すブール値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-576">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-577">
            <see cref="T:System.Threading.Tasks.Task" /> を破棄し、そのすべてのアンマネージ リソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-577">Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-578"><xref:System.Threading.Tasks.Task>クラスが実装する、<xref:System.IDisposable>インターフェイスも実装するリソースを使用して内部的にいるため<xref:System.IDisposable>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-578">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="b3e5a-579">ただし場合に、特に対象とするアプリ、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]または後を呼び出す必要がない<xref:System.Threading.Tasks.Task.Dispose%2A>パフォーマンスやスケーラビリティのテストを示します、しない限り、使用パターンに基づいて、アプリのパフォーマンスはタスクを破棄して向上します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-579">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="b3e5a-580">詳細については、次を参照してください。[タスクを破棄する必要がありますか?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) .NET ブログでの並列プログラミングにします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-580">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b3e5a-581">タスクが最終的な状態、<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、または <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> のいずれでもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-581">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
        <threadsafe>
          <span data-ttu-id="b3e5a-582">ほとんどのメンバーとは異なり、<see cref="T:System.Threading.Tasks.Task" />クラスでは、このメソッドはスレッド セーフではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-582">Unlike most of the members of the <see cref="T:System.Threading.Tasks.Task" /> class, this method is not thread-safe.</span>
          </span>
        </threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : AggregateException" Usage="System.Threading.Tasks.Task.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-583">
            <see cref="T:System.AggregateException" /> が途中で終了する原因となった <see cref="T:System.Threading.Tasks.Task" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-583">Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
          <span data-ttu-id="b3e5a-584">
            <see cref="T:System.Threading.Tasks.Task" /> が正常に完了した場合、または例外がスローされていない場合は、<see langword="null" /> が戻ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-584">If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-585">
            <see cref="T:System.AggregateException" /> が途中で終了する原因となった <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-585">The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-586">ハンドルされない例外をスローするタスクの結果の例外を格納およびに伝播にラップする、<xref:System.AggregateException>への呼び出しで<xref:System.Threading.Tasks.Task.Wait%2A>またはへのアクセス、<xref:System.Threading.Tasks.Task.Exception%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-586">Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span> <span data-ttu-id="b3e5a-587">タスク インスタンスがガベージ コレクション時間で観察されない例外はファイナライザー スレッドに反映されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-587">Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.</span></span> <span data-ttu-id="b3e5a-588">詳細と例では、次を参照してください。[例外処理 (タスク並列ライブラリ)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-588">For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory ^ Factory { System::Threading::Tasks::TaskFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Factory : System.Threading.Tasks.TaskFactory" Usage="System.Threading.Tasks.Task.Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-589">
            <see cref="T:System.Threading.Tasks.Task" /> インスタンスおよび <see cref="T:System.Threading.Tasks.Task`1" /> インスタンスを作成して構成するためのファクトリ メソッドへのアクセスを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-589">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-590">さまざまな <see cref="T:System.Threading.Tasks.Task" /> オブジェクトおよび <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを作成可能なファクトリ オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-590">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-591">このプロパティの既定のインスタンスを返します、<xref:System.Threading.Tasks.TaskFactory>パラメーターなしで呼び出すことによって作成されたものと同じであるクラス<xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-591">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="b3e5a-592">次のプロパティ値があります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-592">It has the following property values:</span></span>  
  
|<span data-ttu-id="b3e5a-593">プロパティ</span><span class="sxs-lookup"><span data-stu-id="b3e5a-593">Property</span></span>|<span data-ttu-id="b3e5a-594">[値]</span><span class="sxs-lookup"><span data-stu-id="b3e5a-594">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="b3e5a-595">`null`、または <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b3e5a-595">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="b3e5a-596">このプロパティの最も一般的な使用が作成して 1 回の呼び出しで新しいタスクを開始するには、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-596">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b3e5a-597">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>メソッドを作成する最も簡単な方法を提供する、<xref:System.Threading.Tasks.Task>既定の構成値を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-597">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.</span></span>  
  
 <span data-ttu-id="b3e5a-598">次のコードの例では、静的な<xref:System.Threading.Tasks.Task.Factory%2A>プロパティを 2 つの呼び出しを行う、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-598">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-599">最初は、2 つ目は、ユーザーのマイ ドキュメント ディレクトリのサブディレクトリの名前を持つ配列を設定します。 中に、ユーザーの [マイ ドキュメント] のディレクトリ内のファイルの名前を持つ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-599">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="b3e5a-600">呼び出して、<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType>メソッドは、最初の 2 つのタスクの実行が完了した後は、2 つの配列でファイルとディレクトリの数に関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-600">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskFactory" />
      </Docs>
    </Member>
    <Member MemberName="FromCanceled">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromCanceled(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member FromCanceled : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.FromCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-601">タスクを完了させるキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-601">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-602">指定されたキャンセル トークンを使用したキャンセルにより完了した <see cref="T:System.Threading.Tasks.Task" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-602">Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-603">キャンセルされたタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-603">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-604">
            <paramref name="cancellationToken" /> は、キャンセルが要求されていません。<see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> プロパティは <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-604">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromCanceled&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromCanceled&lt;TResult&gt; (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromCanceled&lt;TResult&gt;(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member FromCanceled : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-605">タスクによって返される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-605">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-606">タスクを完了させるキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-606">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-607">指定されたキャンセル トークンを使用したキャンセルにより完了した <see cref="T:System.Threading.Tasks.Task`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-607">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-608">キャンセルされたタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-608">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-609">
            <paramref name="cancellationToken" /> は、キャンセルが要求されていません。<see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> プロパティは <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-609">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromException">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="static member FromException : Exception -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.FromException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="b3e5a-610">タスクを完了させる例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-610">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-611">指定した例外で完了した <see cref="T:System.Threading.Tasks.Task" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-611">Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-612">エラーが発生したタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-612">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-613">このメソッドを作成、<xref:System.Threading.Tasks.Task>オブジェクト<xref:System.Threading.Tasks.Task.Status%2A>プロパティが<xref:System.Threading.Tasks.TaskStatus.Faulted>と持つ<xref:System.Threading.Tasks.Task.Exception%2A>プロパティが含まれています`exception`。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-613">This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="b3e5a-614">すぐにタスクを実行する作業が長いコード パスを実行する前に例外をスローすることをおわかっている場合に、メソッドは、よく使用されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-614">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="b3e5a-615">例については、次を参照してください。、<xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-615">For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromException&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromException&lt;TResult&gt; (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromException&lt;TResult&gt;(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException``1(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="static member FromException : Exception -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-616">タスクによって返される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-616">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="exception">
          <span data-ttu-id="b3e5a-617">タスクを完了させる例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-617">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-618">指定した例外で完了した <see cref="T:System.Threading.Tasks.Task`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-618">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-619">エラーが発生したタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-619">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-620">このメソッドを作成、<xref:System.Threading.Tasks.Task%601>オブジェクト<xref:System.Threading.Tasks.Task.Status%2A>プロパティが<xref:System.Threading.Tasks.TaskStatus.Faulted>と持つ<xref:System.Threading.Tasks.Task.Exception%2A>プロパティが含まれています`exception`。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-620">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="b3e5a-621">すぐにタスクを実行する作業が長いコード パスを実行する前に例外をスローすることをおわかっている場合に、メソッドは、よく使用されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-621">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="b3e5a-622">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-622">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-623">次の例は、各ディレクトリ、コマンドラインの引数として渡される名前のファイル内のバイト数を計算するコマンド ライン ユーティリティです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-623">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="b3e5a-624">インスタンス化する長いコード パスを実行するのではなく、<xref:System.IO.FileInfo>オブジェクトし、の値を取得しますその<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>ディレクトリ内の各ファイルのプロパティは、例では、を呼び出すだけです、<xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29>場合は、特定のエラーが発生したタスクを作成する方法。サブディレクトリは存在しません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-624">Rather than executing a longer code path that instantiates a <xref:System.IO.FileInfo> object and retrieves the value of its <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> method to create a faulted task if a particular subdirectory does not exist.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResult&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromResult&lt;TResult&gt; (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromResult&lt;TResult&gt;(!!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromResult(Of TResult) (result As TResult) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromResult(TResult result);" />
      <MemberSignature Language="F#" Value="static member FromResult : 'Result -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromResult result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-625">タスクによって返される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-625">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="result">
          <span data-ttu-id="b3e5a-626">完了したタスクに格納する結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-626">The result to store into the completed task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-627">指定した結果で成功した <see cref="T:System.Threading.Tasks.Task`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-627">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-628">正常に完了したタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-628">The successfully completed task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-629">このメソッドを作成、<xref:System.Threading.Tasks.Task%601>オブジェクト<xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>プロパティが`result`とが<xref:System.Threading.Tasks.Task.Status%2A>プロパティが<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-629">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="b3e5a-630">タスクの戻り値が長いコード パスを実行することがなくすぐにわかっている場合、メソッドは、よく使用されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-630">The method is commonly used when the return value of a task is immediately known without executing a longer code path.</span></span> <span data-ttu-id="b3e5a-631">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-631">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="b3e5a-632">値を返さないタスク オブジェクトを作成するからタスク オブジェクトを取得、<xref:System.Threading.Tasks.Task.CompletedTask%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-632">To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-633">次の例は、各ディレクトリ、コマンドラインの引数として渡される名前のファイル内のバイト数を計算するコマンド ライン ユーティリティです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-633">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="b3e5a-634">インスタンス化する長いコード パスを実行するのではなく、<xref:System.IO.FileStream>オブジェクトし、の値を取得しますその<xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType>ディレクトリ内の各ファイルのプロパティは、例では、を呼び出すだけです、<xref:System.Threading.Tasks.Task.FromResult%2A>タスクを作成するメソッドが<xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>。プロパティはゼロ (0)、ディレクトリにファイルがあるありません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-634">Rather than executing a longer code path that instantiates a <xref:System.IO.FileStream> object and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0) if a directory has no files.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CompletedTask" />
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();" />
      <MemberSignature Language="F#" Value="member this.GetAwaiter : unit -&gt; System.Runtime.CompilerServices.TaskAwaiter" Usage="task.GetAwaiter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-635">この <see cref="T:System.Threading.Tasks.Task" /> を待機するために使用する awaiter を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-635">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-636">awaiter のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-636">An awaiter instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-637">このメソッドは、アプリケーション コードで使用するためではなく、コンパイラです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-637">This method is intended for compiler use rather than for use in application code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Threading.Tasks.Task.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-638">この <see cref="T:System.Threading.Tasks.Task" /> インスタンスの一意の ID を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-638">Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-639">システムによってこの <see cref="T:System.Threading.Tasks.Task" /> インスタンスに割り当てられた識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-639">The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-640">タスク Id は、オンデマンドで割り当てられているし、必ずしもタスク インスタンスが作成された順序を表していません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-640">Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.</span></span> <span data-ttu-id="b3e5a-641">競合は非常にまれですが、タスクの識別子とは限りません一意であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-641">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 <span data-ttu-id="b3e5a-642">そのタスクが実行されているコード内から現在実行中のタスクのタスク ID を取得するには、使用、<xref:System.Threading.Tasks.Task.CurrentId%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-642">To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CurrentId" />
      </Docs>
    </Member>
    <Member MemberName="IsCanceled">
      <MemberSignature Language="C#" Value="public bool IsCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCanceled : bool" Usage="System.Threading.Tasks.Task.IsCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-643">この <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行が取り消されることによって完了したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-643">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-644">タスクが取り消されることによって完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-644">
              <see langword="true" /> if the task has completed due to being canceled; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-645">A<xref:System.Threading.Tasks.Task>で完了、<xref:System.Threading.Tasks.TaskStatus.Canceled>下で、次の条件のいずれかの状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-645">A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="b3e5a-646">その<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A>タスクが実行を開始する前に取り消し状態マークされました</span><span class="sxs-lookup"><span data-stu-id="b3e5a-646">Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,</span></span>  
  
-   <span data-ttu-id="b3e5a-647">タスクが既にシグナルでキャンセル要求を受信確認<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A>スローすることによって、<xref:System.OperationCanceledException>が同じである<xref:System.Threading.CancellationToken>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-647">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.</span></span>  
  
-   <span data-ttu-id="b3e5a-648">タスクが既にシグナルでキャンセル要求を受信確認<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A>呼び出すことによって、<xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A>メソッドを<xref:System.Threading.CancellationToken>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-648">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b3e5a-649">値を取得、<xref:System.Threading.Tasks.Task.IsCanceled%2A>タスクが完了するまでプロパティが呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-649">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Threading.Tasks.Task.IsCompleted" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-650">この <see cref="T:System.Threading.Tasks.Task" /> が完了したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-650">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-651">タスクが完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-651">
              <see langword="true" /> if the task has completed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-652"><xref:System.Threading.Tasks.Task.IsCompleted%2A> 戻ります`true`3 つの最終的な状態のいずれかでは、タスク: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>、 <xref:System.Threading.Tasks.TaskStatus.Faulted>、または<xref:System.Threading.Tasks.TaskStatus.Canceled>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-652"><xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b3e5a-653">値を取得、<xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType>タスクが完了するまでプロパティが呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-653">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public bool IsCompletedSuccessfully { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedSuccessfully" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompletedSuccessfully As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompletedSuccessfully { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompletedSuccessfully : bool" Usage="System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFaulted">
      <MemberSignature Language="C#" Value="public bool IsFaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFaulted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsFaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFaulted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFaulted : bool" Usage="System.Threading.Tasks.Task.IsFaulted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-654">処理されない例外が発生したことが原因で <see cref="T:System.Threading.Tasks.Task" /> が完了したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-654">Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-655">タスクがハンドルされない例外をスローした場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-655">
              <see langword="true" /> if the task has thrown an unhandled exception; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-656">場合<xref:System.Threading.Tasks.Task.IsFaulted%2A>は`true`、タスクの<xref:System.Threading.Tasks.Task.Status%2A>と等しい<xref:System.Threading.Tasks.TaskStatus.Faulted>、およびその<xref:System.Threading.Tasks.Task.Exception%2A>プロパティは null になります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-656">If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b3e5a-657">値を取得、<xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType>タスクが完了するまでプロパティが呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-657">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-658">ThreadPool 上で実行する指定された作業をキューに配置し、その作業のタスクまたは <see cref="T:System.Threading.Tasks.Task`1" /> のハンドルを戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-658">Queues the specified work to run on the ThreadPool and returns a task or <see cref="T:System.Threading.Tasks.Task`1" /> handle for that work.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-659"><xref:System.Threading.Tasks.Task.Run%2A>メソッドには、一連のオーバー ロードを既定値を使用してタスクを開始するが簡単にするが用意されています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-659">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a set of overloads that make it easy to start a task by using default values.</span></span> <span data-ttu-id="b3e5a-660">軽量の代わりに、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-660">It is a lightweight alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action);" />
      <MemberSignature Language="F#" Value="static member Run : Action -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-661">非同期的に実行する処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-661">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-662">スレッド プール上で実行する指定された作業をキューに配置し、その作業を表す <see cref="T:System.Threading.Tasks.Task" /> オブジェクトを戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-662">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-663">ThreadPool で実行するためにキューに配置された作業を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-663">A task that represents the work queued to execute in the ThreadPool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-664"><xref:System.Threading.Tasks.Task.Run%2A>メソッドを作成し、1 つのメソッド呼び出しでタスクを実行することができより簡単には、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-664">The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="b3e5a-665">既定値は次のタスクが作成されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-665">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="b3e5a-666">そのキャンセル トークンは<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-666">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b3e5a-667">その<xref:System.Threading.Tasks.Task.CreationOptions%2A>プロパティの値が<xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-667">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b3e5a-668">既定のタスク スケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-668">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="b3e5a-669">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-669">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-670">次の例では、定義、`ShowThreadInfo`を表示するメソッド、<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType>現在のスレッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-670">The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> of the current thread.</span></span> <span data-ttu-id="b3e5a-671">アプリケーション スレッドから直接呼び出されから呼び出されること、<xref:System.Action>に渡されたデリゲート、<xref:System.Threading.Tasks.Task.Run%28System.Action%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-671">It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run11.cs#11)]
 [!code-vb[System.Threading.Tasks.Task.Run#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run11.vb#11)]  
  
 <span data-ttu-id="b3e5a-672">次の例は、タスクは、実行するコードを定義するラムダ式を使用するには、前に似ています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-672">The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run6.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Run#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run6.vb#3)]  
  
 <span data-ttu-id="b3e5a-673">例では、メイン アプリケーション スレッドとは異なるスレッドで非同期タスクが実行されることを示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-673">The examples show that the asynchronous task executes on a different thread than the main application thread.</span></span>  
  
 <span data-ttu-id="b3e5a-674">呼び出し、<xref:System.Threading.Tasks.Task.Wait%2A>メソッドは、タスクが完了し、アプリケーションが終了する前にその出力を表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-674">The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends.</span></span> <span data-ttu-id="b3e5a-675">それを`Main`メソッドは、タスクが終了する前に完了します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-675">Otherwise, it is possible that the `Main` method will complete before the task finishes.</span></span>  
  
 <span data-ttu-id="b3e5a-676">次の例を示しています、<xref:System.Threading.Tasks.Task.Run%28System.Action%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-676">The following example illustrates the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span> <span data-ttu-id="b3e5a-677">ディレクトリ名の配列を定義し、各ディレクトリにファイル名を取得する別のタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-677">It defines an array of directory names and starts a separate task to retrieve the file names in each directory.</span></span> <span data-ttu-id="b3e5a-678">すべてのタスクを 1 つのファイル名の書き込み<xref:System.Collections.Concurrent.ConcurrentBag%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-678">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="b3e5a-679">例を呼び出して、<xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29>に書き込まれるファイル名の合計数を表示し、すべてのタスクが完了したら、いることを確認する方法、<xref:System.Collections.Concurrent.ConcurrentBag%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-679">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-680">
            <paramref name="action" /> パラメーターは <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-680">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-681">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-681">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run (function As Func(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="b3e5a-682">非同期的に実行する処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-682">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-683">スレッド プール上で実行する作業を指定してキューに配置し、<paramref name="function" /> によって返されるタスクのプロキシを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-683">Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-684">
            <paramref name="function" /> によって返されるタスクのプロキシを表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-684">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-685">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-685">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-686">
            <paramref name="function" /> パラメーターは <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-686">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-687">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-687">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b3e5a-688">非同期的に実行する処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-688">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-689">処理を取り消すために使用できるキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-689">A cancellation token that can be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-690">スレッド プール上で実行する指定された作業をキューに配置し、その作業を表す <see cref="T:System.Threading.Tasks.Task" /> オブジェクトを戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-690">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="b3e5a-691">キャンセル トークンで作業をキャンセルできます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-691">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-692">スレッド プールで実行するためにキューに配置された作業を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-692">A task that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-693">タスクの実行が開始する前にキャンセルが要求される場合、タスクは実行されません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-693">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="b3e5a-694">設定されている代わりに、<xref:System.Threading.Tasks.TaskStatus.Canceled>状態とがスローされます、<xref:System.Threading.Tasks.TaskCanceledException>例外。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-694">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="b3e5a-695"><xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29>メソッドがより簡単、<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-695">The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-696">既定値は次のタスクが作成されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-696">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="b3e5a-697">その<xref:System.Threading.Tasks.Task.CreationOptions%2A>プロパティの値が<xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-697">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b3e5a-698">既定のタスク スケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-698">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="b3e5a-699">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-699">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-700">次の例では、 <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> C:\Windows\System32 ディレクトリ内のファイルを反復処理するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-700">The following example calls the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="b3e5a-701">ラムダ式の呼び出し、<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>に各ファイルに関する情報を追加するメソッドを<xref:System.Collections.Generic.List%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-701">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="b3e5a-702">各のデタッチされた入れ子のタスクによって呼び出される、<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>ループは、キャンセル トークンの状態をチェックし、キャンセルが要求される場合は、<xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-702">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-703"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>メソッドがスローされます、<xref:System.OperationCanceledException>で処理される例外を`catch`ブロック呼び出し元のスレッドを呼び出すと、<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-703">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Run#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-704">
            <paramref name="action" /> パラメーターは <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-704">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="b3e5a-705">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-705">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-706">
            <paramref name="cancellationToken" /> に関連付けられた <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-706">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-707">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-707">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="b3e5a-708">非同期的に実行する処理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-708">The work to execute asynchronously.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-709">処理を取り消すために使用されるキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-709">A cancellation token that should be used to cancel the work.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-710">スレッド プール上で実行する作業を指定してキューに配置し、<paramref name="function" /> によって返されるタスクのプロキシを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-710">Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-711">
            <paramref name="function" /> によって返されるタスクのプロキシを表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-711">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-712">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-712">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-713">
            <paramref name="function" /> パラメーターは <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-713">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="b3e5a-714">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-714">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-715">
            <paramref name="cancellationToken" /> に関連付けられた <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-715">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b3e5a-716">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-716">Task Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-717">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-717">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-718">プロキシ タスクによって返される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-718">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b3e5a-719">非同期的に実行する処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-719">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-720">スレッド プール上で実行する指定された作業をキューに配置し、<paramref name="function" /> によって返される <see langword="Task(TResult)" /> のプロキシを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-720">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-721">
            <see langword="Task(TResult)" /> によって返される <see langword="Task(TResult)" /> のプロキシを表す <paramref name="function" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-721">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-722">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-722">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-723">
            <paramref name="function" /> パラメーターは <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-723">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-724">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-724">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-725">タスクの戻り値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-725">The return type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b3e5a-726">非同期的に実行する処理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-726">The work to execute asynchronously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-727">スレッド プール上で実行する指定された作業をキューに配置し、その作業を表す <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-727">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-728">スレッド プールで実行するためキューに配置された処理を表すタスク オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-728">A task object that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-729"><xref:System.Threading.Tasks.Task.Run%2A>メソッドがより簡単、<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-729">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b3e5a-730">既定値は次のタスクが作成されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-730">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="b3e5a-731">そのキャンセル トークンは<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-731">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b3e5a-732">その<xref:System.Threading.Tasks.Task.CreationOptions%2A>プロパティの値が<xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-732">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b3e5a-733">既定のタスク スケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-733">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="b3e5a-734">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-734">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-735">次の例では、パブリッシュされたブックを表すテキスト ファイル内の単語のおおよその数をカウントします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-735">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="b3e5a-736">各タスクは、ファイルを開いて、内容全体を非同期的に読み取り、および正規表現を使用してワード カウントを計算する責任を負います。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-736">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="b3e5a-737"><xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29>メソッドが呼び出され、各書籍のワード カウントをコンソールに表示する前にすべてのタスクが完了したことを確認します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-737">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Run#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run3.vb#2)]  
  
 <span data-ttu-id="b3e5a-738">正規表現`\p{P}*\s+`0、1、または複数の区切り文字の後ろに 1 つまたは複数の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-738">The regular expression `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more white-space characters.</span></span> <span data-ttu-id="b3e5a-739">一致の合計数が、おおよそのワード カウントと等しいことが前提としています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-739">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-740">
            <paramref name="function" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-740">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-741">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-741">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-742">プロキシ タスクによって返される結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-742">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b3e5a-743">非同期的に実行する処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-743">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-744">処理を取り消すために使用されるキャンセル トークン</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-744">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-745">スレッド プール上で実行する指定された作業をキューに配置し、<paramref name="function" /> によって返される <see langword="Task(TResult)" /> のプロキシを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-745">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-746">
            <see langword="Task(TResult)" /> によって返される <see langword="Task(TResult)" /> のプロキシを表す <paramref name="function" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-746">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-747">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-747">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-748">
            <paramref name="function" /> パラメーターは <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-748">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="b3e5a-749">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-749">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-750">
            <paramref name="cancellationToken" /> に関連付けられた <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-750">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b3e5a-751">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-751">Task Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-752">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-752">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-753">タスクの結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-753">The result type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b3e5a-754">非同期的に実行する処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-754">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-755">処理を取り消すために使用されるキャンセル トークン</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-755">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-756">スレッド プール上で実行する指定された作業をキューに配置し、その作業を表す <see langword="Task(TResult)" /> オブジェクトを戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-756">Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="b3e5a-757">キャンセル トークンで作業をキャンセルできます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-757">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-758">
            <see langword="Task(TResult)" /> は、スレッド プールで実行するためにキューに配置された作業を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-758">A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-759">タスクの実行が開始する前にキャンセルが要求される場合、タスクは実行されません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-759">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="b3e5a-760">設定されている代わりに、<xref:System.Threading.Tasks.TaskStatus.Canceled>状態とがスローされます、<xref:System.Threading.Tasks.TaskCanceledException>例外。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-760">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="b3e5a-761"><xref:System.Threading.Tasks.Task.Run%2A>メソッドがより簡単、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-761">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="b3e5a-762">既定値は次のタスクが作成されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-762">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="b3e5a-763">その<xref:System.Threading.Tasks.Task.CreationOptions%2A>プロパティの値が<xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-763">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b3e5a-764">既定のタスク スケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-764">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="b3e5a-765">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-765">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-766">次の例では、200万の値にカウンターが増加するまでループする 20 件のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-766">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="b3e5a-767">最初の 10 個のタスクは、200万の到達し、キャンセル トークンが取り消された場合は、カウンターに 200万回に達していないすべてのタスクが取り消されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-767">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="b3e5a-768">この例では、使用可能な出力を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-768">The example shows possible output.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 <span data-ttu-id="b3e5a-769">使用する代わりに、<xref:System.AggregateException.InnerExceptions%2A>プロパティは、例外を確認する例では、すべてのタスクが正常に完了してが取り消された決定を反復処理します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-769">Instead of using the <xref:System.AggregateException.InnerExceptions%2A> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled.</span></span> <span data-ttu-id="b3e5a-770">完了しているは、タスクによって返される値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-770">For those that have completed, it displays the value returned by the task.</span></span>  
  
 <span data-ttu-id="b3e5a-771">キャンセルは協調的であるために、各タスクはキャンセルに応答する方法を決定できます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-771">Because cancellation is cooperative, each task can decide how to respond to cancellation.</span></span> <span data-ttu-id="b3e5a-772">次の例は、タスクが例外をスローするのではなく、完了したイテレーションの数を返すと、トークンが取り消されたする点を除いて、最初のようなは。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-772">The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run28.cs#28)]
 [!code-vb[System.Threading.Tasks.Task.Run#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run28.vb#28)]  
  
 <span data-ttu-id="b3e5a-773">例では、まだ処理する必要があります、<xref:System.AggregateException>例外、キャンセルが要求されたときに開始されていないすべてのタスクが例外をスローするためです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-773">The example still must handle the <xref:System.AggregateException> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-774">
            <paramref name="function" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-774">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="b3e5a-775">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-775">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-776">
            <paramref name="cancellationToken" /> に関連付けられた <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-776">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b3e5a-777">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-777">Task Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-778">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-778">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunSynchronously">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-779">現在の <see cref="T:System.Threading.Tasks.TaskScheduler" /> で <see cref="T:System.Threading.Tasks.Task" /> を同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-779">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously();" />
      <MemberSignature Language="F#" Value="member this.RunSynchronously : unit -&gt; unit" Usage="task.RunSynchronously " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-780">現在の <see cref="T:System.Threading.Tasks.TaskScheduler" /> で <see cref="T:System.Threading.Tasks.Task" /> を同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-780">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-781">通常、タスクはスレッド プールのスレッドで非同期的に実行され、呼び出し元のスレッドをブロックしないでください。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-781">Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.</span></span> <span data-ttu-id="b3e5a-782">呼び出すことによって実行されるタスク、<xref:System.Threading.Tasks.Task.RunSynchronously>メソッドは、現在に関連付けられた<xref:System.Threading.Tasks.TaskScheduler>呼び出し元のスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-782">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread.</span></span> <span data-ttu-id="b3e5a-783">ターゲットのスケジューラが呼び出し元のスレッドでこのタスクの実行をサポートしていない場合、スケジューラで実行するため、タスクがスケジュールされ、タスクの実行が完了するまで呼び出し元のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-783">If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.</span></span> <span data-ttu-id="b3e5a-784">呼び出し元のスレッドが呼び出す必要がありますが、タスクを同期的に実行する場合でも<xref:System.Threading.Tasks.Task.Wait%2A>タスクがスローされる例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-784">Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.</span></span>  <span data-ttu-id="b3e5a-785">例外処理の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-785">For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 <span data-ttu-id="b3e5a-786">呼び出すことによって実行されるタスク、<xref:System.Threading.Tasks.Task.RunSynchronously%2A>メソッドは呼び出しをインスタンス化、<xref:System.Threading.Tasks.Task>または<xref:System.Threading.Tasks.Task%601>クラスのコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-786">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="b3e5a-787">タスクを同期的に実行する必要があります、<xref:System.Threading.Tasks.TaskStatus.Created>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-787">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="b3e5a-788">タスクの開始し、1 回だけ実行可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-788">A task may be started and run only once.</span></span> <span data-ttu-id="b3e5a-789">例外時の結果が 2 番目のタスクをスケジュールしようとするとします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-789">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-790">次の例では、呼び出すことによって実行されるタスク、<xref:System.Threading.Tasks.Task.RunSynchronously%2A>メソッドを 1 つの非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-790">The following example compares a task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method with one executed asynchronously.</span></span> <span data-ttu-id="b3e5a-791">どちらの場合も、タスクの実行タスクの ID とスレッドの ID を表示する同等のラムダ式で、タスクが実行されています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-791">In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running.</span></span> <span data-ttu-id="b3e5a-792">タスクは、1 から 1,000,000 までの整数の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-792">The task calculates the sum of the integers between 1 and 1,000,000.</span></span> <span data-ttu-id="b3e5a-793">呼び出して、タスクを実行、出力の例に示すよう、<xref:System.Threading.Tasks.Task.RunSynchronously%2A>メソッドの実行、アプリケーションのスレッドで非同期タスクではありません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-793">As the output from the example shows, the task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method runs on the application thread, while the asynchronous task does not.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/cs/runsynchronously1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/vb/runsynchronously1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-794">
            <see cref="T:System.Threading.Tasks.Task" /> インスタンスは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-794">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b3e5a-795">
            <see cref="T:System.Threading.Tasks.Task" /> は、開始する有効な状態にはありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-795">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="b3e5a-796">既に開始、実行、またはキャンセルされたか、ダイレクト スケジューリングをサポートしない方法で作成された可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-796">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-797">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-797">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.RunSynchronously : System.Threading.Tasks.TaskScheduler -&gt; unit" Usage="task.RunSynchronously scheduler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-798">このタスク インラインの実行を試みるスケジューラ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-798">The scheduler on which to attempt to run this task inline.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-799">指定された <see cref="T:System.Threading.Tasks.Task" /> で <see cref="T:System.Threading.Tasks.TaskScheduler" /> を同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-799">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-800">呼び出すことによって実行されるタスク、<xref:System.Threading.Tasks.Task.RunSynchronously%2A>メソッドは呼び出しをインスタンス化、<xref:System.Threading.Tasks.Task>または<xref:System.Threading.Tasks.Task%601>クラスのコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-800">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="b3e5a-801">タスクを同期的に実行する必要があります、<xref:System.Threading.Tasks.TaskStatus.Created>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-801">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="b3e5a-802">タスクの開始し、1 回だけ実行可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-802">A task may be started and run only once.</span></span> <span data-ttu-id="b3e5a-803">例外時の結果が 2 番目のタスクをスケジュールしようとするとします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-803">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
 <span data-ttu-id="b3e5a-804">ターゲットのスケジューラが現在のスレッドでこのタスクの実行をサポートしていない場合、スケジューラで実行するため、タスクがスケジュールされ、タスクの実行が完了するまで、現在のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-804">If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.</span></span> <span data-ttu-id="b3e5a-805">このためは、呼び出し元のスレッドはなどのメソッドを呼び出す必要ありません<xref:System.Threading.Tasks.Task.Wait%2A>タスクの実行が完了したことを確認します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-805">Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution.</span></span> <span data-ttu-id="b3e5a-806">タスク操作の例外処理の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-806">For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-807">
            <see cref="T:System.Threading.Tasks.Task" /> インスタンスは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-807">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-808">
            <paramref name="scheduler" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-808">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b3e5a-809">
            <see cref="T:System.Threading.Tasks.Task" /> は、開始する有効な状態にはありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-809">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="b3e5a-810">既に開始、実行、またはキャンセルされたか、ダイレクト スケジューリングをサポートしない方法で作成された可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-810">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-811">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-811">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-812">
            <see cref="T:System.Threading.Tasks.Task" /> を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-812">Starts the <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="task.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-813">現在の <see cref="T:System.Threading.Tasks.Task" /> に <see cref="T:System.Threading.Tasks.TaskScheduler" /> の実行をスケジュールし、それを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-813">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-814">タスクの開始し、1 回だけ実行可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-814">A task may be started and run only once.</span></span> <span data-ttu-id="b3e5a-815">しようとすると、2 回目のタスクをスケジュールすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-815">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="b3e5a-816"><xref:System.Threading.Tasks.Task.Start%2A>のいずれかを呼び出すことによって作成されたタスクを実行するために使用、<xref:System.Threading.Tasks.Task>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-816">The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors.</span></span> <span data-ttu-id="b3e5a-817">通常、これを行うタスクの作成作成したタスクを条件付きで実行する場合など、その実行からを分離する必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-817">Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.</span></span> <span data-ttu-id="b3e5a-818">一般的なケースがタスクのインスタンス化の実行を分離する必要はありません、お勧めのオーバー ロードを呼び出すこと、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>または<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-818">For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b3e5a-819">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-819">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-820">次の例では、<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29>新しいインスタンスを作成するコンス トラクター<xref:System.Threading.Tasks.Task>オブジェクト ID とマネージ スレッド ID は、そのタスクを表示し、ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-820">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop.</span></span> <span data-ttu-id="b3e5a-821">呼び出して、<xref:System.Threading.Tasks.Task.Start%2A>タスクを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-821">It then calls the <xref:System.Threading.Tasks.Task.Start%2A> method to execute the task.</span></span>  <span data-ttu-id="b3e5a-822">これは、コンソールのアプリへの呼び出しなので、<xref:System.Threading.Tasks.Task.Wait%2A>メソッドが、アプリがタスクの実行を終了する前に終了するを防ぐために必要です。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-822">Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.start/cs/Start1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.start/vb/Start1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-823">
            <see cref="T:System.Threading.Tasks.Task" /> インスタンスは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-823">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b3e5a-824">
            <see cref="T:System.Threading.Tasks.Task" /> は、開始する有効な状態にはありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-824">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="b3e5a-825">既に開始、実行、またはキャンセルされたか、ダイレクト スケジューリングをサポートしない方法で作成された可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-825">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-826">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-826">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.Start : System.Threading.Tasks.TaskScheduler -&gt; unit" Usage="task.Start scheduler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="b3e5a-827">このタスクを関連付けて実行する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-827">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-828">指定された <see cref="T:System.Threading.Tasks.Task" /> に <see cref="T:System.Threading.Tasks.TaskScheduler" /> の実行をスケジュールし、それを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-828">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-829">タスクの開始し、1 回だけ実行のみ可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-829">A task may only be started and run only once.</span></span> <span data-ttu-id="b3e5a-830">しようとすると、2 回目のタスクをスケジュールすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-830">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="b3e5a-831">タスク操作によってスローされた例外を処理する方法の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-831">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-832">
            <paramref name="scheduler" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-832">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b3e5a-833">
            <see cref="T:System.Threading.Tasks.Task" /> は、開始する有効な状態にはありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-833">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="b3e5a-834">既に開始、実行、またはキャンセルされたか、ダイレクト スケジューリングをサポートしない方法で作成された可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-834">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-835">
            <see cref="T:System.Threading.Tasks.Task" /> インスタンスは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-835">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskSchedulerException">
          <span data-ttu-id="b3e5a-836">スケジューラは、このタスクをキューに入れられませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-836">The scheduler was unable to queue this task.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md">
          <span data-ttu-id="b3e5a-837">例外処理 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-837">Exception Handling (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As TaskStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskStatus Status { System::Threading::Tasks::TaskStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Threading.Tasks.TaskStatus" Usage="System.Threading.Tasks.Task.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-838">このタスクの <see cref="T:System.Threading.Tasks.TaskStatus" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-838">Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-839">このタスク インスタンスの現在の <see cref="T:System.Threading.Tasks.TaskStatus" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-839">The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-840">値を取得、<xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType>タスクが完了するまでプロパティが呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-840">Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 <span data-ttu-id="b3e5a-841">詳細と例では、次を参照してください。[を使用して継続タスクをタスクの連結](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)と[方法: タスクとその子を取り消す](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-841">For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-842">次の例では、200万の値にカウンターが増加するまでループする 20 件のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-842">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="b3e5a-843">最初の 10 個のタスクは、200万の到達し、キャンセル トークンが取り消された場合は、カウンターに 200万回に達していないすべてのタスクが取り消されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-843">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="b3e5a-844">例を検査し、<xref:System.Threading.Tasks.Task.Status%2A>を正常に完了しましたが、または取り消されたかどうかを示すためには、各タスクのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-844">The example then examines the <xref:System.Threading.Tasks.Task.Status%2A> property of each task to indicate whether it completed successfully or was cancelled.</span></span> <span data-ttu-id="b3e5a-845">完了した方は、タスクによって返される値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-845">For those that completed, it displays the value returned by the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System::IAsyncResult::AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-846">タスクの完了を待機するために使用できる <see cref="T:System.Threading.WaitHandle" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-846">Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-847">タスクの完了を待機するために使用できる <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-847">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-848">によって提供される待機機能を使用して<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>を使用することをお勧めは<xref:System.IAsyncResult.AsyncWaitHandle%2A>同様の機能です。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-848">Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality.</span></span> <span data-ttu-id="b3e5a-849">詳細については、「タスクで待機している」セクションを参照してください。[タスクベースの非同期プログラミング](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)と[とその他の非同期パターンを使用して TPL](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md)します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-849">For more information, see the "Waiting on Tasks" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-850">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-850">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System::IAsyncResult::CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-851">操作が同期的に完了したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-851">Gets an indication of whether the operation completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3e5a-852">操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-852">
              <see langword="true" /> if the operation completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-853">
            <see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-853">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="task.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-854">
            <see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-854">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-855"><xref:System.Threading.Tasks.Task.Wait%2A> 現在のタスクが完了するまで待機する呼び出し元のスレッド同期メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-855"><xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed.</span></span> <span data-ttu-id="b3e5a-856">現在のタスクが実行を開始していない場合、Wait メソッドは、スケジューラのタスクを削除し、現在のスレッドでインライン実行を試みます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-856">If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.</span></span> <span data-ttu-id="b3e5a-857">行うことがない場合、または現在のタスクが既に実行を開始した場合は、タスクが完了するまで、呼び出し元のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-857">If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.</span></span> <span data-ttu-id="b3e5a-858">詳細については、次を参照してください。 [Task.Wait と"インライン"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) .NET ブログでの並列プログラミングにします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-858">For more information, see [Task.Wait and "Inlining"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.</span></span>   
  
## Examples  
 <span data-ttu-id="b3e5a-859">次の例では、100万の 0 から 100 まで整数の乱数を生成しの平均を計算するタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-859">The following example starts a task that generates one million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="b3e5a-860">この例では、<xref:System.Threading.Tasks.Task.Wait%2A>メソッドをアプリケーションが終了する前に、タスクが完了したことを確認します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-860">The example uses the <xref:System.Threading.Tasks.Task.Wait%2A> method to ensure that the task completes before the application terminates.</span></span> <span data-ttu-id="b3e5a-861">それ以外の場合、これは、コンソール アプリケーションであるため、例では、終了が終了前に、タスクを計算して、平均値を表示できます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-861">Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-862">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-862">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-863">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-863">The task was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-864">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-864">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="b3e5a-865">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-865">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-866">タスクの実行時に例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-866">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="b3e5a-867">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-867">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
        <related type="ExternalDocumentation" href="http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx">
          <span data-ttu-id="b3e5a-868">Task.Wait と「インライン」</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-868">Task.Wait and “Inlining”</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="task.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="b3e5a-869">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-869">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-870">提供された <see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで、指定したミリ秒数以内の間、待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-870">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-871">割り当てられた時間内に <see langword="true" /> の実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-871">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-872"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> 現在のタスク インスタンスは次のいずれかが発生するまでに完了するを待機する呼び出し元のスレッドを同期方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-872"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="b3e5a-873">タスクが正常に完了します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-873">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="b3e5a-874">タスク自体が取り消されたまたは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-874">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="b3e5a-875">この場合、処理、<xref:System.AggregateException>例外。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-875">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="b3e5a-876"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType>プロパティには、例外の詳細が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-876">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="b3e5a-877">によって定義された間隔`millisecondsTimeout`が経過するとします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-877">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="b3e5a-878">この場合は、現在のスレッドが実行を再開し、メソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-878">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-879">次の例では、500万の 0 から 100 まで整数の乱数を生成しの平均を計算するタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-879">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="b3e5a-880">この例では、<xref:System.Threading.Tasks.Task.Wait%28System.Int32%29>メソッドをアプリケーションで 150 ミリ秒以内に完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-880">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="b3e5a-881">アプリケーションが正常終了した場合、タスクには、それによって生成されたランダムな数値の平均と合計が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-881">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="b3e5a-882">タイムアウト間隔が経過した場合の例は、終了前にメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-882">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-883">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-883">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-884">
            <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-884">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-885">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-885">The task was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-886">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-886">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="b3e5a-887">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-887">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-888">タスクの実行時に例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-888">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="b3e5a-889">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-889">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="task.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-890">タスクの完了の待機中に観察するキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-890">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-891">
            <see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-891">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="b3e5a-892">タスクの完了前にキャンセル トークンが取り消される場合は、待機が終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-892">The wait terminates if a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-893"><xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29>メソッドがキャンセル可能な待機を作成します。 これは、次のいずれかが発生するまで待機する、現在のスレッドが発生します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-893">The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="b3e5a-894">タスクを完了します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-894">The task completes.</span></span>  
  
-   <span data-ttu-id="b3e5a-895">キャンセル トークンが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-895">The cancellation token is canceled.</span></span> <span data-ttu-id="b3e5a-896">この場合、呼び出し、<xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29>メソッドがスローされます、<xref:System.OperationCanceledException>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-896">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b3e5a-897">キャンセル、`cancellationToken`キャンセル トークンも何も起こりませんの実行中のタスクがキャンセル トークンが渡されたも、キャンセルを処理する準備がない場合。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-897">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="b3e5a-898">渡す、`cancellationToken`オブジェクトをこのメソッドは、待機が取り消さだけになります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-898">Passing the `cancellationToken` object to this method simply allows the wait to be canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-899">次の例は、タスクの完了の待機をキャンセルするキャンセル トークンの簡単な使用を示しています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-899">The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion.</span></span> <span data-ttu-id="b3e5a-900">タスクの起動は、呼び出しの<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>を 5 秒間キャンセル トークン ソースのキャンセル トークン、および、遅延のいずれかのメソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-900">A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel any of the token source's cancellation tokens, and then delays for five seconds.</span></span> <span data-ttu-id="b3e5a-901">タスク自体がキャンセル トークンが渡されていないと、取り消し可能でないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-901">Note that the task itself has not been passed the cancellation token and is not cancelable.</span></span> <span data-ttu-id="b3e5a-902">アプリケーション スレッドの呼び出し、タスクの<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>、キャンセル トークンが取り消された後に、タスクを完了するまで待機するメソッドが、待機が取り消された<xref:System.OperationCanceledException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-902">The application thread calls the task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown.</span></span> <span data-ttu-id="b3e5a-903">例外ハンドラーは、例外を報告し、6 秒間スリープしています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-903">The exception handler reports the exception and then sleeps for six seconds.</span></span> <span data-ttu-id="b3e5a-904">その遅延によりで完了するタスク、例の出力が示すように、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-904">As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="b3e5a-905">
            <paramref name="cancellationToken" /> は取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-905">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-906">タスクが破棄されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-906">The task has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-907">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-907">The task was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-908">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-908">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="b3e5a-909">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-909">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-910">タスクの実行時に例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-910">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="b3e5a-911">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-911">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="task.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="b3e5a-912">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-912">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-913">提供された <see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで、指定した時間間隔内の間、待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-913">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-914">割り当てられた時間内に <see langword="true" /> の実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-914">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-915"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> 現在のタスク インスタンスは次のいずれかが発生するまでに完了するを待機する呼び出し元のスレッドを同期方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-915"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="b3e5a-916">タスクが正常に完了します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-916">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="b3e5a-917">タスク自体が取り消されたまたは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-917">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="b3e5a-918">この場合、処理、<xref:System.AggregateException>例外。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-918">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="b3e5a-919"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType>プロパティには、例外の詳細が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-919">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="b3e5a-920">によって定義された間隔`timeout`が経過するとします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-920">The interval defined by `timeout` elapses.</span></span> <span data-ttu-id="b3e5a-921">この場合は、現在のスレッドが実行を再開し、メソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-921">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-922">次の例では、500万の 0 から 100 まで整数の乱数を生成しの平均を計算するタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-922">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="b3e5a-923">この例では、<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29>メソッドをアプリケーションで 150 ミリ秒以内に完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-923">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="b3e5a-924">アプリケーションが正常終了した場合、タスクには、それによって生成されたランダムな数値の平均と合計が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-924">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="b3e5a-925">タイムアウト間隔が経過した場合の例は、終了前にメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-925">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait6.cs#6)]
 [!code-vb[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-926">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-926">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-927">
            <paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-927">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="b3e5a-928">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-928">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-929">
            <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-929">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-930">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-930">The task was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-931">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-931">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="b3e5a-932">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-932">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-933">タスクの実行時に例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-933">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="b3e5a-934">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-934">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="task.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="b3e5a-935">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-935">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-936">タスクの完了の待機中に観察するキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-936">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-937">
            <see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-937">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="b3e5a-938">タスクの完了前に、タイムアウト期間が経過するか、キャンセル トークンが取り消される場合には、待機が終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-938">The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-939">割り当てられた時間内に <see langword="true" /> の実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-939">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-940"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> 現在のタスク インスタンスは次のいずれかが発生するまでに完了するを待機する呼び出し元のスレッドを同期方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-940"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="b3e5a-941">タスクが正常に完了します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-941">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="b3e5a-942">タスク自体が取り消されたまたは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-942">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="b3e5a-943">この場合、処理、<xref:System.AggregateException>例外。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-943">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="b3e5a-944"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType>プロパティには、例外の詳細が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-944">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="b3e5a-945">`cancellationToken`キャンセル トークンが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-945">The `cancellationToken` cancellation token is canceled.</span></span> <span data-ttu-id="b3e5a-946">この場合、呼び出し、<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29>メソッドがスローされます、<xref:System.OperationCanceledException>します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-946">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
-   <span data-ttu-id="b3e5a-947">によって定義された間隔`millisecondsTimeout`が経過するとします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-947">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="b3e5a-948">この場合は、現在のスレッドが実行を再開し、メソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-948">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b3e5a-949">キャンセル、`cancellationToken`キャンセル トークンも何も起こりませんの実行中のタスクがキャンセル トークンが渡されたも、キャンセルを処理する準備がない場合。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-949">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="b3e5a-950">渡す、`cancellationToken`このメソッドにオブジェクトだけになりますをキャンセルできる待機に基づいていくつかの条件にします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-950">Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-951">次の例では、<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29>タイムアウト値とキャンセル トークンを提供するメソッドは、タスクの完了の待機を終了できます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-951">The following example calls the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion.</span></span> <span data-ttu-id="b3e5a-952">新しいスレッドが開始され、実行、`CancelToken`メソッドでは、一時停止してから、<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>キャンセル トークンをキャンセルするメソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-952">A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel the cancellation tokens.</span></span> <span data-ttu-id="b3e5a-953">タスクが起動し、5 秒間遅延します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-953">A task is then launched and delays for 5 seconds.</span></span> <span data-ttu-id="b3e5a-954"><xref:System.Threading.Tasks.Task.Wait%2A>メソッドが呼び出され、タスクの完了を待つし、簡単なタイムアウト値とキャンセル トークンの両方に提供されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-954">The <xref:System.Threading.Tasks.Task.Wait%2A> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait4.vb#4)]  
  
 <span data-ttu-id="b3e5a-955">例の正確な出力に依存しているキャンセル トークンのため、待機が取り消されましたかどうか、またはタイムアウト間隔が経過したために注意してください。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-955">Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="b3e5a-956">
            <paramref name="cancellationToken" /> は取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-956">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-957">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-957">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-958">
            <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-958">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-959">タスクが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-959">The task was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-960">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-960">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="b3e5a-961">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-961">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-962">タスクの実行時に例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-962">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="b3e5a-963">
            <see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-963">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-964">指定したすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-964">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitAll (ParamArray tasks As Task())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] -&gt; unit" Usage="System.Threading.Tasks.Task.WaitAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-965">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-965">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-966">指定したすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-966">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b3e5a-967">次の例では、それぞれが、インデックスが渡される状態オブジェクトとしては、10 個のタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-967">The following example starts 10 tasks, each of which is passed an index as a state object.</span></span> <span data-ttu-id="b3e5a-968">2 つの 5 つからインデックスを使用してタスクでは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-968">Tasks with an index from two to five throw exceptions.</span></span> <span data-ttu-id="b3e5a-969">呼び出し、<xref:System.Threading.Tasks.Task.WaitAll%2A>メソッドのすべての例外をラップする、<xref:System.AggregateException>オブジェクトし、呼び出し元のスレッドに伝達します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-969">The call to the <xref:System.Threading.Tasks.Task.WaitAll%2A> method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/waitall.cs#02)]
 [!code-vb[System.Threading.Tasks.Task#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/waitall.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-970">
            <paramref name="tasks" /> の <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが 1 つ以上破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-970">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-971">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-971">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-972">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-972">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="b3e5a-973">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-973">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-974">
            <paramref name="tasks" /> 引数が空の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-974">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-975">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-975">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-976">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> 例外の <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.OperationCanceledException" /> 例外が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-976">If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="b3e5a-977">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-977">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-978">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-978">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * int -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-979">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-979">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="b3e5a-980">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-980">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-981">提供されたすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで、指定したミリ秒数以内の間、待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-981">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-982">割り当てられた時間内に <see langword="true" /> インスタンスすべての実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-982">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-983">
            <paramref name="tasks" /> の <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが 1 つ以上破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-983">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-984">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-984">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-985">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-985">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-986">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> の <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.OperationCanceledException" /> が格納されます</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-986">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="b3e5a-987">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-987">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-988">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-988">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-989">
            <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-989">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-990">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-990">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="b3e5a-991">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-991">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-992">
            <paramref name="tasks" /> 引数が空の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-992">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * System.Threading.CancellationToken -&gt; unit" Usage="System.Threading.Tasks.Task.WaitAll (tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-993">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-993">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-994">タスクの完了を待機しているときに観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-994">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-995">待機が取り消されない限り、指定したすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-995">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-996">`cancellationToken`待機操作をキャンセルする引数を使用します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-996">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="b3e5a-997">タスクのキャンセルはによって通知が、個別の操作、<xref:System.AggregateException>前述の。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-997">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="b3e5a-998">
            <paramref name="cancellationToken" /> は取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-998">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-999">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-999">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-1000">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1000">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-1001">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> の <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.OperationCanceledException" /> が格納されます</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1001">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="b3e5a-1002">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1002">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-1003">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1003">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1004">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1004">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="b3e5a-1005">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1005">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-1006">
            <paramref name="tasks" /> 引数が空の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1006">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-1007">
            <paramref name="tasks" /> の <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが 1 つ以上破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1007">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * TimeSpan -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1008">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1008">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="b3e5a-1009">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1009">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1010">提供されたすべてのキャンセル可能な <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで、指定した時間間隔の間、待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1010">Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1011">割り当てられた時間内に <see langword="true" /> インスタンスすべての実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1011">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-1012">
            <paramref name="tasks" /> の <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが 1 つ以上破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1012">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1013">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1013">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-1014">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1014">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-1015">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> の <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.OperationCanceledException" /> が格納されます</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1015">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="b3e5a-1016">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1016">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-1017">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1017">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-1018">
            <paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1018">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="b3e5a-1019">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1019">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-1020">
            <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1020">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1021">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1021">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="b3e5a-1022">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1022">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-1023">
            <paramref name="tasks" /> 引数が空の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1023">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * int * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1024">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1024">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="b3e5a-1025">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1025">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-1026">タスクの完了を待機しているときに観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1026">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1027">指定したミリ秒数まで、または待機が取り消されるまで、提供されたすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するのを待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1027">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1028">割り当てられた時間内に <see langword="true" /> インスタンスすべての実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1028">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1029">`cancellationToken`待機操作をキャンセルする引数を使用します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1029">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="b3e5a-1030">タスクのキャンセルはによって通知が、個別の操作、<xref:System.AggregateException>上でメモします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1030">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-1031">
            <paramref name="tasks" /> の <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが 1 つ以上破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1031">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1032">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1032">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="b3e5a-1033">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1033">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="b3e5a-1034">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> の <see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.OperationCanceledException" /> が格納されます</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1034">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="b3e5a-1035">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1035">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-1036">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1036">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-1037">
            <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1037">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1038">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1038">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="b3e5a-1039">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1039">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-1040">
            <paramref name="tasks" /> 引数が空の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1040">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="b3e5a-1041">
            <paramref name="cancellationToken" /> は取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1041">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-1042">指定したいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1042">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (ParamArray tasks As Task()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1043">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1043">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1044">指定したいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1044">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1045">
            <paramref name="tasks" /> 配列内の完了した <see cref="T:System.Threading.Tasks.Task" /> オブジェクトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1045">The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b3e5a-1046">次の例では、それぞれが 50 ミリ秒の最小値または 1,050 ミリ秒単位の最大のスリープ状態の 5 つのタスクを起動します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1046">The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds.</span></span> <span data-ttu-id="b3e5a-1047"><xref:System.Threading.Tasks.Task.WaitAny%2A>メソッドは、のいずれかのタスクが完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1047">The <xref:System.Threading.Tasks.Task.WaitAny%2A> method then waits for any of the tasks to complete.</span></span> <span data-ttu-id="b3e5a-1048">例では、すべてのタスクの現在の状態と同様に、待機を終了したタスクのタスク ID が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1048">The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/cs/WaitAny1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/vb/WaitAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-1049">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1049">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1050">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1050">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1051">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1051">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * int -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1052">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1052">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="b3e5a-1053">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1053">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1054">提供されたいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで、指定したミリ秒数以内の間、待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1054">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1055">
            <paramref name="tasks" /> 配列引数内の完了したタスクのインデックス。タイムアウトが発生した場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1055">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-1056">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1056">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1057">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1057">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-1058">
            <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1058">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1059">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1059">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * System.Threading.CancellationToken -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1060">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1060">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-1061">タスクの完了を待機しているときに監視する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1061">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1062">待機が取り消されない限り、指定したいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1062">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1063">
            <paramref name="tasks" /> 配列引数内の完了したタスクのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1063">The index of the completed task in the <paramref name="tasks" /> array argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-1064">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1064">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1065">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1065">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1066">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1066">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="b3e5a-1067">
            <paramref name="cancellationToken" /> は取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1067">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * TimeSpan -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1068">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1068">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="b3e5a-1069">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1069">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1070">提供されたいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで、指定した時間間隔内の間、待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1070">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1071">
            <paramref name="tasks" /> 配列引数内の完了したタスクのインデックス。タイムアウトが発生した場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1071">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-1072">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1072">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1073">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1073">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-1074">
            <paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1074">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="b3e5a-1075">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1075">-or-</span>
          </span>
          <span data-ttu-id="b3e5a-1076">
            <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1076">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1077">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1077">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * int * System.Threading.CancellationToken -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1078">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1078">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="b3e5a-1079">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1079">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b3e5a-1080">タスクの完了を待機しているときに監視する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1080">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1081">指定したミリ秒数まで、または待機トークンが取り消されるまで、提供されたいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するのを待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1081">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1082">
            <paramref name="tasks" /> 配列引数内の完了したタスクのインデックス。タイムアウトが発生した場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1082">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b3e5a-1083">
            <see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1083">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1084">
            <paramref name="tasks" /> 引数が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1084">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b3e5a-1085">
            <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1085">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1086">
            <paramref name="tasks" /> 引数に NULL 要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1086">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="b3e5a-1087">
            <paramref name="cancellationToken" /> は取り消されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1087">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-1088">指定されたすべてのタスクが完了してから完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1088">Creates a task that will complete when all of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (tasks As IEnumerable(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : seq&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1089">完了を待機するタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1089">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1090">列挙可能なコレクション内のすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが完了したときに完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1090">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1091">指定されたすべてのタスクの完了を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1091">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1092">オーバー ロード、<xref:System.Threading.Tasks.Task.WhenAll%2A>を返すメソッドを<xref:System.Threading.Tasks.Task>関心がある一連のタスクの状態または一連のタスクによってスローされた例外と、オブジェクトは通常と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1092">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b3e5a-1093">呼び出し<xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29>メソッドが呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1093">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="b3e5a-1094">エラーが発生した状態でいずれかの指定されたタスクが完了すると、返されたタスクはでも完了、<xref:System.Threading.Tasks.TaskStatus.Faulted>状態、その例外がラップされていない例外からの指定されたタスクのそれぞれのセットの集計に含まれています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1094">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="b3e5a-1095">指定されたタスクのエラーが発生しましたが少なくとも 1 つが取り消された場合は、返されたタスクが終了、<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1095">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="b3e5a-1096">結果のタスクのタスクに障害が発生してタスクが取り消された場合は、終了、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1096">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="b3e5a-1097">返されたタスクはすぐに移行する場合は、指定された配列/列挙型が含まれていないタスクには、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態に、呼び出し元に返されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1097">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-1098">次の例では、配列内の Url に ping を実行するタスクのセットを作成します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1098">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="b3e5a-1099">タスクが格納されている、`List<Task>`に渡されるコレクション、<xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1099">The tasks are stored in a `List<Task>` collection that is passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="b3e5a-1100">呼び出し後、<xref:System.Threading.Tasks.Task.Wait%2A>メソッドにより、すべてのスレッドが完了した例では、検査、<xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType>プロパティをすべてのタスクに障害が発生しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1100">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1101">
            <paramref name="tasks" /> 引数が <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1101">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1102">
            <paramref name="tasks" /> コレクションに <see langword="null" /> タスクが含まれていました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1102">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (ParamArray tasks As Task()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : System.Threading.Tasks.Task[] -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1103">完了を待機するタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1103">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1104">配列内のすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが完了したときに完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1104">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1105">指定されたすべてのタスクの完了を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1105">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1106">オーバー ロード、<xref:System.Threading.Tasks.Task.WhenAll%2A>を返すメソッドを<xref:System.Threading.Tasks.Task>関心がある一連のタスクの状態または一連のタスクによってスローされた例外と、オブジェクトは通常と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1106">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b3e5a-1107">呼び出し<xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29>メソッドが呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1107">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="b3e5a-1108">エラーが発生した状態でいずれかの指定されたタスクが完了すると、返されたタスクはでも完了、<xref:System.Threading.Tasks.TaskStatus.Faulted>状態、その例外がラップされていない例外からの指定されたタスクのそれぞれのセットの集計に含まれています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1108">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="b3e5a-1109">指定されたタスクのエラーが発生しましたが少なくとも 1 つが取り消された場合は、返されたタスクが終了、<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1109">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="b3e5a-1110">結果のタスクのタスクに障害が発生してタスクが取り消された場合は、終了、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1110">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="b3e5a-1111">返されたタスクはすぐに移行する場合は、指定された配列/列挙型が含まれていないタスクには、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態に、呼び出し元に返されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1111">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-1112">次の例では、配列内の Url に ping を実行するタスクのセットを作成します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1112">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="b3e5a-1113">タスクが格納されている、`List<Task>`コレクションを配列に変換されに渡される、<xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1113">The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="b3e5a-1114">呼び出し後、<xref:System.Threading.Tasks.Task.Wait%2A>メソッドにより、すべてのスレッドが完了した例では、検査、<xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType>プロパティをすべてのタスクに障害が発生しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1114">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1115">
            <paramref name="tasks" /> 引数が <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1115">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1116">
            <paramref name="tasks" /> 配列に <see langword="null" /> タスクが含まれていました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1116">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : seq&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-1117">完了したタスクの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1117">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1118">完了を待機するタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1118">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1119">列挙可能なコレクション内のすべての <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトが完了したときに完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1119">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1120">指定されたすべてのタスクの完了を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1120">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1121">呼び出し<xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29>メソッドが呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1121">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread.</span></span> <span data-ttu-id="b3e5a-1122">ただし、呼び出し、返された<xref:System.Threading.Tasks.Task%601.Result%2A>プロパティは、呼び出し元スレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1122">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="b3e5a-1123">エラーが発生した状態でいずれかの指定されたタスクが完了すると、返されたタスクはでも完了、<xref:System.Threading.Tasks.TaskStatus.Faulted>状態、その例外がラップされていない例外からの指定されたタスクのそれぞれのセットの集計に含まれています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1123">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="b3e5a-1124">指定されたタスクのエラーが発生しましたが少なくとも 1 つが取り消された場合は、返されたタスクが終了、<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1124">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="b3e5a-1125">結果のタスクのタスクに障害が発生してタスクが取り消された場合は、終了、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1125">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="b3e5a-1126"><xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>返されたタスクのプロパティが指定されているすべてのと同じ順序で指定されたタスクの結果を含む配列に設定されます (例: 場合は、入力タスクに含まれている配列 t1、t2、t3、出力タスクの<xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>プロパティを返します`TResult[]`場所`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1126">The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="b3e5a-1127">場合、`tasks`引数にタスクが含まれていない、返されたタスクはすぐに移行する、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態に、呼び出し元に返されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1127">If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span> <span data-ttu-id="b3e5a-1128">返された`TResult[]`0 要素の配列になります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1128">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-1129">次の例では、それぞれを 1 ~ 1,000 で 1,000 のランダムな数値を作成しての平均を計算する乱数ジェネレーターをインスタンス化、10 個のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1129">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="b3e5a-1130"><xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>メソッドを使用する乱数ジェネレーターのインスタンス化を遅延できるように、同一のシード値では作成されません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1130">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="b3e5a-1131">呼び出し、<xref:System.Threading.Tasks.Task.WhenAll%2A>メソッド、<xref:System.Int64>各タスクによって計算された平均値を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1131">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="b3e5a-1132">これらは、全体の平均を計算に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1132">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall1.vb#1)]  
  
 <span data-ttu-id="b3e5a-1133">ここでは、10 個の個別のタスクに格納されます、<xref:System.Collections.Generic.List%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1133">In this case, the ten individual tasks are stored in a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="b3e5a-1134"><xref:System.Collections.Generic.List%601> は、<xref:System.Collections.Generic.IEnumerable%601> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1134"><xref:System.Collections.Generic.List%601> implements the <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1135">
            <paramref name="tasks" /> 引数が <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1135">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1136">
            <paramref name="tasks" /> コレクションに <see langword="null" /> タスクが含まれていました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1136">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : System.Threading.Tasks.Task&lt;'Result&gt;[] -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-1137">完了したタスクの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1137">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1138">完了を待機するタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1138">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1139">配列内のすべての <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトが完了したときに完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1139">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1140">指定されたすべてのタスクの完了を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1140">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1141">呼び出し<xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29>メソッドが呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1141">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread.</span></span> <span data-ttu-id="b3e5a-1142">ただし、呼び出し、返された<xref:System.Threading.Tasks.Task%601.Result%2A>プロパティは、呼び出し元スレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1142">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="b3e5a-1143">エラーが発生した状態でいずれかの指定されたタスクが完了すると、返されたタスクはでも完了、<xref:System.Threading.Tasks.TaskStatus.Faulted>状態、その例外がラップされていない例外からの指定されたタスクのそれぞれのセットの集計に含まれています。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1143">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="b3e5a-1144">指定されたタスクのエラーが発生しましたが少なくとも 1 つが取り消された場合は、返されたタスクが終了、<xref:System.Threading.Tasks.TaskStatus.Canceled>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1144">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="b3e5a-1145">結果のタスクのタスクに障害が発生してタスクが取り消された場合は、終了、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1145">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="b3e5a-1146"><xref:System.Threading.Tasks.Task%601.Result%2A>の返されたタスクが指定されているすべてのと同じ順序で指定されたタスクの結果を含む配列に設定されます (例: 場合は、入力タスクに含まれている配列 t1、t2、t3、出力タスクの<xref:System.Threading.Tasks.Task%601.Result%2A>が返されます、 `TResult[]`場所`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1146">The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="b3e5a-1147">返されたタスクはすぐに移行する場合は、指定された配列/列挙型が含まれていないタスクには、<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状態に、呼び出し元に返されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1147">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  <span data-ttu-id="b3e5a-1148">返された`TResult[]`0 要素の配列になります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1148">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3e5a-1149">次の例では、それぞれを 1 ~ 1,000 で 1,000 のランダムな数値を作成しての平均を計算する乱数ジェネレーターをインスタンス化、10 個のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1149">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="b3e5a-1150">ここでは、10 個の個別のタスクに格納されます、`Task<Int64>`配列。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1150">In this case, the ten individual tasks are stored in a `Task<Int64>` array.</span></span>  <span data-ttu-id="b3e5a-1151"><xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>メソッドを使用する乱数ジェネレーターのインスタンス化を遅延できるように、同一のシード値では作成されません。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1151">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="b3e5a-1152">呼び出し、<xref:System.Threading.Tasks.Task.WhenAll%2A>メソッド、<xref:System.Int64>各タスクによって計算された平均値を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1152">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="b3e5a-1153">これらは、全体の平均を計算に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1153">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1154">
            <paramref name="tasks" /> 引数が <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1154">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1155">
            <paramref name="tasks" /> 配列に <see langword="null" /> タスクが含まれていました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1155">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-1156">指定されたすべてのタスクが完了してから完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1156">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (tasks As IEnumerable(Of Task)) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : seq&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1157">完了を待機するタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1157">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1158">指定されたすべてのタスクが完了してから完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1158">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1159">指定されたいずれかのタスクの完了を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1159">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="b3e5a-1160">返されるタスクの結果は完了したタスクです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1160">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1161">タイミングで、返されたタスクは終了が完了したタスクを指定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1161">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="b3e5a-1162">返されたタスクは終了の常に、`RanToCompletion`状態と共に、その結果、最初のタスクを完了に設定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1162">The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.</span></span>  <span data-ttu-id="b3e5a-1163">これは、最初のタスクが完了するがで終了した場合でも true、`Canceled`または`Faulted`状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1163">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1164">
            <paramref name="tasks" /> 引数が <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1164">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1165">
            <paramref name="tasks" /> 配列に null タスクが含まれていたか、空でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1165">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (ParamArray tasks As Task()) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : System.Threading.Tasks.Task[] -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1166">完了を待機するタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1166">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1167">指定されたすべてのタスクが完了してから完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1167">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1168">指定されたいずれかのタスクの完了を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1168">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="b3e5a-1169">返されるタスクの結果は完了したタスクです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1169">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1170">タイミングで、返されたタスクは終了が完了したタスクを指定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1170">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="b3e5a-1171">末尾は、返されたタスク、`RanToCompletion`状態と共にその`Result`最初のタスクを完了に設定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1171">The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.</span></span>  <span data-ttu-id="b3e5a-1172">これは、最初のタスクが完了するがで終了した場合でも true、`Canceled`または`Faulted`状態。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1172">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1173">
            <paramref name="tasks" /> 引数が null でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1173">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1174">
            <paramref name="tasks" /> 配列に null タスクが含まれていたか、空でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1174">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : seq&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-1175">完了したタスクの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1175">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1176">完了を待機するタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1176">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1177">指定されたすべてのタスクが完了してから完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1177">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1178">指定されたいずれかのタスクの完了を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1178">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="b3e5a-1179">返されるタスクの結果は完了したタスクです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1179">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1180">タイミングで、返されたタスクは終了が完了したタスクを指定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1180">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="b3e5a-1181">返されたタスクは常に、最初のタスクを完了する設定に、結果を RanToCompletion 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1181">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="b3e5a-1182">これは、最初のタスクが完了するが、Canceled、または Faulted 状態で終了した場合でも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1182">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1183">
            <paramref name="tasks" /> 引数が <see langword="null" /> でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1183">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1184">
            <paramref name="tasks" /> 配列に null タスクが含まれていたか、空でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1184">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : System.Threading.Tasks.Task&lt;'Result&gt;[] -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b3e5a-1185">完了したタスクの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1185">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b3e5a-1186">完了を待機するタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1186">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3e5a-1187">指定されたすべてのタスクが完了してから完了するタスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1187">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1188">指定されたいずれかのタスクの完了を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1188">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="b3e5a-1189">返されるタスクの結果は完了したタスクです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1189">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1190">タイミングで、返されたタスクは終了が完了したタスクを指定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1190">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="b3e5a-1191">返されたタスクは常に、最初のタスクを完了する設定に、結果を RanToCompletion 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1191">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="b3e5a-1192">これは、最初のタスクが完了するが、Canceled、または Faulted 状態で終了した場合でも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1192">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b3e5a-1193">
            <paramref name="tasks" /> 引数が null でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1193">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b3e5a-1194">
            <paramref name="tasks" /> 配列に null タスクが含まれていたか、空でした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1194">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.YieldAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.YieldAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As YieldAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::CompilerServices::YieldAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Runtime.CompilerServices.YieldAwaitable" Usage="System.Threading.Tasks.Task.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.YieldAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b3e5a-1195">待機されたときに現在のコンテキストに非同期的に処理を譲る awaitable タスクを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1195">Creates an awaitable task that asynchronously yields back to the current context when awaited.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b3e5a-1196">必要な場合は、要求時に現在のコンテキストに非同期で再度遷移するコンテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1196">A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</span>
          </span>
          <span data-ttu-id="b3e5a-1197">現在の <see cref="T:System.Threading.SynchronizationContext" /> が null 以外の場合は、現在のコンテキストとして扱われます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1197">If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context.</span>
          </span>
          <span data-ttu-id="b3e5a-1198">それ以外の場合は、現在の実行タスクに関連付けられているタスク スケジューラは、現在のコンテキストとして扱われます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3e5a-1198">Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3e5a-1199">使用することができます`await Task.Yield();`で強制的に非同期的に実行するメソッドを非同期メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1199">You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously.</span></span> <span data-ttu-id="b3e5a-1200">現在の同期コンテキストがある場合 (<xref:System.Threading.SynchronizationContext>オブジェクト)、これはそのコンテキストに戻す、メソッドの実行の残りの部分を投稿します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1200">If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context.</span></span> <span data-ttu-id="b3e5a-1201">ただし、コンテキストは、この作業と比較して保留中可能性のあるその他の作業の優先順位を設定する方法を決定します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1201">However, the context will decide how to prioritize this work relative to other work that may be pending.</span></span> <span data-ttu-id="b3e5a-1202">ほとんどの UI 環境では、UI スレッドに存在する同期コンテキストは、入力とレンダリング作業よりも高くのコンテキストにポストされた作業の優先順位を付ける多くの場合は。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1202">The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.</span></span> <span data-ttu-id="b3e5a-1203">このため、依存しない`await Task.Yield();`UI 応答性を維持します。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1203">For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.</span></span>  <span data-ttu-id="b3e5a-1204">詳細については、エントリを参照してください。 [ContinueWith の有効な抽象化の便利な](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx).NET ブログでの並列プログラミングにします。</span><span class="sxs-lookup"><span data-stu-id="b3e5a-1204">For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>