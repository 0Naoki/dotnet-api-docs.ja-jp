<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskContinuationOptions.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a1c7a235951de4ea0250e610e035f8451c659154.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1c7a235951de4ea0250e610e035f8451c659154</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskContinuationOptions">
          <source>Specifies the behavior for a task that is created by using the <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /&gt;</ph> メソッドまたは <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /&gt;</ph> メソッドを使用して作成されるタスクの動作を指定します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy.</source>
          <target state="translated">継続が子タスクの場合は、タスク階層内の親にアタッチするように指定します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>The continuation can be a child task only if its antecedent is also a child task.</source>
          <target state="translated">継続元も子タスクである場合にのみ、継続は子タスクになれます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>By default, a child task (that is, an inner task created by an outer task) executes independently of its parent.</source>
          <target state="translated">既定では、子タスク (外側のタスクによって作成される内側のタスク) は、親と独立して実行されます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>You can use the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /&gt;</ph> option so that the parent and child tasks are synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /&gt;</ph> オプションを使用して、親タスクと子タスクを同期させることもできます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>Note that if a parent task is configured with the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /&gt;</ph> option, the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> option in the child task has no effect, and the child task will execute as a detached child task.</source>
          <target state="translated">親タスクが <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /&gt;</ph> オプションを指定して構成されている場合、子タスクの <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> オプションは無効で、その子タスクはデタッチされた子タスクとして実行されることに注意してください。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>For more information, see <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>アタッチされた子タスクとデタッチされた子タスク<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
          <source>Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> オプションを指定して作成され、アタッチされた子タスクとして実行されることを試行する子タスク (この継続によって作成される入れ子になった内側のタスク) は、親タスクにアタッチされることはできないため、デタッチされた子タスクとして実行されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
          <source>For more information, see <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>アタッチされた子タスクとデタッチされた子タスク<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Specifies that the continuation task should be executed synchronously.</source>
          <target state="translated">継続タスクを同期的に実行するように指定します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state.</source>
          <target state="translated">このオプションを指定すると、継続は、前のタスクを最終状態に遷移させた同じスレッドで実行されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation.</source>
          <target state="translated">継続の作成時に継続元が既に完了している場合、継続はその継続を作成したスレッドで実行されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>If the antecedent's <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> is disposed in a <ph id="ph2">&lt;see langword="finally" /&gt;</ph> block (<ph id="ph3">&lt;see langword="Finally" /&gt;</ph> in Visual Basic), a continuation with this option will run in that <ph id="ph4">&lt;see langword="finally" /&gt;</ph> block.</source>
          <target state="translated">継続元の <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> が <ph id="ph2">&lt;see langword="finally" /&gt;</ph> ブロック (Visual Basic では <ph id="ph3">&lt;see langword="Finally" /&gt;</ph>) で破棄された場合、このオプションを指定した継続がその <ph id="ph4">&lt;see langword="finally" /&gt;</ph> ブロックで実行されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Only very short-running continuations should be executed synchronously.</source>
          <target state="translated">同期的に実行するのは、非常に短時間で完了する継続タスクのみでなければなりません。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Because the task executes synchronously, there is no need to call a method such as <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Wait" /&gt;</ph> to ensure that the calling thread waits for the task to complete.</source>
          <target state="translated">タスクは同期的に実行されるため、<ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Wait" /&gt;</ph> などのメソッドを呼び出して、呼び出しスレッドがタスクの完了を待機する必要はありません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
          <source>Specifies that tasks created by the continuation by calling methods such as <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /&gt;</ph> see the default scheduler (<ph id="ph3">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Default" /&gt;</ph>) rather than the scheduler on which this continuation is running as the current scheduler.</source>
          <target state="translated">継続がメソッド (<ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /&gt;</ph> または <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /&gt;</ph> など) を呼び出すことにより作成したタスクが、この継続の実行基盤であるスケジューラーではなく、既定のスケジューラー (<ph id="ph3">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Default" /&gt;</ph>) を現在のスケジューラーとして参照することを指定します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
          <source>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</source>
          <target state="translated">継続取り消しの場合は、継続元が完了するまで、継続が完了しないようにします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
          <source>Specifies that a continuation will be a long-running, course-grained operation.</source>
          <target state="translated">継続が、実行に時間のかかる、細分化されていない操作であることを示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
          <source>It provides a hint to the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that oversubscription may be warranted.</source>
          <target state="translated">これは、<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> に対し、オーバーサブスクリプションを許可してもよいことを示します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>When no continuation options are specified, specifies that default behavior should be used when executing a continuation.</source>
          <target state="translated">継続のオプションが指定されていない場合は、継続を実行するときに既定の動作を使用する必要があることを指定します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property value.</source>
          <target state="translated">継続元タスクが完了したら、継続元の最終的な <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> プロパティ値に関係なく、継続を非同期的に実行します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>It the continuation is a child task, it is created as a detached nested task.</source>
          <target state="translated">継続が子タスクである場合は、デタッチされた入れ子のタスクとして作成されます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>Specifies that the continuation task should not be scheduled if its antecedent was canceled.</source>
          <target state="translated">前のタスクが取り消された場合は継続タスクをスケジュールしないように指定します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>An antecedent is canceled if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">完了時に継続元の <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> プロパティが <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> である場合、継続元は取り消されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">このオプションは、マルチタスクの継続タスクに対しては無効です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception.</source>
          <target state="translated">前のタスクで処理されない例外がスローされた場合は継続タスクをスケジュールしないように指定します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>An antecedent throws an unhandled exception if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</source>
          <target state="translated">完了時に継続元の <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> プロパティが <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> である場合、継続元はハンドルされない例外をスローします。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">このオプションは、マルチタスクの継続タスクに対しては無効です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>Specifies that the continuation task should not be scheduled if its antecedent ran to completion.</source>
          <target state="translated">前のタスクが完了まで実行された場合は、継続タスクをスケジュールしないように指定します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>An antecedent runs to completion if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</source>
          <target state="translated">完了時に継続元の <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> プロパティが <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> である場合、継続元は完了まで実行されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">このオプションは、マルチタスクの継続タスクに対しては無効です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>Specifies that the continuation should be scheduled only if its antecedent was canceled.</source>
          <target state="translated">継続元が取り消された場合にのみ継続をスケジュールするように指定します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>An antecedent is canceled if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">完了時に継続元の <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> プロパティが <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> である場合、継続元は取り消されます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">このオプションは、マルチタスクの継続タスクに対しては無効です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception.</source>
          <target state="translated">前のタスクで処理されない例外がスローされた場合にのみ継続タスクをスケジュールするように指定します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>An antecedent throws an unhandled exception if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</source>
          <target state="translated">完了時に継続元の <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> プロパティが <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> である場合、継続元はハンドルされない例外をスローします。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>The <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /&gt;</ph> option guarantees that the <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> property in the antecedent is not <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /&gt;</ph> オプションを指定すると、継続元の <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> プロパティが <ph id="ph3">&lt;see langword="null" /&gt;</ph> でないことが保証されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>You can use that property to catch the exception and see which exception caused the task to fault.</source>
          <target state="translated">このプロパティを使用すると、例外をキャッチして、タスクの違反の原因となった例外を確認できます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>If you do not access the <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> property, the exception is unhandled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> プロパティにアクセスしない場合、例外はハンドルされません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>Also, if you attempt to access the <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property of a task that has been canceled or has faulted, a new exception is thrown.</source>
          <target state="translated">また、取り消されたタスクまたはエラーが発生したタスクの <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> プロパティにアクセスしようとする場合も、新しい例外がスローされます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">このオプションは、マルチタスクの継続タスクに対しては無効です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>Specifies that the continuation should be scheduled only if its antecedent ran to completion.</source>
          <target state="translated">継続元が完了まで実行された場合にのみ継続をスケジュールするように指定します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>An antecedent runs to completion if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</source>
          <target state="translated">完了時に継続元の <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> プロパティが <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> である場合、継続元は完了まで実行されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">このオプションは、マルチタスクの継続タスクに対しては無効です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
          <source>A hint to a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> に対するヒントはスケジュールされた順序でタスクをスケジュールするため、先にスケジュールされたタスクは先に実行される可能性が高く、後からスケジュールされたタスクは後で実行される可能性が高くなります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
          <source>Specifies that the continuation task should be run asynchronously.</source>
          <target state="translated">継続タスクを非同期的に実行するように指定します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
          <source>This option has precedence over <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">このオプションは <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph> より優先されます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>