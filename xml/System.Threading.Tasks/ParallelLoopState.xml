<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4244160069333f5d930b81c7b54173c2ad6d6a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e7369-101">他のイテレーションと対話するように、並列ループのイテレーションを有効にします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e7369-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="e7369-102">このクラスのインスタンスは、<see cref="T:System.Threading.Tasks.Parallel" /> クラスから各ループに提供されるため、コードでインスタンスを作成することはできません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e7369-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7369-103">このクラスのインスタンスをインスタンス化できないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e7369-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="e7369-104">これは自動的にコンパイラによって生成されたへの呼び出しで引数として、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>または<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e7369-105">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e7369-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="e7369-106">コンストラクト`for`と`foreach`(C# の場合) と`For`と`For Each`(Visual Basic) の順に実行またはセットの最初のオブジェクトから最高の値を最小のインデックスから最後のです。</span><span class="sxs-lookup"><span data-stu-id="e7369-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="e7369-107">これに対し、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>と<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドがありません。</span><span class="sxs-lookup"><span data-stu-id="e7369-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="e7369-108">ループの各イテレーションが並列で実行しているために開始し、任意の順序で終了できます。</span><span class="sxs-lookup"><span data-stu-id="e7369-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="e7369-109"><xref:System.Threading.Tasks.ParallelLoopState>クラスが相互に対話する並列ループの各イテレーションを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e7369-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="e7369-110"><xref:System.Threading.Tasks.ParallelLoopState>クラスでは、することができます。</span><span class="sxs-lookup"><span data-stu-id="e7369-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="e7369-111">現在のイテレーションを終了し、追加のイテレーションを呼び出すことによって開始を防ぐため、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="e7369-112">これは、実行が既に開始されているイテレーションには影響ありません。</span><span class="sxs-lookup"><span data-stu-id="e7369-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="e7369-113">現在のインデックスよりも大きいインデックスをイテレーションを呼び出すことによって実行されないようにする、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e7369-114">これは、実行が既に開始されているイテレーションには影響ありません。</span><span class="sxs-lookup"><span data-stu-id="e7369-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="e7369-115">値を取得することによって、ループ反復で例外が発生したかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e7369-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="e7369-116">ループのいずれかのイテレーションと呼ばれるかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドの値を取得することによって、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e7369-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="e7369-117">このプロパティを使用するには呼び出しの前に開始されたループのイテレーションから返される、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド実行中であるが、します。</span><span class="sxs-lookup"><span data-stu-id="e7369-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="e7369-118">ループのいずれかのイテレーションと呼ばれるかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>または<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドまたはの値を取得することによって、例外がスローされた、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e7369-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="e7369-119">インデックスが Break がの値を取得することによって呼び出されたイテレーションのインデックスよりも大きい実行時間の長いイテレーションからの終了時、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e7369-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7369-120">次の例では、並列ループの最大 100 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e7369-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e7369-121">各イテレーションは、1 から 1,000 ミリ秒単位までのランダムな間隔を停止します。</span><span class="sxs-lookup"><span data-stu-id="e7369-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e7369-122">ランダムに生成された値の決定、ループのイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="e7369-123">例に示す、インデックスがより大きくないイテレーションからの出力として、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティへの呼び出し後の開始の値、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="e7369-124">ループの繰り返しがまだときに実行されている可能性が高いため、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されると、各イテレーションを呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションと呼ばれるかどうかを確認するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e7369-125">プロパティの値がある場合`true`、イテレーションがの値を調べて、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e7369-126">A<see cref="T:System.Threading.Tasks.ParallelLoopState" />インスタンスはインスタンスが提供されるループの本体でのみ使用するためのものです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e7369-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="e7369-127">提供されたを使用する安全ではありません<see cref="T:System.Threading.Tasks.ParallelLoopState" />関連付けられているループの後のインスタンスが終了するも明示的に渡す他のスレッド セーフの説明とそれらのスレッドがいつでもアクセスできます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e7369-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="e7369-128">異なる<see cref="T:System.Threading.Tasks.ParallelLoopState" />インスタンスは、ループに含まれる各スレッドに提供されます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e7369-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e7369-129">現在のイテレーションの終了後、システムはできるだけ早く <see cref="T:System.Threading.Tasks.Parallel" /> ループの実行を終了する必要があることを通知します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-129">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7369-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 現在のイテレーション後のイテレーションを実行するないことを示します。</span><span class="sxs-lookup"><span data-stu-id="e7369-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="e7369-131">ループの追加、イテレーションを効果的に取り消します。</span><span class="sxs-lookup"><span data-stu-id="e7369-131">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="e7369-132">ただし、実行が既に開始されているすべてのイテレーションは停止しません。</span><span class="sxs-lookup"><span data-stu-id="e7369-132">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="e7369-133">たとえば場合、 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 100 反復処理する 0 から 1,000、すべてのイテレーションを 100 よりも小さいまだ実行が 1000 を持っていないを開始していないことを 101 からイテレーションを実行するか、並列ループのイテレーションから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-133">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="e7369-134">既に実行中、実行時間の長いイテレーション<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>設定、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの現在の値より小さい、現在のインデックスがある場合、現在のイテレーションのインデックスを<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e7369-134">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="e7369-135">インデックスが競合する実行から最も低い中断イテレーションより大きいイテレーションを停止するには、次の操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7369-135">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="e7369-136">確認するかどうか、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="e7369-136">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="e7369-137">インデックスよりも大きい場合は、イテレーションを終了、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="e7369-137">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="e7369-138">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e7369-138">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="e7369-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 通常、順序付けは、データ ソースに存在検索ベースのアルゴリズムで使用されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7369-140">次の例では、並列ループの最大 100 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e7369-140">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e7369-141">各イテレーションは、1 から 1,000 ミリ秒単位までのランダムな間隔を停止します。</span><span class="sxs-lookup"><span data-stu-id="e7369-141">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e7369-142">ランダムに生成された値の決定、ループのイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-142">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="e7369-143">例に示す、インデックスがより大きくないイテレーションからの出力として、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティへの呼び出し後の開始の値、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-143">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="e7369-144">ループの繰り返しがまだときに実行されている可能性が高いため、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されると、各イテレーションを呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションと呼ばれるかどうかを確認するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-144">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e7369-145">プロパティの値がある場合`true`、イテレーションがの値を調べて、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-145">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7369-146">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドは既に呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-146">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="e7369-147">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-147">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7369-148">ループのいずれかのイテレーションが、そのイテレーションによって処理されなかった例外をスローしたかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-148">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7369-149">処理されない例外がスローされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-149">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7369-150">ループのいずれかのイテレーションが <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドを呼び出したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-150">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7369-151">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドを呼び出していずれかのイテレーションが停止した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-151">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7369-152">ループの実行時間の長い繰り返しの値を取得できます、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>を決定するかどうか、ループのイテレーションを開始した呼び出しの前に実行プロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドがまだ実行中です。</span><span class="sxs-lookup"><span data-stu-id="e7369-152">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="e7369-153">値を使用することができますし、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティかを判断する必要がありますをすぐに返す正常に実行します。</span><span class="sxs-lookup"><span data-stu-id="e7369-153">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7369-154">次の例では、並列ループの最大 10,000 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e7369-154">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="e7369-155">各イテレーションは、1 から 1,000 ミリ秒単位までのランダムな間隔を停止します。</span><span class="sxs-lookup"><span data-stu-id="e7369-155">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e7369-156">ランダムに生成された値の決定、ループのイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-156">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="e7369-157">ループの繰り返しがまだときに実行されている可能性が高いため、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドは、ラムダ式の呼び出し、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>別のイテレーションと呼ばれるかどうかを確認する方法を<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-157">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="e7369-158">返された場合`true`イテレーションが直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-158">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7369-159">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したループのイテレーションのうち、最下位のイテレーションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-159">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7369-160">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したイテレーションのうち、最下位のイテレーション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-160">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="e7369-161">
            <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> ループの場合、値は内部的に生成されたインデックスに基づきます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-161">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7369-162">呼び出す並列ループの複数のイテレーションに可能であれば、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-162">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e7369-163">この値は、最小のインデックスと呼ばれることがイテレーションの場合は、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e7369-163">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="e7369-164">ループの繰り返しが呼び出されない場合<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>、このプロパティを返します`null`です。</span><span class="sxs-lookup"><span data-stu-id="e7369-164">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="e7369-165">プロパティの値がへの呼び出しによって影響を受けることに注意してください、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-165">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="e7369-166">呼び出す反復処理した後、すべてのイテレーションが実行時間の長い一連のイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが実行されない必要があります、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティを使用する呼び出しの前に実行を開始するイテレーションの終了、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-166">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e7369-167">インデックスが競合する実行から最も低い中断イテレーションより大きいイテレーションを停止するには、次の操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7369-167">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="e7369-168">確認するかどうか、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="e7369-168">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="e7369-169">インデックスよりも大きい場合は、イテレーションを終了、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="e7369-169">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="e7369-170">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e7369-170">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7369-171">次の例では、並列ループの最大 100 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e7369-171">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e7369-172">各イテレーションは、1 から 1,000 ミリ秒単位までのランダムな間隔を停止します。</span><span class="sxs-lookup"><span data-stu-id="e7369-172">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e7369-173">ランダムに生成された値の決定、ループのイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-173">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="e7369-174">これにより、インデックスがより大きいイテレーション、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>への呼び出し後に開始からのプロパティ値、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが、すでに実行されており、イテレーションは影響しません。</span><span class="sxs-lookup"><span data-stu-id="e7369-174">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="e7369-175">これらの完了を防ぐためには、各イテレーションを呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションと呼ばれるかどうかを確認する方法を<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-175">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e7369-176">イテレーションがの値をチェックするため場合、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-176">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="e7369-177">なお、ため、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>並列ループの外側のスコープ外の値は、その値を保持する場合に、ループの外側に表示される変数に割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7369-177">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e7369-178">このイテレーションまたは他のイテレーションからの要求に基づいて、ループの現在のイテレーションを終了する必要があるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-178">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e7369-179">現在のイテレーションを終了する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-179">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7369-180"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティに設定されている`true`次の条件のいずれか。</span><span class="sxs-lookup"><span data-stu-id="e7369-180">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="e7369-181">ループの呼び出しのイテレーション<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>または<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e7369-181">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="e7369-182">ループのイテレーションでは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e7369-182">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="e7369-183">ループが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="e7369-183">The loop is canceled.</span></span>  
  
 <span data-ttu-id="e7369-184">このプロパティが`true`、<xref:System.Threading.Tasks.Parallel>クラスは能動的にしようと、ループのイテレーションの回数が実行を開始することを禁止します。</span><span class="sxs-lookup"><span data-stu-id="e7369-184">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="e7369-185">ただし、開始から追加のイテレーションを防ぐことができない場合があります。</span><span class="sxs-lookup"><span data-stu-id="e7369-185">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="e7369-186">実行時間の長いイテレーションでの実行が既に開始されている場合もあります。</span><span class="sxs-lookup"><span data-stu-id="e7369-186">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="e7369-187">このような場合は、イテレーションを明示的にチェック、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティと中止の実行プロパティを返す場合`true`です。</span><span class="sxs-lookup"><span data-stu-id="e7369-187">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7369-188">次の例では、並列ループの最大 100 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e7369-188">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e7369-189">各イテレーションは、1 から 1,000 ミリ秒単位までのランダムな間隔を停止します。</span><span class="sxs-lookup"><span data-stu-id="e7369-189">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e7369-190">ランダムに生成された値の決定、ループのイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-190">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="e7369-191">これにより、インデックスがより大きいイテレーション、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>への呼び出し後に開始からのプロパティ値、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが、すでに実行されており、イテレーションは影響しません。</span><span class="sxs-lookup"><span data-stu-id="e7369-191">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="e7369-192">これらの完了を防ぐためには、各イテレーションを呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションと呼ばれるかどうかを確認する方法を<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-192">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e7369-193">イテレーションがの値をチェックするため場合、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-193">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e7369-194">システムはできるだけ早く <see cref="T:System.Threading.Tasks.Parallel" /> ループの実行を終了する必要があることを通知します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-194">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7369-195">呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドでは、まだ開始されていないループの繰り返しが実行する必要があることを示します。</span><span class="sxs-lookup"><span data-stu-id="e7369-195">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="e7369-196">ループの追加、イテレーションを効果的に取り消します。</span><span class="sxs-lookup"><span data-stu-id="e7369-196">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="e7369-197">ただし、実行が既に開始されているすべてのイテレーションは停止しません。</span><span class="sxs-lookup"><span data-stu-id="e7369-197">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="e7369-198">呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド原因、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>返されるプロパティを`true`がまだ実行中、ループのいずれかのイテレーションにします。</span><span class="sxs-lookup"><span data-stu-id="e7369-198">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="e7369-199">これは、実行時間の長いイテレーションは、確認できる場合に特に便利、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティとその値が場合に初期終了`true`です。</span><span class="sxs-lookup"><span data-stu-id="e7369-199">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="e7369-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 結果が検出された、他のイテレーション必要がありますを実行する場所、検索ベースのアルゴリズムで通常使用されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7369-201">次の例では、並列ループの最大 10,000 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e7369-201">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="e7369-202">各イテレーションは、1 から 1,000 ミリ秒単位までのランダムな間隔を停止します。</span><span class="sxs-lookup"><span data-stu-id="e7369-202">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e7369-203">ランダムに生成された値の決定、ループのイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-203">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="e7369-204">呼び出し後のイテレーションが実行されません、出力の例に示す、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-204">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="e7369-205">ループの繰り返しがまだときに実行されている可能性が高いため、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されると、各イテレーションを呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>別のイテレーションと呼ばれるかどうかを確認する方法を<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e7369-205">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="e7369-206">返された場合`true`イテレーションが直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="e7369-206">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e7369-207">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> メソッドは、既に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-207">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="e7369-208">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e7369-208">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>