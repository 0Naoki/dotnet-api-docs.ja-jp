<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f0237c0ab6a5df247c24cc0cab4d856a2a5ef27" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690524" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>他のイテレーションと対話するように、並列ループのイテレーションを有効にします。 このクラスのインスタンスは、<see cref="T:System.Threading.Tasks.Parallel" /> クラスから各ループに提供されるため、コードでインスタンスを作成することはできません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスのインスタンスをインスタンス化できないことに注意してください。 コンパイラによってへの呼び出しで引数として生成は自動的に、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>または<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッド。 具体的な例を次に示します。  
  
 コンストラクト`for`と`foreach`(で C# の場合) と`For`と`For Each`(Visual Basic) で順番に実行または一連の最初のオブジェクトから最大最小のインデックスから最後の。 これに対し、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>と<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは受け取りません。 ループの各イテレーションが並列で実行を開始し、任意の順序で終了できます。 <xref:System.Threading.Tasks.ParallelLoopState>クラス間の対話に並列ループの個別のイテレーションを使用できます。 <xref:System.Threading.Tasks.ParallelLoopState>クラスを使用します。  
  
-   現在のイテレーションを終了し、追加のイテレーションを呼び出すことによって起動を防ぐため、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。 これには、実行が既に開始されているイテレーションは影響しません。  
  
-   現在のインデックスより大きいインデックスを使用して、イテレーションが呼び出すことによって実行されないように、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。 これには、実行が既に開始されているイテレーションは影響しません。  
  
-   値を取得することによって、ループの反復処理で、例外が発生したかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A>プロパティ。  
  
-   ループの反復処理が呼び出されているかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドの値を取得することによって、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティ。 このプロパティを使用するには、呼び出しの前に開始されたループのイテレーションから返される、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが実行中であります。  
  
-   ループの反復処理が呼び出されているかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>または<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドまたはの値を取得することによって、例外がスローされて、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティ。  
  
-   インデックスが中断がの値を取得することによって呼び出されたイテレーションのインデックスよりも大きい実行時間の長いイテレーションからの終了時、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ。  
  
   
  
## Examples  
 次の例では、並列ループの最大 100 個のイテレーションを実行します。 各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。 ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。 例のインデックスがより大きいイテレーションなしの出力として、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>への呼び出し後のプロパティ値の開始、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されると、各反復処理を呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションが呼び出されているかどうかを確認するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。 プロパティの値が場合`true`、イテレーションの値を確認します、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。  
  
 ]]></format>
    </remarks>
    <threadsafe>A<see cref="T:System.Threading.Tasks.ParallelLoopState" />インスタンスをセットアップして、インスタンスが提供されているループの本体でのみ使用されます。  使用して、指定された安全ではありません<see cref="T:System.Threading.Tasks.ParallelLoopState" />関連付けられているループの後にインスタンスが終了するもに他のスレッドを渡して明示的にしても安全し、それらのスレッドをいつでもアクセスできます。  異なる<see cref="T:System.Threading.Tasks.ParallelLoopState" />ループに関連する各スレッドにインスタンスが提供されます。</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のイテレーションの終了後、システムはできるだけ早く <see cref="T:System.Threading.Tasks.Parallel" /> ループの実行を終了する必要があることを通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 現在のイテレーションの後のイテレーションを実行しないことを示します。 ループの追加、イテレーションを効果的にキャンセルします。 ただし、既に実行が開始されているすべてのイテレーションは停止しません。 たとえば場合、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>反復処理する 0 から 1,000 個を超えるすべてのイテレーションを 100 未満でも、実行が 1000 を持っていないが開始するには、101 ~ からのイテレーションを実行するか、並列ループの 100 イテレーションから呼び出されます。  
  
 既に実行中、実行時間の長いイテレーションの<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>設定、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティを現在のインデックスがの現在の値より小さい場合は、現在のイテレーションのインデックス<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>します。 インデックスが競合の実行から最下位の区切りイテレーションより大きいイテレーションを停止するには、次の操作を行う必要があります。  
  
1.  確認するかどうか、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティは`true`します。  
  
2.  インデックスがより大きい場合は、イテレーションを終了、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値。  
  
 具体的な例を次に示します。  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 通常、順序付けは、データ ソースに存在する検索ベースのアルゴリズムで使用します。  
  
   
  
## Examples  
 次の例では、並列ループの最大 100 個のイテレーションを実行します。 各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。 ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。 例のインデックスがより大きいイテレーションなしの出力として、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>への呼び出し後のプロパティ値の開始、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されると、各反復処理を呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションが呼び出されているかどうかを確認するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。 プロパティの値が場合`true`、イテレーションの値を確認します、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドは既に呼び出されました。 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ループのいずれかの反復処理がその反復処理によってハンドルされない例外をスローしたかどうかを示す値を取得します。</summary>
        <value>処理されない例外がスローされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ループのいずれかのイテレーションが <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドを呼び出したかどうかを示す値を取得します。</summary>
        <value><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドを呼び出していずれかのイテレーションが停止した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ループの実行時間の長いイテレーションの値を取得できます、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>かどうか、ループのイテレーションを開始した呼び出しの前に実行を決定するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドがまだ実行中です。 値を使用することができますし、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティのすぐに返すまたは正常に実行するかどうかする必要があります。  
  
   
  
## Examples  
 次の例では、並列ループの最大 10,000 個のイテレーションを実行します。 各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。 ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されます。 ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドを呼び出すラムダ式の呼び出し、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>別のイテレーションが呼び出されているかどうかを確認する方法、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。 返された場合`true`イテレーションが直ちに返されます。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したループの反復処理のうち、最も下位の反復処理を取得します。</summary>
        <value><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したイテレーションのうち、最下位のイテレーション。 <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> ループの場合、値は内部的に生成されたインデックスに基づきます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出すための並列ループの繰り返し可能性があります、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。 この値は、最小のインデックスを呼び出した反復処理の場合は、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>します。 ループのイテレーションが呼び出されない場合<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>、このプロパティを返します`null`します。 プロパティの値がへの呼び出しによって影響を受けることに注意してください、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。  
  
 呼び出す反復処理後するすべてのイテレーションでの実行時間の長いイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが実行されない必要があります、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティを使用して、呼び出しの前に実行を開始したイテレーションの終了、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。 インデックスが競合の実行から最下位の区切りイテレーションより大きいイテレーションを停止するには、次の操作を行う必要があります。  
  
1.  確認するかどうか、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティは`true`します。  
  
2.  インデックスがより大きい場合は、イテレーションを終了、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値。  
  
 具体的な例を次に示します。  
  
   
  
## Examples  
 次の例では、並列ループの最大 100 個のイテレーションを実行します。 各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。 ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。 これにより、インデックスがより大きいイテレーション、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値への呼び出し後の起動、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが、すでに実行されておりのイテレーションは影響しません。 各イテレーションの呼び出しの完了からこれらを防ぐためには、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションが呼び出されているかどうかを確認する方法、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。 そのため、イテレーションの値を確認します。 場合、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 に、注意してください、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>並列ループの外側のスコープ外の値は、その値を維持したい場合に、ループの外に表示されている変数に割り当てる必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この反復処理または他の反復処理からの要求に基づいて、ループの現在の反復処理を終了する必要があるかどうかを示す値を取得します。</summary>
        <value>現在のイテレーションを終了する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティに設定されて`true`次の条件のいずれか。  
  
-   ループの呼び出しのイテレーション<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>または<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>します。  
  
-   ループのイテレーションは、例外をスローします。  
  
-   ループが取り消されました。  
  
 このプロパティが`true`、<xref:System.Threading.Tasks.Parallel>クラスは、ループの追加のイテレーションが実行を開始することを禁止する事前に試みます。 ただし、追加のイテレーションの開始を防ぐことができない場合があります。  
  
 実行時間の長いイテレーションでの実行が既に開始されている場合もあります。 このような場合は、イテレーションを明示的にチェック、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティを返す場合は、プロパティは、中止の実行`true`します。  
  
   
  
## Examples  
 次の例では、並列ループの最大 100 個のイテレーションを実行します。 各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。 ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。 これにより、インデックスがより大きいイテレーション、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値への呼び出し後の起動、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが、すでに実行されておりのイテレーションは影響しません。 各イテレーションの呼び出しの完了からこれらを防ぐためには、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションが呼び出されているかどうかを確認する方法、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。 そのため、イテレーションの値を確認します。 場合、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Threading.Tasks.Parallel" /> ループの実行をできるだけ早く終了する必要があることを通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドでは、まだ開始されていないループの反復を実行しない必要がありますを示します。 ループの追加、イテレーションを効果的にキャンセルします。 ただし、既に実行が開始されているすべてのイテレーションは停止しません。  
  
 呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティを返す`true`がまだ実行ループの反復処理をします。 チェックすることがある実行時間の長いイテレーションのために特に便利です、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティとその値がある場合に早期終了`true`します。  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 通常、結果が見つかった、他のイテレーション必要がありますを実行する場所の検索に基づくアルゴリズムで使用します。  
  
   
  
## Examples  
 次の例では、並列ループの最大 10,000 個のイテレーションを実行します。 各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。 ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されます。 呼び出しの後のイテレーションが実行されません、出力の例に示すよう、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されると、各反復処理を呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>別のイテレーションが呼び出されているかどうかを確認する方法、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。 返された場合`true`イテレーションが直ちに返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> メソッドは、既に呼び出されています。 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
  </Members>
</Type>