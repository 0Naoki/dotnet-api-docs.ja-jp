<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff2f2535885d0110dfb688ef430d745c05b838fe" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70628484" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>他のイテレーションと対話するように、並列ループのイテレーションを有効にします。 このクラスのインスタンスは、<see cref="T:System.Threading.Tasks.Parallel" /> クラスから各ループに提供されるため、コードでインスタンスを作成することはできません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスのインスタンスをインスタンス化することはできないことに注意してください。 これは、コンパイラによって、メソッドまたは<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドの呼び出しの引数として自動的に生成されます。 具体的な例を次に示します。  
  
 `for` C#And ( `foreach`  in)および `For`  and `For Each`  (in Visual Basic) などの構造体は、最も小さいインデックスから最も大きい値に、またはセット内の最初のオブジェクトから最後のまで順番に実行されます。 これに対し<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>て、 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドとメソッドでは実行されません。 ループの個々のイテレーションは並列で実行されるため、開始と終了は任意の順序で実行できます。 クラス<xref:System.Threading.Tasks.ParallelLoopState>を使用すると、並列ループの個々のイテレーションが相互に対話できるようになります。 クラス<xref:System.Threading.Tasks.ParallelLoopState>を使用すると、次のことができます。  
  
-   <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドを呼び出して、現在のイテレーションを終了し、追加のイテレーションが開始されないようにします。 これは、既に実行を開始しているイテレーションには影響しません。  
  
-   メソッドを<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼び出すことにより、現在のインデックスよりも大きいインデックスを持つ反復が実行されないようにします。 これは、既に実行を開始しているイテレーションには影響しません。  
  
-   <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A>プロパティの値を取得することによって、ループの反復処理で例外が発生したかどうかを確認します。  
  
-   プロパティの値を取得して、ループの<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>反復処理によってメソッドが呼び出されたかどうかを確認します。 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> このプロパティを使用すると、メソッドの<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>呼び出しの前に開始したループの反復処理からを返すことができますが、まだ実行中であることはありません。  
  
-   ループの反復処理でメソッド<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>または<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されたかどうか、または<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティの値を取得することによって例外がスローされたかどうかを確認します。  
  
-   プロパティの値を取得することによって、 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Break が呼び出された反復処理のインデックスよりインデックスが大きい、実行時間の長いイテレーションから終了します。  
  
   
  
## Examples  
 次の例では、ループの最大100の反復処理を並列実行します。 各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。 ランダムに生成された値によって、 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されるループの反復処理が決定されます。 この例の出力に示されているように、インデックスが<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値よりも大きいイテレーションは、メソッドの<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼び出しの後に開始されません。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されたときにループの反復処理が実行される可能性があるため、各<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>反復はプロパティを呼び出して、別の<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>イテレーションがメソッドを呼び出したかどうかを確認します。 プロパティ値が`true`の場合、イテレーションは<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値をチェックし、現在のイテレーションのインデックス値よりも大きい場合は、すぐにを返します。  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Threading.Tasks.ParallelLoopState" />インスタンスは、インスタンスが提供されたループの本体内でのみ使用されることを意図しています。  関連するループが終了した後<see cref="T:System.Threading.Tasks.ParallelLoopState" />は、指定されたインスタンスを安全に使用できません。また、明示的に他のスレッドに渡すことも安全でもありません。また、これらのスレッドがいつでもアクセスできるようになります。  ループに<see cref="T:System.Threading.Tasks.ParallelLoopState" />含まれる各スレッドには、別のインスタンスが提供されます。</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のイテレーションの終了後、システムはできるだけ早く <see cref="T:System.Threading.Tasks.Parallel" /> ループの実行を終了する必要があることを通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>現在のイテレーションの後にイテレーションが実行されないことを示します。 ループのその他の反復処理は実質的にキャンセルされます。 ただし、実行を既に開始しているイテレーションは停止されません。 たとえば、が 0 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ~ 1000 の反復ループの100反復から呼び出された場合でも、100未満のすべてのイテレーションは実行されますが、まだ開始されていない101から1000までのイテレーションは実行されません。  
  
 実行時間の長いイテレーションの場合、現在のインデックス<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>がの<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>現在の<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>値よりも小さい場合、は、現在のイテレーションのインデックスにプロパティを設定します。 インデックスが競合している実行の最小のブレークイテレーションよりも大きいイテレーションを停止するには、次の手順を実行します。  
  
1.  <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティがであるか`true`どうかを確認します。  
  
2.  インデックスが<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値よりも大きい場合は、イテレーションから終了します。  
  
 具体的な例を次に示します。  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>は、通常、データソースに順序が存在する検索ベースのアルゴリズムで使用されます。  
  
   
  
## Examples  
 次の例では、ループの最大100の反復処理を並列実行します。 各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。 ランダムに生成された値によって、 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されるループの反復処理が決定されます。 この例の出力に示されているように、インデックスが<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値よりも大きいイテレーションは、メソッドの<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼び出しの後に開始されません。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されたときにループの反復処理が実行される可能性があるため、各<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>反復はプロパティを呼び出して、別の<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>イテレーションがメソッドを呼び出したかどうかを確認します。 プロパティ値が`true`の場合、イテレーションは<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値をチェックし、現在のイテレーションのインデックス値よりも大きい場合は、すぐにを返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドは既に呼び出されました。 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ループのいずれかの反復処理がその反復処理によってハンドルされない例外をスローしたかどうかを示す値を取得します。</summary>
        <value><see langword="true" />未処理の例外がスローされた場合は。それ以外<see langword="false" />の場合は。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ループのいずれかのイテレーションが <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドを呼び出したかどうかを示す値を取得します。</summary>
        <value><see langword="true" /> メソッドを呼び出していずれかのイテレーションが停止した場合は <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ループの実行時間の長い反復処理では、 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティの値を取得して、 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドの呼び出しが実行される前に実行を開始したループの反復があるかどうかを判断できます。 その後、 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティの値を使用して、すぐに制御を返すか、正常に実行するかを決定できます。  
  
   
  
## Examples  
 次の例では、ループの最大1万の反復処理を並列実行します。 各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。 ランダムに生成された値によって、 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されるループの反復処理が決定されます。 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されたときにループの反復処理が実行される可能性があるため、ラムダ式<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>はメソッドを呼び出して、別のイテレーション<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>がメソッドを呼び出したかどうかを確認します。 が返さ`true`れた場合は、すぐにイテレーションが返されます。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したループの反復処理のうち、最も下位の反復処理を取得します。</summary>
        <value><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したイテレーションのうち、最下位のイテレーション。 <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> ループの場合、値は内部的に生成されたインデックスに基づきます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 並列ループの複数の反復処理によっ<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>てメソッドを呼び出すことができます。 この値が指定されている場合、この値はを呼び出し<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>た反復処理の最小インデックスになります。 ループの反復処理が呼び出され<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>なかった場合、 `null`このプロパティはを返します。 プロパティ値は、メソッドの<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>呼び出しによって影響を受けないことに注意してください。  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドを呼び出すイテレーションの後のすべてのイテレーションが実行されない必要がある<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 、実行時間の長いイテレーションでは、プロパティを使用して、メソッドの<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼び出しの前に実行を開始したイテレーションを終了します。 インデックスが競合している実行の最小のブレークイテレーションよりも大きいイテレーションを停止するには、次の手順を実行します。  
  
1.  <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティがであるか`true`どうかを確認します。  
  
2.  インデックスが<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値よりも大きい場合は、イテレーションから終了します。  
  
 具体的な例を次に示します。  
  
   
  
## Examples  
 次の例では、ループの最大100の反復処理を並列実行します。 各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。 ランダムに生成された値によって、 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されるループの反復処理が決定されます。 これにより、インデックスが<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値を超える反復処理が、メソッドの<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼び出し後に開始されるのを防ぐことができます。ただし、既に実行が開始されているイテレーションには影響しません。 これらの処理が完了しないようにする<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>ために、各イテレーションはメソッドを呼び出し<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>て、別のイテレーションがメソッドを呼び出したかどうかを確認します。 その場合は、反復処理によって<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値がチェックされ、現在のイテレーションのインデックス値よりも大きい場合はが直ちに返されます。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>値は並列ループの外側ではスコープ外であるため、値を保持する場合は、ループの外部から参照できる変数に割り当てる必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この反復処理または他の反復処理からの要求に基づいて、ループの現在の反復処理を終了する必要があるかどうかを示す値を取得します。</summary>
        <value>現在のイテレーションを終了する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>のいずれかの`true`条件に該当する場合、プロパティはに設定されます。  
  
-   ループの反復処理では<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 、 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>またはが呼び出されます。  
  
-   ループの反復処理では、例外がスローされます。  
  
-   ループが取り消されました。  
  
 このプロパティが`true`の場合<xref:System.Threading.Tasks.Parallel> 、クラスは、ループの実行開始からの追加の反復を事前に禁止しようとします。 ただし、追加のイテレーションが開始されるのを防ぐことができない場合もあります。  
  
 また、実行時間の長いイテレーションの実行が既に開始されている場合もあります。 このような場合は、プロパティを明示<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>的にチェックして、プロパティが`true`を返した場合に実行を中止することができます。  
  
   
  
## Examples  
 次の例では、ループの最大100の反復処理を並列実行します。 各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。 ランダムに生成された値によって、 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されるループの反復処理が決定されます。 これにより、インデックスが<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値を超える反復処理が、メソッドの<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼び出し後に開始されるのを防ぐことができます。ただし、既に実行が開始されているイテレーションには影響しません。 これらの処理が完了しないようにする<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>ために、各イテレーションはメソッドを呼び出し<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>て、別のイテレーションがメソッドを呼び出したかどうかを確認します。 その場合は、反復処理によって<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値がチェックされ、現在のイテレーションのインデックス値よりも大きい場合はが直ちに返されます。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Threading.Tasks.Parallel" /> ループの実行をできるだけ早く終了する必要があることを通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドを<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>呼び出すことは、まだ開始されていないループの反復が実行されないことを示します。 ループのその他の反復処理は実質的にキャンセルされます。 ただし、実行を既に開始しているイテレーションは停止されません。  
  
 メソッドを<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>呼び出すと<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 、実行中`true`のループの反復処理に対してプロパティが返されます。 これは、実行時間の長いイテレーションで特に便利です。 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>これにより、プロパティをチェックし`true`、値がの場合は早期に終了できます。  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>は、通常、検索ベースのアルゴリズムで使用されます。結果が見つかった場合は、他のイテレーションを実行する必要はありません。  
  
   
  
## Examples  
 次の例では、ループの最大1万の反復処理を並列実行します。 各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。 ランダムに生成された値によって、 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されるループの反復処理が決定されます。 この例の出力に示されているように、メソッドの<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>呼び出しの後にイテレーションは実行されません。  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されたときにループの反復処理が実行される可能性があるため、各<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>イテレーションはメソッドを呼び出して、別の<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>イテレーションがメソッドを呼び出したかどうかを確認します。 が返さ`true`れた場合は、すぐにイテレーションが返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> メソッドは、既に呼び出されています。 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">データの並列化 (タスク並列ライブラリ)</related>
      </Docs>
    </Member>
  </Members>
</Type>
