<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="af16a98f705e63e2ba868d464648af2e365bcb9a" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48619330" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a1033-101">他のイテレーションと対話するように、並列ループのイテレーションを有効にします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a1033-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="a1033-102">このクラスのインスタンスは、<see cref="T:System.Threading.Tasks.Parallel" /> クラスから各ループに提供されるため、コードでインスタンスを作成することはできません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a1033-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1033-103">このクラスのインスタンスをインスタンス化できないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="a1033-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="a1033-104">コンパイラによってへの呼び出しで引数として生成は自動的に、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>または<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="a1033-105">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="a1033-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="a1033-106">コンストラクト`for`と`foreach`(で C# の場合) と`For`と`For Each`(Visual Basic) で順番に実行または一連の最初のオブジェクトから最大最小のインデックスから最後の。</span><span class="sxs-lookup"><span data-stu-id="a1033-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="a1033-107">これに対し、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>と<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>メソッドは受け取りません。</span><span class="sxs-lookup"><span data-stu-id="a1033-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="a1033-108">ループの各イテレーションが並列で実行を開始し、任意の順序で終了できます。</span><span class="sxs-lookup"><span data-stu-id="a1033-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="a1033-109"><xref:System.Threading.Tasks.ParallelLoopState>クラス間の対話に並列ループの個別のイテレーションを使用できます。</span><span class="sxs-lookup"><span data-stu-id="a1033-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="a1033-110"><xref:System.Threading.Tasks.ParallelLoopState>クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="a1033-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="a1033-111">現在のイテレーションを終了し、追加のイテレーションを呼び出すことによって起動を防ぐため、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="a1033-112">これには、実行が既に開始されているイテレーションは影響しません。</span><span class="sxs-lookup"><span data-stu-id="a1033-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="a1033-113">現在のインデックスより大きいインデックスを使用して、イテレーションが呼び出すことによって実行されないように、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="a1033-114">これには、実行が既に開始されているイテレーションは影響しません。</span><span class="sxs-lookup"><span data-stu-id="a1033-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="a1033-115">値を取得することによって、ループの反復処理で、例外が発生したかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="a1033-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="a1033-116">ループの反復処理が呼び出されているかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドの値を取得することによって、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="a1033-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="a1033-117">このプロパティを使用するには、呼び出しの前に開始されたループのイテレーションから返される、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが実行中であります。</span><span class="sxs-lookup"><span data-stu-id="a1033-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="a1033-118">ループの反復処理が呼び出されているかどうかを判断、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>または<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドまたはの値を取得することによって、例外がスローされて、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="a1033-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="a1033-119">インデックスが中断がの値を取得することによって呼び出されたイテレーションのインデックスよりも大きい実行時間の長いイテレーションからの終了時、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="a1033-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1033-120">次の例では、並列ループの最大 100 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a1033-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="a1033-121">各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。</span><span class="sxs-lookup"><span data-stu-id="a1033-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="a1033-122">ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="a1033-123">例のインデックスがより大きいイテレーションなしの出力として、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>への呼び出し後のプロパティ値の開始、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="a1033-124">ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されると、各反復処理を呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションが呼び出されているかどうかを確認するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="a1033-125">プロパティの値が場合`true`、イテレーションの値を確認します、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="a1033-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="a1033-126">A<see cref="T:System.Threading.Tasks.ParallelLoopState" />インスタンスをセットアップして、インスタンスが提供されているループの本体でのみ使用されます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a1033-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="a1033-127">使用して、指定された安全ではありません<see cref="T:System.Threading.Tasks.ParallelLoopState" />関連付けられているループの後にインスタンスが終了するもに他のスレッドを渡して明示的にしても安全し、それらのスレッドをいつでもアクセスできます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a1033-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="a1033-128">異なる<see cref="T:System.Threading.Tasks.ParallelLoopState" />ループに関連する各スレッドにインスタンスが提供されます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a1033-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
      <span data-ttu-id="a1033-129">データの並列化 (タスク並列ライブラリ)</span>
      <span class="sxs-lookup">
        <span data-stu-id="a1033-129">Data Parallelism (Task Parallel Library)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a1033-130">現在のイテレーションの終了後、システムはできるだけ早く <see cref="T:System.Threading.Tasks.Parallel" /> ループの実行を終了する必要があることを通知します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1033-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 現在のイテレーションの後のイテレーションを実行しないことを示します。</span><span class="sxs-lookup"><span data-stu-id="a1033-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="a1033-132">ループの追加、イテレーションを効果的にキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="a1033-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="a1033-133">ただし、既に実行が開始されているすべてのイテレーションは停止しません。</span><span class="sxs-lookup"><span data-stu-id="a1033-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="a1033-134">たとえば場合、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>反復処理する 0 から 1,000 個を超えるすべてのイテレーションを 100 未満でも、実行が 1000 を持っていないが開始するには、101 ~ からのイテレーションを実行するか、並列ループの 100 イテレーションから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="a1033-135">既に実行中、実行時間の長いイテレーションの<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>設定、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティを現在のインデックスがの現在の値より小さい場合は、現在のイテレーションのインデックス<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a1033-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="a1033-136">インデックスが競合の実行から最下位の区切りイテレーションより大きいイテレーションを停止するには、次の操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1033-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="a1033-137">確認するかどうか、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="a1033-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="a1033-138">インデックスがより大きい場合は、イテレーションを終了、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="a1033-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="a1033-139">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="a1033-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="a1033-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 通常、順序付けは、データ ソースに存在する検索ベースのアルゴリズムで使用します。</span><span class="sxs-lookup"><span data-stu-id="a1033-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1033-141">次の例では、並列ループの最大 100 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a1033-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="a1033-142">各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。</span><span class="sxs-lookup"><span data-stu-id="a1033-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="a1033-143">ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="a1033-144">例のインデックスがより大きいイテレーションなしの出力として、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>への呼び出し後のプロパティ値の開始、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="a1033-145">ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されると、各反復処理を呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションが呼び出されているかどうかを確認するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="a1033-146">プロパティの値が場合`true`、イテレーションの値を確認します、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="a1033-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a1033-147">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドは既に呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="a1033-148">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-148">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="a1033-149">データの並列化 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-149">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1033-150">ループのいずれかのイテレーションが、そのイテレーションによって処理されなかった例外をスローしたかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1033-151">処理されない例外がスローされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-151">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="a1033-152">データの並列化 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-152">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1033-153">ループのいずれかのイテレーションが <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドを呼び出したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1033-154">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドを呼び出していずれかのイテレーションが停止した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-154">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1033-155">ループの実行時間の長いイテレーションの値を取得できます、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>かどうか、ループのイテレーションを開始した呼び出しの前に実行を決定するプロパティ、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドがまだ実行中です。</span><span class="sxs-lookup"><span data-stu-id="a1033-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="a1033-156">値を使用することができますし、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティのすぐに返すまたは正常に実行するかどうかする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1033-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1033-157">次の例では、並列ループの最大 10,000 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a1033-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="a1033-158">各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。</span><span class="sxs-lookup"><span data-stu-id="a1033-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="a1033-159">ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="a1033-160">ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドを呼び出すラムダ式の呼び出し、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>別のイテレーションが呼び出されているかどうかを確認する方法、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="a1033-161">返された場合`true`イテレーションが直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="a1033-162">データの並列化 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-162">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1033-163">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したループのイテレーションのうち、最下位のイテレーションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1033-164">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したイテレーションのうち、最下位のイテレーション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="a1033-165">
            <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> ループの場合、値は内部的に生成されたインデックスに基づきます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1033-166">呼び出すための並列ループの繰り返し可能性があります、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="a1033-167">この値は、最小のインデックスを呼び出した反復処理の場合は、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a1033-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="a1033-168">ループのイテレーションが呼び出されない場合<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>、このプロパティを返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="a1033-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="a1033-169">プロパティの値がへの呼び出しによって影響を受けることに注意してください、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="a1033-170">呼び出す反復処理後するすべてのイテレーションでの実行時間の長いイテレーションで、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが実行されない必要があります、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティを使用して、呼び出しの前に実行を開始したイテレーションの終了、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="a1033-171">インデックスが競合の実行から最下位の区切りイテレーションより大きいイテレーションを停止するには、次の操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1033-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="a1033-172">確認するかどうか、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="a1033-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="a1033-173">インデックスがより大きい場合は、イテレーションを終了、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="a1033-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="a1033-174">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="a1033-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1033-175">次の例では、並列ループの最大 100 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a1033-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="a1033-176">各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。</span><span class="sxs-lookup"><span data-stu-id="a1033-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="a1033-177">ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="a1033-178">これにより、インデックスがより大きいイテレーション、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値への呼び出し後の起動、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが、すでに実行されておりのイテレーションは影響しません。</span><span class="sxs-lookup"><span data-stu-id="a1033-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="a1033-179">各イテレーションの呼び出しの完了からこれらを防ぐためには、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションが呼び出されているかどうかを確認する方法、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="a1033-180">そのため、イテレーションの値を確認します。 場合、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="a1033-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="a1033-181">に、注意してください、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>並列ループの外側のスコープ外の値は、その値を維持したい場合に、ループの外に表示されている変数に割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1033-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="a1033-182">データの並列化 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-182">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1033-183">このイテレーションまたは他のイテレーションからの要求に基づいて、ループの現在のイテレーションを終了する必要があるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1033-184">現在のイテレーションを終了する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-184">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1033-185"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティに設定されて`true`次の条件のいずれか。</span><span class="sxs-lookup"><span data-stu-id="a1033-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="a1033-186">ループの呼び出しのイテレーション<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>または<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a1033-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="a1033-187">ループのイテレーションは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="a1033-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="a1033-188">ループが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="a1033-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="a1033-189">このプロパティが`true`、<xref:System.Threading.Tasks.Parallel>クラスは、ループの追加のイテレーションが実行を開始することを禁止する事前に試みます。</span><span class="sxs-lookup"><span data-stu-id="a1033-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="a1033-190">ただし、追加のイテレーションの開始を防ぐことができない場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1033-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="a1033-191">実行時間の長いイテレーションでの実行が既に開始されている場合もあります。</span><span class="sxs-lookup"><span data-stu-id="a1033-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="a1033-192">このような場合は、イテレーションを明示的にチェック、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>プロパティを返す場合は、プロパティは、中止の実行`true`します。</span><span class="sxs-lookup"><span data-stu-id="a1033-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1033-193">次の例では、並列ループの最大 100 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a1033-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="a1033-194">各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。</span><span class="sxs-lookup"><span data-stu-id="a1033-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="a1033-195">ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="a1033-196">これにより、インデックスがより大きいイテレーション、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティ値への呼び出し後の起動、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッドが、すでに実行されておりのイテレーションは影響しません。</span><span class="sxs-lookup"><span data-stu-id="a1033-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="a1033-197">各イテレーションの呼び出しの完了からこれらを防ぐためには、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>別のイテレーションが呼び出されているかどうかを確認する方法、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="a1033-198">そのため、イテレーションの値を確認します。 場合、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>プロパティと、現在のイテレーションのインデックス値よりも大きい場合は、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="a1033-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="a1033-199">データの並列化 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-199">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a1033-200">システムはできるだけ早く <see cref="T:System.Threading.Tasks.Parallel" /> ループの実行を終了する必要があることを通知します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1033-201">呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドでは、まだ開始されていないループの反復を実行しない必要がありますを示します。</span><span class="sxs-lookup"><span data-stu-id="a1033-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="a1033-202">ループの追加、イテレーションを効果的にキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="a1033-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="a1033-203">ただし、既に実行が開始されているすべてのイテレーションは停止しません。</span><span class="sxs-lookup"><span data-stu-id="a1033-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="a1033-204">呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティを返す`true`がまだ実行ループの反復処理をします。</span><span class="sxs-lookup"><span data-stu-id="a1033-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="a1033-205">チェックすることがある実行時間の長いイテレーションのために特に便利です、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>プロパティとその値がある場合に早期終了`true`します。</span><span class="sxs-lookup"><span data-stu-id="a1033-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="a1033-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 通常、結果が見つかった、他のイテレーション必要がありますを実行する場所の検索に基づくアルゴリズムで使用します。</span><span class="sxs-lookup"><span data-stu-id="a1033-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1033-207">次の例では、並列ループの最大 10,000 個のイテレーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="a1033-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="a1033-208">各イテレーションでは、1 から 1,000 ミリ秒単位までのランダムな間隔の一時停止します。</span><span class="sxs-lookup"><span data-stu-id="a1033-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="a1033-209">ループのイテレーションでランダムに生成された値を決定します、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="a1033-210">呼び出しの後のイテレーションが実行されません、出力の例に示すよう、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="a1033-211">ループの反復処理がまだときに実行されている可能性がありますので、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッドが呼び出されると、各反復処理を呼び出す、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>別のイテレーションが呼び出されているかどうかを確認する方法、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a1033-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="a1033-212">返された場合`true`イテレーションが直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="a1033-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a1033-213">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> メソッドは、既に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="a1033-214">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-214">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="a1033-215">データの並列化 (タスク並列ライブラリ)</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1033-215">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>