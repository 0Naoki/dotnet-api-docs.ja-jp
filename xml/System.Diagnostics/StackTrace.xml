<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="StackTrace.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cfcfcc464494d32b82f24347084a375b56c13653.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfcfcc464494d32b82f24347084a375b56c13653</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.StackTrace">
          <source>Represents a stack trace, which is an ordered collection of one or more stack frames.</source>
          <target state="translated">スタック トレースを表します。スタック トレースは、順番に並べられた 1 つまたは複数のスタック フレームのコレクションです。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.StackTrace">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> information will be most informative with Debug build configurations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> 情報はデバッグ ビルドの構成に最もわかりやすくなります。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.StackTrace">
          <source>By default, Debug builds include debug symbols, while Release builds do not.</source>
          <target state="translated">既定では、デバッグ ビルドには、リリース ビルドでないにデバッグ シンボルが含まれます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.StackTrace">
          <source>The debug symbols contain most of the file, method name, line number, and column information used in constructing <ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> objects.</source>
          <target state="translated">デバッグ シンボルには、ほとんどファイル、メソッド名、行番号、および構築する際に使用する列情報にはが含まれます。<ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph>と<ph id="ph2">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.StackTrace">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> might not report as many method calls as expected, due to code transformations that occur during optimization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> 多くのメソッド呼び出しの最適化中に実行されたコード変換のため、期待どおりには報告されません可能性があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.StackTrace">
          <source>The following console application demonstrates how to create a simple <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> and iterate through its frames to obtain debugging and diagnostic information.</source>
          <target state="translated">次のコンソール アプリケーションは、単純なを作成する方法を示します<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>デバッグと診断情報を入手するには、そのフレームを反復処理します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.StackTrace">
          <source>for the ability of inheritors to access unmanaged code.</source>
          <target state="translated">必要なアクセス許可の継承先のアンマネージ コードにアクセスします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.StackTrace">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.StackTrace">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">部分信頼コードでこのクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.StackTrace">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class from the caller's frame.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを呼び出し元のフレームから初期化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> is created with the caller's current thread, and does not contain file name, line number, or column information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>呼び出し元の現在のスレッドで作成され、ファイル名、行番号、または列の情報が含まれていません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor">
          <source>Use this default constructor when you want a complete trace with only summary method information about the call stack.</source>
          <target state="translated">呼び出し履歴のメソッドの概要情報のみを持つ完全なトレースする場合は、この既定のコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor">
          <source>The following code example displays the first and last function calls in a stack trace.</source>
          <target state="translated">次のコード例では、スタック トレースでの最初と最後の関数呼び出しが表示されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to capture the file name, line number, and column number; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ファイル名、行番号、および列番号をキャプチャする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class from the caller's frame, optionally capturing source information.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを呼び出し元のフレームから初期化し、オプションでソース情報をキャプチャします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> is created with the caller's current thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>呼び出し元の現在のスレッドで作成されます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
          <source>The following code example demonstrates various <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> constructor methods.</source>
          <target state="translated">次のコード例では、さまざまなを示しています<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>コンス トラクター メソッドです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
          <source>The frame that the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> object should contain.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> オブジェクトに格納するフレーム。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class that contains a single frame.</source>
          <target state="translated">単一フレームを格納している <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
          <source>Use this constructor when you do not want the overhead of a full stack trace.</source>
          <target state="translated">完全なスタック トレースのオーバーヘッドしたくない場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
          <source>The following code example writes stack trace information to an event log entry.</source>
          <target state="translated">次のコード例書き込みスタック トレース情報、イベント ログ エントリをします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
          <source>The exception object from which to construct the stack trace.</source>
          <target state="translated">スタック トレースを構築する基となる例外オブジェクト。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class using the provided exception object.</source>
          <target state="translated">指定した例外オブジェクトを使用して、<ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> is created with the caller's current thread, and does not contain file name, line number, or column information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>呼び出し元の現在のスレッドで作成され、ファイル名、行番号、または列の情報が含まれていません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
          <source>The resulting stack trace describes the stack at the time of the exception.</source>
          <target state="translated">結果のスタック トレースは、時、例外のスタックをについて説明します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
          <source>The parameter <ph id="ph1">&lt;paramref name="e" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="e" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
          <source>The number of frames up the stack from which to start the trace.</source>
          <target state="translated">トレースを開始するスタックまでのフレーム数。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class from the caller's frame, skipping the specified number of frames.</source>
          <target state="translated">呼び出し元のフレームから <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> is created with the caller's current thread, and does not contain file name, line number, or column information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>呼び出し元の現在のスレッドで作成され、ファイル名、行番号、または列の情報が含まれていません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
          <source>If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> will contain no frames.</source>
          <target state="translated">スキップするフレームの数を超える値や、インスタンスの作成時に呼び出し履歴上のフレームの合計数と等しく場合、<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>フレームが含まれません。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="skipFrames" /&gt;</ph> parameter is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="skipFrames" /&gt;</ph> パラメーターが負の値です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
          <source>The exception object from which to construct the stack trace.</source>
          <target state="translated">スタック トレースを構築する基となる例外オブジェクト。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
          <source>The number of frames up the stack from which to start the trace.</source>
          <target state="translated">トレースを開始するスタックまでのフレーム数。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class using the provided exception object and skipping the specified number of frames.</source>
          <target state="translated">指定した例外オブジェクトを使用して <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> does not contain file name, line number, or column information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>ファイル名、行番号、または列の情報が含まれていません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
          <source>The resulting stack trace describes the stack at the time of the exception.</source>
          <target state="translated">結果のスタック トレースは、時、例外のスタックをについて説明します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
          <source>If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> will contain no frames.</source>
          <target state="translated">スキップするフレームの数を超える値や、インスタンスの作成時に呼び出し履歴上のフレームの合計数と等しく場合、<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>フレームが含まれません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
          <source>The parameter <ph id="ph1">&lt;paramref name="e" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="e" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="skipFrames" /&gt;</ph> parameter is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="skipFrames" /&gt;</ph> パラメーターが負の値です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
          <source>The number of frames up the stack from which to start the trace.</source>
          <target state="translated">トレースを開始するスタックまでのフレーム数。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to capture the file name, line number, and column number; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ファイル名、行番号、および列番号をキャプチャする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class from the caller's frame, skipping the specified number of frames and optionally capturing source information.</source>
          <target state="translated">呼び出し元のフレームから <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップしたり、必要に応じてソース情報を取得したりできます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
          <source>If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> will contain no frames.</source>
          <target state="translated">スキップするフレームの数を超える値や、インスタンスの作成時に呼び出し履歴上のフレームの合計数と等しく場合、<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>フレームが含まれません。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
          <source>The following code example demonstrates various <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> constructor methods.</source>
          <target state="translated">次のコード例では、さまざまなを示しています<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>コンス トラクター メソッドです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="skipFrames" /&gt;</ph> parameter is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="skipFrames" /&gt;</ph> パラメーターが負の値です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>The thread whose stack trace is requested.</source>
          <target state="translated">スタック トレースを要求するスレッド。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to capture the file name, line number, and column number; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ファイル名、行番号、および列番号をキャプチャする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class for a specific thread, optionally capturing source information.</source>
          <target state="translated">指定したスレッド用に <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化し、オプションでソース情報をキャプチャします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>Do not use this constructor overload.</source>
          <target state="translated">このコンストラクター オーバーロードは使用しないでください。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>Do not use this constructor.</source>
          <target state="translated">このコンストラクターは使用しないでください。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>It is obsolete, and there is no recommended alternative.</source>
          <target state="translated">これは古いもの、および推奨される代替手段はありません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>When you suspend a thread, you have no way of knowing what code it is executing, and deadlocks can occur very easily.</source>
          <target state="translated">スレッドを中断した場合があるない非常に簡単にどのようなコードを実行することや、デッドロックが発生することがわかりません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>For example, if you suspend a thread while it holds locks during a security permission evaluation, other threads in the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> might be blocked.</source>
          <target state="translated">たとえば、セキュリティ アクセス許可の評価中にロックを保持しているスレッドを中断した場合他のスレッドで、<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>ブロックされる可能性があります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>If you suspend a thread while it is executing a class constructor, other threads in the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that attempt to use that class are blocked.</source>
          <target state="translated">その他のスレッドでのクラスのコンス トラクターの実行中にスレッドを中断した場合、<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>クラスがブロックされていることを使用しようとします。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
          <source>The thread <ph id="ph1">&lt;paramref name="targetThread" /&gt;</ph> is not suspended.</source>
          <target state="translated">スレッド <ph id="ph1">&lt;paramref name="targetThread" /&gt;</ph> が中断されていません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
          <source>The exception object from which to construct the stack trace.</source>
          <target state="translated">スタック トレースを構築する基となる例外オブジェクト。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
          <source>The number of frames up the stack from which to start the trace.</source>
          <target state="translated">トレースを開始するスタックまでのフレーム数。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to capture the file name, line number, and column number; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ファイル名、行番号、および列番号をキャプチャする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class using the provided exception object, skipping the specified number of frames and optionally capturing source information.</source>
          <target state="translated">指定した例外オブジェクトを使用して、<ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化し、指定したフレーム数をスキップしたり、必要に応じてソース情報を取得したりできます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
          <source>The resulting stack trace describes the stack at the time of the exception.</source>
          <target state="translated">結果のスタック トレースは、時、例外のスタックをについて説明します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
          <source>If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> will contain no frames.</source>
          <target state="translated">スキップするフレームの数を超える値や、インスタンスの作成時に呼び出し履歴上のフレームの合計数と等しく場合、<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>フレームが含まれません。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
          <source>The parameter <ph id="ph1">&lt;paramref name="e" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="e" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="skipFrames" /&gt;</ph> parameter is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="skipFrames" /&gt;</ph> パラメーターが負の値です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
          <source>The exception object from which to construct the stack trace.</source>
          <target state="translated">スタック トレースを構築する基となる例外オブジェクト。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to capture the file name, line number, and column number; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ファイル名、行番号、および列番号をキャプチャする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> class, using the provided exception object and optionally capturing source information.</source>
          <target state="translated">指定した例外オブジェクトを使用して <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackTrace" /&gt;</ph> クラスの新しいインスタンスを初期化し、オプションでソース情報をキャプチャします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
          <source>The resulting stack trace describes the stack at the time of the exception.</source>
          <target state="translated">結果のスタック トレースは、時、例外のスタックをについて説明します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
          <source>The parameter <ph id="ph1">&lt;paramref name="e" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="e" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.StackTrace.FrameCount">
          <source>Gets the number of frames in the stack trace.</source>
          <target state="translated">スタック トレース内のフレーム数を取得します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.StackTrace.FrameCount">
          <source>The number of frames in the stack trace.</source>
          <target state="translated">スタック トレースのフレーム数。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.StackTrace.FrameCount">
          <source>The following code example displays the first and last function calls in a stack trace.</source>
          <target state="translated">次のコード例では、スタック トレースでの最初と最後の関数呼び出しが表示されます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
          <source>The index of the stack frame requested.</source>
          <target state="translated">要求されるスタック フレームのインデックス。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
          <source>Gets the specified stack frame.</source>
          <target state="translated">指定したスタック フレームを取得します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
          <source>The specified stack frame.</source>
          <target state="translated">指定したスタック フレーム。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
          <source>Stack frames are numbered starting at 0, which is the last stack frame pushed.</source>
          <target state="translated">スタック フレームは、最後にプッシュされるスタック フレームは 0 から始まる番号が付けられます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
          <source>The following code example displays the first and last function calls in a stack trace.</source>
          <target state="translated">次のコード例では、スタック トレースでの最初と最後の関数呼び出しが表示されます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>Returns a copy of all stack frames in the current stack trace.</source>
          <target state="translated">現在のスタック トレース内のすべてのスタック フレームのコピーを返します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackFrame" /&gt;</ph> representing the function calls in the stack trace.</source>
          <target state="translated">スタック トレース内の関数呼び出しを表す型 <ph id="ph1">&lt;see cref="T:System.Diagnostics.StackFrame" /&gt;</ph> の配列。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>Use the returned <ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> array to enumerate and examine function calls in the <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>.</source>
          <target state="translated">使用して、返された<ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph>で列挙し、関数を確認する配列を呼び出し、<ph id="ph2">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>The length of the returned array is equal to the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace.FrameCount%2A&gt;</ph> property value.</source>
          <target state="translated">返される配列の長さと等しい、<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace.FrameCount%2A&gt;</ph>プロパティの値。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> array elements are in reverse chronological order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph>配列の要素が発生の逆順にします。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> at array index 0 represents the most recent function call in the stack trace and the last frame pushed onto the call stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph>配列では、インデックス 0 は、スタック トレースとコール スタックにプッシュされた最後のフレームで最新の関数呼び出しを表します。 します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> at array index <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.FrameCount%2A&gt;</ph> minus 1 represents the oldest function call in the stack trace and the first frame pushed onto the call stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph>配列インデックスで<ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.FrameCount%2A&gt;</ph>から 1 を引いたスタック トレースなど、コール スタックにプッシュする最初のフレームで最も古い関数呼び出しを表します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace.GetFrames%2A&gt;</ph> method to obtain all stack frames in a stack trace; use the <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.GetFrame%2A&gt;</ph> method to obtain a specific stack frame in a stack trace.</source>
          <target state="translated">使用して、 <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace.GetFrames%2A&gt;</ph> ; スタック トレース内のすべてのスタック フレームを取得するメソッドを使用して、<ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.GetFrame%2A&gt;</ph>スタック トレースで特定のスタック フレームを取得します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> indexes are ordered alike by the two methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> 2 つの方法でインデックスが同じ順序付けします。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>For example, the <ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> at index 0 in the array returned by <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.GetFrames%2A&gt;</ph> is equivalent to the <ph id="ph3">&lt;xref:System.Diagnostics.StackFrame&gt;</ph> returned by <ph id="ph4">&lt;xref:System.Diagnostics.StackTrace.GetFrame%2A&gt;</ph> with an input index of 0.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.Diagnostics.StackFrame&gt;</ph>によって返される配列内のインデックス 0 位置<ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.GetFrames%2A&gt;</ph>と等価、<ph id="ph3">&lt;xref:System.Diagnostics.StackFrame&gt;</ph>によって返される<ph id="ph4">&lt;xref:System.Diagnostics.StackTrace.GetFrame%2A&gt;</ph>入力インデックスは 0 にします。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.GetFrames">
          <source>The following code example demonstrates enumerating the frames in a <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>.</source>
          <target state="translated">次のコード例では、フレームの列挙を示しています、<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
          <source>Defines the default for the number of methods to omit from the stack trace.</source>
          <target state="translated">スタック トレースから省略する既定のメソッド数を定義します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
          <source>This field is constant.</source>
          <target state="translated">このフィールドは定数です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
          <source>The default value for the number of methods to skip at the beginning of the stack trace.</source>
          <target state="translated">スタック トレースの冒頭でスキップする方法の数の既定値。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
          <source>The value of this constant is 0.</source>
          <target state="translated">この定数の値は 0 です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.ToString">
          <source>Builds a readable representation of the stack trace.</source>
          <target state="translated">スタック トレースの読み取り可能な形式を構築します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.StackTrace.ToString">
          <source>A readable representation of the stack trace.</source>
          <target state="translated">スタック トレースの読み取り可能な形式。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.StackTrace.ToString">
          <source>The following code example writes stack trace information to an event log entry.</source>
          <target state="translated">次のコード例書き込みスタック トレース情報、イベント ログ エントリをします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>