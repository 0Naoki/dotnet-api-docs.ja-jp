<Type Name="Process" FullName="System.Diagnostics.Process">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e86827f17b9b76752a39897defd149ec700f5789" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70588203" /></Metadata><TypeSignature Language="C#" Value="public class Process : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Process extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Process" />
  <TypeSignature Language="VB.NET" Value="Public Class Process&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Process : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Process = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultEvent("Exited")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultProperty("StartInfo")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.MonitoringDescription("Provides access to local and remote processes, enabling starting and stopping of local processes.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.MonitoringDescription("ProcessDesc")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5ba80-101">ローカル プロセスやリモート プロセスへのアクセスを提供し、ローカル システム プロセスの起動と停止ができるようにします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-101">Provides access to local and remote processes and enables you to start and stop local system processes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-102"><xref:System.Diagnostics.Process> コンポーネントは、コンピューターで実行されているプロセスへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-102">A <xref:System.Diagnostics.Process> component provides access to a process that is running on a computer.</span></span> <span data-ttu-id="5ba80-103">プロセスとは、簡単に言えば実行中のアプリです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-103">A process, in the simplest terms, is a running app.</span></span> <span data-ttu-id="5ba80-104">スレッドは、オペレーティング システムがプロセッサ時間を割り当てる基本単位です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-104">A thread is the basic unit to which the operating system allocates processor time.</span></span> <span data-ttu-id="5ba80-105">スレッドは、別のスレッドによって実行されている部分を含む、プロセスのコードの任意の部分を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-105">A thread can execute any part of the code of the process, including parts currently being executed by another thread.</span></span>  
  
 <span data-ttu-id="5ba80-106"><xref:System.Diagnostics.Process>コンポーネントは、アプリの起動、停止、制御、および監視を行うための便利なツールです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-106">The <xref:System.Diagnostics.Process> component is a useful tool for starting, stopping, controlling, and monitoring apps.</span></span> <span data-ttu-id="5ba80-107"><xref:System.Diagnostics.Process>コンポーネントを使用して、実行中のプロセスの一覧を取得したり、新しいプロセスを開始したりできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-107">You can use the <xref:System.Diagnostics.Process> component, to obtain a list of the processes that are running, or you can start a new process.</span></span> <span data-ttu-id="5ba80-108">システム プロセスにアクセスするには、<xref:System.Diagnostics.Process> コンポーネントを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-108">A <xref:System.Diagnostics.Process> component is used to access system processes.</span></span> <span data-ttu-id="5ba80-109"><xref:System.Diagnostics.Process>コンポーネントを初期化した後は、実行中のプロセスに関する情報を取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-109">After a <xref:System.Diagnostics.Process> component has been initialized, it can be used to obtain information about the running process.</span></span> <span data-ttu-id="5ba80-110">そのような情報には、スレッドのセットや、読み込まれたモジュール (.dll と .exe ファイル)、プロセスが使用しているメモリの量などのパフォーマンス情報が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-110">Such information includes the set of threads, the loaded modules (.dll and .exe files), and performance information such as the amount of memory the process is using.</span></span>  
  
 <span data-ttu-id="5ba80-111">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="5ba80-112">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="5ba80-113">直接的に型を破棄するには、`try` / `finally` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`finally` block.</span></span> <span data-ttu-id="5ba80-114">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="5ba80-115">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-116">32 ビット プロセスは 64 ビット プロセスのモジュールにアクセスできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-116">32-bit processes cannot access the modules of a 64-bit process.</span></span> <span data-ttu-id="5ba80-117">32 ビット プロセスから 64 ビット プロセスの詳細情報を取得しようとすると、<xref:System.ComponentModel.Win32Exception> 例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-117">If you try to get information about a 64-bit process from a 32-bit process, you will get a <xref:System.ComponentModel.Win32Exception> exception.</span></span> <span data-ttu-id="5ba80-118">一方で、64 ビット プロセスは 32 ビット プロセスのモジュールにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-118">A 64-bit process, on the other hand, can access the modules of a 32-bit process.</span></span>  
  
 <span data-ttu-id="5ba80-119">プロセス コンポーネントは、一度にすべてのプロパティのグループに関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-119">The process component obtains information about a group of properties all at once.</span></span> <span data-ttu-id="5ba80-120"><xref:System.Diagnostics.Process> コンポーネントは、いずれかのグループの 1 つのメンバーに関する情報を取得した後は、そのグループ内の他のプロパティの値をキャッシュします。そして、<xref:System.Diagnostics.Process.Refresh%2A> メソッドを呼び出すまで、そのグループの他のメンバーに関する新しい情報を取得しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-120">After the <xref:System.Diagnostics.Process> component has obtained information about one member of any group, it will cache the values for the other properties in that group and not obtain new information about the other members of the group until you call the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span> <span data-ttu-id="5ba80-121">そのため、プロパティ値は、最後の <xref:System.Diagnostics.Process.Refresh%2A> メソッドの呼び出しよりも新しい値を保証しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-121">Therefore, a property value is not guaranteed to be any newer than the last call to the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span> <span data-ttu-id="5ba80-122">グループの内訳はオペレーティング システムに依存します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-122">The group breakdowns are operating-system dependent.</span></span>  
  
 <span data-ttu-id="5ba80-123">システムでパス変数を引用符で囲んで宣言している場合、その場所で見つかるプロセスを開始するときに、そのパスを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-123">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="5ba80-124">そうしないと、システムはそのパスを見つけられません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-124">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="5ba80-125">たとえば、`c:\mypath` がパスに含まれておらず、それを `path = %path%;"c:\mypath"`` のように引用符を使用して追加した場合、`c:\mypath\` 内の任意のプロセスを開始するときに、それを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-125">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
 <span data-ttu-id="5ba80-126">システム プロセスは、プロセス識別子によって、システムで一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-126">A system process is uniquely identified on the system by its process identifier.</span></span> <span data-ttu-id="5ba80-127">多くの Windows リソースと同様に、プロセスはそれのハンドルによっても識別されますが、ハンドルはコンピューター上で一意でない場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-127">Like many Windows resources, a process is also identified by its handle, which might not be unique on the computer.</span></span> <span data-ttu-id="5ba80-128">ハンドルはリソースの識別子の総称です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-128">A handle is the generic term for an identifier of a resource.</span></span> <span data-ttu-id="5ba80-129">プロセス ハンドルは、オペレーティング システムによって保持され、<xref:System.Diagnostics.Process.Handle%2A> コンポーネントの <xref:System.Diagnostics.Process> プロパティを通じてアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-129">The operating system persists the process handle, which is accessed through the <xref:System.Diagnostics.Process.Handle%2A> property of the <xref:System.Diagnostics.Process> component, even when the process has exited.</span></span> <span data-ttu-id="5ba80-130">これはプロセスが終了した場合でもアクセスできます。これにより、<xref:System.Diagnostics.Process.ExitCode%2A> (通常は、成功を示す 0 か、0 以外のエラー コードのどちらかです) や <xref:System.Diagnostics.Process.ExitTime%2A> などの、プロセスの管理情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-130">Thus, you can get the process's administrative information, such as the <xref:System.Diagnostics.Process.ExitCode%2A> (usually either zero for success or a nonzero error code) and the <xref:System.Diagnostics.Process.ExitTime%2A>.</span></span> <span data-ttu-id="5ba80-131">ハンドルは非常に貴重なリソースなので、ハンドル リークはメモリ リークよりも有害です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-131">Handles are an extremely valuable resource, so leaking handles is more virulent than leaking memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-132">このクラスには、リンク確認要求と、すべてのメンバーに適用されるクラス レベルの継承確認要求が含まれています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-132">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="5ba80-133">直接の呼び出し元か派生クラスのいずれかに完全信頼アクセス許可がない場合、<xref:System.Security.SecurityException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-133">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="5ba80-134">セキュリティ要求の詳細については、「[リンク確認要求](~/docs/framework/misc/link-demands.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-134">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md).</span></span>  
  
<a name="Core"></a>   
## <a name="includenet_coreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] <span data-ttu-id="5ba80-135">での注意</span><span class="sxs-lookup"><span data-stu-id="5ba80-135">Notes</span></span>  
 <span data-ttu-id="5ba80-136">.NET Framework では、既定では <xref:System.Diagnostics.Process> クラスは <xref:System.Console> のエンコードを使用します。これは、入力ストリーム、出力ストリーム、およびエラー ストリームについては、通常はコード ページ エンコードです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-136">In the .NET Framework, the <xref:System.Diagnostics.Process> class by default uses <xref:System.Console> encodings, which are typically code page encodings, for the input, output, and error streams.</span></span> <span data-ttu-id="5ba80-137">コード例では、システムのカルチャが英語 (米国) で、コード ページ 437 が <xref:System.Console> クラスの既定のエンコードです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-137">For example code, on systems whose culture is English (United States), code page 437 is the default encoding for the <xref:System.Console> class.</span></span> <span data-ttu-id="5ba80-138">しかし、[!INCLUDE[net_core](~/includes/net-core-md.md)] では、これらのエンコードの限られたサブセットしか使用できないことがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-138">However, [!INCLUDE[net_core](~/includes/net-core-md.md)] may make only a limited subset of these encodings available.</span></span> <span data-ttu-id="5ba80-139">その場合は、<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> を既定のエンコードとして使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-139">If this is the case, it uses <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> as the default encoding.</span></span>  
  
 <span data-ttu-id="5ba80-140"><xref:System.Diagnostics.Process> オブジェクトが特定のコード ページ エンコードに依存している場合、<xref:System.Diagnostics.Process> のメソッドを呼び出す*前に*次の手順を行うと、特定のコード ページ エンコードも利用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-140">If a <xref:System.Diagnostics.Process> object depends on specific code page encodings, you can still make them available by doing the following *before* you call any <xref:System.Diagnostics.Process> methods:</span></span>  
  
1.  <span data-ttu-id="5ba80-141">プロジェクトに、参照を追加して、コードページ...........................</span><span class="sxs-lookup"><span data-stu-id="5ba80-141">Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.</span></span>  
  
2.  <span data-ttu-id="5ba80-142"><xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> プロパティから、<xref:System.Text.EncodingProvider> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-142">Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> property.</span></span>  
  
3.  <span data-ttu-id="5ba80-143"><xref:System.Text.EncodingProvider> オブジェクトを <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> メソッドに渡すと、エンコーディング プロバイダーでサポートされているその他のエンコードを利用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-143">Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> method to make the additional encodings supported by the encoding provider available.</span></span>  
  
 <span data-ttu-id="5ba80-144"><xref:System.Diagnostics.Process> のメソッドを呼び出す前にエンコーディング プロバイダーを登録していれば、<xref:System.Diagnostics.Process> クラスは、UTF8 ではなく既定のシステム エンコードを自動的に使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-144">The <xref:System.Diagnostics.Process> class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any <xref:System.Diagnostics.Process> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-145">次の例では、 <xref:System.Diagnostics.Process>クラスのインスタンスを使用してプロセスを開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-145">The following example uses an instance of the <xref:System.Diagnostics.Process> class to start a process.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 <span data-ttu-id="5ba80-146">次の例では<xref:System.Diagnostics.Process> 、クラス自体と静的<xref:System.Diagnostics.Process.Start%2A>メソッドを使用してプロセスを開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-146">The following example uses the <xref:System.Diagnostics.Process> class itself and a static <xref:System.Diagnostics.Process.Start%2A> method to start a process.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 <span data-ttu-id="5ba80-147">次F#の例では`runProc` 、プロセスを開始し、すべての出力とエラー情報をキャプチャし、プロセスが実行したミリ秒数を記録する関数を定義します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-147">The following F# example defines a `runProc` function that starts a process, captures all output and error information, and records the number of milliseconds that the process has run.</span></span>  <span data-ttu-id="5ba80-148">関数`runProc`には、起動するアプリケーションの名前、アプリケーションに渡す引数、および開始ディレクトリという3つのパラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-148">The `runProc` function has three parameters: the name of application to launch, the arguments to supply to the application, and the starting directory.</span></span>  
  
 [!code-fsharp[System.Diagnostics.Process#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.diagnostics.process/fs/Start1.fs#1)]  
  
 <span data-ttu-id="5ba80-149">`runProc`関数のコードは[ImaginaryDevelopment](http://fssnip.net/authors/ImaginaryDevelopment)によって記述されており、 [Microsoft のパブリックライセンス](https://opensource.org/licenses/ms-pl)で入手できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-149">The code for the `runProc` function was written by [ImaginaryDevelopment](http://fssnip.net/authors/ImaginaryDevelopment) and is available under the [Microsoft Public License](https://opensource.org/licenses/ms-pl).</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-150">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-150">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-151">このクラスは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-151">This class cannot be used by partially trusted code.</span></span></permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="5ba80-152">継承者に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-152">for full trust for inheritors.</span></span> <span data-ttu-id="5ba80-153">このクラスを、部分的に信頼されているコードが継承することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-153">This class cannot be inherited by partially trusted code.</span></span></permission>
    <altmember cref="M:System.Diagnostics.Process.Start" />
    <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
    <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
    <altmember cref="M:System.Diagnostics.Process.Kill" />
    <altmember cref="T:System.Diagnostics.ProcessThread" />
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/windowsdesktop/Using-the-NET-Process-Class-d70597ef"><span data-ttu-id="5ba80-154">.NET Process クラスの使用</span><span class="sxs-lookup"><span data-stu-id="5ba80-154">Using the .NET Process Class</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Process ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Process();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-155"><see cref="T:System.Diagnostics.Process" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-155">Initializes a new instance of the <see cref="T:System.Diagnostics.Process" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-156"><xref:System.Diagnostics.Process.MachineName%2A>プロパティを指定しない場合、既定値はローカルコンピューター (".") になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-156">If you do not specify the <xref:System.Diagnostics.Process.MachineName%2A> property, the default is the local computer, (".").</span></span>  
  
 <span data-ttu-id="5ba80-157">新しい<xref:System.Diagnostics.Process>コンポーネントをコンピューター上のプロセスと関連付けるには、2つのオプションがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-157">You have two options for associating a new <xref:System.Diagnostics.Process> component with a process on the computer.</span></span> <span data-ttu-id="5ba80-158">1つ目のオプションは、コンストラクターを使用し<xref:System.Diagnostics.Process>てコンポーネントを作成し、 <xref:System.Diagnostics.Process.StartInfo%2A>プロパティの適切なメンバー <xref:System.Diagnostics.Process.Start%2A>を設定<xref:System.Diagnostics.Process>し、を呼び出してを新しいシステムプロセスに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-158">The first option is to use the constructor to create the <xref:System.Diagnostics.Process> component, set the appropriate members of the <xref:System.Diagnostics.Process.StartInfo%2A> property and call <xref:System.Diagnostics.Process.Start%2A> to associate the <xref:System.Diagnostics.Process> with a new system process.</span></span> <span data-ttu-id="5ba80-159">2つ目のオプションは、 <xref:System.Diagnostics.Process>またはいずれかの<xref:System.Diagnostics.Process.GetProcesses%2A>戻り値<xref:System.Diagnostics.Process.GetProcessById%2A>を使用して、を実行中のシステムプロセスに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-159">The second option is to associate the <xref:System.Diagnostics.Process> with a running system process by using <xref:System.Diagnostics.Process.GetProcessById%2A> or one of the <xref:System.Diagnostics.Process.GetProcesses%2A> return values.</span></span>  
  
 <span data-ttu-id="5ba80-160">メソッドのオーバーロードを`static`使用して新しいシステムプロセスを開始すると、メソッドによって新しい<xref:System.Diagnostics.Process>コンポーネントが作成され、プロセスに関連付けられます。 <xref:System.Diagnostics.Process.Start%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-160">If you use a `static` overload of the <xref:System.Diagnostics.Process.Start%2A> method to start a new system process, the method creates a new <xref:System.Diagnostics.Process> component and associates it with the process.</span></span>  
  
 <span data-ttu-id="5ba80-161">プロパティが既定`true`値に設定されている場合は、Windows `Start`メニューの`Run`ダイアログボックスの場合と同様の方法でアプリケーションとドキュメントを開始できます。 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="5ba80-161">When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> property is set to its default value, `true`, you can start applications and documents in a way that is similar to using the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="5ba80-162">が<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>の`false`場合は、実行可能ファイルのみを開始できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-162">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> is `false`, you can start only executables.</span></span>  
  
 <span data-ttu-id="5ba80-163">コマンドラインから呼び出すことができる実行可能ファイルは、次の2つの方法のいずれかで起動できます。 <xref:System.Diagnostics.Process.StartInfo%2A>プロパティの適切なメンバーを設定し、パラメーターを指定せずにメソッドを<xref:System.Diagnostics.Process.Start%2A>呼び出すか、または適切なパラメーターをに渡します。`static`メンバー 。 <xref:System.Diagnostics.Process.Start%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-163">Any executable file that you can call from the command line can be started in one of two ways: by setting the appropriate members of the <xref:System.Diagnostics.Process.StartInfo%2A> property and calling the <xref:System.Diagnostics.Process.Start%2A> method with no parameters, or by passing the appropriate parameter to the `static`<xref:System.Diagnostics.Process.Start%2A> member.</span></span>  
  
 <span data-ttu-id="5ba80-164">コンストラクター、静的<xref:System.Diagnostics.Process.Start%2A>オーバーロード<xref:System.Diagnostics.Process>のいずれか、 <xref:System.Diagnostics.Process.GetProcessById%2A>、 <xref:System.Diagnostics.Process.GetProcesses%2A>、、 <xref:System.Diagnostics.Process.GetProcessesByName%2A>のいずれかのメソッドを使用して、コンポーネントを作成できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-164">You can create a <xref:System.Diagnostics.Process> component by using the constructor, one of the static <xref:System.Diagnostics.Process.Start%2A> overloads, or any of the <xref:System.Diagnostics.Process.GetProcessById%2A>, <xref:System.Diagnostics.Process.GetProcesses%2A>, or <xref:System.Diagnostics.Process.GetProcessesByName%2A> methods.</span></span> <span data-ttu-id="5ba80-165">完了すると、関連付けられているプロセスのビューが表示されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-165">After you have done so, you have a view into the associated process.</span></span> <span data-ttu-id="5ba80-166">これは、プロセスのプロパティがメモリ内で変更されたときに自動的に更新される動的ビューではありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-166">This is not a dynamic view that updates itself automatically when the process properties have changed in memory.</span></span> <span data-ttu-id="5ba80-167">代わりに、コンポーネントのを<xref:System.Diagnostics.Process.Refresh%2A>呼び出して、アプリケーションの<xref:System.Diagnostics.Process>プロパティ情報を更新する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-167">Instead, you must call <xref:System.Diagnostics.Process.Refresh%2A> for the component to update the <xref:System.Diagnostics.Process> property information in your application.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-168">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-168">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-169">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-169">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public int BasePriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BasePriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BasePriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int" Usage="System.Diagnostics.Process.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Base process priority.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessBasePriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-170">関連付けられたプロセスの基本優先順位を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-170">Gets the base priority of the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-171">関連付けられたプロセスの <see cref="P:System.Diagnostics.Process.PriorityClass" /> から算出される基本優先順位。</span><span class="sxs-lookup"><span data-stu-id="5ba80-171">The base priority, which is computed from the <see cref="P:System.Diagnostics.Process.PriorityClass" /> of the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-172">プロセス<xref:System.Diagnostics.Process.BasePriority%2A>のは、関連付けられたプロセス内で作成されるスレッドの開始優先順位です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-172">The <xref:System.Diagnostics.Process.BasePriority%2A> of the process is the starting priority for threads created within the associated process.</span></span> <span data-ttu-id="5ba80-173">基本優先順位に関する情報は、システムモニターの優先順位ベースカウンターを使用して表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-173">You can view information about the base priority through the System Monitor's Priority Base counter.</span></span>  
  
 <span data-ttu-id="5ba80-174">オペレーティングシステムは、経過時間またはその他のブーストに基づいて、プロセスを他のプロセスの前に配置する必要があるときに基本優先順位を変更できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-174">Based on the time elapsed or other boosts, the operating system can change the base priority when a process should be placed ahead of others.</span></span>  
  
 <span data-ttu-id="5ba80-175"><xref:System.Diagnostics.Process.BasePriority%2A>プロパティを使用すると、プロセスに割り当てられた開始優先度を表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-175">The <xref:System.Diagnostics.Process.BasePriority%2A> property lets you view the starting priority assigned to a process.</span></span> <span data-ttu-id="5ba80-176">ただし、読み取り専用であるため、を使用<xref:System.Diagnostics.Process.BasePriority%2A>してプロセスの優先順位を設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-176">However, because it is read-only, you cannot use the <xref:System.Diagnostics.Process.BasePriority%2A> to set the priority of the process.</span></span> <span data-ttu-id="5ba80-177">優先順位を変更するには<xref:System.Diagnostics.Process.PriorityClass%2A> 、プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-177">To change the priority, use the <xref:System.Diagnostics.Process.PriorityClass%2A> property.</span></span> <span data-ttu-id="5ba80-178">はシステムモニター <xref:System.Diagnostics.Process.PriorityClass%2A>を使用して表示できますが、はでは表示されません。 <xref:System.Diagnostics.Process.BasePriority%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-178">The <xref:System.Diagnostics.Process.BasePriority%2A> is viewable using the System Monitor, while the <xref:System.Diagnostics.Process.PriorityClass%2A> is not.</span></span> <span data-ttu-id="5ba80-179"><xref:System.Diagnostics.Process.BasePriority%2A>とは <xref:System.Diagnostics.Process.PriorityClass%2A>  、どちらもプログラムによって表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-179">Both the <xref:System.Diagnostics.Process.BasePriority%2A> and the <xref:System.Diagnostics.Process.PriorityClass%2A> can be viewed programmatically.</span></span> <span data-ttu-id="5ba80-180">次の表は、値と<xref:System.Diagnostics.Process.BasePriority%2A> <xref:System.Diagnostics.Process.PriorityClass%2A>値の間の関係を示しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-180">The following table shows the relationship between <xref:System.Diagnostics.Process.BasePriority%2A> values and <xref:System.Diagnostics.Process.PriorityClass%2A> values.</span></span>  
  
|<span data-ttu-id="5ba80-181">BasePriority</span><span class="sxs-lookup"><span data-stu-id="5ba80-181">BasePriority</span></span>|<span data-ttu-id="5ba80-182">PriorityClass</span><span class="sxs-lookup"><span data-stu-id="5ba80-182">PriorityClass</span></span>|  
|------------------|-------------------|  
|<span data-ttu-id="5ba80-183">4</span><span class="sxs-lookup"><span data-stu-id="5ba80-183">4</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Idle>|  
|<span data-ttu-id="5ba80-184">8</span><span class="sxs-lookup"><span data-stu-id="5ba80-184">8</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Normal>|  
|<span data-ttu-id="5ba80-185">13</span><span class="sxs-lookup"><span data-stu-id="5ba80-185">13</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.High>|  
|<span data-ttu-id="5ba80-186">24</span><span class="sxs-lookup"><span data-stu-id="5ba80-186">24</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.RealTime>|  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-187">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-187">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-188">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-188">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-189">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-189">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-190">プロセスが終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-190">The process has exited.</span></span>  
  
 <span data-ttu-id="5ba80-191">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-191">-or-</span></span>  
  
 <span data-ttu-id="5ba80-192">プロセスが開始されていないため、プロセス ID はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-192">The process has not started, so there is no process ID.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-193">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-193">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-194">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-194">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
        <altmember cref="T:System.Diagnostics.ThreadPriorityLevel" />
      </Docs>
    </Member>
    <Member MemberName="BeginErrorReadLine">
      <MemberSignature Language="C#" Value="public void BeginErrorReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginErrorReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.BeginErrorReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginErrorReadLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginErrorReadLine();" />
      <MemberSignature Language="F#" Value="member this.BeginErrorReadLine : unit -&gt; unit" Usage="process.BeginErrorReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-195">アプリケーションのリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームで、非同期読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-195">Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-196">ストリーム<xref:System.Diagnostics.Process.StandardError%2A>は、同期的または非同期的に読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-196">The <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="5ba80-197">、、などのメソッドは、プロセスのエラー出力ストリームに対して同期読み取り操作を実行します。 <xref:System.IO.StreamReader.ReadToEnd%2A>  <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.IO.StreamReader.Read%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-197">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process.</span></span> <span data-ttu-id="5ba80-198">これらの同期読み取り操作は、関連付けら<xref:System.Diagnostics.Process>れている<xref:System.Diagnostics.Process.StandardError%2A>ストリームへの書き込みが完了するまで、またはストリームを閉じるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-198">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="5ba80-199">これに対し<xref:System.Diagnostics.Process.BeginErrorReadLine%2A> <xref:System.Diagnostics.Process.StandardError%2A>て、は、ストリームに対して非同期の読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-199">In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="5ba80-200">このメソッドは、ストリーム出力に対して指定されたイベントハンドラーを有効にし、すぐに呼び出し元に戻します。これにより、ストリーム出力がイベントハンドラーに送られている間に他の処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-200">This method enables the designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="5ba80-201">に<xref:System.Diagnostics.Process.StandardError%2A>対して非同期の読み取り操作を実行するに<xref:System.Diagnostics.Process>は、次の手順に従います。</span><span class="sxs-lookup"><span data-stu-id="5ba80-201">Follow these steps to perform asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A> for a <xref:System.Diagnostics.Process> :</span></span>  
  
1.  <span data-ttu-id="5ba80-202"><xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> を `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-202">Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false`.</span></span>  
  
2.  <span data-ttu-id="5ba80-203"><xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> を `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-203">Set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> to `true`.</span></span>  
  
3.  <span data-ttu-id="5ba80-204">イベントにイベントハンドラーを<xref:System.Diagnostics.Process.ErrorDataReceived>追加します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-204">Add your event handler to the <xref:System.Diagnostics.Process.ErrorDataReceived> event.</span></span> <span data-ttu-id="5ba80-205">イベントハンドラーは、 <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType>デリゲートシグネチャと一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-205">The event handler must match the <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> delegate signature.</span></span>  
  
4.  <span data-ttu-id="5ba80-206">を<xref:System.Diagnostics.Process>開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-206">Start the <xref:System.Diagnostics.Process>.</span></span>  
  
5.  <span data-ttu-id="5ba80-207"><xref:System.Diagnostics.Process.BeginErrorReadLine%2A> の <xref:System.Diagnostics.Process> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-207">Call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> for the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="5ba80-208">この呼び出しは、で非同期読み取り<xref:System.Diagnostics.Process.StandardError%2A>操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-208">This call starts asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A>.</span></span>  
  
 <span data-ttu-id="5ba80-209">非同期読み取り操作を開始すると、関連付けられている<xref:System.Diagnostics.Process>が<xref:System.Diagnostics.Process.StandardError%2A>ストリームにテキスト行を書き込むたびに、イベントハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-209">When asynchronous read operations start, the event handler is called each time the associated <xref:System.Diagnostics.Process> writes a line of text to its <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="5ba80-210">を呼び出す<xref:System.Diagnostics.Process.CancelErrorRead%2A>ことによって、非同期の読み取り操作を取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-210">You can cancel an asynchronous read operation by calling <xref:System.Diagnostics.Process.CancelErrorRead%2A>.</span></span> <span data-ttu-id="5ba80-211">読み取り操作は、呼び出し元またはイベントハンドラーによって取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-211">The read operation can be canceled by the caller or by the event handler.</span></span> <span data-ttu-id="5ba80-212">をキャンセルした後、 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>を再度呼び出して、非同期の読み取り操作を再開できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-212">After canceling, you can call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> again to resume asynchronous read operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-213">リダイレクトされたストリームでは、非同期および同期読み取り操作を混在させることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-213">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="5ba80-214">の<xref:System.Diagnostics.Process>リダイレクトされたストリームを非同期モードまたは同期モードで開くと、そのストリームのすべての読み取り操作は同じモードである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-214">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="5ba80-215">たとえば、 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> ストリーム <xref:System.Diagnostics.Process.StandardError%2A> でを<xref:System.IO.StreamReader.ReadLine%2A>呼び出すことはできません。また、逆の場合も同様です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-215">For example, do not follow <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardError%2A> stream, or vice versa.</span></span> <span data-ttu-id="5ba80-216">ただし、異なるモードの2つの異なるストリームを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-216">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="5ba80-217">たとえば、を呼び出し<xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 、 <xref:System.Diagnostics.Process.StandardOutput%2A>ストリームに対して<xref:System.IO.StreamReader.ReadLine%2A>を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-217">For example, you can call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-218">次の例では`net view` 、コマンドを使用して、リモートコンピューター上の使用可能なネットワークリソースを一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-218">The following example uses the `net view` command to list the available network resources on a remote computer.</span></span> <span data-ttu-id="5ba80-219">ユーザーは、ターゲットコンピューターの名前をコマンドライン引数として指定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-219">The user supplies the target computer name as a command-line argument.</span></span> <span data-ttu-id="5ba80-220">ユーザーは、エラー出力のファイル名を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-220">The user can also supply a file name for error output.</span></span> <span data-ttu-id="5ba80-221">この例では、net コマンドの出力を収集し、プロセスが終了するまで待機してから、出力結果をコンソールに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-221">The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</span></span> <span data-ttu-id="5ba80-222">ユーザーがオプションのエラーファイルを指定した場合、この例ではエラーがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-222">If the user supplies the optional error file, the example writes errors to the file.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#2](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/net_async.cpp#2)]
 [!code-csharp[Process_AsyncStreams#2](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/net_async.cs#2)]
 [!code-vb[Process_AsyncStreams#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/net_async.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-223"><see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> プロパティが <see langword="false" /> である。</span><span class="sxs-lookup"><span data-stu-id="5ba80-223">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is <see langword="false" />.</span></span>  
  
<span data-ttu-id="5ba80-224">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-224">-or-</span></span> 
<span data-ttu-id="5ba80-225"><see cref="P:System.Diagnostics.Process.StandardError" /> ストリームで非同期読み取り操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-225">An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</span></span>  
  
<span data-ttu-id="5ba80-226">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-226">-or-</span></span> 
<span data-ttu-id="5ba80-227"><see cref="P:System.Diagnostics.Process.StandardError" /> ストリームは、同期読み取り操作によって使用されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-227">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been used by a synchronous read operation.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-228">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-228">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-229">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-229">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
        <altmember cref="M:System.Diagnostics.Process.CancelErrorRead" />
      </Docs>
    </Member>
    <Member MemberName="BeginOutputReadLine">
      <MemberSignature Language="C#" Value="public void BeginOutputReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginOutputReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.BeginOutputReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginOutputReadLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginOutputReadLine();" />
      <MemberSignature Language="F#" Value="member this.BeginOutputReadLine : unit -&gt; unit" Usage="process.BeginOutputReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-230">アプリケーションのリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームで、非同期読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-230">Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-231">ストリーム<xref:System.Diagnostics.Process.StandardOutput%2A>は、同期的または非同期的に読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-231">The <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="5ba80-232">、、などのメソッドは、プロセスの出力ストリームに対して同期読み取り操作を実行します。 <xref:System.IO.StreamReader.ReadToEnd%2A>  <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.IO.StreamReader.Read%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-232">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process.</span></span> <span data-ttu-id="5ba80-233">これらの同期読み取り操作は、関連付けら<xref:System.Diagnostics.Process>れている<xref:System.Diagnostics.Process.StandardOutput%2A>ストリームへの書き込みが完了するまで、またはストリームを閉じるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-233">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="5ba80-234">これに対し<xref:System.Diagnostics.Process.BeginOutputReadLine%2A> <xref:System.Diagnostics.Process.StandardOutput%2A>て、は、ストリームに対して非同期の読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-234">In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="5ba80-235">このメソッドは、ストリーム出力に対して指定されたイベントハンドラーを有効にし、すぐに呼び出し元に戻します。これにより、ストリーム出力がイベントハンドラーに送られている間に他の処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-235">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="5ba80-236">に<xref:System.Diagnostics.Process.StandardOutput%2A>対して非同期の読み取り操作を実行するに<xref:System.Diagnostics.Process>は、次の手順に従います。</span><span class="sxs-lookup"><span data-stu-id="5ba80-236">Follow these steps to perform asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A> for a <xref:System.Diagnostics.Process> :</span></span>  
  
1.  <span data-ttu-id="5ba80-237"><xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> を `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-237">Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false`.</span></span>  
  
2.  <span data-ttu-id="5ba80-238"><xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> を `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-238">Set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> to `true`.</span></span>  
  
3.  <span data-ttu-id="5ba80-239">イベントにイベントハンドラーを<xref:System.Diagnostics.Process.OutputDataReceived>追加します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-239">Add your event handler to the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="5ba80-240">イベントハンドラーは、 <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType>デリゲートシグネチャと一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-240">The event handler must match the <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> delegate signature.</span></span>  
  
4.  <span data-ttu-id="5ba80-241">を<xref:System.Diagnostics.Process>開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-241">Start the <xref:System.Diagnostics.Process>.</span></span>  
  
5.  <span data-ttu-id="5ba80-242"><xref:System.Diagnostics.Process.BeginOutputReadLine%2A> の <xref:System.Diagnostics.Process> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-242">Call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> for the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="5ba80-243">この呼び出しは、で非同期読み取り<xref:System.Diagnostics.Process.StandardOutput%2A>操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-243">This call starts asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A>.</span></span>  
  
 <span data-ttu-id="5ba80-244">非同期読み取り操作を開始すると、関連付けられている<xref:System.Diagnostics.Process>が<xref:System.Diagnostics.Process.StandardOutput%2A>ストリームにテキスト行を書き込むたびに、イベントハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-244">When asynchronous read operations start, the event handler is called each time the associated <xref:System.Diagnostics.Process> writes a line of text to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
 <span data-ttu-id="5ba80-245">を呼び出す<xref:System.Diagnostics.Process.CancelOutputRead%2A>ことによって、非同期の読み取り操作を取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-245">You can cancel an asynchronous read operation by calling <xref:System.Diagnostics.Process.CancelOutputRead%2A>.</span></span> <span data-ttu-id="5ba80-246">読み取り操作は、呼び出し元またはイベントハンドラーによって取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-246">The read operation can be canceled by the caller or by the event handler.</span></span> <span data-ttu-id="5ba80-247">をキャンセルした後、 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>を再度呼び出して、非同期の読み取り操作を再開できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-247">After canceling, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> again to resume asynchronous read operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-248">リダイレクトされたストリームでは、非同期および同期読み取り操作を混在させることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-248">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="5ba80-249">の<xref:System.Diagnostics.Process>リダイレクトされたストリームを非同期モードまたは同期モードで開くと、そのストリームのすべての読み取り操作は同じモードである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-249">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="5ba80-250">たとえば、 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> ストリーム <xref:System.Diagnostics.Process.StandardOutput%2A> でを<xref:System.IO.StreamReader.ReadLine%2A>呼び出すことはできません。また、逆の場合も同様です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-250">For example, do not follow <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or vice versa.</span></span> <span data-ttu-id="5ba80-251">ただし、異なるモードの2つの異なるストリームを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-251">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="5ba80-252">たとえば、を呼び出し<xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 、 <xref:System.Diagnostics.Process.StandardError%2A>ストリームに対して<xref:System.IO.StreamReader.ReadLine%2A>を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-252">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-253">次の例は、 <xref:System.Diagnostics.Process.StandardOutput%2A> `sort`コマンドのリダイレクトされたストリームで非同期の読み取り操作を実行する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-253">The following example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `sort` command.</span></span> <span data-ttu-id="5ba80-254">`sort`コマンドは、テキスト入力の読み取りと並べ替えを行うコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-254">The `sort` command is a console application that reads and sorts text input.</span></span>  
  
 <span data-ttu-id="5ba80-255">この例では、イベントハンドラーの`SortOutputHandler`イベントデリゲートを作成し、イベント<xref:System.Diagnostics.Process.OutputDataReceived>に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-255">The example creates an event delegate for the `SortOutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="5ba80-256">イベントハンドラーは、リダイレクト<xref:System.Diagnostics.Process.StandardOutput%2A>されたストリームからテキスト行を受け取り、テキストを書式設定して、画面にテキストを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-256">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and writes the text to the screen.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-257"><see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> プロパティが <see langword="false" /> である。</span><span class="sxs-lookup"><span data-stu-id="5ba80-257">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> property is <see langword="false" />.</span></span>  
  
<span data-ttu-id="5ba80-258">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-258">-or-</span></span> 
<span data-ttu-id="5ba80-259"><see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームで非同期読み取り操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-259">An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</span></span>  
  
<span data-ttu-id="5ba80-260">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-260">-or-</span></span> 
<span data-ttu-id="5ba80-261"><see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームは、同期読み取り操作によって使用されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-261">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been used by a synchronous read operation.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-262">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-262">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-263">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-263">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
        <altmember cref="M:System.Diagnostics.Process.CancelOutputRead" />
      </Docs>
    </Member>
    <Member MemberName="CancelErrorRead">
      <MemberSignature Language="C#" Value="public void CancelErrorRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelErrorRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CancelErrorRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelErrorRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelErrorRead();" />
      <MemberSignature Language="F#" Value="member this.CancelErrorRead : unit -&gt; unit" Usage="process.CancelErrorRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-264">アプリケーションのリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームで、非同期読み取り操作をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-264">Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of an application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-265"><xref:System.Diagnostics.Process.BeginErrorReadLine%2A><xref:System.Diagnostics.Process.StandardError%2A>ストリームに対して非同期の読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-265"><xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts an asynchronous read operation on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="5ba80-266"><xref:System.Diagnostics.Process.CancelErrorRead%2A>非同期の読み取り操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-266"><xref:System.Diagnostics.Process.CancelErrorRead%2A> ends the asynchronous read operation.</span></span>  
  
 <span data-ttu-id="5ba80-267">をキャンセルした後、を再度呼び出し<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>て、非同期の読み取り操作を再開できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-267">After canceling, you can resume the asynchronous read operation by calling <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> again.</span></span>  
  
 <span data-ttu-id="5ba80-268">を呼び出す<xref:System.Diagnostics.Process.CancelErrorRead%2A>と、実行中のすべての<xref:System.Diagnostics.Process.StandardError%2A>読み取り操作が完了し、イベントハンドラーが無効になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-268">When you call <xref:System.Diagnostics.Process.CancelErrorRead%2A>, all in-progress read operations for <xref:System.Diagnostics.Process.StandardError%2A> are completed and then the event handler is disabled.</span></span> <span data-ttu-id="5ba80-269">以降にリダイレクトされる<xref:System.Diagnostics.Process.StandardError%2A>すべての出力は失われます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-269">All further redirected output to <xref:System.Diagnostics.Process.StandardError%2A> will be lost.</span></span> <span data-ttu-id="5ba80-270">の呼び出し<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>でイベントハンドラーを再び有効にすると、非同期の読み取り操作が再開されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-270">If you re-enable the event handler with a call to <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>, asynchronous read operations resume.</span></span> <span data-ttu-id="5ba80-271">非同期の読み取り操作を再開する前にイベントハンドラーを変更する場合は、新しいイベントハンドラーを追加する前に既存のイベントハンドラーを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-271">If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</span></span>  
  
```csharp  
// At this point the DataReceivedEventHandler(ErrorHandler1)   
// has executed a CancelErrorRead.  
  
// Remove the prior event handler.  
process.ErrorDataReceived -=   
    new DataReceivedEventHandler(ErrorHandler1);  
  
// Register a new event handler.  
process.ErrorDataReceived +=   
    new DataReceivedEventHandler(ErrorHandler2);  
  
// Call the corresponding BeginErrorReadLine.  
process.BeginErrorReadLine();  
```  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-272">リダイレクト<xref:System.Diagnostics.Process.StandardError%2A>されたストリームには、非同期および同期読み取り操作を混在させることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-272">You cannot mix asynchronous and synchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="5ba80-273">の<xref:System.Diagnostics.Process>リダイレクトされたストリームを非同期モードまたは同期モードで開くと、そのストリームのすべての読み取り操作は同じモードである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-273">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="5ba80-274">で非同期の<xref:System.Diagnostics.Process.StandardError%2A>読み取り操作をキャンセルしてから、再度ストリームから読み取る必要がある場合は、 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>を使用して非同期の読み取り操作を再開する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-274">If you cancel an asynchronous read operation on <xref:System.Diagnostics.Process.StandardError%2A> and then need to read from the stream again, you must use <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> to resume asynchronous read operations.</span></span> <span data-ttu-id="5ba80-275"><xref:System.Diagnostics.Process.CancelErrorRead%2A> <xref:System.Diagnostics.Process.StandardError%2A> 、 、 <xref:System.IO.StreamReader.ReadLine%2A> などの同期読み取りメソッドを呼び出さないでください。 <xref:System.IO.StreamReader.ReadToEnd%2A>  <xref:System.IO.StreamReader.Read%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-275">Do not follow <xref:System.Diagnostics.Process.CancelErrorRead%2A> with a call to the synchronous read methods of <xref:System.Diagnostics.Process.StandardError%2A> such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, or <xref:System.IO.StreamReader.ReadToEnd%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-276">次の例では`nmake` 、ユーザーが指定した引数を使用してコマンドを開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-276">The following example starts the `nmake` command with user supplied arguments.</span></span> <span data-ttu-id="5ba80-277">エラーストリームと出力ストリームは非同期に読み込まれます。収集されたテキスト行は、コンソールに表示されるだけでなく、ログファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-277">The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</span></span> <span data-ttu-id="5ba80-278">コマンドの出力が指定された行数を超えた場合、非同期の読み取り操作は取り消されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-278">If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#3](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/nmake_async.cpp#3)]
 [!code-csharp[Process_AsyncStreams#3](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/nmake_async.cs#3)]
 [!code-vb[Process_AsyncStreams#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/nmake_async.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-279"><see cref="P:System.Diagnostics.Process.StandardError" /> ストリームは、非同期読み取り操作では有効になっていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-279">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream is not enabled for asynchronous read operations.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-280">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-280">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-281">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-281">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.BeginErrorReadLine" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CancelOutputRead">
      <MemberSignature Language="C#" Value="public void CancelOutputRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelOutputRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CancelOutputRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelOutputRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelOutputRead();" />
      <MemberSignature Language="F#" Value="member this.CancelOutputRead : unit -&gt; unit" Usage="process.CancelOutputRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-282">アプリケーションのリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームで、非同期読み取り操作をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-282">Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of an application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-283"><xref:System.Diagnostics.Process.BeginOutputReadLine%2A><xref:System.Diagnostics.Process.StandardOutput%2A>ストリームに対して非同期の読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-283"><xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts an asynchronous read operation on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="5ba80-284"><xref:System.Diagnostics.Process.CancelOutputRead%2A>非同期の読み取り操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-284"><xref:System.Diagnostics.Process.CancelOutputRead%2A> ends the asynchronous read operation.</span></span>  
  
 <span data-ttu-id="5ba80-285">をキャンセルした後、を再度呼び出し<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>て、非同期の読み取り操作を再開できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-285">After canceling, you can resume asynchronous read operations by calling <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> again.</span></span>  
  
 <span data-ttu-id="5ba80-286">を呼び出す<xref:System.Diagnostics.Process.CancelOutputRead%2A>と、実行中のすべての<xref:System.Diagnostics.Process.StandardOutput%2A>読み取り操作が完了し、イベントハンドラーが無効になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-286">When you call <xref:System.Diagnostics.Process.CancelOutputRead%2A>, all in-progress read operations for <xref:System.Diagnostics.Process.StandardOutput%2A> are completed and then the event handler is disabled.</span></span> <span data-ttu-id="5ba80-287">以降に<xref:System.Diagnostics.Process.StandardOutput%2A>リダイレクトされるすべての出力は、バッファーに保存されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-287">All further redirected output to <xref:System.Diagnostics.Process.StandardOutput%2A> is saved in a buffer.</span></span> <span data-ttu-id="5ba80-288">の呼び出し<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>を使用してイベントハンドラーを再度有効にすると、保存された出力がイベントハンドラーに送信され、非同期の読み取り操作が再開されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-288">If you re-enable the event handler with a call to <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>, the saved output is sent to the event handler and asynchronous read operations resume.</span></span> <span data-ttu-id="5ba80-289">非同期の読み取り操作を再開する前にイベントハンドラーを変更する場合は、新しいイベントハンドラーを追加する前に既存のイベントハンドラーを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-289">If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</span></span>  
  
```csharp  
// At this point the DataReceivedEventHandler(OutputHandler1)   
// has executed a CancelOutputRead.  
  
// Remove the prior event handler.  
process.OutputDataReceived -=   
    new DataReceivedEventHandler(OutputHandler1);  
  
// Register a new event handler.  
process.OutputDataReceived +=   
    new DataReceivedEventHandler(OutputHandler2);  
  
// Call the corresponding BeginOutputReadLine.  
process.BeginOutputReadLine();  
```  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-290">リダイレクト<xref:System.Diagnostics.Process.StandardOutput%2A>されたストリームには、非同期および同期読み取り操作を混在させることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-290">You cannot mix asynchronous and synchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="5ba80-291">の<xref:System.Diagnostics.Process>リダイレクトされたストリームを非同期モードまたは同期モードで開くと、そのストリームのすべての読み取り操作は同じモードである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-291">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="5ba80-292">で非同期の<xref:System.Diagnostics.Process.StandardOutput%2A>読み取り操作をキャンセルしてから、再度ストリームから読み取る必要がある場合は、 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>を使用して非同期の読み取り操作を再開する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-292">If you cancel an asynchronous read operation on <xref:System.Diagnostics.Process.StandardOutput%2A> and then need to read from the stream again, you must use <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> to resume asynchronous read operations.</span></span> <span data-ttu-id="5ba80-293"><xref:System.Diagnostics.Process.CancelOutputRead%2A> <xref:System.Diagnostics.Process.StandardOutput%2A> 、 、 <xref:System.IO.StreamReader.ReadLine%2A> などの同期読み取りメソッドを呼び出さないでください。 <xref:System.IO.StreamReader.ReadToEnd%2A>  <xref:System.IO.StreamReader.Read%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-293">Do not follow <xref:System.Diagnostics.Process.CancelOutputRead%2A> with a call to the synchronous read methods of <xref:System.Diagnostics.Process.StandardOutput%2A> such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, or <xref:System.IO.StreamReader.ReadToEnd%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-294">次の例では`nmake` 、ユーザーが指定した引数を使用してコマンドを開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-294">The following example starts the `nmake` command with user supplied arguments.</span></span> <span data-ttu-id="5ba80-295">エラーストリームと出力ストリームは非同期に読み込まれます。収集されたテキスト行は、コンソールに表示されるだけでなく、ログファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-295">The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</span></span> <span data-ttu-id="5ba80-296">コマンドの出力が指定された行数を超えた場合、非同期の読み取り操作は取り消されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-296">If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#3](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/nmake_async.cpp#3)]
 [!code-csharp[Process_AsyncStreams#3](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/nmake_async.cs#3)]
 [!code-vb[Process_AsyncStreams#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/nmake_async.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-297"><see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームは、非同期読み取り操作では有効になっていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-297">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream is not enabled for asynchronous read operations.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-298">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-298">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-299">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-299">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.BeginOutputReadLine" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="process.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-300">このコンポーネントに関連付けられているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-300">Frees all the resources that are associated with this component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-301"><xref:System.Diagnostics.Process.Close%2A>メソッドを使用すると、プロセスは待機している場合、終了の待機を停止し、プロセスハンドルを閉じて、プロセス固有のプロパティをクリアします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-301">The <xref:System.Diagnostics.Process.Close%2A> method causes the process to stop waiting for exit if it was waiting, closes the process handle, and clears process-specific properties.</span></span> <span data-ttu-id="5ba80-302"><xref:System.Diagnostics.Process.Close%2A>は、外部で参照されている場合に、標準の出力、入力、およびエラーリーダーとライターを閉じません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-302"><xref:System.Diagnostics.Process.Close%2A> does not close the standard output, input, and error readers and writers in case they are being referenced externally.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-303"><xref:System.Diagnostics.Process.Dispose%2A> メソッドは <xref:System.Diagnostics.Process.Close%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-303">The <xref:System.Diagnostics.Process.Dispose%2A> method calls <xref:System.Diagnostics.Process.Close%2A>.</span></span> <span data-ttu-id="5ba80-304">ブロックにオブジェクトを配置すると、を呼び出す<xref:System.Diagnostics.Process.Close%2A>必要なくリソースが解放されます。 <xref:System.Diagnostics.Process> `using`</span><span class="sxs-lookup"><span data-stu-id="5ba80-304">Placing the <xref:System.Diagnostics.Process> object in a `using` block disposes of resources without the need to call <xref:System.Diagnostics.Process.Close%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-305">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-305">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-306">次に、関連付けられたプロセスの物理メモリ使用量を、最大で10秒間、2秒間隔で取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-306">It then retrieves the physical memory usage of the associated process at 2-second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="5ba80-307">この例では、10秒が経過する前にプロセスが終了するかどうかを検出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-307">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="5ba80-308">この例では、10秒後にプロセスがまだ実行されている場合、プロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-308">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-309">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-309">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-310">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-310">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CloseMainWindow">
      <MemberSignature Language="C#" Value="public bool CloseMainWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CloseMainWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CloseMainWindow" />
      <MemberSignature Language="VB.NET" Value="Public Function CloseMainWindow () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CloseMainWindow();" />
      <MemberSignature Language="F#" Value="member this.CloseMainWindow : unit -&gt; bool" Usage="process.CloseMainWindow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-311">メイン ウィンドウにクローズ メッセージを送信して、ユーザー インターフェイスがあるプロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-311">Closes a process that has a user interface by sending a close message to its main window.</span></span></summary>
        <returns><span data-ttu-id="5ba80-312">クローズ メッセージが正常に送信された場合は <see langword="true" />。関連付けられたプロセスにメイン ウィンドウがない場合、またはメイン ウィンドウが使用できない場合 (モーダル ダイアログ ボックスが表示されているときなど) は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-312"><see langword="true" /> if the close message was successfully sent; <see langword="false" /> if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-313">プロセスが実行されると、そのメッセージループは待機状態になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-313">When a process is executing, its message loop is in a wait state.</span></span> <span data-ttu-id="5ba80-314">メッセージループは、Windows メッセージがオペレーティングシステムによってプロセスに送信されるたびに実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-314">The message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="5ba80-315">を<xref:System.Diagnostics.Process.CloseMainWindow%2A>呼び出すと、メインウィンドウを閉じるための要求が送信されます。このウィンドウは、適切な形式のアプリケーションで、子ウィンドウを閉じ、アプリケーションに対して実行中のすべてのメッセージループを取り消します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-315">Calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> sends a request to close the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</span></span> <span data-ttu-id="5ba80-316">を呼び出し<xref:System.Diagnostics.Process.CloseMainWindow%2A>てプロセスを終了する要求では、アプリケーションの終了は強制されません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-316">The request to exit the process by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> does not force the application to quit.</span></span> <span data-ttu-id="5ba80-317">アプリケーションは、終了する前にユーザーの確認を要求することも、終了を拒否することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-317">The application can ask for user verification before quitting, or it can refuse to quit.</span></span> <span data-ttu-id="5ba80-318">アプリケーションを強制的に終了するには、 <xref:System.Diagnostics.Process.Kill%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-318">To force the application to quit, use the <xref:System.Diagnostics.Process.Kill%2A> method.</span></span> <span data-ttu-id="5ba80-319">の<xref:System.Diagnostics.Process.CloseMainWindow%2A>動作は、[システム] メニューを使用してアプリケーションのメインウィンドウを閉じるユーザーの動作と同じです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-319">The behavior of <xref:System.Diagnostics.Process.CloseMainWindow%2A> is identical to that of a user closing an application's main window using the system menu.</span></span> <span data-ttu-id="5ba80-320">そのため、メインウィンドウを閉じてプロセスを終了する要求では、アプリケーションが直ちに終了することはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-320">Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</span></span>  
  
 <span data-ttu-id="5ba80-321">プロセスによって編集されたデータまたはプロセスに割り当てられた<xref:System.Diagnostics.Process.Kill%2A>リソースは、を呼び出すと失われることがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-321">Data edited by the process or resources allocated to the process can be lost if you call <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="5ba80-322"><xref:System.Diagnostics.Process.Kill%2A>プロセスが異常終了する原因となり、必要な場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-322"><xref:System.Diagnostics.Process.Kill%2A> causes an abnormal process termination, and should be used only when necessary.</span></span> <span data-ttu-id="5ba80-323"><xref:System.Diagnostics.Process.CloseMainWindow%2A>プロセスの正常終了を有効にし、すべてのウィンドウを閉じます。そのため、インターフェイスを備えたアプリケーションに適しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-323"><xref:System.Diagnostics.Process.CloseMainWindow%2A> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</span></span> <span data-ttu-id="5ba80-324">が<xref:System.Diagnostics.Process.CloseMainWindow%2A>失敗した場合は<xref:System.Diagnostics.Process.Kill%2A> 、を使用してプロセスを終了できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-324">If <xref:System.Diagnostics.Process.CloseMainWindow%2A> fails, you can use <xref:System.Diagnostics.Process.Kill%2A> to terminate the process.</span></span> <span data-ttu-id="5ba80-325"><xref:System.Diagnostics.Process.Kill%2A>は、グラフィカルインターフェイスを持たないプロセスを終了する唯一の方法です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-325"><xref:System.Diagnostics.Process.Kill%2A> is the only way to terminate processes that do not have graphical interfaces.</span></span>  
  
 <span data-ttu-id="5ba80-326">は、 <xref:System.Diagnostics.Process.Kill%2A> <xref:System.Diagnostics.Process.CloseMainWindow%2A>ローカルコンピューターで実行されているプロセスに対してのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-326">You can call <xref:System.Diagnostics.Process.Kill%2A> and <xref:System.Diagnostics.Process.CloseMainWindow%2A> only for processes that are running on the local computer.</span></span> <span data-ttu-id="5ba80-327">リモートコンピューター上のプロセスを終了させることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-327">You cannot cause processes on remote computers to exit.</span></span> <span data-ttu-id="5ba80-328">リモートコンピューター上で実行されているプロセスの情報のみを表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-328">You can only view information for processes running on remote computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-329">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-329">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-330">次に、関連付けられたプロセスの物理メモリ使用量を2秒間隔で最大10秒間取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-330">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="5ba80-331">この例では、10秒が経過する前にプロセスが終了するかどうかを検出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-331">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="5ba80-332">この例では、10秒後にプロセスがまだ実行されている場合、プロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-332">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-333">プロセスは既に終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-333">The process has already exited.</span></span>  
  
<span data-ttu-id="5ba80-334">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-334">-or-</span></span> 
<span data-ttu-id="5ba80-335">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-335">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-336">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-336">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-337">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-337">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="process.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="process.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="5ba80-338">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-338"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5ba80-339">このプロセスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-339">Release all resources used by this process.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableRaisingEvents : bool with get, set" Usage="System.Diagnostics.Process.EnableRaisingEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Whether the process component should watch for the associated process to exit, and raise the Exited event.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessEnableRaisingEvents")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-340">プロセスが終了したときに、<see cref="E:System.Diagnostics.Process.Exited" /> イベントを発生させるかどうかを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-340">Gets or sets whether the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised when the process terminates.</span></span></summary>
        <value><span data-ttu-id="5ba80-341">正常終了または <see cref="M:System.Diagnostics.Process.Kill" /> の呼び出しによって関連付けられたプロセスが終了したときに <see cref="E:System.Diagnostics.Process.Exited" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-341"><see langword="true" /> if the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised when the associated process is terminated (through either an exit or a call to <see cref="M:System.Diagnostics.Process.Kill" />); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="5ba80-342">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-342">The default is <see langword="false" />.</span></span> <span data-ttu-id="5ba80-343">の値が<see cref="E:System.Diagnostics.Process.Exited" /> <see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /> <see cref="P:System.Diagnostics.Process.HasExited" />の場合、またはユーザーがチェックを実行する前にプロセスが終了した場合でも、イベントが発生することに注意してください。 <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="5ba80-343">Note that the <see cref="E:System.Diagnostics.Process.Exited" /> event is raised even if the value of <see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /> is <see langword="false" /> when the process exits during or before the user performs a <see cref="P:System.Diagnostics.Process.HasExited" /> check.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="5ba80-344">プロパティ<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>は、オペレーティングシステムがプロセスをシャットダウンしたときにコンポーネントに通知する必要があるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-344">The <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property suggests whether the component should be notified when the operating system has shut down a process.</span></span> <span data-ttu-id="5ba80-345">プロパティ<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>は、プロセスが終了したことをアプリケーションに通知するために、非同期処理で使用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-345">The <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property is used in asynchronous processing to notify your application that a process has exited.</span></span> <span data-ttu-id="5ba80-346">アプリケーションが終了イベント (終了イベントが発生するまでアプリケーションの処理を中断する) を同期的に待機するには、 <xref:System.Diagnostics.Process.WaitForExit%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-346">To force your application to synchronously wait for an exit event (which interrupts processing of the application until the exit event has occurred), use the <xref:System.Diagnostics.Process.WaitForExit%2A> method.</span></span>

> [!NOTE]
> <span data-ttu-id="5ba80-347">Visual Studio を使用していて、プロジェクト内<xref:System.Diagnostics.Process>のコンポーネントをダブルクリックする<xref:System.Diagnostics.Process.Exited>と、イベントデリゲートとイベントハンドラーが自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-347">If you're using Visual Studio and double-click a <xref:System.Diagnostics.Process> component in your project, an <xref:System.Diagnostics.Process.Exited> event delegate and event handler are automatically generated.</span></span> <span data-ttu-id="5ba80-348">追加のコードに<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>よって`false`、プロパティがに設定されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-348">Additional code sets the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property to `false`.</span></span> <span data-ttu-id="5ba80-349">関連付けられたプロセスが`true`終了したときにイベントハンドラーが実行されるようにするには、このプロパティをに変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-349">You must change this property to `true` for your event handler to execute when the associated process exits.</span></span>

<span data-ttu-id="5ba80-350">コンポーネント<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>の値が`true`の場合、 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> または `false` がで、コンポーネントによってチェックが呼び出された場合、コンポーネントは、関連付けられているプロセスの管理情報にアクセスできます。 <xref:System.Diagnostics.Process.HasExited%2A> オペレーティングシステムによって保存されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-350">If the component's <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> value is `true`, or when <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> is `false` and a <xref:System.Diagnostics.Process.HasExited%2A> check is invoked by the component, the component can access the administrative information for the associated process, which remains stored by the operating system.</span></span> <span data-ttu-id="5ba80-351">このような情報<xref:System.Diagnostics.Process.ExitTime%2A>には<xref:System.Diagnostics.Process.ExitCode%2A>、およびが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-351">Such information includes the <xref:System.Diagnostics.Process.ExitTime%2A> and the <xref:System.Diagnostics.Process.ExitCode%2A>.</span></span>

<span data-ttu-id="5ba80-352">関連付けられたプロセスが終了<xref:System.Diagnostics.Process.Handle%2A>すると、コンポーネントのは既存のプロセスリソースを参照しなくなります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-352">After the associated process exits, the <xref:System.Diagnostics.Process.Handle%2A> of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="5ba80-353">代わりに、プロセスリソースに関するオペレーティングシステムの情報にアクセスするためにのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-353">Instead, it can only be used to access the operating system's information about the process resource.</span></span> <span data-ttu-id="5ba80-354">オペレーティングシステムは、コンポーネントによって<xref:System.Diagnostics.Process>解放されていないプロセスを終了するハンドルがあることを認識しているので、と<xref:System.Diagnostics.Process.Handle%2A>の<xref:System.Diagnostics.Process.ExitTime%2A>情報をメモリに保持します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-354">The operating system is aware that there are handles to exited processes that haven't been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory.</span></span>

<span data-ttu-id="5ba80-355">プロセスを終了するための監視に関連するコストが発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-355">There's a cost associated with watching for a process to exit.</span></span> <span data-ttu-id="5ba80-356">が<xref:System.Diagnostics.Process.EnableRaisingEvents%2A> <xref:System.Diagnostics.Process.Exited>の場合、関連付けられたプロセスが終了するとイベントが発生します。 `true`</span><span class="sxs-lookup"><span data-stu-id="5ba80-356">If <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> is `true`, the <xref:System.Diagnostics.Process.Exited> event is raised when the associated process terminates.</span></span> <span data-ttu-id="5ba80-357"><xref:System.Diagnostics.Process.Exited>イベントのプロシージャは、その時点で実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-357">Your procedures for the <xref:System.Diagnostics.Process.Exited> event run at that time.</span></span>

<span data-ttu-id="5ba80-358">場合によっては、アプリケーションはプロセスを開始しますが、そのクロージャの通知は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-358">Sometimes, your application starts a process but doesn't require notification of its closure.</span></span> <span data-ttu-id="5ba80-359">たとえば、アプリケーションでメモ帳を起動して、ユーザーがテキスト編集を実行することを許可し、メモ帳アプリケーションをそれ以上使用しないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-359">For example, your application can start Notepad to allow the user to perform text editing but make no further use of the Notepad application.</span></span> <span data-ttu-id="5ba80-360">プロセスが終了したときに通知されないようにすることもできます。これは、アプリケーションの継続操作には関係がないためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-360">You can choose to avoid notification when the process exits because it's not relevant to the continued operation of your application.</span></span> <span data-ttu-id="5ba80-361">を<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>に`false`設定すると、システムリソースを節約できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-361">Setting <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> to `false` can save system resources.</span></span>

## Examples  
<span data-ttu-id="5ba80-362">次のコード例では、ファイルを出力するプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-362">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="5ba80-363">このメソッドは<xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 、プロパティを設定して、プロセス<xref:System.Diagnostics.Process.Exited>が終了時にイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-363">It sets the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property to cause the process to raise the <xref:System.Diagnostics.Process.Exited> event when it exits.</span></span> <span data-ttu-id="5ba80-364">イベント<xref:System.Diagnostics.Process.Exited>ハンドラーは、プロセス情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-364">The <xref:System.Diagnostics.Process.Exited> event handler displays process information.</span></span>

[!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]   
[!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]   
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-365">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-365">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-366">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-366">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
      </Docs>
    </Member>
    <Member MemberName="EnterDebugMode">
      <MemberSignature Language="C#" Value="public static void EnterDebugMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnterDebugMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.EnterDebugMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnterDebugMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnterDebugMode();" />
      <MemberSignature Language="F#" Value="static member EnterDebugMode : unit -&gt; unit" Usage="System.Diagnostics.Process.EnterDebugMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-367">現在のスレッドのネイティブ プロパティ <see langword="SeDebugPrivilege" /> を有効にすることにより、<see cref="T:System.Diagnostics.Process" /> コンポーネントを、特殊なモードで実行されているオペレーティング システム プロセスと対話する状態にします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-367">Puts a <see cref="T:System.Diagnostics.Process" /> component in state to interact with operating system processes that run in a special mode by enabling the native property <see langword="SeDebugPrivilege" /> on the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-368">一部のオペレーティングシステムプロセスは、特別なモードで実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-368">Some operating system processes run in a special mode.</span></span> <span data-ttu-id="5ba80-369">コンポーネントでを呼び出し<xref:System.Diagnostics.Process.EnterDebugMode%2A>ていない限り、これらのプロセスのプロパティを読み取ろうとしたり、これらのプロセスにアタッチしたりすることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-369">Attempting to read properties of or attach to these processes is not possible unless you have called <xref:System.Diagnostics.Process.EnterDebugMode%2A> on the component.</span></span> <span data-ttu-id="5ba80-370">特別<xref:System.Diagnostics.Process.LeaveDebugMode%2A>なモードで実行されるこれらのプロセスにアクセスする必要がなくなったときに、を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-370">Call <xref:System.Diagnostics.Process.LeaveDebugMode%2A> when you no longer need access to these processes that run in special mode.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-371">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-371">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-372">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-372">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.LeaveDebugMode" />
      </Docs>
    </Member>
    <Member MemberName="ErrorDataReceived">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.DataReceivedEventHandler ErrorDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.DataReceivedEventHandler ErrorDataReceived" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.ErrorDataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ErrorDataReceived As DataReceivedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::DataReceivedEventHandler ^ ErrorDataReceived;" />
      <MemberSignature Language="F#" Value="member this.ErrorDataReceived : System.Diagnostics.DataReceivedEventHandler " Usage="member this.ErrorDataReceived : System.Diagnostics.DataReceivedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessAssociated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-373">アプリケーションがリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームに書き込む場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-373">Occurs when an application writes to its redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-374">イベント<xref:System.Diagnostics.Process.ErrorDataReceived>は、関連付けられたプロセスがリダイレクト<xref:System.Diagnostics.Process.StandardError%2A>されたストリームに書き込まれたことを示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-374">The <xref:System.Diagnostics.Process.ErrorDataReceived> event indicates that the associated process has written to its redirected <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="5ba80-375">イベントは、の<xref:System.Diagnostics.Process.StandardError%2A>非同期読み取り操作中にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-375">The event only occurs during asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A>.</span></span> <span data-ttu-id="5ba80-376">非同期<xref:System.Diagnostics.Process.StandardError%2A> <xref:System.Diagnostics.Process.ErrorDataReceived> の読み取り <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 操作を開始するには、のストリームをリダイレクトし、イベントにイベントハンドラーを追加して、を呼び出す必要があります。 <xref:System.Diagnostics.Process></span><span class="sxs-lookup"><span data-stu-id="5ba80-376">To start asynchronous read operations, you must redirect the <xref:System.Diagnostics.Process.StandardError%2A> stream of a <xref:System.Diagnostics.Process>, add your event handler to the <xref:System.Diagnostics.Process.ErrorDataReceived> event, and call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>.</span></span> <span data-ttu-id="5ba80-377">その後、 <xref:System.Diagnostics.Process.ErrorDataReceived>このイベントは、プロセスが終了するか、が呼び出さ<xref:System.Diagnostics.Process.StandardError%2A> <xref:System.Diagnostics.Process.CancelErrorRead%2A>れるまで、リダイレクトされたストリームに行が書き込まれるたびに通知します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-377">Thereafter, the <xref:System.Diagnostics.Process.ErrorDataReceived> event signals each time the process writes a line to the redirected <xref:System.Diagnostics.Process.StandardError%2A> stream, until the process exits or calls <xref:System.Diagnostics.Process.CancelErrorRead%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-378">非同期出力を処理するアプリケーションでは、出力バッファー <xref:System.Diagnostics.Process.WaitForExit>がフラッシュされたことを確認するためにメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-378">The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit> method to ensure that the output buffer has been flushed.</span></span> <span data-ttu-id="5ba80-379"><xref:System.Diagnostics.Process.WaitForExit(System.Int32)>オーバーロードを使用してタイムアウトを指定しても、出力バッファーがフラッシュされて*いない*ことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-379">Note that specifying a timeout by using the <xref:System.Diagnostics.Process.WaitForExit(System.Int32)> overload does *not* ensure the output buffer has been flushed.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="5ba80-380">次の例では`net view` 、コマンドを使用して、リモートコンピューター上の使用可能なネットワークリソースを一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-380">The following example uses the `net view` command to list the available network resources on a remote computer.</span></span> <span data-ttu-id="5ba80-381">ユーザーは、ターゲットコンピューターの名前をコマンドライン引数として指定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-381">The user supplies the target computer name as a command-line argument.</span></span> <span data-ttu-id="5ba80-382">ユーザーは、エラー出力のファイル名を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-382">The user can also supply a file name for error output.</span></span> <span data-ttu-id="5ba80-383">この例では、net コマンドの出力を収集し、プロセスが終了するまで待機してから、出力結果をコンソールに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-383">The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</span></span> <span data-ttu-id="5ba80-384">ユーザーがオプションのエラーファイルを指定した場合、この例ではエラーがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-384">If the user supplies the optional error file, the example writes errors to the file.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#2](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/net_async.cpp#2)]
 [!code-csharp[Process_AsyncStreams#2](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/net_async.cs#2)]
 [!code-vb[Process_AsyncStreams#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/net_async.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-385">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-385">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-386">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-386">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="M:System.Diagnostics.Process.BeginErrorReadLine" />
        <altmember cref="M:System.Diagnostics.Process.CancelErrorRead" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ExitCode : int" Usage="System.Diagnostics.Process.ExitCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The value returned from the associated process when it terminated.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessExitCode")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-387">関連付けられたプロセスが終了したときにプロセスによって指定された値を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-387">Gets the value that the associated process specified when it terminated.</span></span></summary>
        <value><span data-ttu-id="5ba80-388">関連付けられたプロセスが終了したときにプロセスによって指定されたコード。</span><span class="sxs-lookup"><span data-stu-id="5ba80-388">The code that the associated process specified when it terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-389">システム<xref:System.Diagnostics.Process.ExitCode%2A>プロセスが終了したときに返された状態を取得するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-389">Use <xref:System.Diagnostics.Process.ExitCode%2A> to get the status that the system process returned when it exited.</span></span> <span data-ttu-id="5ba80-390">終了コードは、 `main()`プロシージャからの整数の戻り値と同じように使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-390">You can use the exit code much like an integer return value from a `main()` procedure.</span></span>  
  
 <span data-ttu-id="5ba80-391">プロセス<xref:System.Diagnostics.Process.ExitCode%2A>の値は、そのプロセスのアプリケーション開発者によって実装された特定の規則を反映しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-391">The <xref:System.Diagnostics.Process.ExitCode%2A> value for a process reflects the specific convention implemented by the application developer for that process.</span></span> <span data-ttu-id="5ba80-392">終了コード値を使用してコード内で決定を行う場合は、アプリケーションプロセスで使用される終了コード規則がわかっていることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-392">If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process.</span></span>  
  
 <span data-ttu-id="5ba80-393">通常、開発者は、 <xref:System.Diagnostics.Process.ExitCode%2A>値0で終了が成功したことを示し、0以外の値でエラーを指定します。この値は、呼び出し元のメソッドが異常なプロセス終了の原因を識別するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-393">Developers usually indicate a successful exit by an <xref:System.Diagnostics.Process.ExitCode%2A> value of zero, and designate errors by nonzero values that the calling method can use to identify the cause of an abnormal process termination.</span></span> <span data-ttu-id="5ba80-394">これらのガイドラインに従う必要はありませんが、規則です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-394">It is not necessary to follow these guidelines, but they are the convention.</span></span>  
  
 <span data-ttu-id="5ba80-395">プロセスが終了する<xref:System.Diagnostics.Process.ExitCode%2A>前にを取得しようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-395">If you try to get the <xref:System.Diagnostics.Process.ExitCode%2A> before the process has exited, the attempt throws an exception.</span></span> <span data-ttu-id="5ba80-396">最初に<xref:System.Diagnostics.Process.HasExited%2A>プロパティを調べて、関連付けられているプロセスが終了したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-396">Examine the <xref:System.Diagnostics.Process.HasExited%2A> property first to verify whether the associated process has terminated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-397">標準出力が非同期イベントハンドラーにリダイレクトされた場合、が返さ<xref:System.Diagnostics.Process.HasExited%2A> `true`れたときに出力処理が完了していない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-397">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when <xref:System.Diagnostics.Process.HasExited%2A> returns `true`.</span></span> <span data-ttu-id="5ba80-398">非同期イベント処理が完了したことを確認するに<xref:System.Diagnostics.Process.WaitForExit>は、チェック<xref:System.Diagnostics.Process.HasExited%2A>する前にパラメーターを取らないオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-398">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter before checking <xref:System.Diagnostics.Process.HasExited%2A>.</span></span>  
  
 <span data-ttu-id="5ba80-399"><xref:System.Diagnostics.Process.CloseMainWindow%2A> また <xref:System.Diagnostics.Process.Kill%2A> はメソッドを使用して、関連付けられたプロセスを終了させることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-399">You can use the <xref:System.Diagnostics.Process.CloseMainWindow%2A> or the <xref:System.Diagnostics.Process.Kill%2A> method to cause an associated process to exit.</span></span>  
  
 <span data-ttu-id="5ba80-400">関連付けられたプロセスが終了すると、同期的かつ非同期的に通知される2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-400">There are two ways of being notified when the associated process exits: synchronously and asynchronously.</span></span> <span data-ttu-id="5ba80-401">同期通知は、関連する<xref:System.Diagnostics.Process.WaitForExit%2A>コンポーネントが終了するまで、アプリケーションの処理を一時停止するためにメソッドを呼び出すことに依存します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-401">Synchronous notification relies on calling the <xref:System.Diagnostics.Process.WaitForExit%2A> method to pause the processing of your application until the associated component exits.</span></span> <span data-ttu-id="5ba80-402">非同期通知は<xref:System.Diagnostics.Process.Exited>イベントに依存します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-402">Asynchronous notification relies on the <xref:System.Diagnostics.Process.Exited> event.</span></span> <span data-ttu-id="5ba80-403">非同期通知を使用する<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>場合、 <xref:System.Diagnostics.Process>コンポーネントが`true`プロセスを終了したという通知を受け取るには、をに設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-403">When using asynchronous notification, <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> must be set to `true` for the <xref:System.Diagnostics.Process> component to receive notification that the process has exited.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-404">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-404">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-405">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-405">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-406">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-406">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-407">プロセスは終了していません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-407">The process has not exited.</span></span>  
  
<span data-ttu-id="5ba80-408">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-408">-or-</span></span> 
<span data-ttu-id="5ba80-409">プロセス <see cref="P:System.Diagnostics.Process.Handle" /> は終了していません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-409">The process <see cref="P:System.Diagnostics.Process.Handle" /> is not valid.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-410">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.ExitCode" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-410">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitCode" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-411">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-411">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-412">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-412">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-413">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-413">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
      </Docs>
    </Member>
    <Member MemberName="Exited">
      <MemberSignature Language="C#" Value="public event EventHandler Exited;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Exited" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.Exited" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Exited As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Exited;" />
      <MemberSignature Language="F#" Value="member this.Exited : EventHandler " Usage="member this.Exited : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("If the WatchForExit property is set to true, then this event is raised when the associated process exits.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessExited")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-414">プロセスが終了したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-414">Occurs when a process exits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-415">イベント<xref:System.Diagnostics.Process.Exited>は、関連付けられたプロセスが終了したことを示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-415">The <xref:System.Diagnostics.Process.Exited> event indicates that the associated process exited.</span></span> <span data-ttu-id="5ba80-416">この現象は、プロセスが終了 (中止) されたか、または正常に終了したことを意味します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-416">This occurrence means either that the process terminated (aborted) or successfully closed.</span></span> <span data-ttu-id="5ba80-417">このイベントは、 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A>プロパティの値がで`true`ある場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-417">This event can occur only if the value of the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="5ba80-418">関連付けられたプロセスが終了すると、同期的かつ非同期的に通知される2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-418">There are two ways of being notified when the associated process exits: synchronously and asynchronously.</span></span> <span data-ttu-id="5ba80-419">同期通知とは、 <xref:System.Diagnostics.Process.WaitForExit%2A>プロセスが終了するまで、メソッドを呼び出して現在のスレッドをブロックすることを意味します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-419">Synchronous notification means calling the <xref:System.Diagnostics.Process.WaitForExit%2A> method to block the current thread until the process exits.</span></span> <span data-ttu-id="5ba80-420">非同期通知では<xref:System.Diagnostics.Process.Exited> 、イベントを使用します。これにより、呼び出し元のスレッドは、その間に実行を継続できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-420">Asynchronous notification uses the <xref:System.Diagnostics.Process.Exited> event, which allows the calling thread to continue execution in the meantime.</span></span> <span data-ttu-id="5ba80-421">後者の場合、を<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>呼び出し元のアプリケーション`true`が終了イベントを受け取るには、をに設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-421">In the latter case, <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> must be set to `true` for the calling application to receive the Exited event.</span></span>  
  
 <span data-ttu-id="5ba80-422">オペレーティングシステムは、プロセスをシャットダウンすると、終了したイベントに対してハンドラーが登録されている他のすべてのプロセスに通知します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-422">When the operating system shuts down a process, it notifies all other processes that have registered handlers for the Exited event.</span></span> <span data-ttu-id="5ba80-423">この時点で、終了したばかりのプロセスのハンドルを使用して、など<xref:System.Diagnostics.Process.ExitTime%2A>のいくつかのプロパティにアクセスできます。また<xref:System.Diagnostics.Process.HasExited%2A> 、オペレーティングシステムはそのハンドルを完全に解放するまで保持します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-423">At this time, the handle of the process that just exited can be used to access some properties such as  <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.HasExited%2A> that the operating system maintains until it releases that handle completely.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-424">終了したプロセスをハンドルする場合でも、を再度呼び出し<xref:System.Diagnostics.Process.Start%2A>て同じプロセスに再接続することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-424">Even if you have a handle to an exited process, you cannot call <xref:System.Diagnostics.Process.Start%2A> again to reconnect to the same process.</span></span> <span data-ttu-id="5ba80-425">を<xref:System.Diagnostics.Process.Start%2A>呼び出すと、関連付けられているプロセスが自動的に解放され、 <xref:System.Diagnostics.Process.Handle%2A>同じファイルを持つプロセスに接続されますが、まったく新しいプロセスになります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-425">Calling <xref:System.Diagnostics.Process.Start%2A> automatically releases the associated process and connects to a process with the same file but an entirely new <xref:System.Diagnostics.Process.Handle%2A>.</span></span>  
  
 <span data-ttu-id="5ba80-426">Windows フォームアプリケーションで<xref:System.Diagnostics.Process.Exited>イベントを使用する方法の詳細については、 <xref:System.Diagnostics.Process.SynchronizingObject%2A> 「」プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-426">For more information about the use of the <xref:System.Diagnostics.Process.Exited> event in Windows Forms applications, see the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-427">次のコード例では、ファイルを出力するプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-427">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="5ba80-428">プロセスの作成<xref:System.Diagnostics.Process.Exited>時に<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>プロパティが設定されていたため、プロセスが終了したときにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-428">It raises the <xref:System.Diagnostics.Process.Exited> event when the process exits because the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property was set when the process was created.</span></span> <span data-ttu-id="5ba80-429">イベント<xref:System.Diagnostics.Process.Exited>ハンドラーは、プロセス情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-429">The <xref:System.Diagnostics.Process.Exited> event handler displays process information.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]
 [!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-430">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-430">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-431">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-431">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExitTime">
      <MemberSignature Language="C#" Value="public DateTime ExitTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ExitTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ExitTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ExitTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ExitTime : DateTime" Usage="System.Diagnostics.Process.ExitTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The time that the associated process exited.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessExitTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-432">関連付けられたプロセスが終了した時刻を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-432">Gets the time that the associated process exited.</span></span></summary>
        <value><span data-ttu-id="5ba80-433">関連付けられたプロセスが終了した時刻を示す <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-433">A <see cref="T:System.DateTime" /> that indicates when the associated process was terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-434">プロセスが終了していない場合、 <xref:System.Diagnostics.Process.ExitTime%2A>プロパティを取得しようとすると例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-434">If the process has not terminated, attempting to retrieve the <xref:System.Diagnostics.Process.ExitTime%2A> property throws an exception.</span></span> <span data-ttu-id="5ba80-435">プロパティ <xref:System.Diagnostics.Process.ExitTime%2A> を取得する前にを使用<xref:System.Diagnostics.Process.HasExited%2A>して、関連付けられたプロセスが終了したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-435">Use <xref:System.Diagnostics.Process.HasExited%2A> before getting the <xref:System.Diagnostics.Process.ExitTime%2A> property to determine whether the associated process has terminated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-436">次のコード例では、ファイルを出力するプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-436">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="5ba80-437">プロセスは、終了<xref:System.Diagnostics.Process.Exited>時にイベントを発生<xref:System.Diagnostics.Process.ExitTime%2A>させ、イベントハンドラーはプロパティとその他のプロセス情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-437">The process raises the <xref:System.Diagnostics.Process.Exited> event when it exits, and the event handler displays the <xref:System.Diagnostics.Process.ExitTime%2A> property and other process information.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]
 [!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-438">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.ExitTime" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-438">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-439">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-439">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-440">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-440">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-441">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-441">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcess">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetCurrentProcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetCurrentProcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetCurrentProcess" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcess () As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetCurrentProcess();" />
      <MemberSignature Language="F#" Value="static member GetCurrentProcess : unit -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetCurrentProcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-442">新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを取得し、現在アクティブなプロセスに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-442">Gets a new <see cref="T:System.Diagnostics.Process" /> component and associates it with the currently active process.</span></span></summary>
        <returns><span data-ttu-id="5ba80-443">呼び出し元のアプリケーションを実行しているプロセス リソースに関連付けられた新しい <see cref="T:System.Diagnostics.Process" /> コンポーネント。</span><span class="sxs-lookup"><span data-stu-id="5ba80-443">A new <see cref="T:System.Diagnostics.Process" /> component associated with the process resource that is running the calling application.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-444">このメソッドを使用して、 <xref:System.Diagnostics.Process>新しいインスタンスを作成し、ローカルコンピューター上のプロセスリソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-444">Use this method to create a new <xref:System.Diagnostics.Process> instance and associate it with the process resource on the local computer.</span></span>  
  
 <span data-ttu-id="5ba80-445">同様<xref:System.Diagnostics.Process.GetProcessById%2A>の、 <xref:System.Diagnostics.Process.GetProcessesByName%2A>、および<xref:System.Diagnostics.Process.GetProcesses%2A>メソッドと同様<xref:System.Diagnostics.Process.GetCurrentProcess%2A>に、は既存のリソースを<xref:System.Diagnostics.Process>新しいコンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-445">Like the similar <xref:System.Diagnostics.Process.GetProcessById%2A>, <xref:System.Diagnostics.Process.GetProcessesByName%2A>, and <xref:System.Diagnostics.Process.GetProcesses%2A> methods, <xref:System.Diagnostics.Process.GetCurrentProcess%2A> associates an existing resource with a new <xref:System.Diagnostics.Process> component.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-446">次の例では、現在のプロセス、ローカルコンピューター上で実行されているプロセス、ローカルコンピューター上で実行されているメモ帳のすべてのインスタンス、およびローカルコンピューター上の特定のプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-446">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="5ba80-447">次に、リモートコンピューター上の同じプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-447">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-448">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-448">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-449">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-449">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcessById">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5ba80-450">新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを作成し、指定した既存のプロセス リソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-450">Creates a new <see cref="T:System.Diagnostics.Process" /> component, and associates it with the existing process resource that you specify.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcessById">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetProcessById (int processId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetProcessById(int32 processId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessById (processId As Integer) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetProcessById(int processId);" />
      <MemberSignature Language="F#" Value="static member GetProcessById : int -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetProcessById processId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="processId"><span data-ttu-id="5ba80-451">システムで一意なプロセス リソースの識別子。</span><span class="sxs-lookup"><span data-stu-id="5ba80-451">The system-unique identifier of a process resource.</span></span></param>
        <summary><span data-ttu-id="5ba80-452">ローカル コンピューター上のプロセス ID が指定された新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-452">Returns a new <see cref="T:System.Diagnostics.Process" /> component, given the identifier of a process on the local computer.</span></span></summary>
        <returns><span data-ttu-id="5ba80-453"><paramref name="processId" /> パラメーターで識別されるローカル プロセス リソースに関連付けられた <see cref="T:System.Diagnostics.Process" /> コンポーネント。</span><span class="sxs-lookup"><span data-stu-id="5ba80-453">A <see cref="T:System.Diagnostics.Process" /> component that is associated with the local process resource identified by the <paramref name="processId" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-454">このメソッドを使用して、 <xref:System.Diagnostics.Process>新しいコンポーネントを作成し、ローカルコンピューター上のプロセスリソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-454">Use this method to create a new <xref:System.Diagnostics.Process> component and associate it with a process resource on the local computer.</span></span> <span data-ttu-id="5ba80-455">プロセスリソースはコンピューターに既に存在している<xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29>必要があります。ではシステムリソースが作成されず、リソースが<xref:System.Diagnostics.Process>アプリケーションで生成されたコンポーネントに関連付けられるためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-455">The process resource must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> does not create a system resource, but rather associates a resource with an application-generated <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="5ba80-456">プロセス<xref:System.Diagnostics.Process.Id%2A>は、コンピューターで現在実行されているプロセスに対してのみ取得できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-456">A process <xref:System.Diagnostics.Process.Id%2A> can be retrieved only for a process that is currently running on the computer.</span></span> <span data-ttu-id="5ba80-457">プロセスが終了した<xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29>後で、期限切れの識別子を渡すと、は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-457">After the process terminates, <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> throws an exception if you pass it an expired identifier.</span></span>  
  
 <span data-ttu-id="5ba80-458">特定のコンピューターでは、プロセスの識別子は一意です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-458">On any particular computer, the identifier of a process is unique.</span></span> <span data-ttu-id="5ba80-459"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29>1つのプロセスを返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-459"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> returns one process at most.</span></span> <span data-ttu-id="5ba80-460">特定のアプリケーションを実行しているすべてのプロセスを取得する<xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>場合は、を使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-460">If you want to get all the processes running a particular application, use <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>.</span></span> <span data-ttu-id="5ba80-461">指定したアプリケーションを実行しているコンピューターに複数<xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>のプロセスが存在する場合、は、関連付けられているすべてのプロセスを含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-461">If multiple processes exist on the computer running the specified application, <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> returns an array containing all the associated processes.</span></span> <span data-ttu-id="5ba80-462">これらの各プロセスに対して、その識別子に対してクエリを実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-462">You can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="5ba80-463">プロセス識別子は、Windows タスクマネージャーの`Processes`パネルで表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-463">The process identifier can be viewed in the `Processes` panel of the Windows Task Manager.</span></span> <span data-ttu-id="5ba80-464">列`PID`には、プロセスに割り当てられているプロセス識別子が表示されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-464">The `PID` column displays the process identifier that is assigned to a process.</span></span>  
  
 <span data-ttu-id="5ba80-465">パラメーターは (32 ビット符号付き整数) です。ただし、基になる Windows API は、 `DWORD` (符号なし32ビット整数) を使用して類似の api を使用します。 <xref:System.Int32> `processId`</span><span class="sxs-lookup"><span data-stu-id="5ba80-465">The `processId` parameter is an <xref:System.Int32> (a 32-bit signed integer), although the underlying Windows API uses a `DWORD` (an unsigned 32-bit integer) for similar APIs.</span></span> <span data-ttu-id="5ba80-466">これは、歴史的な理由によるものです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-466">This is for historical reasons.</span></span>
  
## Examples  
 <span data-ttu-id="5ba80-467">次の例では、現在のプロセス、ローカルコンピューター上で実行されているプロセス、ローカルコンピューター上で実行されているメモ帳のすべてのインスタンス、およびローカルコンピューター上の特定のプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-467">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="5ba80-468">次に、リモートコンピューター上の同じプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-468">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5ba80-469"><paramref name="processId" /> パラメーターで指定されたプロセスは実行されていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-469">The process specified by the <paramref name="processId" /> parameter is not running.</span></span> <span data-ttu-id="5ba80-470">識別子の有効期限が切れている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-470">The identifier might be expired.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-471">このオブジェクトによってプロセスは開始されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-471">The process was not started by this object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-472">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-472">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-473">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-473">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessById">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetProcessById (int processId, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetProcessById(int32 processId, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessById (processId As Integer, machineName As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetProcessById(int processId, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcessById : int * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetProcessById (processId, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("There is no support for retrieving process information from a remote machine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processId" Type="System.Int32" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processId"><span data-ttu-id="5ba80-474">システムで一意なプロセス リソースの識別子。</span><span class="sxs-lookup"><span data-stu-id="5ba80-474">The system-unique identifier of a process resource.</span></span></param>
        <param name="machineName"><span data-ttu-id="5ba80-475">ネットワーク上のコンピューターの名前。</span><span class="sxs-lookup"><span data-stu-id="5ba80-475">The name of a computer on the network.</span></span></param>
        <summary><span data-ttu-id="5ba80-476">プロセス ID とネットワーク上のコンピューターの名前が指定された新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-476">Returns a new <see cref="T:System.Diagnostics.Process" /> component, given a process identifier and the name of a computer on the network.</span></span></summary>
        <returns><span data-ttu-id="5ba80-477"><paramref name="processId" /> パラメーターで識別されるリモート プロセス リソースに関連付けられた <see cref="T:System.Diagnostics.Process" /> コンポーネント。</span><span class="sxs-lookup"><span data-stu-id="5ba80-477">A <see cref="T:System.Diagnostics.Process" /> component that is associated with a remote process resource identified by the <paramref name="processId" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-478">このメソッドを使用して、 <xref:System.Diagnostics.Process>新しいコンポーネントを作成し、ネットワーク上のリモートコンピューター上のプロセスリソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-478">Use this method to create a new <xref:System.Diagnostics.Process> component and associate it with a process resource on a remote computer on the network.</span></span> <span data-ttu-id="5ba80-479">プロセスリソースは、指定されたコンピューターに既に<xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29>存在している必要があります。では、システムリソースは作成さ<xref:System.Diagnostics.Process>れず、リソースがアプリケーションによって生成されるコンポーネントに関連付けられるためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-479">The process resource must already exist on the specified computer, because <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> does not create a system resource, but rather associates a resource with an application-generated <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="5ba80-480">プロセス<xref:System.Diagnostics.Process.Id%2A>は、コンピューターで現在実行されているプロセスに対してのみ取得できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-480">A process <xref:System.Diagnostics.Process.Id%2A> can be retrieved only for a process that is currently running on the computer.</span></span> <span data-ttu-id="5ba80-481">プロセスが終了した<xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29>後で、期限切れの識別子を渡すと、は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-481">After the process terminates, <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> throws an exception if you pass it an expired identifier.</span></span>  
  
 <span data-ttu-id="5ba80-482">特定のコンピューターでは、プロセスの識別子は一意です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-482">On any particular computer, the identifier of a process is unique.</span></span> <span data-ttu-id="5ba80-483"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29>1つのプロセスを返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-483"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> returns one process at most.</span></span> <span data-ttu-id="5ba80-484">特定のアプリケーションを実行しているすべてのプロセスを取得する<xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>場合は、を使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-484">If you want to get all the processes running a particular application, use <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>.</span></span> <span data-ttu-id="5ba80-485">指定したアプリケーションを実行しているコンピューターに複数<xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>のプロセスが存在する場合、は、関連付けられているすべてのプロセスを含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-485">If multiple processes exist on the computer running the specified application, <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> returns an array containing all the associated processes.</span></span> <span data-ttu-id="5ba80-486">これらの各プロセスに対して、その識別子に対してクエリを実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-486">You can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="5ba80-487">プロセス識別子は、Windows タスクマネージャーの`Processes`パネルで表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-487">The process identifier can be viewed in the `Processes` panel of the Windows Task Manager.</span></span> <span data-ttu-id="5ba80-488">列`PID`には、プロセスに割り当てられているプロセス識別子が表示されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-488">The `PID` column displays the process identifier that is assigned to a process.</span></span>  
  
 <span data-ttu-id="5ba80-489">を指定`machineName`しない場合は、ローカルコンピューターが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-489">If you do not specify a `machineName`, the local computer is used.</span></span> <span data-ttu-id="5ba80-490">または、を値 "." に、 `machineName`または空の文字列 ("") に設定して、ローカルコンピューターを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-490">Alternatively, you can specify the local computer by setting `machineName` to the value "." or to an empty string ("").</span></span>  
  
 <span data-ttu-id="5ba80-491">パラメーターは (32 ビット符号付き整数) です。ただし、基になる Windows API は、 `DWORD` (符号なし32ビット整数) を使用して類似の api を使用します。 <xref:System.Int32> `processId`</span><span class="sxs-lookup"><span data-stu-id="5ba80-491">The `processId` parameter is an <xref:System.Int32> (a 32-bit signed integer), although the underlying Windows API uses a `DWORD` (an unsigned 32-bit integer) for similar APIs.</span></span> <span data-ttu-id="5ba80-492">これは、歴史的な理由によるものです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-492">This is for historical reasons.</span></span>   
  
## Examples  
 <span data-ttu-id="5ba80-493">次の例では、現在のプロセス、ローカルコンピューター上で実行されているプロセス、ローカルコンピューター上で実行されているメモ帳のすべてのインスタンス、およびローカルコンピューター上の特定のプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-493">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="5ba80-494">次に、リモートコンピューター上の同じプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-494">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5ba80-495"><paramref name="processId" /> パラメーターで指定されたプロセスは実行されていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-495">The process specified by the <paramref name="processId" /> parameter is not running.</span></span> <span data-ttu-id="5ba80-496">識別子の有効期限が切れている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-496">The identifier might be expired.</span></span>  
  
<span data-ttu-id="5ba80-497">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-497">-or-</span></span> 
<span data-ttu-id="5ba80-498"><paramref name="machineName" /> パラメーターの構文が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-498">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="5ba80-499">名前の長さがゼロ (0) の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-499">The name might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5ba80-500"><paramref name="machineName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-500">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-501">このオブジェクトによってプロセスは開始されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-501">The process was not started by this object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-502">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-502">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-503">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-503">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcesses">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5ba80-504">新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントの配列を作成し、既存のプロセス リソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-504">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with existing process resources.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcesses">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcesses ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcesses() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcesses" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcesses () As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcesses();" />
      <MemberSignature Language="F#" Value="static member GetProcesses : unit -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcesses " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-505">ローカル コンピューター上の各プロセス リソースごとに新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-505">Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the local computer.</span></span></summary>
        <returns><span data-ttu-id="5ba80-506">ローカル コンピューター上で実行されているすべてのプロセス リソースを表す <see cref="T:System.Diagnostics.Process" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="5ba80-506">An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the local computer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-507">このメソッドを使用して、新しい<xref:System.Diagnostics.Process>コンポーネントの配列を作成し、ローカルコンピューター上のすべてのプロセスリソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-507">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources on the local computer.</span></span> <span data-ttu-id="5ba80-508">プロセスリソースは、ローカルコンピューターに既に存在して<xref:System.Diagnostics.Process.GetProcesses%2A>いる必要があります。は、システムリソースを作成する<xref:System.Diagnostics.Process>のではなく、アプリケーションによって生成されるコンポーネントにリソースを関連付けるためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-508">The process resources must already exist on the local computer, because <xref:System.Diagnostics.Process.GetProcesses%2A> does not create system resources but rather associates resources with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="5ba80-509">オペレーティングシステム自体がバックグラウンドプロセスを実行しているため、この配列は空になりません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-509">Because the operating system itself is running background processes, this array is never empty.</span></span>  
  
 <span data-ttu-id="5ba80-510">コンピューター上で実行されているすべてのプロセスを取得しない場合<xref:System.Diagnostics.Process.GetProcessById%2A>は、メソッドまたは<xref:System.Diagnostics.Process.GetProcessesByName%2A>メソッドを使用して、その番号を制限できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-510">If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <xref:System.Diagnostics.Process.GetProcessById%2A> or <xref:System.Diagnostics.Process.GetProcessesByName%2A> method.</span></span> <span data-ttu-id="5ba80-511"><xref:System.Diagnostics.Process.GetProcessById%2A>メソッドに<xref:System.Diagnostics.Process>渡すプロセス識別子によってシステムで識別されるプロセスに関連付けられたコンポーネントを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-511"><xref:System.Diagnostics.Process.GetProcessById%2A> creates a <xref:System.Diagnostics.Process> component that is associated with the process identified on the system by the process identifier that you pass to the method.</span></span> <span data-ttu-id="5ba80-512"><xref:System.Diagnostics.Process.GetProcessesByName%2A>関連付けられた<xref:System.Diagnostics.Process>プロセスリソースが、メソッドに渡す実行可能ファイルを共有するコンポーネントの配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-512"><xref:System.Diagnostics.Process.GetProcessesByName%2A> creates an array of <xref:System.Diagnostics.Process> components whose associated process resources share the executable file you pass to the method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-513">サービスホストプロセス (svchost.exe) の同じインスタンス内に複数の Windows サービスを読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-513">Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</span></span> <span data-ttu-id="5ba80-514">GetProcesses は、これらの個々のサービスを識別しません。詳細について<xref:System.ServiceProcess.ServiceController.GetServices%2A>は、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-514">GetProcesses does not identify those individual services; for that, see <xref:System.ServiceProcess.ServiceController.GetServices%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-515">次の例では、現在のプロセス、ローカルコンピューター上で実行されているプロセス、ローカルコンピューター上で実行されているメモ帳のすべてのインスタンス、およびローカルコンピューター上の特定のプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-515">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="5ba80-516">次に、リモートコンピューター上の同じプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-516">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-517">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-517">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-518">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-518">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcesses">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcesses (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcesses(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcesses(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcesses (machineName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcesses(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcesses : string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcesses machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("There is no support for retrieving process information from a remote machine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName"><span data-ttu-id="5ba80-519">プロセスの一覧を読み取る対象のコンピューター。</span><span class="sxs-lookup"><span data-stu-id="5ba80-519">The computer from which to read the list of processes.</span></span></param>
        <summary><span data-ttu-id="5ba80-520">指定したコンピューター上の各プロセス リソースごとに新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-520">Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the specified computer.</span></span></summary>
        <returns><span data-ttu-id="5ba80-521">指定したコンピューター上で実行されているすべてのプロセス リソースを表す <see cref="T:System.Diagnostics.Process" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="5ba80-521">An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the specified computer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-522">このメソッドを使用して、新しい<xref:System.Diagnostics.Process>コンポーネントの配列を作成し、指定した (通常はリモートの) コンピューター上のすべてのプロセスリソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-522">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources on the specified (usually remote) computer.</span></span> <span data-ttu-id="5ba80-523">プロセスリソースは、ローカルコンピューターに既に存在して<xref:System.Diagnostics.Process.GetProcesses%2A>いる必要があります。は、システムリソースを作成する<xref:System.Diagnostics.Process>のではなく、アプリケーションによって生成されるコンポーネントにリソースを関連付けるためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-523">The process resources must already exist on the local computer, because <xref:System.Diagnostics.Process.GetProcesses%2A> does not create system resources but rather associates resources with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="5ba80-524">オペレーティングシステム自体がバックグラウンドプロセスを実行しているため、この配列は空になりません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-524">Because the operating system itself is running background processes, this array is never empty.</span></span>  
  
 <span data-ttu-id="5ba80-525">コンピューター上で実行されているすべてのプロセスを取得しない場合<xref:System.Diagnostics.Process.GetProcessById%2A>は、メソッドまたは<xref:System.Diagnostics.Process.GetProcessesByName%2A>メソッドを使用して、その番号を制限できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-525">If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <xref:System.Diagnostics.Process.GetProcessById%2A> or <xref:System.Diagnostics.Process.GetProcessesByName%2A> method.</span></span> <span data-ttu-id="5ba80-526"><xref:System.Diagnostics.Process.GetProcessById%2A>メソッドに<xref:System.Diagnostics.Process>渡すプロセス識別子によってシステムで識別されるプロセスに関連付けられたコンポーネントを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-526"><xref:System.Diagnostics.Process.GetProcessById%2A> creates a <xref:System.Diagnostics.Process> component that is associated with the process identified on the system by the process identifier that you pass to the method.</span></span> <span data-ttu-id="5ba80-527"><xref:System.Diagnostics.Process.GetProcessesByName%2A>関連付けられた<xref:System.Diagnostics.Process>プロセスリソースが、メソッドに渡す実行可能ファイルを共有するコンポーネントの配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-527"><xref:System.Diagnostics.Process.GetProcessesByName%2A> creates an array of <xref:System.Diagnostics.Process> components whose associated process resources share the executable file you pass to the method.</span></span>  
  
 <span data-ttu-id="5ba80-528">この<xref:System.Diagnostics.Process.GetProcesses%2A>メソッドのこのオーバーロードは、通常、ネットワーク上のリモートコンピューター上で実行されているプロセスリソースの一覧を取得するために使用されますが、"." を渡すことによってローカルコンピューターを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-528">This overload of the <xref:System.Diagnostics.Process.GetProcesses%2A> method is generally used to retrieve the list of process resources running on a remote computer on the network, but you can specify the local computer by passing ".".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-529">サービスホストプロセス (svchost.exe) の同じインスタンス内に複数の Windows サービスを読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-529">Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</span></span> <span data-ttu-id="5ba80-530">GetProcesses は、これらの個々のサービスを識別しません。詳細について<xref:System.ServiceProcess.ServiceController.GetServices%2A>は、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-530">GetProcesses does not identify those individual services; for that, see <xref:System.ServiceProcess.ServiceController.GetServices%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-531">次の例では、現在のプロセス、ローカルコンピューター上で実行されているプロセス、ローカルコンピューター上で実行されているメモ帳のすべてのインスタンス、およびローカルコンピューター上の特定のプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-531">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="5ba80-532">次に、リモートコンピューター上の同じプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-532">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5ba80-533"><paramref name="machineName" /> パラメーターの構文が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-533">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="5ba80-534">長さがゼロ (0) の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-534">It might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5ba80-535"><paramref name="machineName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-535">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5ba80-536">リモート コンピューターに対してこの操作を実行することは、オペレーティング システム プラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-536">The operating system platform does not support this operation on remote computers.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-537">プロセス情報を取得するために使用するパフォーマンス カウンター API へのアクセスに問題があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-537">There are problems accessing the performance counter API's used to get process information.</span></span> <span data-ttu-id="5ba80-538">この例外は、Windows NT、Windows 2000、および Windows XP に固有のものです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-538">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-539">基になるシステム API にアクセスしようとして、問題が発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-539">A problem occurred accessing an underlying system API.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-540">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-540">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-541">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-541">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcessesByName">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5ba80-542">新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントの配列を作成し、指定したプロセス名を共有する既存のプロセス リソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-542">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with the existing process resources that all share the specified process name.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcessesByName">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string processName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcessesByName(string processName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessesByName (processName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcessesByName(System::String ^ processName);" />
      <MemberSignature Language="F#" Value="static member GetProcessesByName : string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcessesByName processName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processName"><span data-ttu-id="5ba80-543">プロセスのフレンドリ名。</span><span class="sxs-lookup"><span data-stu-id="5ba80-543">The friendly name of the process.</span></span></param>
        <summary><span data-ttu-id="5ba80-544">新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントの配列を作成し、指定したプロセス名を共有するローカル コンピューター上のすべてのプロセス リソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-544">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on the local computer that share the specified process name.</span></span></summary>
        <returns><span data-ttu-id="5ba80-545">指定したアプリケーションまたはファイルを実行しているプロセス リソースを表す <see cref="T:System.Diagnostics.Process" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="5ba80-545">An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-546">このメソッドを使用して、新しい<xref:System.Diagnostics.Process>コンポーネントの配列を作成し、ローカルコンピューター上で同じ実行可能ファイルを実行しているすべてのプロセスリソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-546">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources that are running the same executable file on the local computer.</span></span> <span data-ttu-id="5ba80-547">プロセスリソースはコンピューターに既に存在している<xref:System.Diagnostics.Process.GetProcessesByName%2A>必要があります。では、システムリソースは作成さ<xref:System.Diagnostics.Process>れず、アプリケーションによって生成されるコンポーネントに関連付けられるためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-547">The process resources must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessesByName%2A> does not create system resources but rather associates them with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="5ba80-548">は`processName` 、ローカルコンピューターで現在実行されていない実行可能ファイルに対して指定できます。そのため、メソッドが返す配列は空にすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-548">A `processName` can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</span></span>  
  
 <span data-ttu-id="5ba80-549">プロセス名は、Outlook などのプロセスのフレンドリ名です。この名前には、.exe 拡張子やパスは含まれません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-549">The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="5ba80-550"><xref:System.Diagnostics.Process.GetProcessesByName%2A>は、同じ実行可能ファイルに関連付けられているすべてのプロセスを取得して操作する場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-550"><xref:System.Diagnostics.Process.GetProcessesByName%2A> is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span> <span data-ttu-id="5ba80-551">たとえば、実行可能ファイルの実行中のすべてのインスタンス`processName`をシャットダウンするために、実行可能ファイル名をパラメーターとして渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-551">For example, you can pass an executable file name as the `processName` parameter, in order to shut down all the running instances of that executable file.</span></span>  
  
 <span data-ttu-id="5ba80-552">プロセス<xref:System.Diagnostics.Process.Id%2A>はシステム上の1つのプロセスリソースに対して一意ですが、ローカルコンピューター上の複数のプロセスで、 `processName`パラメーターによって指定されたアプリケーションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-552">Although a process <xref:System.Diagnostics.Process.Id%2A> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the `processName` parameter.</span></span> <span data-ttu-id="5ba80-553">したがって<xref:System.Diagnostics.Process.GetProcessById%2A> 、は、最大で1つ<xref:System.Diagnostics.Process.GetProcessesByName%2A>のプロセスを返しますが、関連付けられているすべてのプロセスを含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-553">Therefore, <xref:System.Diagnostics.Process.GetProcessById%2A> returns one process at most, but <xref:System.Diagnostics.Process.GetProcessesByName%2A> returns an array containing all the associated processes.</span></span> <span data-ttu-id="5ba80-554">標準 API 呼び出しを使用してプロセスを操作する必要がある場合は、その識別子に対してこれらの各プロセスを順番にクエリできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-554">If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="5ba80-555">プロセスリソースにはプロセス名だけではアクセスできませんが、プロセスリソースに関連<xref:System.Diagnostics.Process>付けられているコンポーネントの配列を取得した後は、システムリソースを開始、終了、または操作することができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-555">You cannot access process resources through the process name alone but, once you have retrieved an array of <xref:System.Diagnostics.Process> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-556">次の例では、現在のプロセス、ローカルコンピューター上で実行されているプロセス、ローカルコンピューター上で実行されているメモ帳のすべてのインスタンス、およびローカルコンピューター上の特定のプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-556">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="5ba80-557">次に、リモートコンピューター上の同じプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-557">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-558">プロセス情報を取得するために使用するパフォーマンス カウンター API へのアクセスに問題があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-558">There are problems accessing the performance counter API's used to get process information.</span></span> <span data-ttu-id="5ba80-559">この例外は、Windows NT、Windows 2000、および Windows XP に固有のものです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-559">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-560">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-560">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-561">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-561">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessesByName">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string processName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcessesByName(string processName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessesByName (processName As String, machineName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcessesByName(System::String ^ processName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcessesByName : string * string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcessesByName (processName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processName"><span data-ttu-id="5ba80-562">プロセスのフレンドリ名。</span><span class="sxs-lookup"><span data-stu-id="5ba80-562">The friendly name of the process.</span></span></param>
        <param name="machineName"><span data-ttu-id="5ba80-563">ネットワーク上のコンピューターの名前。</span><span class="sxs-lookup"><span data-stu-id="5ba80-563">The name of a computer on the network.</span></span></param>
        <summary><span data-ttu-id="5ba80-564">新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントの配列を作成し、指定したプロセス名を共有するリモート コンピューター上のすべてのプロセス リソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-564">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on a remote computer that share the specified process name.</span></span></summary>
        <returns><span data-ttu-id="5ba80-565">指定したアプリケーションまたはファイルを実行しているプロセス リソースを表す <see cref="T:System.Diagnostics.Process" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="5ba80-565">An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-566">このメソッドを使用して、新しい<xref:System.Diagnostics.Process>コンポーネントの配列を作成し、指定したコンピューター上で同じ実行可能ファイルを実行しているすべてのプロセスリソースに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-566">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources that are running the same executable file on the specified computer.</span></span> <span data-ttu-id="5ba80-567">プロセスリソースはコンピューターに既に存在している<xref:System.Diagnostics.Process.GetProcessesByName%2A>必要があります。では、システムリソースは作成さ<xref:System.Diagnostics.Process>れず、アプリケーションによって生成されるコンポーネントに関連付けられるためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-567">The process resources must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessesByName%2A> does not create system resources but rather associates them with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="5ba80-568">は`processName` 、ローカルコンピューターで現在実行されていない実行可能ファイルに対して指定できます。そのため、メソッドが返す配列は空にすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-568">A `processName` can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</span></span>  
  
 <span data-ttu-id="5ba80-569">プロセス名は、Outlook などのプロセスのフレンドリ名です。この名前には、.exe 拡張子やパスは含まれません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-569">The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="5ba80-570"><xref:System.Diagnostics.Process.GetProcessesByName%2A>は、同じ実行可能ファイルに関連付けられているすべてのプロセスを取得して操作する場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-570"><xref:System.Diagnostics.Process.GetProcessesByName%2A> is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span> <span data-ttu-id="5ba80-571">たとえば、実行可能ファイルの実行中のすべてのインスタンス`processName`をシャットダウンするために、実行可能ファイル名をパラメーターとして渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-571">For example, you can pass an executable file name as the `processName` parameter, in order to shut down all the running instances of that executable file.</span></span>  
  
 <span data-ttu-id="5ba80-572">プロセス<xref:System.Diagnostics.Process.Id%2A>はシステム上の1つのプロセスリソースに対して一意ですが、ローカルコンピューター上の複数のプロセスで、 `processName`パラメーターによって指定されたアプリケーションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-572">Although a process <xref:System.Diagnostics.Process.Id%2A> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the `processName` parameter.</span></span> <span data-ttu-id="5ba80-573">したがって<xref:System.Diagnostics.Process.GetProcessById%2A> 、は、最大で1つ<xref:System.Diagnostics.Process.GetProcessesByName%2A>のプロセスを返しますが、関連付けられているすべてのプロセスを含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-573">Therefore, <xref:System.Diagnostics.Process.GetProcessById%2A> returns one process at most, but <xref:System.Diagnostics.Process.GetProcessesByName%2A> returns an array containing all the associated processes.</span></span> <span data-ttu-id="5ba80-574">標準 API 呼び出しを使用してプロセスを操作する必要がある場合は、その識別子に対してこれらの各プロセスを順番にクエリできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-574">If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="5ba80-575">プロセスリソースにはプロセス名だけではアクセスできませんが、プロセスリソースに関連<xref:System.Diagnostics.Process>付けられているコンポーネントの配列を取得した後は、システムリソースを開始、終了、または操作することができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-575">You cannot access process resources through the process name alone but, once you have retrieved an array of <xref:System.Diagnostics.Process> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</span></span>  
  
 <span data-ttu-id="5ba80-576">このオーバーロードを使用して、ローカルコンピューターおよびリモートコンピューター上のプロセスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-576">You can use this overload to get processes on the local computer as well as on a remote computer.</span></span> <span data-ttu-id="5ba80-577">"." を使用してローカルコンピューターを指定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-577">Use "." to specify the local computer.</span></span> <span data-ttu-id="5ba80-578">既定では、ローカルコンピューターを使用する別のオーバーロードが存在します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-578">Another overload exists that uses the local computer by default.</span></span>  
  
 <span data-ttu-id="5ba80-579">リモートコンピューター上のプロセスには、プロセスに関する統計情報などの情報を表示するためだけにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-579">You can access processes on remote computers only to view information, such as statistics, about the processes.</span></span> <span data-ttu-id="5ba80-580">リモートコンピューターでプロセスを終了、 <xref:System.Diagnostics.Process.Kill%2A>終了 (使用)、または開始することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-580">You cannot close, terminate (using <xref:System.Diagnostics.Process.Kill%2A>), or start processes on remote computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-581">次の例では、現在のプロセス、ローカルコンピューター上で実行されているプロセス、ローカルコンピューター上で実行されているメモ帳のすべてのインスタンス、およびローカルコンピューター上の特定のプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-581">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="5ba80-582">次に、リモートコンピューター上の同じプロセスの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-582">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5ba80-583"><paramref name="machineName" /> パラメーターの構文が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-583">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="5ba80-584">長さがゼロ (0) の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-584">It might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5ba80-585"><paramref name="machineName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-585">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5ba80-586">リモート コンピューターに対してこの操作を実行することは、オペレーティング システム プラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-586">The operating system platform does not support this operation on remote computers.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-587"><paramref name="machineName" /> に接続する試みが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-587">The attempt to connect to <paramref name="machineName" /> has failed.</span></span>

<span data-ttu-id="5ba80-588">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-588">-or-</span></span> 
<span data-ttu-id="5ba80-589">プロセス情報を取得するために使用するパフォーマンス カウンター API へのアクセスに問題があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-589">There are problems accessing the performance counter API's used to get process information.</span></span> <span data-ttu-id="5ba80-590">この例外は、Windows NT、Windows 2000、および Windows XP に固有のものです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-590">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-591">基になるシステム API にアクセスしようとして、問題が発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-591">A problem occurred accessing an underlying system API.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-592">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-592">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-593">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-593">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="5ba80-594">アンマネージコードを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="5ba80-594">to call unmanaged code.</span></span> <span data-ttu-id="5ba80-595">関連付けられた列挙型:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="5ba80-595">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Diagnostics.Process.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Returns the native handle for this process.   The handle is only available if the process was started using this component.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessHandle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-596">関連付けられたプロセスのネイティブ ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-596">Gets the native handle of the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-597">関連付けられたプロセスを起動したときに、オペレーティング システムがプロセスに割り当てたハンドル。</span><span class="sxs-lookup"><span data-stu-id="5ba80-597">The handle that the operating system assigned to the associated process when the process was started.</span></span> <span data-ttu-id="5ba80-598">システムはこのハンドルを使用して、プロセス属性の追跡を続けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-598">The system uses this handle to keep track of process attributes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-599">アプリケーションは、多くのプロセス情報および制御関数のパラメーターとして使用できるプロセスのハンドルを取得できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-599">An application can obtain a handle to a process that can be used as a parameter to many process-information and control functions.</span></span> <span data-ttu-id="5ba80-600">このハンドルを使用すると、を<xref:System.Threading.WaitHandle>初期化したり、プラットフォーム呼び出しを使用してネイティブメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-600">You can use this handle to initialize a <xref:System.Threading.WaitHandle> or to call native methods with platform invoke.</span></span>  
  
 <span data-ttu-id="5ba80-601">このプロセスハンドルはアプリケーションに対してプライベートです。つまり、プロセスハンドルを共有することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-601">This process handle is private to an application--in other words, process handles cannot be shared.</span></span> <span data-ttu-id="5ba80-602">プロセスには、とは<xref:System.Diagnostics.Process.Id%2A> <xref:System.Diagnostics.Process.Handle%2A>異なり、システム全体で有効なプロセスもあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-602">A process also has a process <xref:System.Diagnostics.Process.Id%2A> which, unlike the <xref:System.Diagnostics.Process.Handle%2A>, is unique and, therefore, valid throughout the system.</span></span>  
  
 <span data-ttu-id="5ba80-603">呼び出しによって開始され<xref:System.Diagnostics.Process.Start%2A>たプロセス<xref:System.Diagnostics.Process.Handle%2A>のみが、対応<xref:System.Diagnostics.Process>するインスタンスのプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-603">Only processes started through a call to <xref:System.Diagnostics.Process.Start%2A> set the <xref:System.Diagnostics.Process.Handle%2A> property of the corresponding <xref:System.Diagnostics.Process> instances.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-604">プロセスが開始されていないか、終了しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-604">The process has not been started or has exited.</span></span> <span data-ttu-id="5ba80-605">この <see cref="T:System.Diagnostics.Process" /> インスタンスにプロセスが関連付けられていないので、<see cref="P:System.Diagnostics.Process.Handle" /> プロパティを読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-605">The <see cref="P:System.Diagnostics.Process.Handle" /> property cannot be read because there is no process associated with this <see cref="T:System.Diagnostics.Process" /> instance.</span></span>  
  
<span data-ttu-id="5ba80-606">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-606">-or-</span></span> 
<span data-ttu-id="5ba80-607"><see cref="T:System.Diagnostics.Process" /> インスタンスは実行中のプロセスにアタッチされていますが、フル アクセス権を持つハンドルを取得するために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-607">The <see cref="T:System.Diagnostics.Process" /> instance has been attached to a running process but you do not have the necessary permissions to get a handle with full access rights.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-608">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.Handle" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-608">You are trying to access the <see cref="P:System.Diagnostics.Process.Handle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-609">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-609">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-610">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-610">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-611">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-611">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.HandleCount" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="HandleCount">
      <MemberSignature Language="C#" Value="public int HandleCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandleCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.HandleCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HandleCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HandleCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandleCount : int" Usage="System.Diagnostics.Process.HandleCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Handles for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessHandleCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-612">プロセスが開いたハンドルの数を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-612">Gets the number of handles opened by the process.</span></span></summary>
        <value><span data-ttu-id="5ba80-613">プロセスが開いたオペレーティング システム ハンドルの数。</span><span class="sxs-lookup"><span data-stu-id="5ba80-613">The number of operating system handles the process has opened.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-614">ハンドルは、プロセスがオブジェクトを参照する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-614">Handles provide a way for a process to refer to objects.</span></span> <span data-ttu-id="5ba80-615">プロセスでは、ファイル、リソース、メッセージキューなどのさまざまなオペレーティングシステムオブジェクトへのハンドルを取得できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-615">A process can obtain handles to files, resources, message queues, and many other operating system objects.</span></span> <span data-ttu-id="5ba80-616">オペレーティングシステムは、ハンドル数が0の場合にのみ、プロセスに関連付けられているメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-616">The operating system reclaims the memory associated with the process only when the handle count is zero.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-617">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-617">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-618">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-618">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="HasExited">
      <MemberSignature Language="C#" Value="public bool HasExited { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasExited" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.HasExited" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasExited As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasExited { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasExited : bool" Usage="System.Diagnostics.Process.HasExited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the associated process has been terminated.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessTerminated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-619">関連付けられているプロセスが終了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-619">Gets a value indicating whether the associated process has been terminated.</span></span></summary>
        <value><span data-ttu-id="5ba80-620"><see cref="T:System.Diagnostics.Process" /> コンポーネントが参照するオペレーティング システム プロセスが終了している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-620"><see langword="true" /> if the operating system process referenced by the <see cref="T:System.Diagnostics.Process" /> component has terminated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-621">の値`true` <xref:System.Diagnostics.Process.HasExited%2A>がの場合は、関連付けられたプロセスが通常または異常に終了したことを示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-621">A value of `true` for <xref:System.Diagnostics.Process.HasExited%2A> indicates that the associated process has terminated, either normally or abnormally.</span></span> <span data-ttu-id="5ba80-622">または<xref:System.Diagnostics.Process.CloseMainWindow%2A> <xref:System.Diagnostics.Process.Kill%2A>を呼び出すことによって、関連付けられているプロセスを終了するように要求または強制できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-622">You can request or force the associated process to exit by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="5ba80-623">ハンドルがプロセスに対して開かれている場合、オペレーティングシステムはプロセスが終了したときにプロセスメモリを解放しますが、ハンドル、終了コード、終了時刻など、プロセスに関する管理情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-623">If a handle is open to the process, the operating system releases the process memory when the process has exited, but retains administrative information about the process, such as the handle, exit code, and exit time.</span></span> <span data-ttu-id="5ba80-624">この情報を取得するには、プロパティ<xref:System.Diagnostics.Process.ExitCode%2A>と<xref:System.Diagnostics.Process.ExitTime%2A>プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-624">To get this information, you can use the <xref:System.Diagnostics.Process.ExitCode%2A> and <xref:System.Diagnostics.Process.ExitTime%2A> properties.</span></span> <span data-ttu-id="5ba80-625">これらのプロパティは、このコンポーネントによって開始されたプロセスに対して自動的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-625">These properties are populated automatically for processes that were started by this component.</span></span> <span data-ttu-id="5ba80-626">システムプロセスに関連付けられて<xref:System.Diagnostics.Process>いるすべてのコンポーネントが破棄され、終了したプロセスに対するハンドルがなくなった場合、管理情報が解放されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-626">The administrative information is released when all the <xref:System.Diagnostics.Process> components that are associated with the system process are destroyed and hold no more handles to the exited process.</span></span>  
  
 <span data-ttu-id="5ba80-627">プロセスは、コードとは無関係に終了できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-627">A process can terminate independently of your code.</span></span> <span data-ttu-id="5ba80-628">このコンポーネントを使用してプロセスを開始した場合、関連付け<xref:System.Diagnostics.Process.HasExited%2A>られているプロセスが個別に終了した場合でも、の値は自動的に更新されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-628">If you started the process using this component, the system updates the value of <xref:System.Diagnostics.Process.HasExited%2A> automatically, even if the associated process exits independently.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-629">標準出力が非同期イベントハンドラーにリダイレクトされた場合、このプロパティがを返す`true`ときに出力処理が完了していない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-629">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this property returns `true`.</span></span> <span data-ttu-id="5ba80-630">非同期イベント処理が完了したことを確認するに<xref:System.Diagnostics.Process.WaitForExit>は、チェック<xref:System.Diagnostics.Process.HasExited%2A>する前にパラメーターを取らないオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-630">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter before checking <xref:System.Diagnostics.Process.HasExited%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-631">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-631">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-632">次に、関連付けられたプロセスの物理メモリ使用量を2秒間隔で最大10秒間取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-632">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="5ba80-633">この例では、10秒が経過する前にプロセスが終了するかどうかを検出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-633">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="5ba80-634">この例では、10秒後にプロセスがまだ実行されている場合、プロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-634">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-635">オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-635">There is no process associated with the object.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-636">プロセスの終了コードを取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-636">The exit code for the process could not be retrieved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-637">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.HasExited" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-637">You are trying to access the <see cref="P:System.Diagnostics.Process.HasExited" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-638">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-638">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-639">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-639">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-640">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-640">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="M:System.Diagnostics.Process.OnExited" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Diagnostics.Process.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The unique identifier for the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-641">関連付けられたプロセスの一意の識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-641">Gets the unique identifier for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-642">この <see cref="T:System.Diagnostics.Process" /> インスタンスが参照する、システムが生成したプロセスの一意の識別子。</span><span class="sxs-lookup"><span data-stu-id="5ba80-642">The system-generated unique identifier of the process that is referenced by this <see cref="T:System.Diagnostics.Process" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-643">関連付けら<xref:System.Diagnostics.Process.Id%2A>れたプロセスが実行されていない場合、プロセスは無効です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-643">The process <xref:System.Diagnostics.Process.Id%2A> is not valid if the associated process is not running.</span></span> <span data-ttu-id="5ba80-644">そのため、 <xref:System.Diagnostics.Process.Id%2A>プロパティを取得する前に、プロセスが実行されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-644">Therefore, you should ensure that the process is running before attempting to retrieve the <xref:System.Diagnostics.Process.Id%2A> property.</span></span> <span data-ttu-id="5ba80-645">プロセスが終了するまで、プロセス識別子はシステム全体のプロセスを一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-645">Until the process terminates, the process identifier uniquely identifies the process throughout the system.</span></span>  
  
 <span data-ttu-id="5ba80-646">プロセス識別子を<xref:System.Diagnostics.Process.GetProcessById%2A>メソッドに渡すことによって、ローカルコンピューターまたはリモートコンピューター <xref:System.Diagnostics.Process>で実行されているプロセスを新しいインスタンスに接続できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-646">You can connect a process that is running on a local or remote computer to a new <xref:System.Diagnostics.Process> instance by passing the process identifier to the <xref:System.Diagnostics.Process.GetProcessById%2A> method.</span></span> <span data-ttu-id="5ba80-647"><xref:System.Diagnostics.Process.GetProcessById%2A>は、新しいコンポーネントを作成し、新しい<xref:System.Diagnostics.Process>インスタンスの<xref:System.Diagnostics.Process.Id%2A>プロパティを自動的に設定するメソッドです。 `static`</span><span class="sxs-lookup"><span data-stu-id="5ba80-647"><xref:System.Diagnostics.Process.GetProcessById%2A> is a `static` method that creates a new component and sets the <xref:System.Diagnostics.Process.Id%2A> property for the new <xref:System.Diagnostics.Process> instance automatically.</span></span>  
  
 <span data-ttu-id="5ba80-648">プロセス識別子は、システムで再利用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-648">Process identifiers can be reused by the system.</span></span> <span data-ttu-id="5ba80-649">プロパティ<xref:System.Diagnostics.Process.Id%2A>値は、関連付けられているプロセスが実行されている場合にのみ一意です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-649">The <xref:System.Diagnostics.Process.Id%2A> property value is unique only while the associated process is running.</span></span> <span data-ttu-id="5ba80-650">プロセスが終了すると、システムは関連のない<xref:System.Diagnostics.Process.Id%2A>プロセスに対してプロパティ値を再利用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-650">After the process has terminated, the system can reuse the <xref:System.Diagnostics.Process.Id%2A> property value for an unrelated process.</span></span>  
  
 <span data-ttu-id="5ba80-651">識別子はシステム上で一意であるため、インスタンスを<xref:System.Diagnostics.Process>渡す代わりに、他のスレッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-651">Because the identifier is unique on the system, you can pass it to other threads as an alternative to passing a <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-652">この操作により、システムリソースを節約しながら、プロセスが正しく識別されることを保証できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-652">This action can save system resources yet guarantee that the process is correctly identified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-653">次の例は、 <xref:System.Diagnostics.Process.Id%2A>アプリケーションの実行中のすべてのインスタンスのを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-653">The following example demonstrates how to obtain the <xref:System.Diagnostics.Process.Id%2A> for all running instances of an application.</span></span> <span data-ttu-id="5ba80-654">このコードは、メモ帳の新しいインスタンスを作成し、メモ帳のすべてのインスタンスを一覧表示し、 <xref:System.Diagnostics.Process.Id%2A>ユーザーが数値を入力して特定のインスタンスを削除できるようにします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-654">The code creates a new instance of Notepad, lists all the instances of Notepad, and then allows the user to enter the <xref:System.Diagnostics.Process.Id%2A> number to remove a specific instance.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.Id#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.Id/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.Process.Id#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.Id/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-655">プロセスの <see cref="P:System.Diagnostics.Process.Id" /> プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-655">The process's <see cref="P:System.Diagnostics.Process.Id" /> property has not been set.</span></span>  
  
<span data-ttu-id="5ba80-656">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-656">-or-</span></span> 
<span data-ttu-id="5ba80-657">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-657">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-658">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-658">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-659">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-659">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Kill">
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="5ba80-660">メソッド`Kill`は、終了を要求する<xref:System.Diagnostics.Process.CloseMainWindow%2A>だけで、プロセスを強制的に終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-660">The `Kill` method forces a termination of the process, while <xref:System.Diagnostics.Process.CloseMainWindow%2A> only requests a termination.</span></span> <span data-ttu-id="5ba80-661">グラフィカルインターフェイスを持つプロセスが実行されている場合、そのメッセージループは待機状態になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-661">When a process with a graphical interface is executing, its message loop is in a wait state.</span></span> <span data-ttu-id="5ba80-662">メッセージループは、Windows メッセージがオペレーティングシステムによってプロセスに送信されるたびに実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-662">The message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="5ba80-663">を<xref:System.Diagnostics.Process.CloseMainWindow%2A>呼び出すと、メインウィンドウを閉じるための要求が送信されます。このウィンドウは、適切な形式のアプリケーションで、子ウィンドウを閉じ、アプリケーションに対して実行中のすべてのメッセージループを取り消します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-663">Calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> sends a request to close the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</span></span> <span data-ttu-id="5ba80-664">を呼び出し<xref:System.Diagnostics.Process.CloseMainWindow%2A>てプロセスを終了する要求では、アプリケーションの終了は強制されません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-664">The request to exit the process by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> does not force the application to quit.</span></span>
<span data-ttu-id="5ba80-665">アプリケーションは、終了する前にユーザーの確認を要求することも、終了を拒否することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-665">The application can ask for user verification before quitting, or it can refuse to quit.</span></span> <span data-ttu-id="5ba80-666">アプリケーションを強制的に終了するには、 `Kill`メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-666">To force the application to quit, use the `Kill` method.</span></span>

<span data-ttu-id="5ba80-667">の<xref:System.Diagnostics.Process.CloseMainWindow%2A>動作は、[システム] メニューを使用してアプリケーションのメインウィンドウを閉じるユーザーの動作と同じです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-667">The behavior of <xref:System.Diagnostics.Process.CloseMainWindow%2A> is identical to that of a user closing an application's main window using the system menu.</span></span>
<span data-ttu-id="5ba80-668">そのため、メインウィンドウを閉じてプロセスを終了する要求では、アプリケーションが直ちに終了することはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-668">Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</span></span>
  
> [!NOTE]
> <span data-ttu-id="5ba80-669">メソッド<xref:System.Diagnostics.Process.Kill%2A>は、非同期的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-669">The <xref:System.Diagnostics.Process.Kill%2A> method executes asynchronously.</span></span> <span data-ttu-id="5ba80-670">`Kill`メソッドを呼び出した後、 <xref:System.Diagnostics.Process.WaitForExit%2A>メソッドを呼び出してプロセスが<xref:System.Diagnostics.Process.HasExited%2A>終了するまで待機するか、プロパティをチェックしてプロセスが終了したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-670">After calling the `Kill` method, call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to wait for the process to exit, or check the <xref:System.Diagnostics.Process.HasExited%2A> property to determine if the process has exited.</span></span>

> [!NOTE]
> <span data-ttu-id="5ba80-671"><xref:System.Diagnostics.Process.WaitForExit%2A> メソッド <xref:System.Diagnostics.Process.HasExited%2A> とプロパティには、子孫プロセスの状態は反映されません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-671">The <xref:System.Diagnostics.Process.WaitForExit%2A> method and the <xref:System.Diagnostics.Process.HasExited%2A> property do not reflect the status of descendant processes.</span></span>
> <span data-ttu-id="5ba80-672">を`Kill(entireProcessTree: true)`使用した<xref:System.Diagnostics.Process.WaitForExit%2A>場合<xref:System.Diagnostics.Process.HasExited%2A> 、とは、すべての子孫がまだ終了していなくても、指定されたプロセスが終了した後に、終了が完了したことを示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-672">When `Kill(entireProcessTree: true)` is used, <xref:System.Diagnostics.Process.WaitForExit%2A> and <xref:System.Diagnostics.Process.HasExited%2A> will indicate that exiting has completed after the given process exits, even if all descendants have not yet exited.</span></span>
  
<span data-ttu-id="5ba80-673">プロセスによって編集されたデータまたはプロセスに割り当てられた`Kill`リソースは、を呼び出すと失われることがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-673">Data edited by the process or resources allocated to the process can be lost if you call `Kill`.</span></span> 
<span data-ttu-id="5ba80-674">`Kill`プロセスが異常終了する原因となるため、必要な場合にのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-674">`Kill` causes an abnormal process termination and should be used only when necessary.</span></span>
<span data-ttu-id="5ba80-675"><xref:System.Diagnostics.Process.CloseMainWindow%2A>プロセスの正常終了を有効にし、すべてのウィンドウを閉じます。そのため、インターフェイスを備えたアプリケーションに適しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-675"><xref:System.Diagnostics.Process.CloseMainWindow%2A> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</span></span> <span data-ttu-id="5ba80-676">が<xref:System.Diagnostics.Process.CloseMainWindow%2A>失敗した場合は`Kill` 、を使用してプロセスを終了できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-676">If <xref:System.Diagnostics.Process.CloseMainWindow%2A> fails, you can use `Kill` to terminate the process.</span></span>
<span data-ttu-id="5ba80-677">`Kill`は、グラフィカルインターフェイスを持たないプロセスを終了する唯一の方法です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-677">`Kill` is the only way to terminate processes that do not have graphical interfaces.</span></span>
  
<span data-ttu-id="5ba80-678">は、 `Kill` <xref:System.Diagnostics.Process.CloseMainWindow%2A>ローカルコンピューターで実行されているプロセスに対してのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-678">You can call `Kill` and <xref:System.Diagnostics.Process.CloseMainWindow%2A> only for processes that are running on the local computer.</span></span>
<span data-ttu-id="5ba80-679">リモートコンピューター上のプロセスを終了させることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-679">You cannot cause processes on remote computers to exit.</span></span> <span data-ttu-id="5ba80-680">リモートコンピューター上で実行されているプロセスの情報のみを表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-680">You can only view information for processes running on remote computers.</span></span>
  
> [!NOTE]
> <span data-ttu-id="5ba80-681">プロセスの終了中に`Kill`メソッドの呼び出しが行われた場合、アクセスが<xref:System.ComponentModel.Win32Exception>拒否されると、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-681">If the call to the `Kill` method is made while the process is currently terminating, a <xref:System.ComponentModel.Win32Exception> is thrown for Access Denied.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public void Kill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Kill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Kill" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Kill();" />
      <MemberSignature Language="F#" Value="member this.Kill : unit -&gt; unit" Usage="process.Kill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-682">関連付けられたプロセスを即時中断します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-682">Immediately stops the associated process.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-683">関連付けられたプロセスを終了できませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-683">The associated process could not be terminated.</span></span>  
  
 <span data-ttu-id="5ba80-684">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-684">-or-</span></span>  
  
 <span data-ttu-id="5ba80-685">プロセスを終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-685">The process is terminating.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-686">リモート コンピューターで実行されているプロセスの <see cref="M:System.Diagnostics.Process.Kill" /> を呼び出そうとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-686">You are attempting to call <see cref="M:System.Diagnostics.Process.Kill" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-687">このメソッドはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-687">The method is available only for processes running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-688">プロセスは既に終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-688">The process has already exited.</span></span>  
  
<span data-ttu-id="5ba80-689">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-689">-or-</span></span> 
<span data-ttu-id="5ba80-690">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-690">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-691">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-691">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-692">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-692">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Environment.Exit(System.Int32)" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public void Kill (bool entireProcessTree);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Kill(bool entireProcessTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Kill(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (entireProcessTree As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Kill(bool entireProcessTree);" />
      <MemberSignature Language="F#" Value="member this.Kill : bool -&gt; unit" Usage="process.Kill entireProcessTree" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entireProcessTree" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entireProcessTree"><span data-ttu-id="5ba80-693"><see langword="true" /> の場合、関連付けられているプロセスとその子孫が中止されます。<see langword="false" /> の場合、関連付けられているプロセスのみが中止されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-693"><see langword="true" /> to kill the associated process and its descendants; <see langword="false" /> to kill only the associated process.</span></span></param>
        <summary><span data-ttu-id="5ba80-694">関連付けられているプロセスと、任意で、その子/子孫プロセスを直ちに停止します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-694">Immediately stops the associated process, and optionally its child/descendent processes.</span></span></summary>
        <remarks><span data-ttu-id="5ba80-695">が<paramref name="entireProcessTree" /> に <see langword="true" /> 設定されている場合、呼び出しに詳細を表示するアクセス許可がないプロセスは、子孫終了プロセスによって暗黙的にスキップされます。これは、プロセスが子孫であるかどうかを終了プロセスが判断できないためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-695">When <paramref name="entireProcessTree" /> is set to <see langword="true" />, processes where the call lacks permissions to view details are silently skipped by the descendant termination process because the termination process is unable to determine whether those processes are descendants.</span></span></remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-696">関連付けられたプロセスを終了できませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-696">The associated process could not be terminated.</span></span>  
  
 <span data-ttu-id="5ba80-697">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-697">-or-</span></span>  
  
 <span data-ttu-id="5ba80-698">プロセスを終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-698">The process is terminating.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-699">リモート コンピューターで実行されているプロセスの <see cref="M:System.Diagnostics.Process.Kill" /> を呼び出そうとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-699">You are attempting to call <see cref="M:System.Diagnostics.Process.Kill" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-700">このメソッドはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-700">The method is available only for processes running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-701">プロセスは既に終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-701">The process has already exited.</span></span>  
  
<span data-ttu-id="5ba80-702">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-702">-or-</span></span> 
<span data-ttu-id="5ba80-703">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-703">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span>

<span data-ttu-id="5ba80-704">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-704">-or-</span></span>

<span data-ttu-id="5ba80-705">呼び出しプロセスは、関連付けられているプロセスの子孫ツリーのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-705">The calling process is a member of the associated process' descendant tree.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="5ba80-706">関連付けられているプロセスの子孫ツリーの一部のプロセスを強制終了できませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-706">Not all processes in the associated process' descendant tree could be terminated.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-707">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-707">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-708">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-708">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Environment.Exit(System.Int32)" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
      </Docs>
    </Member>
    <Member MemberName="LeaveDebugMode">
      <MemberSignature Language="C#" Value="public static void LeaveDebugMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LeaveDebugMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.LeaveDebugMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LeaveDebugMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LeaveDebugMode();" />
      <MemberSignature Language="F#" Value="static member LeaveDebugMode : unit -&gt; unit" Usage="System.Diagnostics.Process.LeaveDebugMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-709"><see cref="T:System.Diagnostics.Process" /> コンポーネントを、特殊なモードで実行されているオペレーティング システム プロセスと対話する状態から解放します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-709">Takes a <see cref="T:System.Diagnostics.Process" /> component out of the state that lets it interact with operating system processes that run in a special mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-710">一部のオペレーティングシステムプロセスは、特別なモードで実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-710">Some operating system processes run in a special mode.</span></span> <span data-ttu-id="5ba80-711">コンポーネントでを呼び出し<xref:System.Diagnostics.Process.EnterDebugMode%2A>ていない限り、これらのプロセスのプロパティを読み取ろうとしたり、これらのプロセスにアタッチしたりすることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-711">Attempting to read properties of or attach to these processes is not possible unless you have called <xref:System.Diagnostics.Process.EnterDebugMode%2A> on the component.</span></span> <span data-ttu-id="5ba80-712">特別<xref:System.Diagnostics.Process.LeaveDebugMode%2A>なモードで実行されるこれらのプロセスにアクセスする必要がなくなったときに、を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-712">Call <xref:System.Diagnostics.Process.LeaveDebugMode%2A> when you no longer need access to these processes that run in special mode.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-713">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-713">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-714">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-714">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.EnterDebugMode" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Diagnostics.Process.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of the machine the running the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMachineName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-715">関連付けられたプロセスを実行しているコンピューターの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-715">Gets the name of the computer the associated process is running on.</span></span></summary>
        <value><span data-ttu-id="5ba80-716">関連付けられたプロセスを実行しているコンピューターの名前。</span><span class="sxs-lookup"><span data-stu-id="5ba80-716">The name of the computer that the associated process is running on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-717">リモートコンピューター上で実行されているプロセスの統計データとプロセス情報を表示<xref:System.Diagnostics.Process.Start%2A>でき<xref:System.Diagnostics.Process.CloseMainWindow%2A>ますが<xref:System.Diagnostics.Process.Kill%2A> 、リモートコンピューターで、、またはを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-717">You can view statistical data and process information for processes running on remote computers but you cannot call <xref:System.Diagnostics.Process.Start%2A>, <xref:System.Diagnostics.Process.CloseMainWindow%2A>, or <xref:System.Diagnostics.Process.Kill%2A> on remote computers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-718">関連付けられたプロセスがローカルコンピューター上で実行されている場合、このプロパティはコンピューター名のピリオド (".") を返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-718">When the associated process is executing on the local machine, this property returns a period (".") for the machine name.</span></span> <span data-ttu-id="5ba80-719">正しいコンピューター名を<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>取得するには、プロパティを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-719">You should use the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to get the correct machine name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-720">次の例を使用するには、まず、リモートコンピューター上でメモ帳のインスタンスを少なくとも1つ起動する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-720">To use the following example you must first start at least one instance of Notepad on a remote computer.</span></span> <span data-ttu-id="5ba80-721">この例では、メモ帳が実行されているリモートコンピューターの名前を要求し<xref:System.Diagnostics.Process.ProcessName%2A>、 <xref:System.Diagnostics.Process.Id%2A>各インスタンス<xref:System.Diagnostics.Process.MachineName%2A>の、、およびの各プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-721">The example requests the name of the remote computer on which Notepad is running, and then displays the respective <xref:System.Diagnostics.Process.ProcessName%2A>, <xref:System.Diagnostics.Process.Id%2A>, and <xref:System.Diagnostics.Process.MachineName%2A> properties for each instance.</span></span>  
  
 [!code-csharp[process_GetProcessesByName2_2#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_GetProcessesByName2_2/CS/process_getprocessesbyname2_2.cs#2)]
 [!code-vb[process_GetProcessesByName2_2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_GetProcessesByName2_2/VB/process_getprocessesbyname2_2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-722">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-722">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-723">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-723">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-724">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-724">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MainModule">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModule MainModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessModule MainModule" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainModule" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainModule As ProcessModule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessModule ^ MainModule { System::Diagnostics::ProcessModule ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MainModule : System.Diagnostics.ProcessModule" Usage="System.Diagnostics.Process.MainModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The main module of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMainModule")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessModule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-725">関連付けられたプロセスのメイン モジュールを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-725">Gets the main module for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-726">プロセスを開始する際に使用した <see cref="T:System.Diagnostics.ProcessModule" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-726">The <see cref="T:System.Diagnostics.ProcessModule" /> that was used to start the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-727">プロセスモジュールは、特定のプロセスに読み込まれる .dll または .exe ファイルを表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-727">A process module represents a.dll or .exe file that is loaded into a particular process.</span></span> <span data-ttu-id="5ba80-728"><xref:System.Diagnostics.Process.MainModule%2A>プロパティを使用すると、モジュール名、ファイル名、モジュールメモリの詳細など、プロセスの開始に使用される実行可能ファイルに関する情報を表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-728">The <xref:System.Diagnostics.Process.MainModule%2A> property lets you view information about the executable used to start the process, including the module name, file name, and module memory details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-729">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MainModule" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-729">You are trying to access the <see cref="P:System.Diagnostics.Process.MainModule" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-730">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-730">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-731">32 ビット プロセスが 64 ビット プロセスのモジュールにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-731">A 32-bit process is trying to access the modules of a 64-bit process.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-732">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-732">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="5ba80-733">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-733">-or-</span></span> 
<span data-ttu-id="5ba80-734">プロセスが終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-734">The process has exited.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-735">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-735">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-736">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-736">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Modules" />
      </Docs>
    </Member>
    <Member MemberName="MainWindowHandle">
      <MemberSignature Language="C#" Value="public IntPtr MainWindowHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MainWindowHandle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainWindowHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainWindowHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MainWindowHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.MainWindowHandle : nativeint" Usage="System.Diagnostics.Process.MainWindowHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The handle of the main window of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMainWindowHandle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-737">関連付けられたプロセスのメイン ウィンドウで使用するウィンドウ ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-737">Gets the window handle of the main window of the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-738">関連付けられたプロセスのメイン ウィンドウで使用する、システムが生成したウィンドウ ハンドル。</span><span class="sxs-lookup"><span data-stu-id="5ba80-738">The system-generated window handle of the main window of the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-739">メインウィンドウは、現在フォーカスがあるプロセス ( <xref:System.Windows.Forms.Form.TopLevel%2A>フォーム) によって開かれたウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-739">The main window is the window opened by the process that currently has the focus (the <xref:System.Windows.Forms.Form.TopLevel%2A> form).</span></span> <span data-ttu-id="5ba80-740">オブジェクト <xref:System.Diagnostics.Process> を更新する<xref:System.Diagnostics.Process.Refresh%2A>には、メソッドを使用して、現在のメインウィンドウハンドルが変更されている場合にそのハンドルを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-740">You must use the <xref:System.Diagnostics.Process.Refresh%2A> method to refresh the <xref:System.Diagnostics.Process> object to get the current main window handle if it has changed.</span></span> <span data-ttu-id="5ba80-741">一般に、ウィンドウハンドルはキャッシュされている<xref:System.Diagnostics.Process.Refresh%2A>ため、現在のハンドルを取得することを保証するために、事前にを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-741">In general, because the window handle is cached, use <xref:System.Diagnostics.Process.Refresh%2A> beforehand to guarantee that you'll retrieve the current handle.</span></span>  
  
 <span data-ttu-id="5ba80-742"><xref:System.Diagnostics.Process.MainWindowHandle%2A>プロパティを取得できるのは、ローカルコンピューター上で実行されているプロセスだけです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-742">You can get the <xref:System.Diagnostics.Process.MainWindowHandle%2A> property only for processes that are running on the local computer.</span></span> <span data-ttu-id="5ba80-743"><xref:System.Diagnostics.Process.MainWindowHandle%2A>プロパティは、プロセスに関連付けられているウィンドウを一意に識別する値です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-743">The <xref:System.Diagnostics.Process.MainWindowHandle%2A> property is a value that uniquely identifies the window that is associated with the process.</span></span>  
  
 <span data-ttu-id="5ba80-744">プロセスには、プロセスにグラフィカルインターフェイスがある場合にのみ、関連付けられているメインウィンドウがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-744">A process has a main window associated with it only if the process has a graphical interface.</span></span> <span data-ttu-id="5ba80-745">関連付けられたプロセスにメインウィンドウがない場合、 <xref:System.Diagnostics.Process.MainWindowHandle%2A>値は0になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-745">If the associated process does not have a main window, the <xref:System.Diagnostics.Process.MainWindowHandle%2A> value is zero.</span></span> <span data-ttu-id="5ba80-746">この値は、非表示になっているプロセス (タスクバーに表示されないプロセス) でも0になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-746">The value is also zero for processes that have been hidden, that is, processes that are not visible in the taskbar.</span></span> <span data-ttu-id="5ba80-747">これは、タスクバーの右端にある通知領域にアイコンとして表示されるプロセスの場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-747">This can be the case for processes that appear as icons in the notification area, at the far right of the taskbar.</span></span>  
  
 <span data-ttu-id="5ba80-748">プロセスを開始したばかりで、メインウィンドウハンドルを使用する場合は、 <xref:System.Diagnostics.Process.WaitForInputIdle%2A>メソッドを使用して、プロセスの開始を許可し、メインウィンドウハンドルが作成されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-748">If you have just started a process and want to use its main window handle, consider using the <xref:System.Diagnostics.Process.WaitForInputIdle%2A> method to allow the process to finish starting, ensuring that the main window handle has been created.</span></span> <span data-ttu-id="5ba80-749">この操作を行わない場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-749">Otherwise, an exception will be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-750">プロセスが終了したため、<see cref="P:System.Diagnostics.Process.MainWindowHandle" /> が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-750">The <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> is not defined because the process has exited.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-751">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-751">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-752">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-752">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-753">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-753">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-754">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-754">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MainWindowTitle" />
        <altmember cref="P:System.Diagnostics.Process.MainModule" />
      </Docs>
    </Member>
    <Member MemberName="MainWindowTitle">
      <MemberSignature Language="C#" Value="public string MainWindowTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MainWindowTitle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainWindowTitle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainWindowTitle As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MainWindowTitle { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MainWindowTitle : string" Usage="System.Diagnostics.Process.MainWindowTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The title of the main window of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMainWindowTitle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-755">プロセスのメイン ウィンドウのキャプションを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-755">Gets the caption of the main window of the process.</span></span></summary>
        <value><span data-ttu-id="5ba80-756">プロセスのメイン ウィンドウのタイトル。</span><span class="sxs-lookup"><span data-stu-id="5ba80-756">The main window title of the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-757">プロセスには、プロセスにグラフィカルインターフェイスがある場合にのみ、関連付けられているメインウィンドウがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-757">A process has a main window associated with it only if the process has a graphical interface.</span></span> <span data-ttu-id="5ba80-758">関連付けられたプロセスにメインウィンドウがない ( <xref:System.Diagnostics.Process.MainWindowHandle%2A>つまり、が0である) 場合、 <xref:System.Diagnostics.Process.MainWindowTitle%2A>は空の文字列 ("") になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-758">If the associated process does not have a main window (so that <xref:System.Diagnostics.Process.MainWindowHandle%2A> is zero), <xref:System.Diagnostics.Process.MainWindowTitle%2A> is an empty string ("").</span></span> <span data-ttu-id="5ba80-759">プロセスを開始したばかりで、メインウィンドウタイトルを使用する場合は、 <xref:System.Diagnostics.Process.WaitForInputIdle%2A>メソッドを使用して、プロセスの開始を許可し、メインウィンドウハンドルが作成されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-759">If you have just started a process and want to use its main window title, consider using the <xref:System.Diagnostics.Process.WaitForInputIdle%2A> method to allow the process to finish starting, ensuring that the main window handle has been created.</span></span> <span data-ttu-id="5ba80-760">それ以外の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-760">Otherwise, the system throws an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-761">メインウィンドウは、現在フォーカスがあるウィンドウです。これは、プロセスの主要なウィンドウではない可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-761">The main window is the window that currently has the focus; note that this might not be the primary window for the process.</span></span> <span data-ttu-id="5ba80-762">オブジェクト <xref:System.Diagnostics.Process> を更新する<xref:System.Diagnostics.Process.Refresh%2A>には、メソッドを使用して、現在のメインウィンドウハンドルが変更されている場合にそのハンドルを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-762">You must use the <xref:System.Diagnostics.Process.Refresh%2A> method to refresh the <xref:System.Diagnostics.Process> object to get the current main window handle if it has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-763">次の例では、メモ帳のインスタンスを起動して、プロセスのメインウィンドウのキャプションを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-763">The following example starts an instance of Notepad and retrieves the caption of the main window of the process.</span></span>  
  
 [!code-cpp[process_MainWindowTitle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_MainWindowTitle/CPP/process_mainwindowtitle.cpp#1)]
 [!code-csharp[process_MainWindowTitle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_MainWindowTitle/CS/process_mainwindowtitle.cs#1)]
 [!code-vb[process_MainWindowTitle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_MainWindowTitle/VB/process_mainwindowtitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-764">プロセスが終了したため、<see cref="P:System.Diagnostics.Process.MainWindowTitle" /> プロパティが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-764">The <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> property is not defined because the process has exited.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-765">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-765">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-766">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-766">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-767">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-767">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-768">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-768">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MaxWorkingSet">
      <MemberSignature Language="C#" Value="public IntPtr MaxWorkingSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MaxWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MaxWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWorkingSet As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MaxWorkingSet { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWorkingSet : nativeint with get, set" Usage="System.Diagnostics.Process.MaxWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of physical memory the process has required since it was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMaxWorkingSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-769">関連付けられたプロセスに許可されるワーキング セットの最大サイズ (バイト単位) を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-769">Gets or sets the maximum allowable working set size, in bytes, for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-770">プロセスに許可されるメモリ上のワーキング セットの最大サイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-770">The maximum working set size that is allowed in memory for the process, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-771">プロセスのワーキングセットは、物理 RAM メモリ内のプロセスに現在表示されているメモリページのセットです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-771">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="5ba80-772">これらのページは常駐し、アプリケーションがページフォールトをトリガーすることなく使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-772">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="5ba80-773">ワーキングセットには、共有データとプライベートデータの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-773">The working set includes both shared and private data.</span></span> <span data-ttu-id="5ba80-774">共有データには、アプリケーションによって実行されるすべての命令を含むページが含まれます。これには、.dll ファイル内のページとシステム .dll ファイルも含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-774">The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</span></span> <span data-ttu-id="5ba80-775">ワーキングセットのサイズが増加するにつれて、メモリの需要が増加します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-775">As the working set size increases, memory demand increases.</span></span>  
  
 <span data-ttu-id="5ba80-776">プロセスのワーキングセットのサイズは、最小値と最大値です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-776">A process has minimum and maximum working set sizes.</span></span> <span data-ttu-id="5ba80-777">プロセスリソースが作成されるたびに、プロセスのワーキングセットの最小サイズと同じ量のメモリがシステムによって予約されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-777">Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</span></span> <span data-ttu-id="5ba80-778">仮想メモリマネージャーは、プロセスがアクティブなときに少なくとも最小メモリ容量を維持しようとしますが、最大サイズを超えることはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-778">The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</span></span>  
  
 <span data-ttu-id="5ba80-779">既定のワーキングセットのサイズは、システムによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-779">The system sets the default working set sizes.</span></span> <span data-ttu-id="5ba80-780">これらのサイズは、 <xref:System.Diagnostics.Process.MaxWorkingSet%2A>メンバーと<xref:System.Diagnostics.Process.MinWorkingSet%2A>メンバーを使用して変更できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-780">You can modify these sizes using the <xref:System.Diagnostics.Process.MaxWorkingSet%2A> and <xref:System.Diagnostics.Process.MinWorkingSet%2A> members.</span></span> <span data-ttu-id="5ba80-781">ただし、これらの値を設定しても、メモリが予約されているか常駐しているかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-781">However, setting these values does not guarantee that the memory will be reserved or resident.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-782">プロセスのワーキングセットのサイズを大きくすると、システムの他の部分から物理メモリを離れた場所に移動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-782">When you increase the working set size of a process, you take physical memory away from the rest of the system.</span></span> <span data-ttu-id="5ba80-783">ワーキングセットのサイズの最小値または最大値を要求しないようにしてください。そうしないと、システムのパフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-783">Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5ba80-784">ワーキング セットの最大サイズが正しくありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-784">The maximum working set size is invalid.</span></span> <span data-ttu-id="5ba80-785">この値は、ワーキング セットの最小サイズ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-785">It must be greater than or equal to the minimum working set size.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-786">関連付けられているプロセス リソースからワーキング セット情報を取得できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-786">Working set information cannot be retrieved from the associated process resource.</span></span>  
  
 <span data-ttu-id="5ba80-787">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-787">-or-</span></span>  
  
 <span data-ttu-id="5ba80-788">プロセスが開始されていないので、プロセス識別子またはプロセス ハンドルが 0 です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-788">The process identifier or process handle is zero because the process has not been started.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-789">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-789">You are trying to access the <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-790">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-790">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-791">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-791">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="5ba80-792">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-792">-or-</span></span> 
<span data-ttu-id="5ba80-793">プロセスが終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-793">The process has exited.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-794">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-794">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-795">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-795">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="MinWorkingSet">
      <MemberSignature Language="C#" Value="public IntPtr MinWorkingSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MinWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MinWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWorkingSet As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MinWorkingSet { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.MinWorkingSet : nativeint with get, set" Usage="System.Diagnostics.Process.MinWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The minimum amount of physical memory the process has required since it was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMinWorkingSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-796">関連付けられたプロセスに許可されるワーキング セットの最小サイズ (バイト単位) を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-796">Gets or sets the minimum allowable working set size, in bytes, for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-797">プロセスに必要なメモリ上のワーキング セットの最小サイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-797">The minimum working set size that is required in memory for the process, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-798">プロセスのワーキングセットは、物理 RAM メモリ内のプロセスに現在表示されているメモリページのセットです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-798">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="5ba80-799">これらのページは常駐し、アプリケーションがページフォールトをトリガーすることなく使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-799">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="5ba80-800">ワーキングセットには、共有データとプライベートデータの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-800">The working set includes both shared and private data.</span></span> <span data-ttu-id="5ba80-801">共有データには、アプリケーションによって実行されるすべての命令を含むページが含まれます。これには、.dll ファイル内のページとシステム .dll ファイルも含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-801">The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</span></span> <span data-ttu-id="5ba80-802">ワーキングセットのサイズが増加するにつれて、メモリの需要が増加します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-802">As the working set size increases, memory demand increases.</span></span>  
  
 <span data-ttu-id="5ba80-803">プロセスのワーキングセットのサイズは、最小値と最大値です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-803">A process has minimum and maximum working set sizes.</span></span> <span data-ttu-id="5ba80-804">プロセスリソースが作成されるたびに、プロセスのワーキングセットの最小サイズと同じ量のメモリがシステムによって予約されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-804">Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</span></span> <span data-ttu-id="5ba80-805">仮想メモリマネージャーは、プロセスがアクティブなときに少なくとも最小メモリ容量を維持しようとしますが、最大サイズを超えることはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-805">The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</span></span>  
  
 <span data-ttu-id="5ba80-806">既定のワーキングセットのサイズは、システムによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-806">The system sets the default working set sizes.</span></span> <span data-ttu-id="5ba80-807">これらのサイズは、 <xref:System.Diagnostics.Process.MaxWorkingSet%2A>メンバーと<xref:System.Diagnostics.Process.MinWorkingSet%2A>メンバーを使用して変更できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-807">You can modify these sizes using the <xref:System.Diagnostics.Process.MaxWorkingSet%2A> and <xref:System.Diagnostics.Process.MinWorkingSet%2A> members.</span></span> <span data-ttu-id="5ba80-808">ただし、これらの値を設定しても、メモリが予約されているか常駐しているかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-808">However, setting these values does not guarantee that the memory will be reserved or resident.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-809">プロセスのワーキングセットのサイズを大きくすると、システムの他の部分から物理メモリを離れた場所に移動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-809">When you increase the working set size of a process, you take physical memory away from the rest of the system.</span></span> <span data-ttu-id="5ba80-810">ワーキングセットのサイズの最小値または最大値を要求しないようにしてください。そうしないと、システムのパフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-810">Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5ba80-811">ワーキング セットの最小サイズが正しくありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-811">The minimum working set size is invalid.</span></span> <span data-ttu-id="5ba80-812">この値は、ワーキング セットの最大サイズ以下にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-812">It must be less than or equal to the maximum working set size.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-813">関連付けられているプロセス リソースからワーキング セット情報を取得できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-813">Working set information cannot be retrieved from the associated process resource.</span></span>  
  
 <span data-ttu-id="5ba80-814">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-814">-or-</span></span>  
  
 <span data-ttu-id="5ba80-815">プロセスが開始されていないので、プロセス識別子またはプロセス ハンドルが 0 です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-815">The process identifier or process handle is zero because the process has not been started.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-816">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-816">You are trying to access the <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-817">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-817">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-818">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-818">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="5ba80-819">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-819">-or-</span></span> 
<span data-ttu-id="5ba80-820">プロセスが終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-820">The process has exited.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-821">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-821">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-822">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-822">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModuleCollection Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessModuleCollection Modules" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Modules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modules As ProcessModuleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessModuleCollection ^ Modules { System::Diagnostics::ProcessModuleCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Modules : System.Diagnostics.ProcessModuleCollection" Usage="System.Diagnostics.Process.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The modules that are loaded as part of this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessModules")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessModuleCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-823">関連付けられたプロセスに読み込まれたモジュールを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-823">Gets the modules that have been loaded by the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-824">関連付けられたプロセスに読み込まれたモジュールを表す <see cref="T:System.Diagnostics.ProcessModule" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="5ba80-824">An array of type <see cref="T:System.Diagnostics.ProcessModule" /> that represents the modules that have been loaded by the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-825">プロセスモジュールは、特定のプロセスに読み込まれる .dll または .exe ファイルを表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-825">A process module represents a.dll or .exe file that is loaded into a particular process.</span></span> <span data-ttu-id="5ba80-826">インスタンス<xref:System.Diagnostics.ProcessModule>を使用すると、モジュール名、ファイル名、モジュールメモリの詳細など、モジュールに関する情報を表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-826">A <xref:System.Diagnostics.ProcessModule> instance lets you view information about a module, including the module name, file name, and module memory details.</span></span>  
  
 <span data-ttu-id="5ba80-827">プロセスでは、複数のモジュールをメモリに読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-827">A process can load multiple modules into memory.</span></span> <span data-ttu-id="5ba80-828">たとえば、追加の .dll ファイルを読み込む .exe ファイルには、複数のモジュールがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-828">For example,.exe files that load additional .dll files have multiple modules.</span></span>  
  
 <span data-ttu-id="5ba80-829">プロセスの開始後、このコレクションは、システムによってプロセスが読み込まれるまで空になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-829">After starting the process, this collection is empty until the system has loaded the process.</span></span> <span data-ttu-id="5ba80-830">プロセスにメインウィンドウがある場合は、このプロパティ<xref:System.Diagnostics.Process.WaitForInputIdle%2A>を取得する前にを呼び出して、リストを取得したときにコレクションが空でないことを確認できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-830">If the process has a main window, you can call <xref:System.Diagnostics.Process.WaitForInputIdle%2A> before retrieving this property to ensure that the collection is nonempty when you get the list.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-831">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.Modules" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-831">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-832">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-832">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-833">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-833">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-834">システム プロセスまたはアイドル状態のプロセスのいずれかの <see cref="P:System.Diagnostics.Process.Modules" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-834">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules" /> property for either the system process or the idle process.</span></span> <span data-ttu-id="5ba80-835">これらのプロセスには、モジュールが存在しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-835">These processes do not have modules.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-836">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-836">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-837">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-837">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.Diagnostics.ProcessModule" />
      </Docs>
    </Member>
    <Member MemberName="NonpagedSystemMemorySize">
      <MemberSignature Language="C#" Value="public int NonpagedSystemMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NonpagedSystemMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.NonpagedSystemMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NonpagedSystemMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NonpagedSystemMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NonpagedSystemMemorySize : int" Usage="System.Diagnostics.Process.NonpagedSystemMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use NonpagedSystemMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessNonpagedSystemMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-838">関連付けられたプロセスに割り当てられたページングされないシステム メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-838">Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-839">システムによって関連付けられたプロセスに割り当てられた、仮想メモリ ページング ファイルに書き込むことができないメモリの容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-839">The amount of memory, in bytes, the system has allocated for the associated process that cannot be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-840">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-840">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-841">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-841">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="NonpagedSystemMemorySize64">
      <MemberSignature Language="C#" Value="public long NonpagedSystemMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 NonpagedSystemMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NonpagedSystemMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long NonpagedSystemMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.NonpagedSystemMemorySize64 : int64" Usage="System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessNonpagedSystemMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-842">関連付けられたプロセスに割り当てられたページングされないシステム メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-842">Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-843">関連付けられたプロセスに割り当てられた、仮想メモリ ページング ファイルに書き込むことができないシステム メモリの容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-843">The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-844">このプロパティによって返される値は、プロセスによって使用されるページシステムメモリの現在のサイズ (バイト単位) を表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-844">The value returned by this property represents the current size of nonpaged system memory used by the process, in bytes.</span></span> <span data-ttu-id="5ba80-845">システムメモリはオペレーティングシステムによって使用される物理メモリであり、ページングされたプールと非ページプールに分かれています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-845">System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</span></span> <span data-ttu-id="5ba80-846">ページングされていないメモリ割り当ては、システムメモリに残り、仮想メモリページングファイルにはページングされません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-846">Nonpaged memory allocations remain in system memory and are not paged out to the virtual memory paging file.</span></span>  
  
 <span data-ttu-id="5ba80-847">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-847">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-848">プロパティ値は、プロセスの "**プールの非ページバイト数**" パフォーマンスカウンターに相当します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-848">The property value is equivalent to the **Pool Nonpaged Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-849">次のコード例では、メモ帳アプリケーションのインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-849">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="5ba80-850">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-850">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-851">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-851">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-852">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-852">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-853">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-853">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="OnExited">
      <MemberSignature Language="C#" Value="protected void OnExited ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnExited() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.OnExited" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnExited ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnExited();" />
      <MemberSignature Language="F#" Value="member this.OnExited : unit -&gt; unit" Usage="process.OnExited " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-854"><see cref="E:System.Diagnostics.Process.Exited" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-854">Raises the <see cref="E:System.Diagnostics.Process.Exited" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-855"><xref:System.Diagnostics.Process.OnExited%2A>は、 <xref:System.Diagnostics.Process.Exited>イベントを発生させる API メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-855"><xref:System.Diagnostics.Process.OnExited%2A> is the API method that raises the <xref:System.Diagnostics.Process.Exited> event.</span></span> <span data-ttu-id="5ba80-856">を呼び出す<xref:System.Diagnostics.Process.OnExited%2A>と、 <xref:System.Diagnostics.Process> イベントが発生し、コンポーネントを使用してイベントを発生させる唯一の方法 <xref:System.Diagnostics.Process.Exited> となります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-856">Calling <xref:System.Diagnostics.Process.OnExited%2A> causes the <xref:System.Diagnostics.Process.Exited> event to occur and is the only way to raise the event using the <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="5ba80-857"><xref:System.Diagnostics.Process.OnExited%2A>は、主にコンポーネントからクラスを派生させるときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-857"><xref:System.Diagnostics.Process.OnExited%2A> is primarily used when deriving classes from the component.</span></span>  
  
 <span data-ttu-id="5ba80-858"><xref:System.Diagnostics.Process.OnExited%2A>の代わりに、独自のイベントハンドラーを作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-858">As an alternative to <xref:System.Diagnostics.Process.OnExited%2A>, you can write your own event handler.</span></span> <span data-ttu-id="5ba80-859">独自のイベントハンドラーデリゲートと独自のイベント処理メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-859">You create your own event handler delegate and your own event-handling method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-860">Visual Studio 環境を使用している場合は、コンポーネントを<xref:System.Diagnostics.Process>フォームにドラッグし、アイコンをダブルクリックすると、イベントハンドラーデリゲート (AddOnExited) とイベント処理メソッド (Process1_Exited) が作成されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-860">If you are using the Visual Studio environment, an event handler delegate (AddOnExited) and an event-handling method (Process1_Exited) are created for you when you drag a <xref:System.Diagnostics.Process> component onto a form and double-click the icon.</span></span> <span data-ttu-id="5ba80-861"><xref:System.Diagnostics.Process.Exited>イベントが発生したときに実行するために作成したコードは、Process1_Exited プロシージャに入力されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-861">The code you create to run when the <xref:System.Diagnostics.Process.Exited> event occurs is entered into the Process1_Exited procedure.</span></span> <span data-ttu-id="5ba80-862"><xref:System.Diagnostics.Process.OnExited%2A>メンバーが実装されているため、メンバーを作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-862">You do not need to create the <xref:System.Diagnostics.Process.OnExited%2A> member, because it is implemented for you.</span></span>  
  
 <span data-ttu-id="5ba80-863">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-863">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5ba80-864">概要については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-864">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-865">派生クラスで<xref:System.Diagnostics.Process.OnExited%2A>メソッドを使用する方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-865">The following example shows how to use the <xref:System.Diagnostics.Process.OnExited%2A> method in a derived class.</span></span>  
  
 [!code-csharp[OnExitSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/onexitsample/cs/program.cs#1)]
 [!code-vb[OnExitSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/onexitsample/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-866">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-866">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-867">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-867">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="E:System.Diagnostics.Process.Exited" />
      </Docs>
    </Member>
    <Member MemberName="OutputDataReceived">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.DataReceivedEventHandler OutputDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.DataReceivedEventHandler OutputDataReceived" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.OutputDataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OutputDataReceived As DataReceivedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::DataReceivedEventHandler ^ OutputDataReceived;" />
      <MemberSignature Language="F#" Value="member this.OutputDataReceived : System.Diagnostics.DataReceivedEventHandler " Usage="member this.OutputDataReceived : System.Diagnostics.DataReceivedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessAssociated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-868">アプリケーションが、リダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームに行を書き込む度に発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-868">Occurs each time an application writes a line to its redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-869">イベント<xref:System.Diagnostics.Process.OutputDataReceived>は、関連付けら<xref:System.Diagnostics.Process>れたが、リダイレクト<xref:System.Diagnostics.Process.StandardOutput%2A>されたストリームの改行文字で終了する行を書き込んだことを示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-869">The <xref:System.Diagnostics.Process.OutputDataReceived> event indicates that the associated <xref:System.Diagnostics.Process> has written a line, terminating with a newline character, to its redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
 <span data-ttu-id="5ba80-870">イベントは、での<xref:System.Diagnostics.Process.StandardOutput%2A>非同期読み取り操作中に有効になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-870">The event is enabled during asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A>.</span></span> <span data-ttu-id="5ba80-871">非同期<xref:System.Diagnostics.Process.StandardOutput%2A> <xref:System.Diagnostics.Process.OutputDataReceived> の読み取り <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 操作を開始するには、のストリームをリダイレクトし、イベントにイベントハンドラーを追加して、を呼び出す必要があります。 <xref:System.Diagnostics.Process></span><span class="sxs-lookup"><span data-stu-id="5ba80-871">To start asynchronous read operations, you must redirect the <xref:System.Diagnostics.Process.StandardOutput%2A> stream of a <xref:System.Diagnostics.Process>, add your event handler to the <xref:System.Diagnostics.Process.OutputDataReceived> event, and call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>.</span></span> <span data-ttu-id="5ba80-872">その後、 <xref:System.Diagnostics.Process.OutputDataReceived>このイベントは、プロセスが終了するか、が呼び出さ<xref:System.Diagnostics.Process.StandardOutput%2A> <xref:System.Diagnostics.Process.CancelOutputRead%2A>れるまで、リダイレクトされたストリームに行が書き込まれるたびに通知します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-872">Thereafter, the <xref:System.Diagnostics.Process.OutputDataReceived> event signals each time the process writes a line to the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, until the process exits or calls <xref:System.Diagnostics.Process.CancelOutputRead%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-873">非同期出力を処理するアプリケーションでは、出力バッファー <xref:System.Diagnostics.Process.WaitForExit%2A>がフラッシュされたことを確認するためにメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-873">The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-874">次の例は、 <xref:System.Diagnostics.Process.StandardOutput%2A> `ipconfig`コマンドのリダイレクトされたストリームで非同期の読み取り操作を実行する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-874">The following example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `ipconfig` command.</span></span>  
  
 <span data-ttu-id="5ba80-875">この例では、イベントハンドラーの`OutputHandler`イベントデリゲートを作成し、イベント<xref:System.Diagnostics.Process.OutputDataReceived>に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-875">The example creates an event delegate for the `OutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="5ba80-876">イベントハンドラーは、リダイレクト<xref:System.Diagnostics.Process.StandardOutput%2A>されたストリームからテキスト行を受け取り、テキストを書式設定して、後で例のコンソールウィンドウに表示される出力文字列に保存します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-876">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and saves it in an output string that's later shown in the example's console window.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-877">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-877">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-878">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-878">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="M:System.Diagnostics.Process.BeginOutputReadLine" />
        <altmember cref="M:System.Diagnostics.Process.CancelOutputRead" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PagedMemorySize">
      <MemberSignature Language="C#" Value="public int PagedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PagedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PagedMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedMemorySize : int" Usage="System.Diagnostics.Process.PagedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PagedMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPagedMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-879">関連付けられたプロセスに割り当てられたページ メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-879">Gets the amount of paged memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-880">仮想メモリ ページング ファイルに書き込むことができる関連付けられたプロセスによって割り当てられたメモリの容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-880">The amount of memory, in bytes, allocated by the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-881">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-881">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-882">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-882">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedMemorySize64">
      <MemberSignature Language="C#" Value="public long PagedMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PagedMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PagedMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedMemorySize64 : int64" Usage="System.Diagnostics.Process.PagedMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPagedMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-883">関連付けられたプロセスに割り当てられたページ メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-883">Gets the amount of paged memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-884">関連付けられたプロセスの仮想メモリ ページング ファイル内で割り当てられたメモリの量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-884">The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-885">このプロパティによって返される値は、プロセスによって使用される仮想メモリページングファイル内のメモリの現在のサイズをバイト単位で表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-885">The value returned by this property represents the current size of memory in the virtual memory paging file used by the process, in bytes.</span></span> <span data-ttu-id="5ba80-886">オペレーティングシステムは、仮想メモリページングファイルと物理メモリを使用して、各プロセスの仮想アドレス空間を管理します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-886">The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</span></span> <span data-ttu-id="5ba80-887">ページング可能なメモリが使用されていない場合は、ディスク上の仮想メモリのページングファイルに転送できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-887">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span> <span data-ttu-id="5ba80-888">プロセスのオペレーティングシステムによって使用されているメモリのサイズを取得<xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A>するには、プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-888">To obtain the size of memory used by the operating system for the process, use the <xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A> property.</span></span>  
  
 <span data-ttu-id="5ba80-889">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-889">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-890">プロパティ値は、プロセスの**ページファイル Bytes**パフォーマンスカウンターに相当します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-890">The property value is equivalent to the **Page File Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-891">次のコード例では、メモ帳アプリケーションのインスタンスを起動し、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-891">The following code example starts an instance of the Notepad application, and then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-892">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-892">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-893">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-893">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-894">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-894">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedSystemMemorySize">
      <MemberSignature Language="C#" Value="public int PagedSystemMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PagedSystemMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedSystemMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedSystemMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PagedSystemMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedSystemMemorySize : int" Usage="System.Diagnostics.Process.PagedSystemMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PagedSystemMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedSystemMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPagedSystemMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedSystemMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-895">関連付けられたプロセスに割り当てられたページング可能なシステム メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-895">Gets the amount of pageable system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-896">システムによって関連付けられたプロセスに割り当てられた、仮想メモリ ページング ファイルに書き込むことができるメモリの容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-896">The amount of memory, in bytes, the system has allocated for the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-897">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-897">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-898">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-898">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedSystemMemorySize64">
      <MemberSignature Language="C#" Value="public long PagedSystemMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PagedSystemMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedSystemMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PagedSystemMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedSystemMemorySize64 : int64" Usage="System.Diagnostics.Process.PagedSystemMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPagedSystemMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-899">関連付けられたプロセスに割り当てられたページング可能なシステム メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-899">Gets the amount of pageable system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-900">関連付けられたプロセスに割り当てられた、仮想メモリ ページング ファイルに書き込むことができるシステム メモリの容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-900">The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-901">このプロパティ値によって返される値は、プロセスによって使用されるページング可能なシステムメモリの現在のサイズ (バイト単位) を表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-901">The value returned by this property value represents the current size of pageable system memory used by the process, in bytes.</span></span> <span data-ttu-id="5ba80-902">システムメモリはオペレーティングシステムによって使用される物理メモリであり、ページングされたプールと非ページプールに分かれています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-902">System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</span></span> <span data-ttu-id="5ba80-903">ページング可能なメモリが使用されていない場合は、ディスク上の仮想メモリのページングファイルに転送できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-903">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span> <span data-ttu-id="5ba80-904">プロセスによって使用されるアプリケーションメモリのサイズを取得するに<xref:System.Diagnostics.Process.PagedMemorySize64%2A>は、プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-904">To obtain the size of the application memory used by the process, use the <xref:System.Diagnostics.Process.PagedMemorySize64%2A> property.</span></span>  
  
 <span data-ttu-id="5ba80-905">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-905">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-906">プロパティ値は、プロセスの**Pool Bytes (ページバイト数)** パフォーマンスカウンターに相当します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-906">The property value is equivalent to the **Pool Paged Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-907">次のコード例では、メモ帳アプリケーションのインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-907">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="5ba80-908">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-908">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-909">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-909">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-910">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-910">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-911">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-911">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakPagedMemorySize">
      <MemberSignature Language="C#" Value="public int PeakPagedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakPagedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakPagedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakPagedMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakPagedMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakPagedMemorySize : int" Usage="System.Diagnostics.Process.PeakPagedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PeakPagedMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakPagedMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakPagedMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakPagedMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-912">関連付けられたプロセスによって使用される、仮想メモリ ページング ファイル内のメモリの最大量を取得します (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-912">Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-913">関連付けられたプロセスによって割り当てられた、仮想メモリ ページング ファイルに書き込むことができたメモリの最大容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-913">The maximum amount of memory, in bytes, allocated by the associated process that could be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-914">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-914">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-915">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-915">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakPagedMemorySize64">
      <MemberSignature Language="C#" Value="public long PeakPagedMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakPagedMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakPagedMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakPagedMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakPagedMemorySize64 : int64" Usage="System.Diagnostics.Process.PeakPagedMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakPagedMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-916">関連付けられたプロセスによって使用される、仮想メモリ ページング ファイル内のメモリの最大量を取得します (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-916">Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-917">プロセスの開始以降、関連付けられたプロセスの仮想メモリ ページング ファイル内で割り当てられたメモリの最大量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-917">The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-918">このプロパティ値によって返される値は、プロセスが開始してから使用した仮想メモリページングファイル内のメモリの最大サイズをバイト単位で表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-918">The value returned by this property value represents the maximum size of memory in the virtual memory paging file used by the process since it started, in bytes.</span></span> <span data-ttu-id="5ba80-919">オペレーティングシステムは、仮想メモリページングファイルと物理メモリを使用して、各プロセスの仮想アドレス空間を管理します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-919">The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</span></span> <span data-ttu-id="5ba80-920">ページング可能なメモリが使用されていない場合は、ディスク上の仮想メモリのページングファイルに転送できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-920">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="5ba80-921">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-921">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-922">プロパティ値は、プロセスの**ページファイルバイトピーク**パフォーマンスカウンターに相当します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-922">The property value is equivalent to the **Page File Bytes Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-923">次のコード例では、メモ帳アプリケーションのインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-923">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="5ba80-924">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-924">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-925">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-925">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-926">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-926">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-927">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-927">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakVirtualMemorySize">
      <MemberSignature Language="C#" Value="public int PeakVirtualMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakVirtualMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakVirtualMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakVirtualMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakVirtualMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakVirtualMemorySize : int" Usage="System.Diagnostics.Process.PeakVirtualMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PeakVirtualMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakVirtualMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-928">関連付けられたプロセスによって使用される仮想メモリの最大量を取得します (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-928">Gets the maximum amount of virtual memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-929">関連付けられたプロセスが要求した仮想メモリの最大容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-929">The maximum amount of virtual memory, in bytes, that the associated process has requested.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-930">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-930">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-931">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-931">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakVirtualMemorySize64">
      <MemberSignature Language="C#" Value="public long PeakVirtualMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakVirtualMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakVirtualMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakVirtualMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakVirtualMemorySize64 : int64" Usage="System.Diagnostics.Process.PeakVirtualMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakVirtualMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-932">関連付けられたプロセスによって使用される仮想メモリの最大量を取得します (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-932">Gets the maximum amount of virtual memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-933">プロセスの開始以降、関連付けられたプロセスに割り当てられた仮想メモリの最大量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-933">The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-934">このプロパティによって返される値は、プロセスが開始してから使用した仮想メモリの最大サイズをバイト単位で表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-934">The value returned by this property represents the maximum size of virtual memory used by the process since it started, in bytes.</span></span> <span data-ttu-id="5ba80-935">オペレーティングシステムは、物理メモリに読み込まれたページか、ディスク上の仮想メモリページングファイルに格納されているページに、各プロセスの仮想アドレス空間をマップします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-935">The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="5ba80-936">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-936">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-937">プロパティ値は、プロセスの**仮想バイトピーク**パフォーマンスカウンターに相当します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-937">The property value is equivalent to the **Virtual Bytes Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-938">次のコード例では、メモ帳アプリケーションのインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-938">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="5ba80-939">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-939">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-940">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-940">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-941">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-941">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-942">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-942">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.VirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet">
      <MemberSignature Language="C#" Value="public int PeakWorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakWorkingSet { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakWorkingSet : int" Usage="System.Diagnostics.Process.PeakWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PeakWorkingSet64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakWorkingSet64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakWorkingSet")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakWorkingSet64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-943">関連付けられたプロセスのピーク ワーキング セット サイズをバイト単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-943">Gets the peak working set size for the associated process, in bytes.</span></span></summary>
        <value><span data-ttu-id="5ba80-944">関連づけられたプロセスが一度に要求した物理メモリのバイト単位での最大容量。</span><span class="sxs-lookup"><span data-stu-id="5ba80-944">The maximum amount of physical memory that the associated process has required all at once, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-945">プロセスのワーキングセットは、物理 RAM メモリ内のプロセスに現在表示されているメモリページのセットです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-945">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="5ba80-946">これらのページは常駐し、アプリケーションがページフォールトをトリガーすることなく使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-946">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="5ba80-947">ワーキングセットには、共有データとプライベートデータの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-947">The working set includes both shared and private data.</span></span> <span data-ttu-id="5ba80-948">共有データには、プロセスモジュールやシステムライブラリを含む、プロセスによって実行されるすべての命令を含むページが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-948">The shared data includes the pages that contain all the instructions that the process executes, including process modules and the system libraries.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-949">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-949">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-950">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-950">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet64">
      <MemberSignature Language="C#" Value="public long PeakWorkingSet64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakWorkingSet64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakWorkingSet64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakWorkingSet64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakWorkingSet64 : int64" Usage="System.Diagnostics.Process.PeakWorkingSet64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakWorkingSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-951">関連付けられたプロセスによって使用される物理メモリの最大量をバイト数として取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-951">Gets the maximum amount of physical memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-952">プロセスの開始以降、関連付けられたプロセスに割り当てられた物理メモリの最大量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-952">The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-953">このプロパティによって返される値は、プロセスが開始してから使用されるワーキングセットメモリの最大サイズをバイト単位で表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-953">The value returned by this property represents the maximum size of working set memory used by the process since it started, in bytes.</span></span> <span data-ttu-id="5ba80-954">プロセスのワーキングセットは、物理 RAM メモリ内のプロセスに現在表示されているメモリページのセットです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-954">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="5ba80-955">これらのページは常駐し、アプリケーションがページフォールトをトリガーすることなく使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-955">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="5ba80-956">ワーキングセットには、共有データとプライベートデータの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-956">The working set includes both shared and private data.</span></span> <span data-ttu-id="5ba80-957">共有データには、プロセスモジュールやシステムライブラリからの指示を含め、プロセスが実行するすべての命令を含むページが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-957">The shared data includes the pages that contain all the instructions that the process executes, including instructions from the process modules and the system libraries.</span></span>  
  
 <span data-ttu-id="5ba80-958">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-958">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-959">プロパティ値は、プロセスの**ワーキングセットのピーク時**のパフォーマンスカウンターと同じです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-959">The property value is equivalent to the **Working Set Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-960">次のコード例では、メモ帳アプリケーションのインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-960">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="5ba80-961">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-961">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-962">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-962">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-963">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-963">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-964">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-964">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
      </Docs>
    </Member>
    <Member MemberName="PriorityBoostEnabled">
      <MemberSignature Language="C#" Value="public bool PriorityBoostEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PriorityBoostEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PriorityBoostEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityBoostEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PriorityBoostEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityBoostEnabled : bool with get, set" Usage="System.Diagnostics.Process.PriorityBoostEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Process will be of higher priority while it is actively used.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPriorityBoostEnabled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-965">メイン ウィンドウのフォーカス時に、オペレーティング システムによって関連付けられたプロセスの優先順位を一時的に上げるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-965">Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</span></span></summary>
        <value><span data-ttu-id="5ba80-966">待機状態から抜けたときにプロセスの優先順位を動的に上げる場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-966"><see langword="true" /> if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="5ba80-967">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-967">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-968">優先度クラスに動的優先順位列挙値 (<xref:System.Diagnostics.ProcessPriorityClass.Normal>、 <xref:System.Diagnostics.ProcessPriorityClass.High>、または<xref:System.Diagnostics.ProcessPriorityClass.RealTime>) のいずれかがあるプロセスでスレッドが実行されると、待機状態から除外されたときに、システムは一時的にスレッドの優先順位をブーストします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-968">When a thread runs in a process for which the priority class has one of the dynamic priority enumeration values (<xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>), the system temporarily boosts the thread's priority when it is taken out of a wait state.</span></span> <span data-ttu-id="5ba80-969">この操作により、他のプロセスが現在のスレッドの処理を中断するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-969">This action prevents other processes from interrupting the processing of the current thread.</span></span> <span data-ttu-id="5ba80-970">この<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>設定は、プロセスによって作成されたすべての既存のスレッドとスレッドに影響します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-970">The <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> setting affects all the existing threads and any threads subsequently created by the process.</span></span> <span data-ttu-id="5ba80-971">通常の動作を復元するに<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>は、 `false`プロパティをに設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-971">To restore normal behavior, set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-972">優先順位を高くすると、重要なオペレーティングシステムやネットワーク機能からリソースがドレインされ、他のオペレーティングシステムのタスクに関する問題が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-972">Boosting the priority too high can drain resources from essential operating system and network functions, causing problems with other operating system tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-973">関連付けられているプロセス リソースから priority boost 情報を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-973">Priority boost information could not be retrieved from the associated process resource.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5ba80-974">プロセス識別子またはプロセス ハンドルが 0 です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-974">The process identifier or process handle is zero.</span></span> <span data-ttu-id="5ba80-975">(プロセスは開始されていません。)</span><span class="sxs-lookup"><span data-stu-id="5ba80-975">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-976">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-976">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-977">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-977">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-978">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-978">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-979">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-979">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-980">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-980">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="PriorityClass">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessPriorityClass PriorityClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ProcessPriorityClass PriorityClass" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PriorityClass" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityClass As ProcessPriorityClass" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessPriorityClass PriorityClass { System::Diagnostics::ProcessPriorityClass get(); void set(System::Diagnostics::ProcessPriorityClass value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityClass : System.Diagnostics.ProcessPriorityClass with get, set" Usage="System.Diagnostics.Process.PriorityClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The priority that the threads in the process run relative to.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPriorityClass")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessPriorityClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-981">関連付けられたプロセスの全体的な優先順位カテゴリを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-981">Gets or sets the overall priority category for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-982">プロセスの <see cref="P:System.Diagnostics.Process.BasePriority" /> を計算するときに使用する、関連付けられたプロセスの優先順位カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="5ba80-982">The priority category for the associated process, from which the <see cref="P:System.Diagnostics.Process.BasePriority" /> of the process is calculated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-983">プロセス優先度クラスは、スレッドの優先度レベルの範囲を含みます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-983">A process priority class encompasses a range of thread priority levels.</span></span> <span data-ttu-id="5ba80-984">プロセスで実行されている優先順位が異なるスレッドは、プロセスの優先度クラスと比較して実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-984">Threads with different priorities that are running in the process run relative to the priority class of the process.</span></span> <span data-ttu-id="5ba80-985">Win32 では、クラスごとに7つの基本優先度レベルを持つ4つの優先度クラスが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-985">Win32 uses four priority classes with seven base priority levels per class.</span></span> <span data-ttu-id="5ba80-986">これらのプロセス優先度クラスは、 <xref:System.Diagnostics.ProcessPriorityClass>列挙体でキャプチャされます。これにより<xref:System.Diagnostics.ProcessPriorityClass.Normal>、プロセスの<xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>優先順位<xref:System.Diagnostics.ProcessPriorityClass.RealTime>を、 <xref:System.Diagnostics.ProcessPriorityClass.High> <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>、、、、またはに<xref:System.Diagnostics.ProcessPriorityClass.Idle>設定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-986">These process priority classes are captured in the <xref:System.Diagnostics.ProcessPriorityClass> enumeration, which lets you set the process priority to <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span></span> <span data-ttu-id="5ba80-987">プロセッサにアクセスするためにプロセスを事前に進める必要がある場合、オペレーティングシステムによって基本優先度レベルを変更することができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-987">Based on the time elapsed or other boosts, the base priority level can be changed by the operating system when a process needs to be put ahead of others for access to the processor.</span></span> <span data-ttu-id="5ba80-988">また、を設定<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>して、待機状態から除外されたスレッドの優先度レベルを一時的に上げることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-988">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> to temporarily boost the priority level of threads that have been taken out of the wait state.</span></span> <span data-ttu-id="5ba80-989">プロセスが待機状態に戻ると、優先順位がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-989">The priority is reset when the process returns to the wait state.</span></span>  
  
 <span data-ttu-id="5ba80-990"><xref:System.Diagnostics.Process.BasePriority%2A>プロパティを使用すると、プロセスに割り当てられている開始の優先順位を表示できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-990">The <xref:System.Diagnostics.Process.BasePriority%2A> property lets you view the starting priority that is assigned to a process.</span></span> <span data-ttu-id="5ba80-991">ただし、読み取り専用であるため、 <xref:System.Diagnostics.Process.BasePriority%2A>プロパティを使用してプロセスの優先順位を設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-991">However, because it is read-only, you cannot use the <xref:System.Diagnostics.Process.BasePriority%2A> property to set the priority of a process.</span></span> <span data-ttu-id="5ba80-992">優先順位を変更するには<xref:System.Diagnostics.Process.PriorityClass%2A> 、プロパティを使用します。このプロパティは、プロセスの全体的な優先順位カテゴリを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-992">To change the priority, use the <xref:System.Diagnostics.Process.PriorityClass%2A> property, which gets or sets the overall priority category for the process.</span></span>  
  
 <span data-ttu-id="5ba80-993">システムモニタを使用して、優先度クラスを表示することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-993">The priority class cannot be viewed using System Monitor.</span></span> <span data-ttu-id="5ba80-994">次の表に、と<xref:System.Diagnostics.Process.BasePriority%2A> <xref:System.Diagnostics.Process.PriorityClass%2A>の値の関係を示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-994">The following table shows the relationship between the <xref:System.Diagnostics.Process.BasePriority%2A> and <xref:System.Diagnostics.Process.PriorityClass%2A> values.</span></span>  
  
|<span data-ttu-id="5ba80-995">BasePriority</span><span class="sxs-lookup"><span data-stu-id="5ba80-995">BasePriority</span></span>|<span data-ttu-id="5ba80-996">PriorityClass</span><span class="sxs-lookup"><span data-stu-id="5ba80-996">PriorityClass</span></span>|  
|------------------|-------------------|  
|<span data-ttu-id="5ba80-997">4</span><span class="sxs-lookup"><span data-stu-id="5ba80-997">4</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Idle>|  
|<span data-ttu-id="5ba80-998">8</span><span class="sxs-lookup"><span data-stu-id="5ba80-998">8</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Normal>|  
|<span data-ttu-id="5ba80-999">13</span><span class="sxs-lookup"><span data-stu-id="5ba80-999">13</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.High>|  
|<span data-ttu-id="5ba80-1000">24</span><span class="sxs-lookup"><span data-stu-id="5ba80-1000">24</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.RealTime>|  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1001">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1001">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-1002">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1002">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1003">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1003">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1004">関連付けられているプロセスのリソースからプロセス優先度情報を設定できないか、取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1004">Process priority information could not be set or retrieved from the associated process resource.</span></span>  
  
 <span data-ttu-id="5ba80-1005">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1005">-or-</span></span>  
  
 <span data-ttu-id="5ba80-1006">プロセス識別子またはプロセス ハンドルが 0 です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1006">The process identifier or process handle is zero.</span></span> <span data-ttu-id="5ba80-1007">(プロセスは開始されていません。)</span><span class="sxs-lookup"><span data-stu-id="5ba80-1007">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-1008">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.PriorityClass" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1008">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityClass" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1009">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1009">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1010">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1010">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="5ba80-1011"><see cref="T:System.Diagnostics.ProcessPriorityClass" /> 列挙体で定義されている有効な値が使用されていないため、優先度クラスを設定できません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1011">Priority class cannot be set because it does not use a valid value, as defined in the <see cref="T:System.Diagnostics.ProcessPriorityClass" /> enumeration.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1012">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1012">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1013">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1013">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
        <altmember cref="P:System.Diagnostics.Process.PriorityBoostEnabled" />
      </Docs>
    </Member>
    <Member MemberName="PrivateMemorySize">
      <MemberSignature Language="C#" Value="public int PrivateMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrivateMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivateMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivateMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PrivateMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivateMemorySize : int" Usage="System.Diagnostics.Process.PrivateMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PrivateMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PrivateMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPrivateMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PrivateMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1014">関連付けられたプロセスに割り当てられたプライベート メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1014">Gets the amount of private memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1015">関連付けられたプロセスに割り当てられ、他のプロセスと共有できないバイト数。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1015">The number of bytes allocated by the associated process that cannot be shared with other processes.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1016">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1016">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1017">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1017">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PrivateMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PrivateMemorySize64">
      <MemberSignature Language="C#" Value="public long PrivateMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PrivateMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivateMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivateMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PrivateMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivateMemorySize64 : int64" Usage="System.Diagnostics.Process.PrivateMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPrivateMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1018">関連付けられたプロセスに割り当てられたプライベート メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1018">Gets the amount of private memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1019">関連付けられたプロセスに割り当てられ、他のプロセスと共有できないメモリの量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1019">The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1020">このプロパティによって返される値は、プロセスによって使用されるメモリの現在のサイズ (バイト単位) を表し、他のプロセスと共有することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1020">The value returned by this property represents the current size of memory used by the process, in bytes, that cannot be shared with other processes.</span></span>  
  
 <span data-ttu-id="5ba80-1021">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1021">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-1022">プロパティ値は、プロセスの**Private Bytes**パフォーマンスカウンターに相当します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1022">The property value is equivalent to the **Private Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1023">次のコード例では、メモ帳アプリケーションのインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1023">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="5ba80-1024">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1024">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1025">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1025">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1026">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1026">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1027">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1027">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivilegedProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivilegedProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivilegedProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PrivilegedProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivilegedProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.PrivilegedProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent inside the operating system core.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPrivilegedProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1028">このプロセスの特権プロセッサ時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1028">Gets the privileged processor time for this process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1029">プロセスが、オペレーティング システム コア内でコードを実行した合計時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1029">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the process has spent running code inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5ba80-1030">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1030">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-1031">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1031">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1032">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1032">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-1033">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1033">You are attempting to access the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1034">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1034">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1035">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1035">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1036">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1036">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="ProcessName">
      <MemberSignature Language="C#" Value="public string ProcessName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProcessName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ProcessName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProcessName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProcessName : string" Usage="System.Diagnostics.Process.ProcessName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessProcessName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1037">プロセスの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1037">Gets the name of the process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1038">システムで使用する、ユーザーがプロセスを識別するための名前。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1038">The name that the system uses to identify the process to the user.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1039">プロパティ<xref:System.Diagnostics.Process.ProcessName%2A>は、Outlook などの実行可能ファイル名を保持します。この名前には、.exe 拡張子やパスは含まれません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1039">The <xref:System.Diagnostics.Process.ProcessName%2A> property holds an executable file name, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="5ba80-1040">これは、同じ実行可能ファイルに関連付けられているすべてのプロセスを取得して操作する場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1040">It is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1041">オペレーティング[!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)]システムでは、 <xref:System.Diagnostics.Process.ProcessName%2A>プロセスモジュール情報を取得できない場合、プロパティは15文字に切り捨てられることがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1041">On [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] operating systems, the <xref:System.Diagnostics.Process.ProcessName%2A> property may be truncated to 15 characters if the process module information cannot be obtained.</span></span>  
  
 <span data-ttu-id="5ba80-1042">を呼び出し<xref:System.Diagnostics.Process.GetProcessesByName%2A>、実行可能ファイル名を渡して、指定されたコンピューター上で実行されているすべてのインスタンスを含む配列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1042">You can call <xref:System.Diagnostics.Process.GetProcessesByName%2A>, passing it an executable file name, to retrieve an array that contains every running instance on the specified computer.</span></span> <span data-ttu-id="5ba80-1043">たとえば、この配列を使用して、実行可能ファイルの実行中のすべてのインスタンスをシャットダウンすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1043">You can use this array, for example, to shut down all the running instances of the executable file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1044">プロセスに ID がないか、<see cref="T:System.Diagnostics.Process" /> に関連付けられているプロセスがありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1044">The process does not have an identifier, or no process is associated with the <see cref="T:System.Diagnostics.Process" />.</span></span>  
  
<span data-ttu-id="5ba80-1045">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1045">-or-</span></span> 
<span data-ttu-id="5ba80-1046">関連付けられたプロセスが終了しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1046">The associated process has exited.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-1047">プロセスはこのコンピューター上のものではありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1047">The process is not on this computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1048">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1048">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1049">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1049">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessorAffinity">
      <MemberSignature Language="C#" Value="public IntPtr ProcessorAffinity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ProcessorAffinity" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ProcessorAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Property ProcessorAffinity As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ProcessorAffinity { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.ProcessorAffinity : nativeint with get, set" Usage="System.Diagnostics.Process.ProcessorAffinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Allowed processor that can be used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessProcessorAffinity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1050">このプロセスでのスレッドの実行をスケジュールできるプロセッサを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1050">Gets or sets the processors on which the threads in this process can be scheduled to run.</span></span></summary>
        <value><span data-ttu-id="5ba80-1051">関連付けられたプロセスのスレッドを実行できるプロセッサを示すビットマスク。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1051">A bitmask representing the processors that the threads in the associated process can run on.</span></span> <span data-ttu-id="5ba80-1052">既定値は、コンピューターのプロセッサ数によって異なります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1052">The default depends on the number of processors on the computer.</span></span> <span data-ttu-id="5ba80-1053">既定値は 2 <sup>n</sup> -1 で、n はプロセッサ数です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1053">The default value is 2 <sup>n</sup> -1, where n is the number of processors.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1054">Windows 2000 以降では、プロセス内のスレッドはプロセッサからプロセッサに移行でき、各移行でプロセッサキャッシュが再読み込みされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1054">In Windows 2000 and later, a thread in a process can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="5ba80-1055">システム負荷が高い場合、特定のスレッドを実行するプロセッサを指定すると、プロセッサキャッシュを再読み込みする回数を減らすことでパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1055">Under heavy system loads, specifying which processor should run a specific thread can improve performance by reducing the number of times the processor cache is reloaded.</span></span> <span data-ttu-id="5ba80-1056">プロセッサとスレッド間の関連付けは、プロセッサ関係と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1056">The association between a processor and a thread is called the processor affinity.</span></span>  
  
 <span data-ttu-id="5ba80-1057">各プロセッサは、1つのビットとして表現されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1057">Each processor is represented as a bit.</span></span> <span data-ttu-id="5ba80-1058">ビット0はプロセッサ1、ビット1はプロセッサ2、などのようになります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1058">Bit 0 is processor one, bit 1 is processor two, and so forth.</span></span> <span data-ttu-id="5ba80-1059">ビットを値1に設定すると、対応するプロセッサがスレッド割り当てに対して選択されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1059">If you set a bit to the value 1, the corresponding processor is selected for thread assignment.</span></span> <span data-ttu-id="5ba80-1060"><xref:System.Diagnostics.Process.ProcessorAffinity%2A>値を0に設定すると、オペレーティングシステムのスケジュールアルゴリズムによってスレッドのアフィニティが設定されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1060">When you set the <xref:System.Diagnostics.Process.ProcessorAffinity%2A> value to zero, the operating system's scheduling algorithms set the thread's affinity.</span></span> <span data-ttu-id="5ba80-1061"><xref:System.Diagnostics.Process.ProcessorAffinity%2A>値が0以外の値に設定されている場合、値は、選択対象のプロセッサを指定するビットマスクとして解釈されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1061">When the <xref:System.Diagnostics.Process.ProcessorAffinity%2A> value is set to any nonzero value, the value is interpreted as a bitmask that specifies those processors eligible for selection.</span></span>  
  
 <span data-ttu-id="5ba80-1062">次の表は、8プロセッサ<xref:System.Diagnostics.Process.ProcessorAffinity%2A>システムの値の選択を示しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1062">The following table shows a selection of <xref:System.Diagnostics.Process.ProcessorAffinity%2A> values for an eight-processor system.</span></span>  
  
|<span data-ttu-id="5ba80-1063">ビットマップ</span><span class="sxs-lookup"><span data-stu-id="5ba80-1063">Bitmask</span></span>|<span data-ttu-id="5ba80-1064">バイナリ値</span><span class="sxs-lookup"><span data-stu-id="5ba80-1064">Binary value</span></span>|<span data-ttu-id="5ba80-1065">対象のプロセッサ</span><span class="sxs-lookup"><span data-stu-id="5ba80-1065">Eligible processors</span></span>|  
|-------------|------------------|-------------------------|  
|<span data-ttu-id="5ba80-1066">0x0001</span><span class="sxs-lookup"><span data-stu-id="5ba80-1066">0x0001</span></span>|<span data-ttu-id="5ba80-1067">00000000 00000001</span><span class="sxs-lookup"><span data-stu-id="5ba80-1067">00000000 00000001</span></span>|<span data-ttu-id="5ba80-1068">1</span><span class="sxs-lookup"><span data-stu-id="5ba80-1068">1</span></span>|  
|<span data-ttu-id="5ba80-1069">0x0003</span><span class="sxs-lookup"><span data-stu-id="5ba80-1069">0x0003</span></span>|<span data-ttu-id="5ba80-1070">00000000 00000011</span><span class="sxs-lookup"><span data-stu-id="5ba80-1070">00000000 00000011</span></span>|<span data-ttu-id="5ba80-1071">1および2</span><span class="sxs-lookup"><span data-stu-id="5ba80-1071">1 and 2</span></span>|  
|<span data-ttu-id="5ba80-1072">0x0007</span><span class="sxs-lookup"><span data-stu-id="5ba80-1072">0x0007</span></span>|<span data-ttu-id="5ba80-1073">00000000 00000111</span><span class="sxs-lookup"><span data-stu-id="5ba80-1073">00000000 00000111</span></span>|<span data-ttu-id="5ba80-1074">1、2、3</span><span class="sxs-lookup"><span data-stu-id="5ba80-1074">1, 2 and 3</span></span>|  
|<span data-ttu-id="5ba80-1075">0x0009</span><span class="sxs-lookup"><span data-stu-id="5ba80-1075">0x0009</span></span>|<span data-ttu-id="5ba80-1076">00000000 00001001</span><span class="sxs-lookup"><span data-stu-id="5ba80-1076">00000000 00001001</span></span>|<span data-ttu-id="5ba80-1077">1および4</span><span class="sxs-lookup"><span data-stu-id="5ba80-1077">1 and 4</span></span>|  
|<span data-ttu-id="5ba80-1078">0x007F</span><span class="sxs-lookup"><span data-stu-id="5ba80-1078">0x007F</span></span>|<span data-ttu-id="5ba80-1079">00000000 01111111</span><span class="sxs-lookup"><span data-stu-id="5ba80-1079">00000000 01111111</span></span>|<span data-ttu-id="5ba80-1080">1、2、3、4、5、6、7</span><span class="sxs-lookup"><span data-stu-id="5ba80-1080">1, 2, 3, 4, 5, 6 and 7</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1081">関連付けられているプロセスのリソースから <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 情報を設定できないか、取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1081"><see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> information could not be set or retrieved from the associated process resource.</span></span>  
  
<span data-ttu-id="5ba80-1082">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1082">-or-</span></span> 
<span data-ttu-id="5ba80-1083">プロセス識別子またはプロセス ハンドルが 0 です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1083">The process identifier or process handle is zero.</span></span> <span data-ttu-id="5ba80-1084">(プロセスは開始されていません。)</span><span class="sxs-lookup"><span data-stu-id="5ba80-1084">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-1085">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1085">You are attempting to access the <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1086">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1086">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1087">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1087">The process <see cref="P:System.Diagnostics.Process.Id" /> was not available.</span></span>  
  
<span data-ttu-id="5ba80-1088">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1088">-or-</span></span> 
<span data-ttu-id="5ba80-1089">プロセスが終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1089">The process has exited.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1090">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1090">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1091">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1091">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberSignature Language="F#" Value="member this.Refresh : unit -&gt; unit" Usage="process.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-1092">プロセス コンポーネントにキャッシュされている関連付けられたプロセスに関するすべての情報を破棄します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1092">Discards any information about the associated process that has been cached inside the process component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1093">が<xref:System.Diagnostics.Process.Refresh%2A>呼び出された後、各プロパティに関する情報の最初の要求によって、プロセスコンポーネントは、関連付けられているプロセスから新しい値を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1093">After <xref:System.Diagnostics.Process.Refresh%2A> is called, the first request for information about each property causes the process component to obtain a new value from the associated process.</span></span>  
  
 <span data-ttu-id="5ba80-1094">コンポーネントがプロセスリソースに関連付けられている場合、のプロパティ<xref:System.Diagnostics.Process>値は、関連付けられているプロセスの状態に従って直ちに設定されます。 <xref:System.Diagnostics.Process></span><span class="sxs-lookup"><span data-stu-id="5ba80-1094">When a <xref:System.Diagnostics.Process> component is associated with a process resource, the property values of the <xref:System.Diagnostics.Process> are immediately populated according to the status of the associated process.</span></span> <span data-ttu-id="5ba80-1095">関連付けられたプロセスに関する情報が後で変更された場合、 <xref:System.Diagnostics.Process>それらの変更はコンポーネントのキャッシュされた値に反映されません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1095">If the information about the associated process subsequently changes, those changes are not reflected in the <xref:System.Diagnostics.Process> component's cached values.</span></span> <span data-ttu-id="5ba80-1096"><xref:System.Diagnostics.Process>コンポーネントは、関連付けられた時点でのプロセスリソースのスナップショットです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1096">The <xref:System.Diagnostics.Process> component is a snapshot of the process resource at the time they are associated.</span></span> <span data-ttu-id="5ba80-1097">関連付けられたプロセスの現在の値を表示する<xref:System.Diagnostics.Process.Refresh%2A>には、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1097">To view the current values for the associated process, call the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1098">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1098">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-1099">次に、関連付けられたプロセスの物理メモリ使用量を2秒間隔で最大10秒間取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1099">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="5ba80-1100">この例では、10秒が経過する前にプロセスが終了するかどうかを検出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1100">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="5ba80-1101">この例では、10秒後にプロセスがまだ実行されている場合、プロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1101">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1102">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1102">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1103">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1103">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Responding">
      <MemberSignature Language="C#" Value="public bool Responding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Responding" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Responding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Responding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Responding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Responding : bool" Usage="System.Diagnostics.Process.Responding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Is this process responsive.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessResponding")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1104">プロセスのユーザー インターフェイスが応答するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1104">Gets a value indicating whether the user interface of the process is responding.</span></span></summary>
        <value><span data-ttu-id="5ba80-1105">関連付けられたプロセスのユーザー インターフェイスがシステムに応答する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1105"><see langword="true" /> if the user interface of the associated process is responding to the system; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1106">プロセスにユーザーインターフェイスがある場合、プロパティ<xref:System.Diagnostics.Process.Responding%2A>はユーザーインターフェイスに接続して、プロセスがユーザー入力に応答しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1106">If a process has a user interface, the <xref:System.Diagnostics.Process.Responding%2A> property contacts the user interface to determine whether the process is responding to user input.</span></span> <span data-ttu-id="5ba80-1107">インターフェイスがすぐに応答しない場合、 <xref:System.Diagnostics.Process.Responding%2A>プロパティは`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1107">If the interface does not respond immediately, the <xref:System.Diagnostics.Process.Responding%2A> property returns `false`.</span></span> <span data-ttu-id="5ba80-1108">関連付けられたプロセスのインターフェイスが応答を停止したかどうかを判断するには、このプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1108">Use this property to determine whether the interface of the associated process has stopped responding.</span></span>  
  
 <span data-ttu-id="5ba80-1109">プロセス<xref:System.Diagnostics.Process.MainWindowHandle%2A>にがない場合、このプロパティはを返し`true`ます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1109">If the process does not have a <xref:System.Diagnostics.Process.MainWindowHandle%2A>, this property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1110">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1110">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-1111">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1111">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1112">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1112">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1113">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1113">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-1114">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.Responding" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1114">You are attempting to access the <see cref="P:System.Diagnostics.Process.Responding" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1115">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1115">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1116">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1116">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1117">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1117">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MainWindowHandle" />
      </Docs>
    </Member>
    <Member MemberName="SafeHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SafeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeHandle As SafeProcessHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeProcessHandle ^ SafeHandle { Microsoft::Win32::SafeHandles::SafeProcessHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeHandle : Microsoft.Win32.SafeHandles.SafeProcessHandle" Usage="System.Diagnostics.Process.SafeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeProcessHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1118">このプロセスへのネイティブ ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1118">Gets the native handle to this process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1119">このプロセスへのネイティブ ハンドル。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1119">The native handle to this process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1120">ハンドルは、呼び出し元のコンポーネントがプロセスを開始した場合にのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1120">The handle is only available if the calling component started the process.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionId">
      <MemberSignature Language="C#" Value="public int SessionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SessionId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SessionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SessionId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SessionId : int" Usage="System.Diagnostics.Process.SessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The session ID for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoNotSupported("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessSessionId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1121">関連付けられたプロセスのターミナル サービス セッション識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1121">Gets the Terminal Services session identifier for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1122">関連付けられたプロセスのターミナル サービス セッション識別子。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1122">The Terminal Services session identifier for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1123">プロパティ<xref:System.Diagnostics.Process.SessionId%2A>は、アプリケーションが現在実行されているセッションを識別します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1123">The <xref:System.Diagnostics.Process.SessionId%2A> property identifies the session in which the application is currently running.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="5ba80-1124">このプロセスに関連付けられているセッションはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1124">There is no session associated with this process.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1125">このセッション識別子に関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1125">There is no process associated with this session identifier.</span></span>  
  
 <span data-ttu-id="5ba80-1126">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1126">-or-</span></span>  
  
 <span data-ttu-id="5ba80-1127">関連付けられたプロセスが、このコンピューター上にありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1127">The associated process is not on this machine.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1128">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1128">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1129">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1129">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="StandardError">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader StandardError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamReader StandardError" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardError As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamReader ^ StandardError { System::IO::StreamReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardError : System.IO.StreamReader" Usage="System.Diagnostics.Process.StandardError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard error stream of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStandardError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1130">アプリケーションのエラー出力の読み取りに使用されるストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1130">Gets a stream used to read the error output of the application.</span></span></summary>
        <value><span data-ttu-id="5ba80-1131">アプリケーションの標準エラー ストリームの読み取りに使用できる <see cref="T:System.IO.StreamReader" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1131">A <see cref="T:System.IO.StreamReader" /> that can be used to read the standard error stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1132">が<xref:System.Diagnostics.Process>テキストを標準エラーストリームに書き込む場合、そのテキストは通常、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1132">When a <xref:System.Diagnostics.Process> writes text to its standard error stream, that text is normally displayed on the console.</span></span> <span data-ttu-id="5ba80-1133"><xref:System.Diagnostics.Process.StandardError%2A>ストリームをリダイレクトすることにより、プロセスのエラー出力を操作または非表示にすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1133">By redirecting the <xref:System.Diagnostics.Process.StandardError%2A> stream, you can manipulate or suppress the error output of a process.</span></span> <span data-ttu-id="5ba80-1134">たとえば、テキストをフィルター処理したり、異なる形式を設定したり、コンソールと指定したログファイルの両方に出力を書き込むことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1134">For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1135">を使用<xref:System.Diagnostics.Process.StandardError%2A>するには、 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>を`false`に設定し、を<xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType>に`true`設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1135">To use <xref:System.Diagnostics.Process.StandardError%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="5ba80-1136">それ以外の場合、 <xref:System.Diagnostics.Process.StandardError%2A>ストリームからの読み取りでは例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1136">Otherwise, reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream throws an exception.</span></span>  
  
 <span data-ttu-id="5ba80-1137">リダイレクト<xref:System.Diagnostics.Process.StandardError%2A>されたストリームは、同期的または非同期的に読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1137">The redirected <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="5ba80-1138">、、などのメソッドは、プロセスのエラー出力ストリームに対して同期読み取り操作を実行します。 <xref:System.IO.StreamReader.ReadToEnd%2A>  <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.IO.StreamReader.Read%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-1138">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process.</span></span> <span data-ttu-id="5ba80-1139">これらの同期読み取り操作は、関連付けら<xref:System.Diagnostics.Process>れている<xref:System.Diagnostics.Process.StandardError%2A>ストリームへの書き込みが完了するまで、またはストリームを閉じるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1139">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="5ba80-1140">これに対し<xref:System.Diagnostics.Process.BeginErrorReadLine%2A> <xref:System.Diagnostics.Process.StandardError%2A>て、は、ストリームに対して非同期の読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1140">In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="5ba80-1141">このメソッドは、ストリーム出力に対して指定されたイベントハンドラーを有効にし、すぐに呼び出し元に戻します。これにより、ストリーム出力がイベントハンドラーに送られている間に他の処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1141">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="5ba80-1142">同期読み取り操作では、 <xref:System.Diagnostics.Process.StandardError%2A>ストリームから読み取った呼び出し元と、そのストリームに書き込む子プロセスとの間に依存関係が生じます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1142">Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream and the child process writing to that stream.</span></span> <span data-ttu-id="5ba80-1143">これらの依存関係によって、デッドロック状態が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1143">These dependencies can result in deadlock conditions.</span></span> <span data-ttu-id="5ba80-1144">呼び出し元が子プロセスのリダイレクトされたストリームから読み取る場合は、子に依存します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1144">When the caller reads from the redirected stream of a child process, it is dependent on the child.</span></span> <span data-ttu-id="5ba80-1145">呼び出し元は、読み取り操作で、子がストリームに書き込むか、ストリームを閉じるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1145">The caller waits on the read operation until the child writes to the stream or closes the stream.</span></span> <span data-ttu-id="5ba80-1146">子プロセスは、リダイレクトされたストリームを埋めるために十分なデータを書き込むときに、親に依存します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1146">When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</span></span> <span data-ttu-id="5ba80-1147">子プロセスは、親が完全なストリームから読み取るか、ストリームを閉じるまで、次の書き込み操作で待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1147">The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</span></span> <span data-ttu-id="5ba80-1148">デッドロック状態は、呼び出し元と子プロセスが操作を完了するために互いに待機し、どちらも続行できない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1148">The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</span></span> <span data-ttu-id="5ba80-1149">呼び出し元と子プロセスの間の依存関係を評価することによって、デッドロックを回避できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1149">You can avoid deadlocks by evaluating dependencies between the caller and child process.</span></span>  

<span data-ttu-id="5ba80-1150">このセクションの最後の2つの例<xref:System.Diagnostics.Process.Start%2A>では、メソッドを使用して、 *Write500Lines*という名前の実行可能ファイルを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1150">The last two examples in this section use the <xref:System.Diagnostics.Process.Start%2A> method to launch an executable named *Write500Lines.exe*.</span></span> <span data-ttu-id="5ba80-1151">次の例には、ソースコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1151">The following example contains its source code.</span></span>

[!code-csharp[Executable launched by Process.Start](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/write500lines.cs)]
[!code-vb[Executable launched by Process.Start](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/write500lines.vb)]

<span data-ttu-id="5ba80-1152">次の例は、リダイレクトされたエラーストリームから読み取り、子プロセスが終了するまで待機する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1152">The following example shows how to read from a redirected error stream and wait for the child process to exit.</span></span> <span data-ttu-id="5ba80-1153">これは、の前に`p.StandardError.ReadToEnd` `p.WaitForExit`を呼び出すことによって、デッドロック状態を回避します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1153">It avoids a deadlock condition by calling `p.StandardError.ReadToEnd` before `p.WaitForExit`.</span></span> <span data-ttu-id="5ba80-1154">デッドロック状態が発生するのは、親`p.WaitForExit`プロセス`p.StandardError.ReadToEnd`がを呼び出してから、子プロセスがリダイレクトされたストリームを埋めるために十分なテキストを書き込む場合です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1154">A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardError.ReadToEnd` and the child process writes enough text to fill the redirected stream.</span></span> <span data-ttu-id="5ba80-1155">親プロセスは、子プロセスが終了するまで無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1155">The parent process would wait indefinitely for the child process to exit.</span></span> <span data-ttu-id="5ba80-1156">子プロセスは、親が完全な<xref:System.Diagnostics.Process.StandardError%2A>ストリームから読み取るまで無制限に待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1156">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>   

[!code-csharp[Reading from the error stream](~/samples/snippets/csharp/api/system.diagnostics/process/standarderror/stderror-sync.cs)]
[!code-vb[Reading from the error stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standarderror/stderror-sync.vb)]  

<span data-ttu-id="5ba80-1157">標準出力と標準エラーストリームの両方からすべてのテキストを読み取ると、同様の問題が発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1157">There is a similar issue when you read all text from both the standard output and standard error streams.</span></span> <span data-ttu-id="5ba80-1158">次の例では、両方のストリームに対して読み取り操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1158">The following example performs a read operation on both streams.</span></span> <span data-ttu-id="5ba80-1159"><xref:System.Diagnostics.Process.StandardError%2A>ストリームに対して非同期の読み取り操作を実行することで、デッドロック状態を回避します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1159">It avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="5ba80-1160">デッドロック状態が発生するのは、 `p.StandardOutput.ReadToEnd`親プロセス`p.StandardError.ReadToEnd`がを呼び出した後で、子プロセスがエラーストリームを埋めるために十分なテキストを書き込む場合です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1160">A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream.</span></span> <span data-ttu-id="5ba80-1161">親プロセスは、子プロセスがその<xref:System.Diagnostics.Process.StandardOutput%2A>ストリームを閉じるまで無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1161">The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="5ba80-1162">子プロセスは、親が完全な<xref:System.Diagnostics.Process.StandardError%2A>ストリームから読み取るまで無制限に待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1162">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
[!code-csharp[Reading from both streams](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-async.cs)]
[!code-vb[Reading from both streams](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-async.vb)]  

<span data-ttu-id="5ba80-1163">非同期の読み取り操作を使用すると、これらの依存関係とデッドロックの可能性を回避できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1163">You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</span></span> <span data-ttu-id="5ba80-1164">または、2つのスレッドを作成し、各ストリームの出力を個別のスレッドで読み取ることによって、デッドロック状態を回避できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1164">Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1165">リダイレクトされたストリームでは、非同期および同期読み取り操作を混在させることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1165">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="5ba80-1166">の<xref:System.Diagnostics.Process>リダイレクトされたストリームを非同期モードまたは同期モードで開くと、そのストリームのすべての読み取り操作は同じモードである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1166">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="5ba80-1167">たとえば、 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> ストリーム <xref:System.Diagnostics.Process.StandardError%2A> でを<xref:System.IO.StreamReader.ReadLine%2A>呼び出すことはできません。また、逆の場合も同様です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1167">For example, do not follow <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardError%2A> stream, or vice versa.</span></span> <span data-ttu-id="5ba80-1168">ただし、異なるモードの2つの異なるストリームを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1168">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="5ba80-1169">たとえば、を呼び出し<xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 、 <xref:System.Diagnostics.Process.StandardError%2A>ストリームに対して<xref:System.IO.StreamReader.ReadLine%2A>を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1169">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1170">次の例では`net use` 、ユーザーが指定した引数と共にコマンドを使用して、ネットワークリソースをマップします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1170">The following example uses the `net use` command together with a user supplied argument to map a network resource.</span></span> <span data-ttu-id="5ba80-1171">次に、net コマンドの標準エラーストリームを読み取り、コンソールに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1171">It then reads the standard error stream of the net command and writes it to console.</span></span>  
  
 [!code-cpp[Process_StandardError#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardError/CPP/source.cpp#1)]
 [!code-csharp[Process_StandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardError/CS/source.cs#1)]
 [!code-vb[Process_StandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardError/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1172"><see cref="P:System.Diagnostics.Process.StandardError" /> ストリームがリダイレクト用に定義されていません。<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> が <see langword="true" /> に設定されており、<see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> が <see langword="false" /> に設定されていることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1172">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is set to <see langword="true" /> and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is set to <see langword="false" />.</span></span>  
  
<span data-ttu-id="5ba80-1173">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1173">-or-</span></span> 
<span data-ttu-id="5ba80-1174"><see cref="P:System.Diagnostics.Process.StandardError" /> ストリームが、<see cref="M:System.Diagnostics.Process.BeginErrorReadLine" /> を使用した非同期読み取り操作のために開いています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1174">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" />.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1175">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1175">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1176">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1176">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StandardInput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
      </Docs>
    </Member>
    <Member MemberName="StandardInput">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter StandardInput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamWriter StandardInput" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardInput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardInput As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamWriter ^ StandardInput { System::IO::StreamWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardInput : System.IO.StreamWriter" Usage="System.Diagnostics.Process.StandardInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard input stream of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStandardInput")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1177">アプリケーションの入力の書き込みに使用されるストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1177">Gets a stream used to write the input of the application.</span></span></summary>
        <value><span data-ttu-id="5ba80-1178">アプリケーションの標準入力ストリームの書き込みに使用できる <see cref="T:System.IO.StreamWriter" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1178">A <see cref="T:System.IO.StreamWriter" /> that can be used to write the standard input stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1179">は<xref:System.Diagnostics.Process> 、標準入力ストリーム (通常はキーボード) から入力テキストを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1179">A <xref:System.Diagnostics.Process> can read input text from its standard input stream, typically the keyboard.</span></span> <span data-ttu-id="5ba80-1180"><xref:System.Diagnostics.Process.StandardInput%2A>ストリームをリダイレクトすることにより、プログラムで入力を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1180">By redirecting the <xref:System.Diagnostics.Process.StandardInput%2A> stream, you can programmatically specify the input.</span></span> <span data-ttu-id="5ba80-1181">たとえば、キーボード入力を使用する代わりに、指定されたファイルの内容または別のアプリケーションからの出力のテキストを指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1181">For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1182">を使用<xref:System.Diagnostics.Process.StandardInput%2A>するには、 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>を`false`に設定し、を<xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType>に`true`設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1182">To use <xref:System.Diagnostics.Process.StandardInput%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="5ba80-1183">それ以外の場合、 <xref:System.Diagnostics.Process.StandardInput%2A>ストリームへの書き込みでは例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1183">Otherwise, writing to the <xref:System.Diagnostics.Process.StandardInput%2A> stream throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1184">次の例は、プロセスの<xref:System.Diagnostics.Process.StandardInput%2A>ストリームをリダイレクトする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1184">The following example illustrates how to redirect the <xref:System.Diagnostics.Process.StandardInput%2A> stream of a process.</span></span> <span data-ttu-id="5ba80-1185">この例では`sort` 、リダイレクトされた入力を使用してコマンドを開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1185">The example starts the `sort` command with redirected input.</span></span> <span data-ttu-id="5ba80-1186">次に、ユーザーにテキストの入力を求めるプロンプトが表示`sort`され、リダイレクト<xref:System.Diagnostics.Process.StandardInput%2A>されたストリームを通じてプロセスに渡されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1186">It then prompts the user for text, and passes that to the `sort` process by means of the redirected <xref:System.Diagnostics.Process.StandardInput%2A> stream.</span></span> <span data-ttu-id="5ba80-1187">`sort`結果はコンソールでユーザーに表示されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1187">The `sort` results are displayed to the user on the console.</span></span>  
  
 [!code-cpp[Process_StandardInput#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardInput/CPP/process_standardinput.cpp#1)]
 [!code-csharp[Process_StandardInput#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardInput/CS/process_standardinput.cs#1)]
 [!code-vb[Process_StandardInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardInput/VB/process_standardinput.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1188"><see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> が <see langword="false" /> に設定されているため、<see cref="P:System.Diagnostics.Process.StandardInput" /> ストリームが定義されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1188">The <see cref="P:System.Diagnostics.Process.StandardInput" /> stream has not been defined because <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> is set to <see langword="false" />.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1189">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1189">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1190">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1190">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="StandardOutput">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader StandardOutput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamReader StandardOutput" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardOutput As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamReader ^ StandardOutput { System::IO::StreamReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardOutput : System.IO.StreamReader" Usage="System.Diagnostics.Process.StandardOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard output stream of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStandardOutput")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1191">アプリケーションのテキスト出力の読み取りに使用されるストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1191">Gets a stream used to read the textual output of the application.</span></span></summary>
        <value><span data-ttu-id="5ba80-1192">アプリケーションの標準出力ストリームの読み取りに使用できる <see cref="T:System.IO.StreamReader" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1192">A <see cref="T:System.IO.StreamReader" /> that can be used to read the standard output stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1193">が<xref:System.Diagnostics.Process>標準のストリームにテキストを書き込む場合、そのテキストは通常、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1193">When a <xref:System.Diagnostics.Process> writes text to its standard stream, that text is normally displayed on the console.</span></span> <span data-ttu-id="5ba80-1194"><xref:System.Diagnostics.Process.StandardOutput%2A>ストリームをリダイレクトすることにより、プロセスの出力を操作または非表示にすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1194">By redirecting the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, you can manipulate or suppress the output of a process.</span></span> <span data-ttu-id="5ba80-1195">たとえば、テキストをフィルター処理したり、異なる形式を設定したり、コンソールと指定したログファイルの両方に出力を書き込むことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1195">For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1196">を使用<xref:System.Diagnostics.Process.StandardOutput%2A>するには、 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>を`false`に設定し、を<xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType>に`true`設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1196">To use <xref:System.Diagnostics.Process.StandardOutput%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="5ba80-1197">それ以外の場合、 <xref:System.Diagnostics.Process.StandardOutput%2A>ストリームからの読み取りでは例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1197">Otherwise, reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream throws an exception.</span></span>  
  
 <span data-ttu-id="5ba80-1198">リダイレクト<xref:System.Diagnostics.Process.StandardOutput%2A>されたストリームは、同期的または非同期的に読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1198">The redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="5ba80-1199">、、などのメソッドは、プロセスの出力ストリームに対して同期読み取り操作を実行します。 <xref:System.IO.StreamReader.ReadToEnd%2A>  <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.IO.StreamReader.Read%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-1199">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process.</span></span> <span data-ttu-id="5ba80-1200">これらの同期読み取り操作は、関連付けら<xref:System.Diagnostics.Process>れている<xref:System.Diagnostics.Process.StandardOutput%2A>ストリームへの書き込みが完了するまで、またはストリームを閉じるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1200">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="5ba80-1201">これに対し<xref:System.Diagnostics.Process.BeginOutputReadLine%2A> <xref:System.Diagnostics.Process.StandardOutput%2A>て、は、ストリームに対して非同期の読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1201">In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="5ba80-1202">このメソッドは、ストリーム出力に対して指定されたイベントハンドラーを有効にし、すぐに呼び出し元に戻します。これにより、ストリーム出力がイベントハンドラーに送られている間に他の処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1202">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="5ba80-1203">同期読み取り操作では、 <xref:System.Diagnostics.Process.StandardOutput%2A>ストリームから読み取った呼び出し元と、そのストリームに書き込む子プロセスとの間に依存関係が生じます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1203">Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream and the child process writing to that stream.</span></span> <span data-ttu-id="5ba80-1204">これらの依存関係によって、デッドロック状態が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1204">These dependencies can result in deadlock conditions.</span></span> <span data-ttu-id="5ba80-1205">呼び出し元が子プロセスのリダイレクトされたストリームから読み取る場合は、子に依存します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1205">When the caller reads from the redirected stream of a child process, it is dependent on the child.</span></span> <span data-ttu-id="5ba80-1206">呼び出し元は、読み取り操作で、子がストリームに書き込むか、ストリームを閉じるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1206">The caller waits on the read operation until the child writes to the stream or closes the stream.</span></span> <span data-ttu-id="5ba80-1207">子プロセスは、リダイレクトされたストリームを埋めるために十分なデータを書き込むときに、親に依存します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1207">When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</span></span> <span data-ttu-id="5ba80-1208">子プロセスは、親が完全なストリームから読み取るか、ストリームを閉じるまで、次の書き込み操作で待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1208">The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</span></span> <span data-ttu-id="5ba80-1209">デッドロック状態は、呼び出し元と子プロセスが操作を完了するために互いに待機し、どちらも続行できない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1209">The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</span></span> <span data-ttu-id="5ba80-1210">呼び出し元と子プロセスの間の依存関係を評価することによって、デッドロックを回避できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1210">You can avoid deadlocks by evaluating dependencies between the caller and child process.</span></span>  

<span data-ttu-id="5ba80-1211">このセクションの最後の2つの例<xref:System.Diagnostics.Process.Start%2A>では、メソッドを使用して、 *Write500Lines*という名前の実行可能ファイルを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1211">The last two examples in this section use the <xref:System.Diagnostics.Process.Start%2A> method to launch an executable named *Write500Lines.exe*.</span></span> <span data-ttu-id="5ba80-1212">次の例には、ソースコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1212">The following example contains its source code.</span></span>

[!code-csharp[Executable launched by Process.Start](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/write500lines.cs)]
[!code-vb[Executable launched by Process.Start](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/write500lines.vb)]

<span data-ttu-id="5ba80-1213">次の例は、リダイレクトされたストリームから読み取り、子プロセスが終了するまで待機する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1213">The following example shows how to read from a redirected stream and wait for the child process to exit.</span></span> <span data-ttu-id="5ba80-1214">この例では、の前に`p.StandardOutput.ReadToEnd` `p.WaitForExit`を呼び出すことにより、デッドロック状態を回避します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1214">The example avoids a deadlock condition by calling `p.StandardOutput.ReadToEnd` before `p.WaitForExit`.</span></span> <span data-ttu-id="5ba80-1215">デッドロック状態が発生するのは、親`p.WaitForExit`プロセス`p.StandardOutput.ReadToEnd`がを呼び出してから、子プロセスがリダイレクトされたストリームを埋めるために十分なテキストを書き込む場合です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1215">A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardOutput.ReadToEnd` and the child process writes enough text to fill the redirected stream.</span></span> <span data-ttu-id="5ba80-1216">親プロセスは、子プロセスが終了するまで無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1216">The parent process would wait indefinitely for the child process to exit.</span></span> <span data-ttu-id="5ba80-1217">子プロセスは、親が完全な<xref:System.Diagnostics.Process.StandardOutput%2A>ストリームから読み取るまで無制限に待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1217">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  

[!code-csharp[Reading synchronously from a redirected output stream](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-sync.cs)]  
[!code-vb[Reading synchronously from a redirected output stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-sync.vb)]  

<span data-ttu-id="5ba80-1218">標準出力と標準エラーストリームの両方からすべてのテキストを読み取ると、同様の問題が発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1218">There is a similar issue when you read all text from both the standard output and standard error streams.</span></span> <span data-ttu-id="5ba80-1219">次の例では、両方のストリームに対して読み取り操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1219">The following example performs a read operation on both streams.</span></span> <span data-ttu-id="5ba80-1220"><xref:System.Diagnostics.Process.StandardError%2A>ストリームに対して非同期の読み取り操作を実行することで、デッドロック状態を回避します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1220">It avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="5ba80-1221">デッドロック状態が発生するのは、 `p.StandardOutput.ReadToEnd`親プロセス`p.StandardError.ReadToEnd`がを呼び出した後で、子プロセスがエラーストリームを埋めるために十分なテキストを書き込む場合です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1221">A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream.</span></span> <span data-ttu-id="5ba80-1222">親プロセスは、子プロセスがその<xref:System.Diagnostics.Process.StandardOutput%2A>ストリームを閉じるまで無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1222">The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="5ba80-1223">子プロセスは、親が完全な<xref:System.Diagnostics.Process.StandardError%2A>ストリームから読み取るまで無制限に待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1223">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>   
[!code-csharp[Reading from a redirected output and error stream](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-async.cs)]  
[!code-vb[Reading from a redirected output and error stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-async.vb)]    
  
 <span data-ttu-id="5ba80-1224">非同期の読み取り操作を使用すると、これらの依存関係とデッドロックの可能性を回避できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1224">You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</span></span> <span data-ttu-id="5ba80-1225">または、2つのスレッドを作成し、各ストリームの出力を個別のスレッドで読み取ることによって、デッドロック状態を回避できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1225">Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1226">リダイレクトされたストリームでは、非同期および同期読み取り操作を混在させることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1226">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="5ba80-1227">の<xref:System.Diagnostics.Process>リダイレクトされたストリームを非同期モードまたは同期モードで開くと、そのストリームのすべての読み取り操作は同じモードである必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1227">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="5ba80-1228">たとえば、 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> ストリーム <xref:System.Diagnostics.Process.StandardOutput%2A> でを<xref:System.IO.StreamReader.ReadLine%2A>呼び出すことはできません。また、逆の場合も同様です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1228">For example, do not follow <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or vice versa.</span></span> <span data-ttu-id="5ba80-1229">ただし、異なるモードの2つの異なるストリームを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1229">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="5ba80-1230">たとえば、を呼び出し<xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 、 <xref:System.Diagnostics.Process.StandardError%2A>ストリームに対して<xref:System.IO.StreamReader.ReadLine%2A>を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1230">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1231">次の例では、ipconfig コマンドを実行し、その標準出力を例のコンソールウィンドウにリダイレクトします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1231">The following example runs the ipconfig.exe command and redirects its standard output to the example's console window.</span></span>  
  
 [!code-cpp[Process_StandardOutput#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardOutput/CPP/process_standardoutput.cpp#2)]
 [!code-csharp[Process_StandardOutput#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardOutput/CS/process_standardoutput.cs#2)]
 [!code-vb[Process_StandardOutput#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardOutput/VB/process_standardoutput.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1232"><see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームがリダイレクト用に定義されていません。<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> が <see langword="true" /> に設定されており、<see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> が <see langword="false" /> に設定されていることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1232">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> is set to <see langword="true" /> and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is set to <see langword="false" />.</span></span>  
  
<span data-ttu-id="5ba80-1233">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1233">-or-</span></span> 
<span data-ttu-id="5ba80-1234"><see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームが、<see cref="M:System.Diagnostics.Process.BeginOutputReadLine" /> を使用した非同期読み取り操作のために開いています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1234">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" />.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1235">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1235">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1236">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1236">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StandardInput" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5ba80-1237">プロセス リソースを起動し、<see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1237">Starts a process resource and associates it with a <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public bool Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start" />
      <MemberSignature Language="VB.NET" Value="Public Function Start () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; bool" Usage="process.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-1238">この <see cref="T:System.Diagnostics.Process" /> コンポーネントの <see cref="P:System.Diagnostics.Process.StartInfo" /> プロパティで指定されたプロセス リソースを起動 (または再利用) し、コンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1238">Starts (or reuses) the process resource that is specified by the <see cref="P:System.Diagnostics.Process.StartInfo" /> property of this <see cref="T:System.Diagnostics.Process" /> component and associates it with the component.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1239">プロセス リソースが起動された場合は <see langword="true" />。新しいプロセス リソースが起動されなかった場合は <see langword="false" /> (既存のプロセスを再利用した場合など)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1239"><see langword="true" /> if a process resource is started; <see langword="false" /> if no new process resource is started (for example, if an existing process is reused).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1240">このオーバーロードを使用して、プロセスリソースを起動し、現在<xref:System.Diagnostics.Process>のコンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1240">Use this overload to start a process resource and associate it with the current <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="5ba80-1241">戻り値`true`は、新しいプロセスリソースが開始されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1241">The return value `true` indicates that a new process resource was started.</span></span> <span data-ttu-id="5ba80-1242">プロパティのメンバー <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> によって指定されたプロセスリソースが既にコンピューター上で実行されている場合、追加のプロセスリソースは起動されません。 <xref:System.Diagnostics.Process.StartInfo%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-1242">If the process resource specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property is already running on the computer, no additional process resource is started.</span></span> <span data-ttu-id="5ba80-1243">代わりに、実行中のプロセスリソースが再`false`利用され、が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1243">Instead, the running process resource is reused and `false` is returned.</span></span>  
  
 <span data-ttu-id="5ba80-1244">ClickOnce アプリケーションを起動するには、最初にアプリケーションをインストールした場所 (Web アドレスなど) を指定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1244">You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="5ba80-1245">ClickOnce アプリケーションは、ハードドライブにインストールされている場所を指定することによって起動しないでください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1245">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1246">Visual Studio を使用している場合は、コンポーネント<xref:System.Diagnostics.Process.Start%2A>を<xref:System.Diagnostics.Process>デザイナーにドラッグした後に、コードに挿入するメソッドのオーバーロードが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1246">If you are using Visual Studio, this overload of the <xref:System.Diagnostics.Process.Start%2A> method is the one that you insert into your code after you drag a <xref:System.Diagnostics.Process> component onto the designer.</span></span> <span data-ttu-id="5ba80-1247">ウィンドウを使用して、 `StartInfo`カテゴリを展開し、 `FileName`プロパティに適切な値を書き込みます。 `Properties`</span><span class="sxs-lookup"><span data-stu-id="5ba80-1247">Use the `Properties` window to expand the `StartInfo` category and write the appropriate value into the `FileName` property.</span></span> <span data-ttu-id="5ba80-1248">変更内容がフォームの`InitializeComponent`手順に表示されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1248">Your changes will appear in the form's `InitializeComponent` procedure.</span></span>  
  
 <span data-ttu-id="5ba80-1249">の<xref:System.Diagnostics.Process.Start%2A>このオーバーロードはメソッドで`static`はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1249">This overload of <xref:System.Diagnostics.Process.Start%2A> is not a `static` method.</span></span> <span data-ttu-id="5ba80-1250">これは、 <xref:System.Diagnostics.Process>クラスのインスタンスから呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1250">You must call it from an instance of the <xref:System.Diagnostics.Process> class.</span></span> <span data-ttu-id="5ba80-1251">を呼び出す<xref:System.Diagnostics.Process.Start%2A>前に、最初に<xref:System.Diagnostics.Process.StartInfo%2A>このインスタンスのプロパティ<xref:System.Diagnostics.Process>情報を指定する必要があります。これは、開始するプロセスリソースを決定するためにその情報が使用されるためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1251">Before calling <xref:System.Diagnostics.Process.Start%2A>, you must first specify <xref:System.Diagnostics.Process.StartInfo%2A> property information for this <xref:System.Diagnostics.Process> instance, because that information is used to determine the process resource to start.</span></span>  
  
 <span data-ttu-id="5ba80-1252"><xref:System.Diagnostics.Process.Start%2A> メソッドの他のオーバーロードは、メンバーです。 `static`</span><span class="sxs-lookup"><span data-stu-id="5ba80-1252">The other overloads of the <xref:System.Diagnostics.Process.Start%2A> method are `static` members.</span></span> <span data-ttu-id="5ba80-1253">メソッドのオーバーロードを呼び出す前に、 <xref:System.Diagnostics.Process>コンポーネントのインスタンスを作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1253">You do not need to create an instance of the <xref:System.Diagnostics.Process> component before you call those overloads of the method.</span></span> <span data-ttu-id="5ba80-1254">代わりに、 <xref:System.Diagnostics.Process>クラス自体に<xref:System.Diagnostics.Process.Start%2A>対してを呼び出すことができ<xref:System.Diagnostics.Process> 、プロセスが開始された場合は新しいコンポーネントが作成されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1254">Instead, you can call <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> class itself, and a new <xref:System.Diagnostics.Process> component is created if the process was started.</span></span> <span data-ttu-id="5ba80-1255">または`null` 、プロセスが再利用された場合は、が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1255">Or, `null` is returned if a process was reused.</span></span> <span data-ttu-id="5ba80-1256">プロセスリソースは、 <xref:System.Diagnostics.Process> <xref:System.Diagnostics.Process.Start%2A>メソッドによって返される新しいコンポーネントに自動的に関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1256">The process resource is automatically associated with the new <xref:System.Diagnostics.Process> component that is returned by the <xref:System.Diagnostics.Process.Start%2A> method.</span></span>  
  
 <span data-ttu-id="5ba80-1257">メンバーを使用して、Windows `Start`メニューの`Run`ダイアログボックスの機能を複製することができます。 <xref:System.Diagnostics.Process.StartInfo%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-1257">The <xref:System.Diagnostics.Process.StartInfo%2A> members can be used to duplicate the functionality of the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="5ba80-1258">コマンドラインに入力できるものは、 <xref:System.Diagnostics.Process.StartInfo%2A>プロパティに適切な値を設定することによって開始できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1258">Anything that can be typed into a command line can be started by setting the appropriate values in the <xref:System.Diagnostics.Process.StartInfo%2A> property.</span></span> <span data-ttu-id="5ba80-1259">設定する<xref:System.Diagnostics.Process.StartInfo%2A>必要があるプロパティは、 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>プロパティだけです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1259">The only <xref:System.Diagnostics.Process.StartInfo%2A> property that must be set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="5ba80-1260">プロパティ<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>は、実行可能ファイルである必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1260">The <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not have to be an executable file.</span></span> <span data-ttu-id="5ba80-1261">拡張子がシステムにインストールされているアプリケーションに関連付けられている任意のファイルの種類を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1261">It can be of any file type for which the extension has been associated with an application that is installed on the system.</span></span> <span data-ttu-id="5ba80-1262">たとえば、テキストファイル<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>がメモ帳などのエディターに関連付けられている場合、プロパティには拡張子 .txt を付けることができます。また、Microsoft word などのワードプロセッシングツールで .doc ファイルに関連付けられている場合は、.doc 拡張子を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1262">For example, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span>  
  
 <span data-ttu-id="5ba80-1263">コマンドラインでは、特定の種類のファイルに対して実行するアクションを指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1263">In the command line, you can specify actions to take for certain types of files.</span></span> <span data-ttu-id="5ba80-1264">たとえば、ドキュメントを印刷したり、テキストファイルを編集したりできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1264">For example, you can print documents or edit text files.</span></span> <span data-ttu-id="5ba80-1265">プロパティのメンバーを使用<xref:System.Diagnostics.ProcessStartInfo.Verb%2A>して、これらのアクションを指定します。 <xref:System.Diagnostics.Process.StartInfo%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-1265">Specify these actions using the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property.</span></span> <span data-ttu-id="5ba80-1266">その他の種類のファイルについては、 `Run`ダイアログボックスからファイルを起動するときに、コマンドライン引数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1266">For other types of files, you can specify command-line arguments when you start the file from the `Run` dialog box.</span></span> <span data-ttu-id="5ba80-1267">たとえば、ブラウザーをと<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>して指定した場合、URL を引数として渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1267">For example, you can pass a URL as an argument if you specify your browser as the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>.</span></span> <span data-ttu-id="5ba80-1268">これらの引数は、 <xref:System.Diagnostics.Process.StartInfo%2A>プロパティの<xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>メンバーで指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1268">These arguments can be specified in the <xref:System.Diagnostics.Process.StartInfo%2A> property's <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> member.</span></span>  
  
 <span data-ttu-id="5ba80-1269">システムでパス変数を引用符で囲んで宣言している場合、その場所で見つかるプロセスを開始するときに、そのパスを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1269">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="5ba80-1270">そうしないと、システムはそのパスを見つけられません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1270">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="5ba80-1271">たとえば、`c:\mypath` がパスに含まれておらず、それを `path = %path%;"c:\mypath"`` のように引用符を使用して追加した場合、`c:\mypath\` 内の任意のプロセスを開始するときに、それを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1271">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1272">ASP.NET Web ページとサーバーコントロールのコードは、Web サーバー上の ASP.NET ワーカープロセスのコンテキストで実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1272">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="5ba80-1273">ASP.NET web ページまた<xref:System.Diagnostics.Process.Start%2A>はサーバーコントロールでメソッドを使用すると、新しいプロセスはアクセス許可が制限された web サーバー上で実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1273">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="5ba80-1274">このプロセスは、クライアントのブラウザーと同じコンテキストで開始されることはなく、ユーザーのデスクトップへのアクセス権も持っていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1274">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="5ba80-1275">を使用<xref:System.Diagnostics.Process.Start%2A>してプロセスを開始するときは常に、プロセスを閉じる必要があります。そうしないと、システムリソースが失われる危険性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1275">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="5ba80-1276">または<xref:System.Diagnostics.Process.CloseMainWindow%2A> <xref:System.Diagnostics.Process.Kill%2A>を使用してプロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1276">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="5ba80-1277">プロセスが既に閉じられているかどうかは<xref:System.Diagnostics.Process.HasExited%2A> 、そのプロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1277">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="5ba80-1278">マネージスレッドのアパートメント状態に関する注意事項については、こちらを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1278">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="5ba80-1279">が<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>プロセスコンポーネントの`main()` `true` <xref:System.Diagnostics.Process.StartInfo%2A>プロパティにある場合は、メソッドの属性`[STAThread]`を設定して、アプリケーションにスレッドモデルを設定していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1279">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="5ba80-1280">それ以外の場合、マネージスレッドは状態`unknown`にするか、 `MTA`状態にすることができ`true`ます。後者<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>の場合は、との競合が発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1280">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="5ba80-1281">一部のメソッドでは`unknown`、アパートメント状態をにする必要がありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1281">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="5ba80-1282">状態が明示的に設定されていない場合、アプリケーションでこのようなメソッド`MTA`が検出されると、既定でに設定されます。これにより、アパートメント状態を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1282">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="5ba80-1283">ただし、 `MTA`では、オペレーティングシステムシェルがスレッドを管理しているときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1283">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1284">次の例では、 <xref:System.Diagnostics.Process>クラスのインスタンスを使用してプロセスを開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1284">The following example uses an instance of the <xref:System.Diagnostics.Process> class to start a process.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1285"><see cref="T:System.Diagnostics.Process" /> コンポーネントの <see cref="P:System.Diagnostics.Process.StartInfo" /> にファイル名が指定されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1285">No file name was specified in the <see cref="T:System.Diagnostics.Process" /> component's <see cref="P:System.Diagnostics.Process.StartInfo" />.</span></span>
<span data-ttu-id="5ba80-1286">あるいは、<see cref="P:System.Diagnostics.Process.StartInfo" /> プロパティの<see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> メンバーは <see langword="true" /> ですが、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />、または <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1286">-or- The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> member of the <see cref="P:System.Diagnostics.Process.StartInfo" /> property is <see langword="true" /> while <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1287">関連付けられているファイルを開いているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1287">There was an error in opening the associated file.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5ba80-1288">プロセス オブジェクトは既には破棄されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1288">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5ba80-1289">メソッドはシェルがサポートされていない Nano Server (.NET Core のみ) などのオペレーティング システムではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1289">Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1290">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1290">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1291">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1291">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (System.Diagnostics.ProcessStartInfo startInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(class System.Diagnostics.ProcessStartInfo startInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (startInfo As ProcessStartInfo) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::Diagnostics::ProcessStartInfo ^ startInfo);" />
      <MemberSignature Language="F#" Value="static member Start : System.Diagnostics.ProcessStartInfo -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start startInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startInfo" Type="System.Diagnostics.ProcessStartInfo" />
      </Parameters>
      <Docs>
        <param name="startInfo"><span data-ttu-id="5ba80-1292">ファイル名やコマンド ライン引数など、プロセスの起動に使用する情報が格納されている <see cref="T:System.Diagnostics.ProcessStartInfo" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1292">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that contains the information that is used to start the process, including the file name and any command-line arguments.</span></span></param>
        <summary><span data-ttu-id="5ba80-1293">プロセス起動情報 (起動するプロセスのファイル名など) が格納されているパラメーターで指定されたプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1293">Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1294">プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1294">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="5ba80-1295">同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1295">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="5ba80-1296">また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1296">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="5ba80-1297">その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1297">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1298">インスタンスを<xref:System.Diagnostics.ProcessStartInfo>指定してプロセスリソースを開始するには、このオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1298">Use this overload to start a process resource by specifying a <xref:System.Diagnostics.ProcessStartInfo> instance.</span></span> <span data-ttu-id="5ba80-1299">オーバーロードによって、リソースが新しい<xref:System.Diagnostics.Process>オブジェクトに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1299">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1300">開始する実行可能ファイルのアドレスが URL の場合、プロセスは開始`null`されず、が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1300">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="5ba80-1301">このオーバーロードを使用すると、最初に新しい<xref:System.Diagnostics.Process>インスタンスを作成せずにプロセスを開始できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1301">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-1302">この<xref:System.Diagnostics.ProcessStartInfo>オーバーロードをパラメーターと共に使用することは、新しい<xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.Process>インスタンスを作成し、そのプロパティを設定して、 <xref:System.Diagnostics.Process.Start%2A> <xref:System.Diagnostics.Process>インスタンスのを呼び出すための明示的な手順の代替手段です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1302">Using this overload with a <xref:System.Diagnostics.ProcessStartInfo> parameter is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting its <xref:System.Diagnostics.Process.StartInfo%2A> properties, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="5ba80-1303">インスタンスを<xref:System.Diagnostics.ProcessStartInfo>パラメーターとして使用すると<xref:System.Diagnostics.Process.Start%2A> 、呼び出しに渡されたものに対して最も制御が必要になり、プロセスを開始できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1303">Using a <xref:System.Diagnostics.ProcessStartInfo> instance as the parameter lets you call <xref:System.Diagnostics.Process.Start%2A> with the most control over what is passed into the call to start the process.</span></span> <span data-ttu-id="5ba80-1304">ファイル名またはファイル名と引数だけを渡す必要がある場合は、新しい<xref:System.Diagnostics.ProcessStartInfo>インスタンスを作成する必要はありませんが、これはオプションです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1304">If you need to pass only a file name or a file name and arguments, it is not necessary to create a new <xref:System.Diagnostics.ProcessStartInfo> instance, although that is an option.</span></span> <span data-ttu-id="5ba80-1305">設定する<xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType>必要があるプロパティは、 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>プロパティだけです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1305">The only <xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType> property that must be set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="5ba80-1306">プロパティ<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>は、実行可能ファイルを表す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1306">The <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to represent an executable file.</span></span> <span data-ttu-id="5ba80-1307">拡張子がシステムにインストールされているアプリケーションに関連付けられている任意のファイルの種類を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1307">It can be of any file type for which the extension has been associated with an application that is installed on the system.</span></span> <span data-ttu-id="5ba80-1308">たとえば、テキストファイル<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>がメモ帳などのエディターに関連付けられている場合、プロパティには拡張子 .txt を付けることができます。また、Microsoft word などのワードプロセッシングツールで .doc ファイルに関連付けられている場合は、.doc 拡張子を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1308">For example, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span>  
  
 <span data-ttu-id="5ba80-1309">ClickOnce アプリケーションを起動するには、最初にアプリケーションをインストールした場所 (Web アドレスなど) を指定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1309">You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="5ba80-1310">ClickOnce アプリケーションは、ハードドライブにインストールされている場所を指定することによって起動しないでください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1310">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="5ba80-1311"><xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType> `CreateProcessWithLogonW`インスタンスの`true`プロパティとプロパティが設定されている場合、アンマネージ関数が呼び出されます。これにより、プロパティ値がまたはの場合でも、新しいウィンドウでプロセスが開始されます。 <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> <xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType>プロパティ値が<xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1311">If the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> instance are set, the unmanaged `CreateProcessWithLogonW` function is called, which starts the process in a new window even if the <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType> property value is `true` or the <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType> property value is <xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5ba80-1312"><xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> \*\* \*\*@プロパティが`null`の場合、プロパティは UPN 形式 (user DNS_domain_name) である必要があります。 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="5ba80-1312">If the <xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType> property is `null`, the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> property must be in UPN format, *user*@*DNS_domain_name*.</span></span>   
  
 <span data-ttu-id="5ba80-1313">他のオーバーロードとは異なり、パラメーター <xref:System.Diagnostics.Process.Start%2A>を持たないのオーバーロードはメンバー `static`ではありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1313">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="5ba80-1314"><xref:System.Diagnostics.Process>インスタンスを既に作成し、開始情報 (ファイル名を含む) を指定し、プロセスリソースを起動して既存<xref:System.Diagnostics.Process>のインスタンスに関連付ける場合は、そのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1314">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-1315">既存のコンポーネントの`static`プロセスを開始するのではなく<xref:System.Diagnostics.Process> 、新しいコンポーネントを作成する場合は、オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1315">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="5ba80-1316">このオーバーロードと、パラメーターを持たないオーバーロードの両方で、 <xref:System.Diagnostics.ProcessStartInfo>インスタンスを使用してプロセスリソースの開始情報を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1316">Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a <xref:System.Diagnostics.ProcessStartInfo> instance.</span></span>  
  
 <span data-ttu-id="5ba80-1317">システムでパス変数を引用符で囲んで宣言している場合、その場所で見つかるプロセスを開始するときに、そのパスを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1317">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="5ba80-1318">そうしないと、システムはそのパスを見つけられません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1318">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="5ba80-1319">たとえば、`c:\mypath` がパスに含まれておらず、それを `path = %path%;"c:\mypath"`` のように引用符を使用して追加した場合、`c:\mypath\` 内の任意のプロセスを開始するときに、それを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1319">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1320">ASP.NET Web ページとサーバーコントロールのコードは、Web サーバー上の ASP.NET ワーカープロセスのコンテキストで実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1320">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="5ba80-1321">ASP.NET web ページまた<xref:System.Diagnostics.Process.Start%2A>はサーバーコントロールでメソッドを使用すると、新しいプロセスはアクセス許可が制限された web サーバー上で実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1321">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="5ba80-1322">このプロセスは、クライアントのブラウザーと同じコンテキストで開始されることはなく、ユーザーのデスクトップへのアクセス権も持っていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1322">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="5ba80-1323">を使用<xref:System.Diagnostics.Process.Start%2A>してプロセスを開始するときは常に、プロセスを閉じる必要があります。そうしないと、システムリソースが失われる危険性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1323">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="5ba80-1324">または<xref:System.Diagnostics.Process.CloseMainWindow%2A> <xref:System.Diagnostics.Process.Kill%2A>を使用してプロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1324">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="5ba80-1325">プロセスが既に閉じられているかどうかは<xref:System.Diagnostics.Process.HasExited%2A> 、そのプロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1325">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="5ba80-1326">マネージスレッドのアパートメント状態に関する注意事項については、こちらを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1326">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="5ba80-1327">が<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> `true` `[STAThread]` `main()`パラメーターに設定されている場合は、メソッドの属性を設定することによって、アプリケーションにスレッドモデルが設定されていることを確認してください。 `startInfo`</span><span class="sxs-lookup"><span data-stu-id="5ba80-1327">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the `startInfo` parameter, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="5ba80-1328">それ以外の場合、マネージスレッドは状態`unknown`にするか、 `MTA`状態にすることができ`true`ます。後者<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>の場合は、との競合が発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1328">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="5ba80-1329">一部のメソッドでは`unknown`、アパートメント状態をにする必要がありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1329">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="5ba80-1330">状態が明示的に設定されていない場合、アプリケーションでこのようなメソッド`MTA`が検出されると、既定でに設定されます。これにより、アパートメント状態を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1330">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="5ba80-1331">ただし、 `MTA`では、オペレーティングシステムシェルがスレッドを管理しているときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1331">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1332">次の例では、まず Internet Explorer のインスタンスを生成し、ブラウザーにお気に入りフォルダーの内容を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1332">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="5ba80-1333">その後、Internet Explorer の他のインスタンスを起動し、特定のページまたはサイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1333">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="5ba80-1334">最後に、特定のサイトに移動しているときに最小化されたウィンドウで Internet Explorer を起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1334">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 <span data-ttu-id="5ba80-1335">このメソッドの他の使用例については、 <xref:System.Diagnostics.ProcessStartInfo>クラスの個々のプロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1335">For additional examples of other uses of this method, refer to the individual properties of the <xref:System.Diagnostics.ProcessStartInfo> class.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1336"><paramref name="startInfo" /> パラメーターの <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> プロパティにファイル名が指定されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1336">No file name was specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property.</span></span>  
  
<span data-ttu-id="5ba80-1337">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1337">-or-</span></span> 
<span data-ttu-id="5ba80-1338"><paramref name="startInfo" /> パラメーターの <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> プロパティは <see langword="true" /> であり、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />、または <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> プロパティも <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1338">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is <see langword="true" /> and the <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is also <see langword="true" />.</span></span>  
  
<span data-ttu-id="5ba80-1339">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1339">-or-</span></span> 
<span data-ttu-id="5ba80-1340"><paramref name="startInfo" /> パラメーターの <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> プロパティは <see langword="true" /> であり、<see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> プロパティは <see langword="null" /> でも空でもないか、または <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> プロパティは <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1340">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is <see langword="true" /> and the <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> property is not <see langword="null" /> or empty or the <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> property is not <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5ba80-1341"><paramref name="startInfo" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1341">The <paramref name="startInfo" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5ba80-1342">プロセス オブジェクトは既には破棄されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1342">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="5ba80-1343"><paramref name="startInfo" /> パラメーターの <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> プロパティに指定されたファイルを見つけることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1343">The file specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property could not be found.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1344">関連付けられているファイルを開いているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1344">An error occurred when opening the associated file.</span></span>  
  
 <span data-ttu-id="5ba80-1345">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1345">-or-</span></span>  
  
 <span data-ttu-id="5ba80-1346">引数の長さとプロセスへの完全パスの長さの合計が、2080 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1346">The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</span></span> <span data-ttu-id="5ba80-1347">この例外に関連付けられたエラー メッセージは、次のいずれかになります。"システム コールに渡されるデータ領域が小さすぎます"</span><span class="sxs-lookup"><span data-stu-id="5ba80-1347">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="5ba80-1348">または「アクセスが拒否されました。」</span><span class="sxs-lookup"><span data-stu-id="5ba80-1348">or "Access is denied."</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5ba80-1349">メソッドはシェルがサポートされていない Nano Server (.NET Core のみ) などのオペレーティング システムではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1349">Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1350">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1350">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1351">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1351">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Start : string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="5ba80-1352">プロセスで実行する文書またはアプリケーション ファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1352">The name of a document or application file to run in the process.</span></span></param>
        <summary><span data-ttu-id="5ba80-1353">文書またはアプリケーション ファイルの名前を指定してプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1353">Starts a process resource by specifying the name of a document or application file and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1354">プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1354">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="5ba80-1355">同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1355">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="5ba80-1356">また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1356">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="5ba80-1357">その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1357">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1358">このオーバーロードを使用して、ファイル名を指定してプロセスリソースを開始します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1358">Use this overload to start a process resource by specifying its file name.</span></span> <span data-ttu-id="5ba80-1359">オーバーロードによって、リソースが新しい<xref:System.Diagnostics.Process>オブジェクトに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1359">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1360">開始する実行可能ファイルのアドレスが URL の場合、プロセスは開始`null`されず、が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1360">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="5ba80-1361">このオーバーロードを使用すると、最初に新しい<xref:System.Diagnostics.Process>インスタンスを作成せずにプロセスを開始できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1361">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-1362">オーバーロードは<xref:System.Diagnostics.Process> 、新しいインスタンスを作成し、 <xref:System.Diagnostics.Process.StartInfo%2A>プロパティの<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>メンバーを設定して、 <xref:System.Diagnostics.Process>インスタンスのを呼び出す<xref:System.Diagnostics.Process.Start%2A>ための明示的な手順の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1362">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="5ba80-1363">ClickOnce アプリケーションを起動するには、最初`fileName`にアプリケーションをインストールした場所 (Web アドレスなど) にパラメーターを設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1363">You can start a ClickOnce application by setting the `fileName` parameter to the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="5ba80-1364">ClickOnce アプリケーションは、ハードドライブにインストールされている場所を指定することによって起動しないでください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1364">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="5ba80-1365">ファイル名を指定してプロセスを開始することは、Windows `Run` `Start`メニューのダイアログボックスに情報を入力することと似ています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1365">Starting a process by specifying its file name is similar to typing the information in the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="5ba80-1366">このため、ファイル名は実行可能ファイルを表す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1366">Therefore, the file name does not need to represent an executable file.</span></span> <span data-ttu-id="5ba80-1367">これは、システムにインストールされているアプリケーションに拡張機能が関連付けられている任意のファイルの種類にすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1367">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="5ba80-1368">たとえば、メモ帳などのテキストファイルがエディターに関連付けられている場合、ファイル名の拡張子は .txt にすることができます。また、Microsoft Word などのワードプロセッシングツールを使用して .doc ファイルに関連付けられている場合は、.doc を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1368">For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="5ba80-1369">同様に、 `Run`ダイアログボックスが .exe 拡張子の有無にかかわらず実行可能ファイル名を受け入れるようにするのと同様に、 `fileName`パラメーターの .exe 拡張子は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1369">Similarly, in the same way that the `Run` dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="5ba80-1370">たとえば、 `fileName`パラメーターを "notepad.exe" または "notepad" に設定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1370">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span>  
  
 <span data-ttu-id="5ba80-1371">このオーバーロードでは、プロセスのコマンドライン引数は許可されません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1371">This overload does not allow command-line arguments for the process.</span></span> <span data-ttu-id="5ba80-1372">プロセスに対して1つ以上のコマンドライン引数を指定する必要がある場合<xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType>は<xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType> 、またはのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1372">If you need to specify one or more command-line arguments for the process, use the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType> or <xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType> overloads.</span></span>  
  
 <span data-ttu-id="5ba80-1373">他のオーバーロードとは異なり、パラメーター <xref:System.Diagnostics.Process.Start%2A>を持たないのオーバーロードはメンバー `static`ではありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1373">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="5ba80-1374"><xref:System.Diagnostics.Process>インスタンスを既に作成し、開始情報 (ファイル名を含む) を指定し、プロセスリソースを起動して既存<xref:System.Diagnostics.Process>のインスタンスに関連付ける場合は、そのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1374">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-1375">既存のコンポーネントの`static`プロセスを開始するのではなく<xref:System.Diagnostics.Process> 、新しいコンポーネントを作成する場合は、オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1375">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="5ba80-1376">このオーバーロードと、パラメーターを持たないオーバーロードの両方で、開始するプロセスリソースのファイル名を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1376">Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start.</span></span>  
  
 <span data-ttu-id="5ba80-1377">システムでパス変数を引用符で囲んで宣言している場合、その場所で見つかるプロセスを開始するときに、そのパスを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1377">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="5ba80-1378">そうしないと、システムはそのパスを見つけられません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1378">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="5ba80-1379">たとえば、`c:\mypath` がパスに含まれておらず、それを `path = %path%;"c:\mypath"`` のように引用符を使用して追加した場合、`c:\mypath\` 内の任意のプロセスを開始するときに、それを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1379">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1380">ASP.NET Web ページとサーバーコントロールのコードは、Web サーバー上の ASP.NET ワーカープロセスのコンテキストで実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1380">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="5ba80-1381">ASP.NET web ページまた<xref:System.Diagnostics.Process.Start%2A>はサーバーコントロールでメソッドを使用すると、新しいプロセスはアクセス許可が制限された web サーバー上で実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1381">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="5ba80-1382">このプロセスは、クライアントのブラウザーと同じコンテキストで開始されることはなく、ユーザーのデスクトップへのアクセス権も持っていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1382">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="5ba80-1383">を使用<xref:System.Diagnostics.Process.Start%2A>してプロセスを開始するときは常に、プロセスを閉じる必要があります。そうしないと、システムリソースが失われる危険性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1383">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="5ba80-1384">または<xref:System.Diagnostics.Process.CloseMainWindow%2A> <xref:System.Diagnostics.Process.Kill%2A>を使用してプロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1384">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="5ba80-1385">プロセスが既に閉じられているかどうかは<xref:System.Diagnostics.Process.HasExited%2A> 、そのプロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1385">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="5ba80-1386">マネージスレッドのアパートメント状態に関する注意事項については、こちらを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1386">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="5ba80-1387">が<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>プロセスコンポーネントの`main()` `true` <xref:System.Diagnostics.Process.StartInfo%2A>プロパティにある場合は、メソッドの属性`[STAThread]`を設定して、アプリケーションにスレッドモデルを設定していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1387">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="5ba80-1388">それ以外の場合、マネージスレッドは状態`unknown`にするか、 `MTA`状態にすることができ`true`ます。後者<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>の場合は、との競合が発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1388">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="5ba80-1389">一部のメソッドでは`unknown`、アパートメント状態をにする必要がありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1389">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="5ba80-1390">状態が明示的に設定されていない場合、アプリケーションでこのようなメソッド`MTA`が検出されると、既定でに設定されます。これにより、アパートメント状態を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1390">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="5ba80-1391">ただし、 `MTA`では、オペレーティングシステムシェルがスレッドを管理しているときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1391">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1392">次の例では、まず Internet Explorer のインスタンスを生成し、ブラウザーにお気に入りフォルダーの内容を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1392">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="5ba80-1393">その後、Internet Explorer の他のインスタンスを起動し、特定のページまたはサイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1393">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="5ba80-1394">最後に、特定のサイトに移動しているときに最小化されたウィンドウで Internet Explorer を起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1394">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1395">関連付けられているファイルを開いているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1395">An error occurred when opening the associated file.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5ba80-1396">プロセス オブジェクトは既には破棄されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1396">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="5ba80-1397">PATH 環境変数に、引用符を含む文字列があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1397">The PATH environment variable has a string containing quotes.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1398">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1398">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1399">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1399">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, arguments As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Start : string * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="arguments" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="5ba80-1400">プロセスで実行するアプリケーション ファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1400">The name of an application file to run in the process.</span></span></param>
        <param name="arguments"><span data-ttu-id="5ba80-1401">プロセスを起動するときに渡すコマンド ライン引数。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1401">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="5ba80-1402">アプリケーションの名前とコマンド ライン引数のセットを指定してプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1402">Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1403">プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1403">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="5ba80-1404">同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1404">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="5ba80-1405">また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1405">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="5ba80-1406">その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1406">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1407">ファイル名とコマンドライン引数を指定してプロセスリソースを開始するには、このオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1407">Use this overload to start a process resource by specifying its file name and command-line arguments.</span></span> <span data-ttu-id="5ba80-1408">オーバーロードによって、リソースが新しい<xref:System.Diagnostics.Process>オブジェクトに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1408">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1409">開始する実行可能ファイルのアドレスが URL の場合、プロセスは開始`null`されず、が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1409">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="5ba80-1410">このオーバーロードを使用すると、最初に新しい<xref:System.Diagnostics.Process>インスタンスを作成せずにプロセスを開始できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1410">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-1411"><xref:System.Diagnostics.Process>オーバーロードは、新しいインスタンスを作成するための明示的な手順の代わりに、 <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> <xref:System.Diagnostics.Process.StartInfo%2A>プロパティ<xref:System.Diagnostics.Process>の<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>とメンバーを設定し<xref:System.Diagnostics.Process.Start%2A> 、インスタンスのを呼び出すためのものです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1411">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> members of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="5ba80-1412">ファイル名と引数を指定してプロセスを開始することは、Windows `Run` `Start`メニューのダイアログボックスでファイル名とコマンドライン引数を入力することと似ています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1412">Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="5ba80-1413">このため、ファイル名は実行可能ファイルを表す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1413">Therefore, the file name does not need to represent an executable file.</span></span> <span data-ttu-id="5ba80-1414">これは、システムにインストールされているアプリケーションに拡張機能が関連付けられている任意のファイルの種類にすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1414">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="5ba80-1415">たとえば、メモ帳などのテキストファイルがエディターに関連付けられている場合、ファイル名の拡張子は .txt にすることができます。また、Microsoft Word などのワードプロセッシングツールを使用して .doc ファイルに関連付けられている場合は、.doc を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1415">For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="5ba80-1416">同様に、 `Run`ダイアログボックスが .exe 拡張子の有無にかかわらず実行可能ファイル名を受け入れるようにするのと同様に、 `fileName`パラメーターの .exe 拡張子は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1416">Similarly, in the same way that the `Run` dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="5ba80-1417">たとえば、 `fileName`パラメーターを "notepad.exe" または "notepad" に設定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1417">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="5ba80-1418">パラメーターが`fileName`実行可能ファイルを表す場合、 `arguments`パラメーターは、の`Notepad.exe myfile.txt`テキストファイルなど、操作対象のファイルを表す場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1418">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span> <span data-ttu-id="5ba80-1419">パラメーターが`fileName`コマンド (.cmd) ファイルを表す場合`arguments` 、パラメーターには、コマンドウィンドウを終了`/c`するか、`/k`完了後に残すかを指定する "" または "" 引数のいずれかを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1419">If the `fileName` parameter represents a command (.cmd) file, the `arguments` parameter must include either a "`/c`" or "`/k`" argument to specify whether the command window exits or remains after completion.</span></span>  
  
 <span data-ttu-id="5ba80-1420">他のオーバーロードとは異なり、パラメーター <xref:System.Diagnostics.Process.Start%2A>を持たないのオーバーロードはメンバー `static`ではありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1420">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="5ba80-1421"><xref:System.Diagnostics.Process>インスタンスを既に作成し、開始情報 (ファイル名を含む) を指定し、プロセスリソースを起動して既存<xref:System.Diagnostics.Process>のインスタンスに関連付ける場合は、そのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1421">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-1422">既存のコンポーネントの`static`プロセスを開始するのではなく<xref:System.Diagnostics.Process> 、新しいコンポーネントを作成する場合は、オーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1422">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="5ba80-1423">このオーバーロードと、パラメーターを持たないオーバーロードの両方で、開始するプロセスリソースのファイル名と渡すコマンドライン引数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1423">Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass.</span></span>  
  
 <span data-ttu-id="5ba80-1424">システムでパス変数を引用符で囲んで宣言している場合、その場所で見つかるプロセスを開始するときに、そのパスを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1424">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="5ba80-1425">そうしないと、システムはそのパスを見つけられません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1425">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="5ba80-1426">たとえば、`c:\mypath` がパスに含まれておらず、それを `path = %path%;"c:\mypath"`` のように引用符を使用して追加した場合、`c:\mypath\` 内の任意のプロセスを開始するときに、それを完全修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1426">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1427">ASP.NET Web ページとサーバーコントロールのコードは、Web サーバー上の ASP.NET ワーカープロセスのコンテキストで実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1427">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="5ba80-1428">ASP.NET web ページまた<xref:System.Diagnostics.Process.Start%2A>はサーバーコントロールでメソッドを使用すると、新しいプロセスはアクセス許可が制限された web サーバー上で実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1428">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="5ba80-1429">このプロセスは、クライアントのブラウザーと同じコンテキストで開始されることはなく、ユーザーのデスクトップへのアクセス権も持っていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1429">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="5ba80-1430">を使用<xref:System.Diagnostics.Process.Start%2A>してプロセスを開始するときは常に、プロセスを閉じる必要があります。そうしないと、システムリソースが失われる危険性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1430">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="5ba80-1431">または<xref:System.Diagnostics.Process.CloseMainWindow%2A> <xref:System.Diagnostics.Process.Kill%2A>を使用してプロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1431">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="5ba80-1432">プロセスが既に閉じられているかどうかは<xref:System.Diagnostics.Process.HasExited%2A> 、そのプロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1432">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
 <span data-ttu-id="5ba80-1433">マネージスレッドのアパートメント状態に関する注意事項については、こちらを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1433">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="5ba80-1434">が<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>プロセスコンポーネントの`main()` `true` <xref:System.Diagnostics.Process.StartInfo%2A>プロパティにある場合は、メソッドの属性`[STAThread]`を設定して、アプリケーションにスレッドモデルを設定していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1434">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="5ba80-1435">それ以外の場合、マネージスレッドは状態`unknown`にするか、 `MTA`状態にすることができ`true`ます。後者<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>の場合は、との競合が発生します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1435">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="5ba80-1436">一部のメソッドでは`unknown`、アパートメント状態をにする必要がありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1436">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="5ba80-1437">状態が明示的に設定されていない場合、アプリケーションでこのようなメソッド`MTA`が検出されると、既定でに設定されます。これにより、アパートメント状態を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1437">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="5ba80-1438">ただし、 `MTA`では、オペレーティングシステムシェルがスレッドを管理しているときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1438">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1439">次の例では、まず Internet Explorer のインスタンスを生成し、ブラウザーにお気に入りフォルダーの内容を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1439">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="5ba80-1440">その後、Internet Explorer の他のインスタンスを起動し、特定のページまたはサイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1440">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="5ba80-1441">最後に、特定のサイトに移動しているときに最小化されたウィンドウで Internet Explorer を起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1441">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1442"><paramref name="fileName" /> パラメーターまたは <paramref name="arguments" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1442">The <paramref name="fileName" /> or <paramref name="arguments" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1443">関連付けられているファイルを開いているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1443">An error occurred when opening the associated file.</span></span>  
  
 <span data-ttu-id="5ba80-1444">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1444">-or-</span></span>  
  
 <span data-ttu-id="5ba80-1445">引数の長さとプロセスへの完全パスの長さの合計が、2080 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1445">The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</span></span> <span data-ttu-id="5ba80-1446">この例外に関連付けられたエラー メッセージは、次のいずれかになります。"システム コールに渡されるデータ領域が小さすぎます"</span><span class="sxs-lookup"><span data-stu-id="5ba80-1446">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="5ba80-1447">または「アクセスが拒否されました。」</span><span class="sxs-lookup"><span data-stu-id="5ba80-1447">or "Access is denied."</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5ba80-1448">プロセス オブジェクトは既には破棄されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1448">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="5ba80-1449">PATH 環境変数に、引用符を含む文字列があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1449">The PATH environment variable has a string containing quotes.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1450">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1450">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1451">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1451">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string userName, System.Security.SecureString password, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string userName, class System.Security.SecureString password, string domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, userName As String, password As SecureString, domain As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ userName, System::Security::SecureString ^ password, System::String ^ domain);" />
      <MemberSignature Language="F#" Value="static member Start : string * string * System.Security.SecureString * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, userName, password, domain)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="password" Type="System.Security.SecureString" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="domain" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="5ba80-1452">プロセスで実行するアプリケーション ファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1452">The name of an application file to run in the process.</span></span></param>
        <param name="userName"><span data-ttu-id="5ba80-1453">プロセスの開始時に使用するユーザー名。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1453">The user name to use when starting the process.</span></span></param>
        <param name="password"><span data-ttu-id="5ba80-1454">プロセスを開始するときに使用するパスワードを含む <see cref="T:System.Security.SecureString" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1454">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</span></span></param>
        <param name="domain"><span data-ttu-id="5ba80-1455">プロセスの開始時に使用するドメイン。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1455">The domain to use when starting the process.</span></span></param>
        <summary><span data-ttu-id="5ba80-1456">アプリケーションの名前、ユーザー名、パスワード、ドメインを指定してプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1456">Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1457">プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1457">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="5ba80-1458">同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1458">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="5ba80-1459">また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1459">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="5ba80-1460">その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1460">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1461">このオーバーロードを使用して、ファイル名、ユーザー名、パスワード、およびドメインを指定することにより、新しいプロセスとそのプライマリスレッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1461">Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain.</span></span> <span data-ttu-id="5ba80-1462">新しいプロセスは、指定された実行可能ファイルを、指定した資格情報 (ユーザー、ドメイン、およびパスワード) のセキュリティコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1462">The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1463">実行可能ファイルがリモートドライブにある場合は、リンクされたドライブ文字ではなく、uniform resource identifier (URI) を使用してネットワーク共有を識別する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1463">When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1464">開始する実行可能ファイルのアドレスが URL の場合、プロセスは開始`null`されず、が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1464">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="5ba80-1465">このオーバーロードを使用すると、最初に新しい<xref:System.Diagnostics.Process>インスタンスを作成せずにプロセスを開始できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1465">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-1466">オーバーロードは<xref:System.Diagnostics.Process> 、新しいインスタンスを作成するための明示的な手順の代わりに、 <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> <xref:System.Diagnostics.Process.StartInfo%2A>プロパティ<xref:System.Diagnostics.ProcessStartInfo.Password%2A>の、 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> 、、の各プロパティを設定<xref:System.Diagnostics.Process.Start%2A>し、を呼び出すためのものです。<xref:System.Diagnostics.Process>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1466">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, and <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="5ba80-1467">同様に、[ファイル名を指定して**実行**] ダイアログボックスが .exe 拡張子の有無にかかわらず、実行可能ファイル名を受け入れる場合と同じよう`fileName`に、.exe 拡張子はパラメーターで省略可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1467">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="5ba80-1468">たとえば、 `fileName`パラメーターを "notepad.exe" または "notepad" に設定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1468">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="5ba80-1469">パラメーターが`fileName`実行可能ファイルを表す場合、 `arguments`パラメーターは、の`Notepad.exe myfile.txt`テキストファイルなど、操作対象のファイルを表す場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1469">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1470">ファイル名は<xref:System.Diagnostics.Process.Start%2A> 、、 `password`、および`domain`の各パラメーターを持つ`userName`オーバーロード内の実行可能ファイルを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1470">The file name must represent an executable file in the <xref:System.Diagnostics.Process.Start%2A> overloads that have `userName`, `password`, and `domain` parameters.</span></span>  
  
 <span data-ttu-id="5ba80-1471">を使用<xref:System.Diagnostics.Process.Start%2A>してプロセスを開始するときは常に、プロセスを閉じる必要があります。そうしないと、システムリソースが失われる危険性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1471">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="5ba80-1472">または<xref:System.Diagnostics.Process.CloseMainWindow%2A> <xref:System.Diagnostics.Process.Kill%2A>を使用してプロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1472">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="5ba80-1473">プロセスが既に閉じられているかどうかは<xref:System.Diagnostics.Process.HasExited%2A> 、そのプロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1473">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1474">次のコード例では、このオーバーロードを使用して実行可能ファイルを起動し、実行不可能<xref:System.ComponentModel.Win32Exception>なファイルに関連付けられているアプリケーションを起動しようとしたときに、をスローする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1474">The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a <xref:System.ComponentModel.Win32Exception> when an attempt is made to start an application associated with a nonexecutable file.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.Start/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.Process.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.Start/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1475">ファイル名が指定されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1475">No file name was specified.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1476">関連付けられているファイルを開いているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1476">There was an error in opening the associated file.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5ba80-1477">プロセス オブジェクトは既には破棄されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1477">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5ba80-1478">このメンバーは Linux または macOS (.NET Core のみ) ではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1478">This member is not supported on Linux or macOS (.NET Core only).</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1479">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1479">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1480">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1480">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string arguments, string userName, System.Security.SecureString password, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string arguments, string userName, class System.Security.SecureString password, string domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, arguments As String, userName As String, password As SecureString, domain As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ arguments, System::String ^ userName, System::Security::SecureString ^ password, System::String ^ domain);" />
      <MemberSignature Language="F#" Value="static member Start : string * string * string * System.Security.SecureString * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, arguments, userName, password, domain)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arguments" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="password" Type="System.Security.SecureString" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="domain" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="5ba80-1481">プロセスで実行するアプリケーション ファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1481">The name of an application file to run in the process.</span></span></param>
        <param name="arguments"><span data-ttu-id="5ba80-1482">プロセスを起動するときに渡すコマンド ライン引数。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1482">Command-line arguments to pass when starting the process.</span></span></param>
        <param name="userName"><span data-ttu-id="5ba80-1483">プロセスの開始時に使用するユーザー名。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1483">The user name to use when starting the process.</span></span></param>
        <param name="password"><span data-ttu-id="5ba80-1484">プロセスを開始するときに使用するパスワードを含む <see cref="T:System.Security.SecureString" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1484">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</span></span></param>
        <param name="domain"><span data-ttu-id="5ba80-1485">プロセスの開始時に使用するドメイン。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1485">The domain to use when starting the process.</span></span></param>
        <summary><span data-ttu-id="5ba80-1486">アプリケーションの名前、コマンド ライン引数のセット、ユーザー名、パスワード、およびドメインを指定してプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1486">Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1487">プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1487">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="5ba80-1488">同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1488">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="5ba80-1489">また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1489">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="5ba80-1490">その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1490">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1491">このオーバーロードを使用して、ファイル名、コマンドライン引数、ユーザー名、パスワード、およびドメインを指定することにより、新しいプロセスとそのプライマリスレッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1491">Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain.</span></span> <span data-ttu-id="5ba80-1492">新しいプロセスは、指定された実行可能ファイルを、指定した資格情報 (ユーザー、ドメイン、およびパスワード) のセキュリティコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1492">The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1493">実行可能ファイルがリモートドライブにある場合は、リンクされたドライブ文字ではなく、uniform resource identifier (URI) を使用してネットワーク共有を識別する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1493">When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1494">開始する実行可能ファイルのアドレスが URL の場合、プロセスは開始`null`されず、が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1494">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="5ba80-1495">このオーバーロードを使用すると、最初に新しい<xref:System.Diagnostics.Process>インスタンスを作成せずにプロセスを開始できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1495">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="5ba80-1496">オーバーロードは、新しい<xref:System.Diagnostics.Process>インスタンスを作成するための明示的な手順の代わりに、 <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> <xref:System.Diagnostics.Process.StartInfo%2A>プロパティ<xref:System.Diagnostics.ProcessStartInfo.UserName%2A>の<xref:System.Diagnostics.ProcessStartInfo.Password%2A> <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>、、 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> 、、およびの各プロパティを設定し、を呼び出します。<xref:System.Diagnostics.Process.Start%2A>インスタンスの <xref:System.Diagnostics.Process>  。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1496">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, and <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="5ba80-1497">同様に、[ファイル名を指定して**実行**] ダイアログボックスが .exe 拡張子の有無にかかわらず、実行可能ファイル名を受け入れる場合と同じよう`fileName`に、.exe 拡張子はパラメーターで省略可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1497">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="5ba80-1498">たとえば、 `fileName`パラメーターを "notepad.exe" または "notepad" に設定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1498">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="5ba80-1499">パラメーターが`fileName`実行可能ファイルを表す場合、 `arguments`パラメーターは、の`Notepad.exe myfile.txt`テキストファイルなど、操作対象のファイルを表す場合があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1499">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1500">ファイル名は<xref:System.Diagnostics.Process.Start%2A> 、、 `password`、および`domain`の各パラメーターを持つ`userName`オーバーロード内の実行可能ファイルを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1500">The file name must represent an executable file in the <xref:System.Diagnostics.Process.Start%2A> overloads that have `userName`, `password`, and `domain` parameters.</span></span>  
  
 <span data-ttu-id="5ba80-1501">を使用<xref:System.Diagnostics.Process.Start%2A>してプロセスを開始するときは常に、プロセスを閉じる必要があります。そうしないと、システムリソースが失われる危険性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1501">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="5ba80-1502">または<xref:System.Diagnostics.Process.CloseMainWindow%2A> <xref:System.Diagnostics.Process.Kill%2A>を使用してプロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1502">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="5ba80-1503">プロセスが既に閉じられているかどうかは<xref:System.Diagnostics.Process.HasExited%2A> 、そのプロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1503">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1504">ファイル名が指定されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1504">No file name was specified.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1505">関連付けられているファイルを開いているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1505">An error occurred when opening the associated file.</span></span>  
  
 <span data-ttu-id="5ba80-1506">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1506">-or-</span></span>  
  
 <span data-ttu-id="5ba80-1507">引数の長さと関連ファイルへの完全パスの長さの合計が、2080 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1507">The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080.</span></span> <span data-ttu-id="5ba80-1508">この例外に関連付けられたエラー メッセージは、次のいずれかになります。"システム コールに渡されるデータ領域が小さすぎます"</span><span class="sxs-lookup"><span data-stu-id="5ba80-1508">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="5ba80-1509">または「アクセスが拒否されました。」</span><span class="sxs-lookup"><span data-stu-id="5ba80-1509">or "Access is denied."</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5ba80-1510">プロセス オブジェクトは既には破棄されています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1510">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5ba80-1511">このメンバーは Linux または macOS (.NET Core のみ) ではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1511">This member is not supported on Linux or macOS (.NET Core only).</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1512">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1512">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1513">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1513">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="StartInfo">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessStartInfo StartInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessStartInfo StartInfo" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StartInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property StartInfo As ProcessStartInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessStartInfo ^ StartInfo { System::Diagnostics::ProcessStartInfo ^ get(); void set(System::Diagnostics::ProcessStartInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartInfo : System.Diagnostics.ProcessStartInfo with get, set" Usage="System.Diagnostics.Process.StartInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Specifies information used to start a process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStartInfo")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessStartInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1514"><see cref="T:System.Diagnostics.Process" /> の <see cref="M:System.Diagnostics.Process.Start" /> メソッドに渡すプロパティを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1514">Gets or sets the properties to pass to the <see cref="M:System.Diagnostics.Process.Start" /> method of the <see cref="T:System.Diagnostics.Process" />.</span></span></summary>
        <value><span data-ttu-id="5ba80-1515">プロセスを起動するときに使用するデータを表す <see cref="T:System.Diagnostics.ProcessStartInfo" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1515">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that represents the data with which to start the process.</span></span> <span data-ttu-id="5ba80-1516">これらの引数には、プロセスの起動時に使用する実行可能ファイルまたは文書の名前があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1516">These arguments include the name of the executable file or document used to start the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1517"><xref:System.Diagnostics.Process.StartInfo%2A>プロセスを開始するために使用するパラメーターのセットを表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1517"><xref:System.Diagnostics.Process.StartInfo%2A> represents the set of parameters to use to start a process.</span></span> <span data-ttu-id="5ba80-1518">が<xref:System.Diagnostics.Process.Start%2A> 呼び出さ <xref:System.Diagnostics.Process.StartInfo%2A> れると、を開始するプロセスを指定するためにが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1518">When <xref:System.Diagnostics.Process.Start%2A> is called, the <xref:System.Diagnostics.Process.StartInfo%2A> is used to specify the process to start.</span></span> <span data-ttu-id="5ba80-1519">設定する必要<xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>があるメンバーは、プロパティだけです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1519">The only necessary <xref:System.Diagnostics.Process.StartInfo%2A> member to set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="5ba80-1520"><xref:System.Diagnostics.ProcessStartInfo.FileName%2A>プロパティを指定してプロセスを開始することは、Windows の **[スタート]** メニューの **[実行]** ダイアログボックスに情報を入力することと似ています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1520">Starting a process by specifying the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property is similar to typing the information in the **Run** dialog box of the Windows **Start** menu.</span></span> <span data-ttu-id="5ba80-1521">したがって、 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>プロパティは実行可能ファイルを表す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1521">Therefore, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to represent an executable file.</span></span> <span data-ttu-id="5ba80-1522">これは、システムにインストールされているアプリケーションに拡張機能が関連付けられている任意のファイルの種類にすることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1522">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="5ba80-1523">たとえば、メモ<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>帳などのテキストファイルがエディターに関連付けられている場合、は .txt 拡張子を持つことができます。また、Microsoft word などのワードプロセッシングツールを使用して .doc ファイルに関連付けられている場合は、.doc を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1523">For example the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="5ba80-1524">同様に、[ファイル名を指定して**実行**] ダイアログボックスが .exe 拡張子の有無にかかわらず、実行可能ファイル名を受け入れる場合と同じよう<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>に、.exe 拡張子は、メンバーでは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1524">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member.</span></span> <span data-ttu-id="5ba80-1525">たとえば、 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>プロパティを "notepad.exe" または "notepad" に設定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1525">For example, you can set the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property to either "Notepad.exe" or "Notepad".</span></span>  
  
 <span data-ttu-id="5ba80-1526">ClickOnce アプリケーションを起動するには、アプリケーション<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>を最初にインストールした場所 (Web アドレスなど) にプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1526">You can start a ClickOnce application by setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property to the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="5ba80-1527">ClickOnce アプリケーションは、ハードドライブにインストールされている場所を指定することによって起動しないでください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1527">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="5ba80-1528">ファイル名に、.doc ファイルなどの実行不可能なファイルが含まれている場合は、ファイルに対して実行するアクションを指定する動詞を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1528">If the file name involves a nonexecutable file, such as a .doc file, you can include a verb specifying what action to take on the file.</span></span> <span data-ttu-id="5ba80-1529">たとえば、.doc 拡張子で終わるファイル<xref:System.Diagnostics.ProcessStartInfo.Verb%2A>の場合、を "Print" に設定できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1529">For example, you could set the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> to "Print" for a file ending in the .doc extension.</span></span> <span data-ttu-id="5ba80-1530">プロパティの値<xref:System.Diagnostics.ProcessStartInfo.Verb%2A>を手動で<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>入力した場合、プロパティに指定されたファイル名に拡張子を付ける必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1530">The file name specified in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to have an extension if you manually enter a value for the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property.</span></span> <span data-ttu-id="5ba80-1531">ただし、プロパティを使用し<xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>て、使用可能な動詞を特定する場合は、拡張機能を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1531">However, if you use the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property to determine what verbs are available, you must include the extension.</span></span>  
  
 <span data-ttu-id="5ba80-1532">この<xref:System.Diagnostics.Process.StartInfo%2A>プロパティで指定されたパラメーターは、プロセスで<xref:System.Diagnostics.Process.Start%2A>メソッドを呼び出す時間まで変更できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1532">You can change the parameters specified in the <xref:System.Diagnostics.Process.StartInfo%2A> property up to the time that you call the <xref:System.Diagnostics.Process.Start%2A> method on the process.</span></span> <span data-ttu-id="5ba80-1533">プロセスを開始した後、 <xref:System.Diagnostics.Process.StartInfo%2A>値を変更しても、関連付けられているプロセスには影響しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1533">After you start the process, changing the <xref:System.Diagnostics.Process.StartInfo%2A> values does not affect or restart the associated process.</span></span> <span data-ttu-id="5ba80-1534">プロパティ<xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29> <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType>と`CreateProcessWithLogonW` <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A> `true`プロパティが設定されたメソッドを呼び出すと、アンマネージ関数が呼び出されます。これにより、プロパティ値がまたはの場合でも、新しいウィンドウでプロセスが開始されます。 <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A>プロパティ値が<xref:System.Diagnostics.ProcessWindowStyle.Hidden>です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1534">If you call the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29> method with the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> properties set, the unmanaged `CreateProcessWithLogonW` function is called, which starts the process in a new window even if the <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A> property value is `true` or the <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A> property value is <xref:System.Diagnostics.ProcessWindowStyle.Hidden>.</span></span>  
  
 <span data-ttu-id="5ba80-1535">メソッドによって<xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.Process>返されるオブジェクトのプロパティにのみアクセスする必要があります。 <xref:System.Diagnostics.Process.Start%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-1535">You should only access the <xref:System.Diagnostics.Process.StartInfo%2A> property on a <xref:System.Diagnostics.Process> object returned by the <xref:System.Diagnostics.Process.Start%2A> method.</span></span> <span data-ttu-id="5ba80-1536">たとえば、によって<xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.Process.GetProcesses%2A>返される<xref:System.Diagnostics.Process>オブジェクトのプロパティにアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1536">For example, you should not access the <xref:System.Diagnostics.Process.StartInfo%2A> property on a <xref:System.Diagnostics.Process> object returned by <xref:System.Diagnostics.Process.GetProcesses%2A>.</span></span> <span data-ttu-id="5ba80-1537">それ以外の場合、.net <xref:System.Diagnostics.Process.StartInfo%2A> Core では、 <xref:System.InvalidOperationException>プロパティによってとがスローさ<xref:System.Diagnostics.ProcessStartInfo>れ .NET Framework でダミーオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1537">Otherwise, on .NET Core the <xref:System.Diagnostics.Process.StartInfo%2A> property will throw an <xref:System.InvalidOperationException> and on .NET Framework it will return a dummy <xref:System.Diagnostics.ProcessStartInfo> object.</span></span>
  
 <span data-ttu-id="5ba80-1538">プロセスが開始されると、ファイル名は (読み取り専用) <xref:System.Diagnostics.Process.MainModule%2A>プロパティを設定するファイルになります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1538">When the process is started, the file name is the file that populates the (read-only) <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="5ba80-1539">プロセスの開始後にプロセスに関連付けられている実行可能ファイルを取得する場合は、 <xref:System.Diagnostics.Process.MainModule%2A>プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1539">If you want to retrieve the executable file that is associated with the process after the process has started, use the <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="5ba80-1540">関連付けられたプロセスが開始されて<xref:System.Diagnostics.Process>いないインスタンスの実行可能ファイルを設定する場合は、 <xref:System.Diagnostics.Process.StartInfo%2A>プロパティの<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>メンバーを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1540">If you want to set the executable file of a <xref:System.Diagnostics.Process> instance for which an associated process has not been started, use the <xref:System.Diagnostics.Process.StartInfo%2A> property's <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member.</span></span> <span data-ttu-id="5ba80-1541"><xref:System.Diagnostics.Process.StartInfo%2A>プロパティのメンバーは、プロセスの<xref:System.Diagnostics.Process.Start%2A>メソッドに渡される引数であるため、関連付けられ<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>たプロセスの開始後にプロパティを変更して<xref:System.Diagnostics.Process.MainModule%2A>も、プロパティはリセットされません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1541">Because the members of the <xref:System.Diagnostics.Process.StartInfo%2A> property are arguments that are passed to the <xref:System.Diagnostics.Process.Start%2A> method of a process, changing the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property after the associated process has started will not reset the <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="5ba80-1542">これらのプロパティは、関連付けられたプロセスを初期化するためにのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1542">These properties are used only to initialize the associated process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1543">次の例では<xref:System.Diagnostics.Process.StartInfo%2A> 、を実行するファイル、それに対して実行されるアクション、およびユーザーインターフェイスを表示する必要があるかどうかをに設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1543">The following example populates a <xref:System.Diagnostics.Process.StartInfo%2A> with the file to execute, the action performed on it and whether it should displays a user interface.</span></span> <span data-ttu-id="5ba80-1544">その他の例については、 <xref:System.Diagnostics.ProcessStartInfo>クラスのプロパティのリファレンスページを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1544">For additional examples, refer to the reference pages for properties of the <xref:System.Diagnostics.ProcessStartInfo> class.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5ba80-1545"><see cref="P:System.Diagnostics.Process.StartInfo" /> を指定する値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1545">The value that specifies the <see cref="P:System.Diagnostics.Process.StartInfo" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1546"><see cref="M:System.Diagnostics.Process.Start" /> メソッドはプロセスを開始するために使用されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1546">The <see cref="M:System.Diagnostics.Process.Start" /> method was not used to start the process.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1547">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1547">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1548">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1548">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTime : DateTime" Usage="System.Diagnostics.Process.StartTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The time at which the process was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStartTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1549">関連付けられたプロセスが起動された時刻を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1549">Gets the time that the associated process was started.</span></span></summary>
        <value><span data-ttu-id="5ba80-1550">プロセスが起動された時刻を示すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1550">An object  that indicates when the process started.</span></span> <span data-ttu-id="5ba80-1551">プロセスが実行中でない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1551">An exception is thrown if the process is not running.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-1552">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.StartTime" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1552">You are attempting to access the <see cref="P:System.Diagnostics.Process.StartTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1553">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1553">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1554">プロセスが終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1554">The process has exited.</span></span>  
  
 <span data-ttu-id="5ba80-1555">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1555">-or-</span></span>  
  
 <span data-ttu-id="5ba80-1556">プロセスは開始されていません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1556">The process has not been started.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1557">Windows 関数の呼び出しでエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1557">An error occurred in the call to the Windows function.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1558">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1558">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1559">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1559">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Diagnostics.Process.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The object used to marshal the event handler calls issued as a result of a Process exit.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1560">プロセス終了イベントの結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1560">Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</span></span></summary>
        <value><span data-ttu-id="5ba80-1561">プロセスの <see cref="E:System.Diagnostics.Process.Exited" /> イベントの結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用する <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1561">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> used to marshal event handler calls that are issued as a result of an <see cref="E:System.Diagnostics.Process.Exited" /> event on the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1562">が<xref:System.Diagnostics.EventLog.SynchronizingObject%2A>の`null`場合 <xref:System.Diagnostics.Process.Exited>  、イベントを処理するメソッドは、システムスレッドプールからのスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1562">When <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> is `null`, methods that handle the <xref:System.Diagnostics.Process.Exited> event are called on a thread from the system thread pool.</span></span> <span data-ttu-id="5ba80-1563">システムスレッドプールの詳細については<xref:System.Threading.ThreadPool>、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1563">For more information about system thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="5ba80-1564">などの <xref:System.Windows.Forms.Button> ビジュアル Windows フォームコンポーネントによってイベントが処理されるときに、システムスレッドプールを介してコンポーネントにアクセスできない場合や、例外が発生する場合があります。 <xref:System.Diagnostics.Process.Exited></span><span class="sxs-lookup"><span data-stu-id="5ba80-1564">When the <xref:System.Diagnostics.Process.Exited> event is handled by a visual Windows Forms component, such as a <xref:System.Windows.Forms.Button>, accessing the component through the system thread pool might not work, or might result in an exception.</span></span> <span data-ttu-id="5ba80-1565">これを回避する<xref:System.Diagnostics.Process.SynchronizingObject%2A>には、を Windows フォームコンポーネントに設定します。 <xref:System.Diagnostics.Process.Exited>これにより、イベントを処理するメソッドが、コンポーネントが作成されたのと同じスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1565">Avoid this by setting <xref:System.Diagnostics.Process.SynchronizingObject%2A> to a Windows Forms component, which causes the methods handling the <xref:System.Diagnostics.Process.Exited> event to be called on the same thread on which the component was created.</span></span>  
  
 <span data-ttu-id="5ba80-1566">が Windows フォームデザイナーの内部[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]で使用されて<xref:System.Diagnostics.Process.SynchronizingObject%2A>いる場合、はを含むコントロールに<xref:System.Diagnostics.Process>自動的に設定されます。 <xref:System.Diagnostics.Process></span><span class="sxs-lookup"><span data-stu-id="5ba80-1566">If the <xref:System.Diagnostics.Process> is used inside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in a Windows Forms designer, <xref:System.Diagnostics.Process.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="5ba80-1567">たとえば、を<xref:System.Diagnostics.Process> (から<xref:System.Windows.Forms.Form>継承<xref:System.Diagnostics.Process> `Form1` `Form1`する) のデザイナーに配置すると、のプロパティはのインスタンスに設定されます。 <xref:System.Diagnostics.Process.SynchronizingObject%2A></span><span class="sxs-lookup"><span data-stu-id="5ba80-1567">For example, if you place a <xref:System.Diagnostics.Process> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>) the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property of <xref:System.Diagnostics.Process> is set to the instance of `Form1`:</span></span>  
  
 [!code-cpp[Process_SynchronizingObject#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_SynchronizingObject/CPP/remarks.cpp#2)]
 [!code-csharp[Process_SynchronizingObject#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/CS/remarks.cs#2)]
 [!code-vb[Process_SynchronizingObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_SynchronizingObject/VB/remarks.vb#2)]  
  
 <span data-ttu-id="5ba80-1568">通常、このプロパティは、コンポーネントがコントロールまたはフォーム内に配置されるときに設定されます。これは、コンポーネントが特定のスレッドにバインドされるためです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1568">Typically, this property is set when the component is placed inside a control or form, because those components are bound to a specific thread.</span></span>  
  
   
  
## Examples  
 [!code-cpp[Process_SynchronizingObject#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_SynchronizingObject/CPP/process_synchronizingobject.cpp#1)]
 [!code-csharp[Process_SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/CS/process_synchronizingobject.cs#1)]
 [!code-vb[Process_SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_SynchronizingObject/VB/process_synchronizingobject.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1569">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1569">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1570">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1570">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName="Threads">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessThreadCollection Threads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessThreadCollection Threads" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Threads" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Threads As ProcessThreadCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessThreadCollection ^ Threads { System::Diagnostics::ProcessThreadCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Threads : System.Diagnostics.ProcessThreadCollection" Usage="System.Diagnostics.Process.Threads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of threads of this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessThreads")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessThreadCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1571">関連付けられたプロセスで実行されているスレッドのセットを取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1571">Gets the set of threads that are running in the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1572">関連付けられたプロセスで現在実行中のオペレーティング システム スレッドを表す <see cref="T:System.Diagnostics.ProcessThread" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1572">An array of type <see cref="T:System.Diagnostics.ProcessThread" /> representing the operating system threads currently running in the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1573">スレッドは、プロセス内のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1573">A thread executes code in a process.</span></span> <span data-ttu-id="5ba80-1574">各プロセスは、1つのスレッド (プライマリスレッド) で開始されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1574">Each process is started with a single thread, its primary thread.</span></span> <span data-ttu-id="5ba80-1575">どのスレッドでも新しいスレッドを作成できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1575">Any thread can create additional threads.</span></span> <span data-ttu-id="5ba80-1576">プロセス内のスレッドは、プロセスのアドレス空間を共有します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1576">Threads within a process share the address space of the process.</span></span>  
  
 <span data-ttu-id="5ba80-1577">現在<xref:System.Diagnostics.ProcessThread>のプロセスに関連付けられているすべてのスレッドを取得するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1577">Use <xref:System.Diagnostics.ProcessThread> to get all the threads associated with the current process.</span></span> <span data-ttu-id="5ba80-1578">プライマリスレッドは、配列内のインデックス0の位置にあるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1578">The primary thread is not necessarily at index zero in the array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><span data-ttu-id="5ba80-1579">プロセスに <see cref="P:System.Diagnostics.Process.Id" /> がないか、<see cref="T:System.Diagnostics.Process" /> インスタンスに関連付けられているプロセスがありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1579">The process does not have an <see cref="P:System.Diagnostics.Process.Id" />, or no process is associated with the <see cref="T:System.Diagnostics.Process" /> instance.</span></span>  
  
<span data-ttu-id="5ba80-1580">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1580">-or-</span></span> 
<span data-ttu-id="5ba80-1581">関連付けられたプロセスが終了しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1581">The associated process has exited.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1582">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1582">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1583">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1583">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.Diagnostics.ProcessThread" />
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="process.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-1584">プロセス名の書式指定は文字列にします。親コンポーネント型があれば、この型と組み合わせます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1584">Formats the process's name as a string, combined with the parent component type, if applicable.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1585">ベース コンポーネントの <see cref="M:System.Object.ToString" /> の戻り値と組み合わせた <see cref="P:System.Diagnostics.Process.ProcessName" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1585">The <see cref="P:System.Diagnostics.Process.ProcessName" />, combined with the base component's <see cref="M:System.Object.ToString" /> return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5ba80-1586">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1586">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-1587">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1587">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1588">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1588">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1589">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1589">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1590">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1590">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="TotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan TotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.TotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TotalProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.TotalProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process has used.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessTotalProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1591">このプロセスの合計プロセッサ時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1591">Gets the total processor time for this process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1592">関連付けられたプロセスが CPU を使用した合計時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1592">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the associated process has spent utilizing the CPU.</span></span> <span data-ttu-id="5ba80-1593">この値は、<see cref="P:System.Diagnostics.Process.UserProcessorTime" /> と <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> の合計です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1593">This value is the sum of the <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> and the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5ba80-1594">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1594">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-1595">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1595">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1596">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1596">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-1597">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1597">You are attempting to access the <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1598">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1598">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1599">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1599">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1600">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1600">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="UserProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan UserProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UserProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.UserProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan UserProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.UserProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.UserProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent outside the operating system core.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessUserProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1601">このプロセスのユーザー プロセッサ時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1601">Gets the user processor time for this process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1602">関連付けられたプロセスが、プロセスのアプリケーション部分の内部 (オペレーティング システム コアの外部) でコードを実行した合計時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1602">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5ba80-1603">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1603">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-1604">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1604">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1605">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1605">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5ba80-1606">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> プロパティにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1606">You are attempting to access the <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1607">このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1607">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1608">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1608">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1609">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1609">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMemorySize">
      <MemberSignature Language="C#" Value="public int VirtualMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.VirtualMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMemorySize : int" Usage="System.Diagnostics.Process.VirtualMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use VirtualMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.VirtualMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessVirtualMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.VirtualMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1610">プロセスの仮想メモリのサイズ (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1610">Gets the size of the process's virtual memory, in bytes.</span></span></summary>
        <value><span data-ttu-id="5ba80-1611">関連付けられたプロセスが要求した仮想メモリの容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1611">The amount of virtual memory, in bytes, that the associated process has requested.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1612">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1612">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1613">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1613">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.VirtualMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMemorySize64">
      <MemberSignature Language="C#" Value="public long VirtualMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 VirtualMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.VirtualMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long VirtualMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMemorySize64 : int64" Usage="System.Diagnostics.Process.VirtualMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessVirtualMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1614">関連付けられたプロセスに割り当てられた仮想メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1614">Gets the amount of the virtual memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1615">関連付けられたプロセスに割り当てられた仮想メモリの量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1615">The amount of virtual memory, in bytes, allocated for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1616">このプロパティによって返される値は、プロセスによって使用される仮想メモリの現在のサイズ (バイト単位) を表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1616">The value returned by this property represents the current size of virtual memory used by the process, in bytes.</span></span> <span data-ttu-id="5ba80-1617">オペレーティングシステムは、物理メモリに読み込まれたページか、ディスク上の仮想メモリページングファイルに格納されているページに、各プロセスの仮想アドレス空間をマップします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1617">The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="5ba80-1618">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1618">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-1619">プロパティ値は、プロセスの**仮想 Bytes**パフォーマンスカウンターに相当します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1619">The property value is equivalent to the **Virtual Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1620">次のコード例では、メモ帳アプリケーションのインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1620">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="5ba80-1621">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1621">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1622">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1622">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1623">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1623">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1624">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1624">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForExit">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5ba80-1625">関連付けられたプロセスが終了するまで待機する時間を設定し、指定した時間が経過するかプロセスが終了するまで現在のスレッドの実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1625">Sets the period of time to wait for the associated process to exit, and blocks the current thread of execution until the time has elapsed or the process has exited.</span></span> <span data-ttu-id="5ba80-1626">現在のスレッドがブロックされないようにする場合は、<see cref="E:System.Diagnostics.Process.Exited" /> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1626">To avoid blocking the current thread, use the <see cref="E:System.Diagnostics.Process.Exited" /> event.</span></span>  
  
<span data-ttu-id="5ba80-1627">コード例については、<see cref="P:System.Diagnostics.Process.StandardError" /> および <see cref="P:System.Diagnostics.Process.ExitCode" /> プロパティのリファレンス ページを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1627">For code examples, see the <see cref="P:System.Diagnostics.Process.StandardError" /> and the <see cref="P:System.Diagnostics.Process.ExitCode" /> property reference pages.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForExit">
      <MemberSignature Language="C#" Value="public void WaitForExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForExit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExit" />
      <MemberSignature Language="VB.NET" Value="Public Sub WaitForExit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WaitForExit();" />
      <MemberSignature Language="F#" Value="member this.WaitForExit : unit -&gt; unit" Usage="process.WaitForExit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-1628">関連付けられたプロセスが終了するまで無期限に待機するように <see cref="T:System.Diagnostics.Process" /> コンポーネントに指示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1628">Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to exit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1629"><xref:System.Diagnostics.Process.WaitForExit>関連付けられたプロセスが終了するまで、現在のスレッドを待機させます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1629"><xref:System.Diagnostics.Process.WaitForExit> makes the current thread wait until the associated process terminates.</span></span>  <span data-ttu-id="5ba80-1630">これは、プロセスで他のすべてのメソッドが呼び出された後に呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1630">It should be called after all other methods are called on the process.</span></span> <span data-ttu-id="5ba80-1631">現在のスレッドがブロックされないようにする場合は、<xref:System.Diagnostics.Process.Exited> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1631">To avoid blocking the current thread, use the <xref:System.Diagnostics.Process.Exited> event.</span></span>  
  
 <span data-ttu-id="5ba80-1632">このメソッドは、 <xref:System.Diagnostics.Process>プロセスおよびイベントハンドラーが終了するのを無期限に待機するようにコンポーネントに指示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1632">This method instructs the <xref:System.Diagnostics.Process> component to wait an infinite amount of time for the process and event handlers to exit.</span></span> <span data-ttu-id="5ba80-1633">これにより、アプリケーションが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1633">This can cause an application to stop responding.</span></span> <span data-ttu-id="5ba80-1634">たとえば、ユーザーインターフェイスを持つ<xref:System.Diagnostics.Process.CloseMainWindow%2A>プロセスに対してを呼び出した場合、関連付けられているプロセスを終了するオペレーティングシステムへの要求は、そのメッセージループに入ることがないように記述されている場合、処理されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1634">For example, if you call <xref:System.Diagnostics.Process.CloseMainWindow%2A> for a process that has a user interface, the request to the operating system to terminate the associated process might not be handled if the process is written to never enter its message loop.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1635">以前の[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]バージョンでは、オーバーロード<xref:System.Diagnostics.Process.WaitForExit>は無限に<xref:System.Int32.MaxValue>ではなく、ミリ秒 (約24日間) 待機していました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1635">In the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] and earlier versions, the <xref:System.Diagnostics.Process.WaitForExit> overload waited for <xref:System.Int32.MaxValue> milliseconds (approximately 24 days), not indefinitely.</span></span> <span data-ttu-id="5ba80-1636">また、以前のバージョンでは、完全な<xref:System.Int32.MaxValue>時間に達したときにイベントハンドラーが終了するのを待機していませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1636">Also, previous versions did not wait for the event handlers to exit if the full <xref:System.Int32.MaxValue> time was reached.</span></span>  
  
 <span data-ttu-id="5ba80-1637">このオーバーロードは、リダイレクトされた標準出力の非同期イベントの処理など、すべての処理が完了したことを保証します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1637">This overload ensures that all processing has been completed, including the handling of asynchronous events for redirected standard output.</span></span> <span data-ttu-id="5ba80-1638">標準出力が非同期イベントハンドラーにリダイレクトされ<xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>ている場合は、オーバーロードの呼び出しの後にこのオーバーロードを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1638">You should use this overload after a call to the <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> overload when standard output has been redirected to asynchronous event handlers.</span></span>  
  
 <span data-ttu-id="5ba80-1639">関連付けられたプロセスが終了すると (つまり、通常または異常終了によって操作システムによってシャットダウンされた場合)、システムはプロセスに関する管理情報を格納し<xref:System.Diagnostics.Process.WaitForExit>、を呼び出したコンポーネントに戻ります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1639">When an associated process exits (that is, when it is shut down by the operation system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <xref:System.Diagnostics.Process.WaitForExit>.</span></span> <span data-ttu-id="5ba80-1640">次に、を使用して、終了した<xref:System.Diagnostics.Process.ExitTime%2A>プロセスにを使用<xref:System.Diagnostics.Process> <xref:System.Diagnostics.Process.Handle%2A>して、コンポーネントが情報にアクセスできるようになります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1640">The <xref:System.Diagnostics.Process> component can then access the information, which includes the <xref:System.Diagnostics.Process.ExitTime%2A>, by using the <xref:System.Diagnostics.Process.Handle%2A> to the exited process.</span></span>  
  
 <span data-ttu-id="5ba80-1641">関連付けられたプロセスが終了し<xref:System.Diagnostics.Process.Handle%2A>たため、コンポーネントのプロパティは既存のプロセスリソースを参照しなくなります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1641">Because the associated process has exited, the <xref:System.Diagnostics.Process.Handle%2A> property of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="5ba80-1642">代わりに、ハンドルは、プロセスリソースに関するオペレーティングシステムの情報にアクセスするためにのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1642">Instead, the handle can be used only to access the operating system's information about the process resource.</span></span> <span data-ttu-id="5ba80-1643">システムは、コンポーネントに<xref:System.Diagnostics.Process>よって解放されていないプロセスを終了するハンドルを認識します。そのため、コンポーネントが<xref:System.Diagnostics.Process>リソースを明確に解放するまで、および<xref:System.Diagnostics.Process.Handle%2A>情報は<xref:System.Diagnostics.Process.ExitTime%2A>メモリに保持されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1643">The system is aware of handles to exited processes that have not been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory until the <xref:System.Diagnostics.Process> component specifically frees the resources.</span></span> <span data-ttu-id="5ba80-1644">このため、 <xref:System.Diagnostics.Process.Start%2A> <xref:System.Diagnostics.Process>インスタンスを呼び出すたびに、関連付けら<xref:System.Diagnostics.Process.Close%2A>れたプロセスが終了したときにを呼び出すと、そのプロセスに関する管理情報は不要になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1644">For this reason, any time you call <xref:System.Diagnostics.Process.Start%2A> for a <xref:System.Diagnostics.Process> instance, call <xref:System.Diagnostics.Process.Close%2A> when the associated process has terminated and you no longer need any administrative information about it.</span></span> <span data-ttu-id="5ba80-1645"><xref:System.Diagnostics.Process.Close%2A>終了したプロセスに割り当てられたメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1645"><xref:System.Diagnostics.Process.Close%2A> frees the memory allocated to the exited process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1646"><xref:System.Diagnostics.Process.StandardError%2A>プロパティリファレンスページの「解説」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1646">See the Remarks section of the <xref:System.Diagnostics.Process.StandardError%2A> property reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1647">待機の設定にアクセスできませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1647">The wait setting could not be accessed.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="5ba80-1648">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が設定されておらず、<see cref="P:System.Diagnostics.Process.Id" /> プロパティを判別する元となる <see cref="P:System.Diagnostics.Process.Handle" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1648">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.</span></span>  
  
<span data-ttu-id="5ba80-1649">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1649">-or-</span></span> 
<span data-ttu-id="5ba80-1650">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1650">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span>  
  
<span data-ttu-id="5ba80-1651">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1651">-or-</span></span> 
<span data-ttu-id="5ba80-1652">リモート コンピューターで実行されているプロセスの <see cref="M:System.Diagnostics.Process.WaitForExit" /> を呼び出そうとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1652">You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1653">このメソッドはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1653">This method is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1654">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1654">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1655">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1655">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
      </Docs>
    </Member>
    <Member MemberName="WaitForExit">
      <MemberSignature Language="C#" Value="public bool WaitForExit (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForExit(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForExit (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForExit(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.WaitForExit : int -&gt; bool" Usage="process.WaitForExit milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="5ba80-1656">関連付けられたプロセスが終了するまで待機する時間。単位はミリ秒です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1656">The amount of time, in milliseconds, to wait for the associated process to exit.</span></span> <span data-ttu-id="5ba80-1657">最大値は、32 ビット整数で表現できる最大値で、オペレーティング システムに対して無限大で表現される値です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1657">The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</span></span></param>
        <summary><span data-ttu-id="5ba80-1658">関連付けられたプロセスが終了するまで、最大で指定したミリ秒間待機するように <see cref="T:System.Diagnostics.Process" /> コンポーネントに指示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1658">Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to exit.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1659">関連付けられたプロセスが終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1659"><see langword="true" /> if the associated process has exited; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1660"><xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>関連付けられたプロセスが終了するまで、現在のスレッドを待機させます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1660"><xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> makes the current thread wait until the associated process terminates.</span></span> <span data-ttu-id="5ba80-1661">これは、プロセスで他のすべてのメソッドが呼び出された後に呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1661">It should be called after all other methods are called on the process.</span></span> <span data-ttu-id="5ba80-1662">現在のスレッドがブロックされないようにする場合は、<xref:System.Diagnostics.Process.Exited> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1662">To avoid blocking the current thread, use the <xref:System.Diagnostics.Process.Exited> event.</span></span>  
  
 <span data-ttu-id="5ba80-1663">このメソッドは、 <xref:System.Diagnostics.Process>プロセスが終了するまでの時間を待機するようにコンポーネントに指示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1663">This method instructs the <xref:System.Diagnostics.Process> component to wait a finite amount of time for the process to exit.</span></span> <span data-ttu-id="5ba80-1664">終了要求が拒否されたために、関連付けられたプロセスが間隔の終了に`false`よって終了しない場合は、呼び出し元のプロシージャにが返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1664">If the associated process does not exit by the end of the interval because the request to terminate is denied, `false` is returned to the calling procedure.</span></span> <span data-ttu-id="5ba80-1665">に<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType>を指定すると、 <xref:System.Diagnostics.Process.WaitForExit>オーバーロードと同じ動作が実行されます。 `milliseconds`</span><span class="sxs-lookup"><span data-stu-id="5ba80-1665">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for `milliseconds`, and <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType> will behave the same as the <xref:System.Diagnostics.Process.WaitForExit> overload.</span></span> <span data-ttu-id="5ba80-1666">メソッドに 0 (ゼロ) を渡すと、プロセスが既`true`に終了している場合にのみが返されます。 `false`それ以外の場合は、が直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1666">If you pass 0 (zero) to the method, it returns `true` only if the process has already exited; otherwise, it immediately returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ba80-1667">以前の[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]バージョンでは、が`milliseconds` -1 の場合、 <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>オーバーロードは無期限<xref:System.Int32.MaxValue>ではなく、ミリ秒 (約24日間) 待機します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1667">In the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] and earlier versions, if `milliseconds` was -1, the <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> overload waited for <xref:System.Int32.MaxValue> milliseconds (approximately 24 days), not indefinitely.</span></span>  
  
 <span data-ttu-id="5ba80-1668">標準出力が非同期イベントハンドラーにリダイレクトされている場合、このメソッドから制御が戻ったときに出力処理が完了していない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1668">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns.</span></span> <span data-ttu-id="5ba80-1669">非同期イベント処理が完了したことを確認するに<xref:System.Diagnostics.Process.WaitForExit>は、このオーバーロードからを`true`受け取った後、パラメーターを受け取らないオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1669">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter after receiving a `true` from this overload.</span></span> <span data-ttu-id="5ba80-1670">Windows フォームアプリケーションで<xref:System.Diagnostics.Process.Exited>イベントが正しく処理されるようにするには、 <xref:System.Diagnostics.Process.SynchronizingObject%2A>プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1670">To help ensure that the <xref:System.Diagnostics.Process.Exited> event is handled correctly in Windows Forms applications, set the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property.</span></span>  
  
 <span data-ttu-id="5ba80-1671">関連付けられたプロセスが終了すると (が正常終了または異常終了によってオペレーティングシステムによってシャットダウンされます)、システムはプロセスに関する管理<xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>情報を格納し、を呼び出したコンポーネントに戻ります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1671">When an associated process exits (is shut down by the operating system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>.</span></span> <span data-ttu-id="5ba80-1672">次に、を使用して、終了した<xref:System.Diagnostics.Process.ExitTime%2A>プロセスにを使用<xref:System.Diagnostics.Process> <xref:System.Diagnostics.Process.Handle%2A>して、コンポーネントが情報にアクセスできるようになります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1672">The <xref:System.Diagnostics.Process> component can then access the information, which includes the <xref:System.Diagnostics.Process.ExitTime%2A>, by using the <xref:System.Diagnostics.Process.Handle%2A> to the exited process.</span></span>  
  
 <span data-ttu-id="5ba80-1673">関連付けられたプロセスが終了し<xref:System.Diagnostics.Process.Handle%2A>たため、コンポーネントのプロパティは既存のプロセスリソースを参照しなくなります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1673">Because the associated process has exited, the <xref:System.Diagnostics.Process.Handle%2A> property of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="5ba80-1674">代わりに、ハンドルは、プロセスリソースに関するオペレーティングシステムの情報にアクセスするためにのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1674">Instead, the handle can be used only to access the operating system's information about the process resource.</span></span> <span data-ttu-id="5ba80-1675">システムは、コンポーネントに<xref:System.Diagnostics.Process>よって解放されていないプロセスを終了するハンドルを認識します。そのため、コンポーネントが<xref:System.Diagnostics.Process>リソースを明確に解放するまで、および<xref:System.Diagnostics.Process.Handle%2A>情報は<xref:System.Diagnostics.Process.ExitTime%2A>メモリに保持されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1675">The system is aware of handles to exited processes that have not been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory until the <xref:System.Diagnostics.Process> component specifically frees the resources.</span></span> <span data-ttu-id="5ba80-1676">このため、 <xref:System.Diagnostics.Process.Start%2A> <xref:System.Diagnostics.Process>インスタンスを呼び出すたびに、関連付けら<xref:System.Diagnostics.Process.Close%2A>れたプロセスが終了したときにを呼び出すと、そのプロセスに関する管理情報は不要になります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1676">For this reason, any time you call <xref:System.Diagnostics.Process.Start%2A> for a <xref:System.Diagnostics.Process> instance, call <xref:System.Diagnostics.Process.Close%2A> when the associated process has terminated and you no longer need any administrative information about it.</span></span> <span data-ttu-id="5ba80-1677"><xref:System.Diagnostics.Process.Close%2A>終了したプロセスに割り当てられたメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1677"><xref:System.Diagnostics.Process.Close%2A> frees the memory allocated to the exited process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1678"><xref:System.Diagnostics.Process.ExitCode%2A>プロパティのコード例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1678">See the code example for the <xref:System.Diagnostics.Process.ExitCode%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="5ba80-1679">待機の設定にアクセスできませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1679">The wait setting could not be accessed.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="5ba80-1680">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が設定されておらず、<see cref="P:System.Diagnostics.Process.Id" /> プロパティを判別する元となる <see cref="P:System.Diagnostics.Process.Handle" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1680">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.</span></span>  
  
<span data-ttu-id="5ba80-1681">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1681">-or-</span></span> 
<span data-ttu-id="5ba80-1682">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1682">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span>  
  
<span data-ttu-id="5ba80-1683">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1683">-or-</span></span> 
<span data-ttu-id="5ba80-1684">リモート コンピューターで実行されているプロセスの <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /> を呼び出そうとしています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1684">You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="5ba80-1685">このメソッドはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1685">This method is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5ba80-1686"><paramref name="milliseconds" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1686"><paramref name="milliseconds" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1687">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1687">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1688">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1688">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
        <altmember cref="P:System.Diagnostics.Process.SynchronizingObject" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForInputIdle">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5ba80-1689">関連付けられたプロセスがアイドル状態になるまで、<see cref="T:System.Diagnostics.Process" /> コンポーネントを待機させます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1689">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait for the associated process to enter an idle state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForInputIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForInputIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle();" />
      <MemberSignature Language="F#" Value="member this.WaitForInputIdle : unit -&gt; bool" Usage="process.WaitForInputIdle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ba80-1690">関連付けられたプロセスがアイドル状態になるまで、<see cref="T:System.Diagnostics.Process" /> コンポーネントを無期限に待機させます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1690">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to enter an idle state.</span></span> <span data-ttu-id="5ba80-1691">このオーバーロードは、ユーザー インターフェイスとメッセージ ループを持つプロセスにだけ適用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1691">This overload applies only to processes with a user interface and, therefore, a message loop.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1692">関連付けられたプロセスがアイドル状態になった場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1692"><see langword="true" /> if the associated process has reached an idle state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1693">を<xref:System.Diagnostics.Process.WaitForInputIdle>使用すると、メッセージループがアイドル状態に戻るまで、アプリケーションの処理が強制的に待機されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1693">Use <xref:System.Diagnostics.Process.WaitForInputIdle> to force the processing of your application to wait until the message loop has returned to the idle state.</span></span> <span data-ttu-id="5ba80-1694">ユーザーインターフェイスを持つプロセスが実行されている場合、オペレーティングシステムによって Windows メッセージがプロセスに送信されるたびに、そのメッセージループが実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1694">When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="5ba80-1695">次に、プロセスはメッセージループに戻ります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1695">The process then returns to the message loop.</span></span> <span data-ttu-id="5ba80-1696">プロセスは、メッセージループ内のメッセージを待機しているときにアイドル状態になっていると言います。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1696">A process is said to be in an idle state when it is waiting for messages inside of a message loop.</span></span> <span data-ttu-id="5ba80-1697">この状態は、アプリケーションがそのウィンドウと通信する前に、アプリケーションがメインウィンドウの作成を完了するまで待機する必要がある場合などに便利です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1697">This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</span></span>  
  
 <span data-ttu-id="5ba80-1698">プロセスにメッセージループがない場合、はを<xref:System.Diagnostics.Process.WaitForInputIdle> <xref:System.InvalidOperationException>スローします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1698">If a process does not have a message loop, <xref:System.Diagnostics.Process.WaitForInputIdle> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="5ba80-1699">オーバーロード<xref:System.Diagnostics.Process.WaitForInputIdle>は、メッセージ<xref:System.Diagnostics.Process>ループ内のプロセスがアイドル状態になるのを無期限に待機するようにコンポーネントに指示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1699">The <xref:System.Diagnostics.Process.WaitForInputIdle> overload instructs the <xref:System.Diagnostics.Process> component to wait indefinitely for the process to become idle in the message loop.</span></span> <span data-ttu-id="5ba80-1700">この命令により、アプリケーションが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1700">This instruction can cause an application to stop responding.</span></span> <span data-ttu-id="5ba80-1701">たとえば、プロセスが記述されている場合は、コードフラグメント`while(true)`のように、常にメッセージループを直ちに終了します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1701">For example, if the process is written to always exit its message loop immediately, as in the code fragment `while(true)`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1702">プロセスにグラフィカル インターフェイスがありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1702">The process does not have a graphical interface.</span></span>  
  
<span data-ttu-id="5ba80-1703">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1703">-or-</span></span> 
<span data-ttu-id="5ba80-1704">不明なエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1704">An unknown error occurred.</span></span> <span data-ttu-id="5ba80-1705">プロセスがアイドル状態になることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1705">The process failed to enter an idle state.</span></span>  
  
<span data-ttu-id="5ba80-1706">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1706">-or-</span></span> 
<span data-ttu-id="5ba80-1707">プロセスは既に終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1707">The process has already exited.</span></span>  
  
<span data-ttu-id="5ba80-1708">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1708">-or-</span></span> 
<span data-ttu-id="5ba80-1709">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1709">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1710">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1710">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1711">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1711">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.WaitForInputIdle : int -&gt; bool" Usage="process.WaitForInputIdle milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="5ba80-1712">関連付けられたプロセスがアイドル状態になるまでの待機時間をミリ秒単位で指定する、1 ～ <see cref="F:System.Int32.MaxValue" /> の値。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1712">A value of 1 to <see cref="F:System.Int32.MaxValue" /> that specifies the amount of time, in milliseconds, to wait for the associated process to become idle.</span></span> <span data-ttu-id="5ba80-1713">値 0 の場合はすぐに制御が戻され、値 -1 の場合は無期限に待機することを示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1713">A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="5ba80-1714">関連付けられたプロセスがアイドル状態になるまで、最大で指定したミリ秒間、<see cref="T:System.Diagnostics.Process" /> コンポーネントを待機させます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1714">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to enter an idle state.</span></span> <span data-ttu-id="5ba80-1715">このオーバーロードは、ユーザー インターフェイスとメッセージ ループを持つプロセスにだけ適用されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1715">This overload applies only to processes with a user interface and, therefore, a message loop.</span></span></summary>
        <returns><span data-ttu-id="5ba80-1716">関連付けられたプロセスがアイドル状態になった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1716"><see langword="true" /> if the associated process has reached an idle state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1717">を<xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29>使用すると、メッセージループがアイドル状態に戻るまで、アプリケーションの処理が強制的に待機されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1717">Use <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> to force the processing of your application to wait until the message loop has returned to the idle state.</span></span> <span data-ttu-id="5ba80-1718">ユーザーインターフェイスを持つプロセスが実行されている場合、オペレーティングシステムによって Windows メッセージがプロセスに送信されるたびに、そのメッセージループが実行されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1718">When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="5ba80-1719">次に、プロセスはメッセージループに戻ります。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1719">The process then returns to the message loop.</span></span> <span data-ttu-id="5ba80-1720">プロセスは、メッセージループ内のメッセージを待機しているときにアイドル状態になっていると言います。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1720">A process is said to be in an idle state when it is waiting for messages inside of a message loop.</span></span> <span data-ttu-id="5ba80-1721">この状態は、アプリケーションがそのウィンドウと通信する前に、アプリケーションがメインウィンドウの作成を完了するまで待機する必要がある場合などに便利です。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1721">This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</span></span>  
  
 <span data-ttu-id="5ba80-1722">プロセスにメッセージループがない場合、はを<xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> <xref:System.InvalidOperationException>スローします。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1722">If a process does not have a message loop, <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="5ba80-1723">オーバーロード<xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29>は、メッセージ<xref:System.Diagnostics.Process>ループでプロセスがアイドル状態になるまでの時間を待機するようにコンポーネントに指示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1723">The <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> overload instructs the <xref:System.Diagnostics.Process> component to wait a finite amount of time for the process to become idle in the message loop.</span></span> <span data-ttu-id="5ba80-1724">ループがまだメッセージを処理しているために、関連付けられているプロセスが間隔の`false`最後までアイドル状態にならない場合は、呼び出し元のプロシージャにが返されます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1724">If the associated process has not become idle by the end of the interval because the loop is still processing messages, `false` is returned to the calling procedure.</span></span>  
  
 <span data-ttu-id="5ba80-1725">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1725">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5ba80-1726">プロセスにグラフィカル インターフェイスがありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1726">The process does not have a graphical interface.</span></span>  
  
<span data-ttu-id="5ba80-1727">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1727">-or-</span></span> 
<span data-ttu-id="5ba80-1728">不明なエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1728">An unknown error occurred.</span></span> <span data-ttu-id="5ba80-1729">プロセスがアイドル状態になることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1729">The process failed to enter an idle state.</span></span>  
  
<span data-ttu-id="5ba80-1730">または</span><span class="sxs-lookup"><span data-stu-id="5ba80-1730">-or-</span></span> 
<span data-ttu-id="5ba80-1731">プロセスは既に終了しています。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1731">The process has already exited.</span></span>  
  
<span data-ttu-id="5ba80-1732">- または -</span><span class="sxs-lookup"><span data-stu-id="5ba80-1732">-or-</span></span> 
<span data-ttu-id="5ba80-1733">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1733">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1734">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1734">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1735">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1735">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
      </Docs>
    </Member>
    <Member MemberName="WorkingSet">
      <MemberSignature Language="C#" Value="public int WorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.WorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WorkingSet { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkingSet : int" Usage="System.Diagnostics.Process.WorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use WorkingSet64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.WorkingSet64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessWorkingSet")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.WorkingSet64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1736">関連付けられたプロセスの物理メモリ使用量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1736">Gets the associated process's physical memory usage, in bytes.</span></span></summary>
        <value><span data-ttu-id="5ba80-1737">関連付けられたプロセスが使用している物理メモリの合計容量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1737">The total amount of physical memory the associated process is using, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1738">このプロパティによって返される値は、プロセスによって使用されるワーキングセットメモリの現在のサイズ (バイト単位) を表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1738">The value returned by this property represents the current size of working set memory used by the process, in bytes.</span></span> <span data-ttu-id="5ba80-1739">プロセスのワーキングセットは、物理 RAM メモリ内のプロセスに現在表示されているメモリページのセットです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1739">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="5ba80-1740">これらのページは常駐し、アプリケーションがページフォールトをトリガーすることなく使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1740">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="5ba80-1741">ワーキングセットには、共有データとプライベートデータの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1741">The working set includes both shared and private data.</span></span> <span data-ttu-id="5ba80-1742">共有データには、プロセスモジュールやシステムライブラリを含む、プロセスによって実行されるすべての命令を含むページが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1742">The shared data includes the pages that contain all the instructions that the process executes, including the process modules and the system libraries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1743">次の例では、メモ帳のインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1743">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="5ba80-1744">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1744">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1745">この例では、プロセスが終了したことを検出し、プロセスの終了コードを表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1745">The example detects when the process exits, and displays the process' exit code.</span></span>  
  
 [!code-cpp[process_sample#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_sample/CPP/process_sample.cpp#1)]
 [!code-csharp[process_sample#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_sample/CS/process_sample.cs#1)]
 [!code-vb[process_sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_sample/VB/process_sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1746">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1746">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1747">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1747">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="WorkingSet64">
      <MemberSignature Language="C#" Value="public long WorkingSet64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 WorkingSet64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.WorkingSet64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long WorkingSet64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkingSet64 : int64" Usage="System.Diagnostics.Process.WorkingSet64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessWorkingSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5ba80-1748">関連付けられたプロセスに割り当てられた物理メモリの量 (バイト単位) を取得します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1748">Gets the amount of physical memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="5ba80-1749">関連付けられたプロセスに割り当てられた物理メモリの量 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1749">The amount of physical memory, in bytes, allocated for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ba80-1750">このプロパティによって返される値は、プロセスによって使用されるワーキングセットメモリの現在のサイズ (バイト単位) を表します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1750">The value returned by this property represents the current size of working set memory used by the process, in bytes.</span></span> <span data-ttu-id="5ba80-1751">プロセスのワーキングセットは、物理 RAM メモリ内のプロセスに現在表示されているメモリページのセットです。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1751">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="5ba80-1752">これらのページは常駐し、アプリケーションがページフォールトをトリガーすることなく使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1752">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="5ba80-1753">ワーキングセットには、共有データとプライベートデータの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1753">The working set includes both shared and private data.</span></span> <span data-ttu-id="5ba80-1754">共有データには、プロセスモジュールやシステムライブラリの指示を含む、プロセスが実行するすべての命令を含むページが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1754">The shared data includes the pages that contain all the instructions that the process executes, including instructions in the process modules and the system libraries.</span></span>  
  
 <span data-ttu-id="5ba80-1755">このプロパティは、32ビットプロセッサまたは64ビットプロセッサを搭載したコンピューターのメモリ使用量を監視するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1755">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="5ba80-1756">プロパティ値は、プロセスの**ワーキングセット**パフォーマンスカウンターに相当します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1756">The property value is equivalent to the **Working Set** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ba80-1757">次のコード例では、メモ帳アプリケーションのインスタンスを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1757">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="5ba80-1758">次に、この例では、関連付けられているプロセスのさまざまなプロパティを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1758">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="5ba80-1759">この例では、プロセスが終了したことを検出し、終了コードとピークメモリの統計情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1759">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5ba80-1760">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1760">for full trust for the immediate caller.</span></span> <span data-ttu-id="5ba80-1761">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ba80-1761">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
  </Members>
</Type>
