<Type Name="ProcessThread" FullName="System.Diagnostics.ProcessThread">
  <TypeSignature Language="C#" Value="public class ProcessThread : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProcessThread extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ProcessThread" />
  <TypeSignature Language="VB.NET" Value="Public Class ProcessThread&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessThread : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6a04d-101">オペレーティング システムのプロセス スレッドを表します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-101">Represents an operating system process thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-102">使用して<xref:System.Diagnostics.ProcessThread>システムで現在実行されているスレッドに関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-102">Use <xref:System.Diagnostics.ProcessThread> to obtain information about a thread that is currently running on the system.</span></span> <span data-ttu-id="6a04d-103">これにより、たとえば、スレッドのパフォーマンス特性を監視します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-103">Doing so allows you, for example, to monitor the thread's performance characteristics.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6a04d-104">この型は、<xref:System.IDisposable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-104">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="6a04d-105">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="6a04d-106">型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="6a04d-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="6a04d-107">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="6a04d-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="6a04d-108">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="6a04d-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="6a04d-109">スレッドは、プログラム実行のパスです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-109">A thread is a path of execution through a program.</span></span> <span data-ttu-id="6a04d-110">Win32 のスケジュール実行の最小単位です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-110">It is the smallest unit of execution that Win32 schedules.</span></span> <span data-ttu-id="6a04d-111">スタック、CPU レジスタとシステムのスケジューラの実行のリスト内のエントリの状態で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-111">It consists of a stack, the state of the CPU registers, and an entry in the execution list of the system scheduler.</span></span>  
  
 <span data-ttu-id="6a04d-112">プロセスは、1 つまたは複数のスレッドと、コード、データ、およびその他のリソースのメモリ内のプログラムで構成されます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-112">A process consists of one or more threads and the code, data, and other resources of a program in memory.</span></span> <span data-ttu-id="6a04d-113">一般的なプログラム リソースは開いているファイル、セマフォ、および動的に割り当てられたメモリです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-113">Typical program resources are open files, semaphores, and dynamically allocated memory.</span></span> <span data-ttu-id="6a04d-114">プロセスの各リソースは、すべてのプロセスのスレッドによって共有されます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-114">Each resource of a process is shared by all that process's threads.</span></span>  
  
 <span data-ttu-id="6a04d-115">プログラムは、システム スケジューラ プログラムのスレッドの 1 つへの実行の制御を提供するときに実行されます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-115">A program executes when the system scheduler gives execution control to one of the program's threads.</span></span> <span data-ttu-id="6a04d-116">どのスレッドを実行する必要があります、スケジューラが決定とします。</span><span class="sxs-lookup"><span data-stu-id="6a04d-116">The scheduler determines which threads should run and when.</span></span> <span data-ttu-id="6a04d-117">優先順位の低いスレッドは、優先順位の高いスレッドは、各自のタスクを完了するまで待機が強制される場合があります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-117">A lower-priority thread might be forced to wait while higher-priority threads complete their tasks.</span></span> <span data-ttu-id="6a04d-118">マルチプロセッサのコンピューターで、スケジューラに移動できます個別のスレッド異なるプロセッサを CPU の負荷を分散します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-118">On multiprocessor computers, the scheduler can move individual threads to different processors, thus balancing the CPU load.</span></span>  
  
 <span data-ttu-id="6a04d-119">各プロセスは、プライマリ スレッドと呼ばれる 1 つのスレッドで起動します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-119">Each process starts with a single thread, which is known as the primary thread.</span></span> <span data-ttu-id="6a04d-120">どのスレッドでも新しいスレッドを作成できます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-120">Any thread can create additional threads.</span></span> <span data-ttu-id="6a04d-121">プロセス内のすべてのスレッドは、そのプロセスのアドレス空間を共有します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-121">All the threads within a process share the address space of that process.</span></span>  
  
 <span data-ttu-id="6a04d-122">プライマリのスレッドが必ずしもインデックス位置にある、最初、コレクション内ではありません。</span><span class="sxs-lookup"><span data-stu-id="6a04d-122">The primary thread is not necessarily located at the first index in the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6a04d-123">以降、.NET Framework version 2.0 では、他のコンピューターのパフォーマンス カウンター データを参照する機能は、.NET Framework のメソッドとプロパティの多くに削除されました。</span><span class="sxs-lookup"><span data-stu-id="6a04d-123">Starting with the .NET Framework version 2.0, the ability to reference performance counter data on other computers has been eliminated for many of the .NET Framework methods and properties.</span></span> <span data-ttu-id="6a04d-124">非管理者を使用して有効にしてパフォーマンスを向上させるために、この変更が行われた、<xref:System.Diagnostics.ProcessThread>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-124">This change was made to improve performance and to enable non-administrators to use the <xref:System.Diagnostics.ProcessThread> class.</span></span> <span data-ttu-id="6a04d-125">.NET Framework の以前のバージョンでの例外を取得できなかった一部のアプリケーションが今すぐに入手可能性があります結果として、<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-125">As a result, some applications that did not get exceptions in earlier versions of the .NET Framework may now get a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="6a04d-126">メソッドとプロパティの影響を受けるが多すぎてここでは、ボックスの一覧が、例外情報が影響を受けるメンバーのトピックに追加されました。</span><span class="sxs-lookup"><span data-stu-id="6a04d-126">The methods and properties affected are too numerous to list here, but the exception information has been added to the affected member topics.</span></span>  
  
 <span data-ttu-id="6a04d-127">プロセスのスレッドは、個別に実行しにしない限り、それらをそれぞれ相互に見るには互いに対応していません。</span><span class="sxs-lookup"><span data-stu-id="6a04d-127">The threads of a process execute individually and are unaware of each other unless you make them visible to each other.</span></span> <span data-ttu-id="6a04d-128">ただし、一般的なリソースを共有するスレッドは、セマフォまたはプロセス間通信の別のメソッドを使用して、作業を調整する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-128">Threads that share common resources, however, must coordinate their work by using semaphores or another method of interprocess communication.</span></span>  
  
 <span data-ttu-id="6a04d-129">すべてのコレクションを取得する、 <xref:System.Diagnostics.ProcessThread> 、現在のプロセスに関連付けられているオブジェクトを取得、<xref:System.Diagnostics.Process.Threads%2A>のプロパティ、<xref:System.Diagnostics.Process>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="6a04d-129">To get a collection of all the <xref:System.Diagnostics.ProcessThread> objects associated with the current process, get the <xref:System.Diagnostics.Process.Threads%2A> property of the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.Process" />
    <altmember cref="P:System.Diagnostics.Process.Threads" />
  </Docs>
  <Members>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public int BasePriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BasePriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BasePriority { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The base priority of this thread.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-130">スレッドの基本優先順位を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-130">Gets the base priority of the thread.</span></span></summary>
        <value><span data-ttu-id="6a04d-131">プロセスの優先順位クラスと関連付けられたスレッドの優先順位との組み合わせからオペレーティング システムが算出した、スレッドの基本優先順位。</span><span class="sxs-lookup"><span data-stu-id="6a04d-131">The base priority of the thread, which the operating system computes by combining the process priority class with the priority level of the associated thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-132"><xref:System.Diagnostics.ProcessThread.BasePriority%2A>プロセスのスレッドの優先順位が開始します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-132">The <xref:System.Diagnostics.ProcessThread.BasePriority%2A> is the starting priority for the process thread.</span></span> <span data-ttu-id="6a04d-133">システム モニターの基本優先度カウンターを使用する基本優先順位に関する情報を表示することができます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-133">You can view information about the base priority through the System Monitor's Priority Base counter.</span></span>  
  
 <span data-ttu-id="6a04d-134">オペレーティング システムでは、プロセスの優先順位クラスと、スレッドの優先度レベルの範囲を組み合わせることによってスレッドの基本優先度を計算します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-134">The operating system computes a thread's base priority by combining the thread's priority level range with the process's priority class.</span></span> <span data-ttu-id="6a04d-135">プロセスを設定することができます<xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=nameWithType>プロパティの値のいずれかを<xref:System.Diagnostics.ProcessPriorityClass>列挙型、ある<xref:System.Diagnostics.ProcessPriorityClass.Idle>、 <xref:System.Diagnostics.ProcessPriorityClass.Normal>、 <xref:System.Diagnostics.ProcessPriorityClass.High>、 <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>、 <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>、または<xref:System.Diagnostics.ProcessPriorityClass.RealTime>です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-135">You can set the process's <xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=nameWithType> property to one of the values in the <xref:System.Diagnostics.ProcessPriorityClass> enumeration, which are <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span></span> <span data-ttu-id="6a04d-136">スレッドを設定することができます<xref:System.Diagnostics.ProcessThread.PriorityLevel%2A>プロパティの値の範囲をスレッドの基本優先順位をします。</span><span class="sxs-lookup"><span data-stu-id="6a04d-136">You can set the thread's <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> property to a range of values that bounds the thread's base priority.</span></span> <span data-ttu-id="6a04d-137">Win32 では、クラスごとの 7 つの基本優先度レベルを持つ 4 つの優先度クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-137">Win32 uses four priority classes with seven base priority levels per class.</span></span>  
  
 <span data-ttu-id="6a04d-138">スレッドの現在の優先順位は、基本の優先順位と異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-138">The thread's current priority might deviate from the base priority.</span></span> <span data-ttu-id="6a04d-139">たとえば、オペレーティング システムを変更ことができます、<xref:System.Diagnostics.ProcessThread.CurrentPriority%2A>時刻に基づいたプロパティが経過したか、プロセス時に、他の要因盛り込む必要がある事前他のユーザー アクセスのプロセッサにします。</span><span class="sxs-lookup"><span data-stu-id="6a04d-139">For example, the operating system can change the <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> property based on the time elapsed or other boosts when a process must be put ahead of others for access to the processor.</span></span> <span data-ttu-id="6a04d-140">さらに、設定、<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>プロパティをシステムで一時的に、優先順位を上げるスレッドの待機状態から、プロセスが実行されるたびに発生します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-140">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state.</span></span> <span data-ttu-id="6a04d-141">プロセスが待機状態に戻るときに、優先順位がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-141">The priority is reset when the process returns to the wait state.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      </Docs>
    </Member>
    <Member MemberName="CurrentPriority">
      <MemberSignature Language="C#" Value="public int CurrentPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentPriority { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The current priority of this thread.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-142">スレッドの現在の優先順位を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-142">Gets the current priority of the thread.</span></span></summary>
        <value><span data-ttu-id="6a04d-143">オペレーティング システムがスレッドをスケジュールする方法によっては、スレッドの現在の優先順位が基本優先順位と異なることがあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-143">The current priority of the thread, which may deviate from the base priority based on how the operating system is scheduling the thread.</span></span> <span data-ttu-id="6a04d-144">アクティブなスレッドの優先順位を一時的に上げることもできます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-144">The priority may be temporarily boosted for an active thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-145">スレッドの現在の優先順位は、基本の優先順位と異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-145">The thread's current priority might deviate from the base priority.</span></span> <span data-ttu-id="6a04d-146">たとえば、オペレーティング システムを変更ことができます、<xref:System.Diagnostics.ProcessThread.CurrentPriority%2A>時刻に基づいたプロパティ経過すると、または「プロセス時に、その他要因必要がありますする put 事前他のユーザー アクセスのプロセッサ。</span><span class="sxs-lookup"><span data-stu-id="6a04d-146">For example, the operating system can change the <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> property based on the time elapsed, or other boosts, when a process must be put ahead of others for access to the processor.</span></span> <span data-ttu-id="6a04d-147">さらに、設定、<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>プロパティをシステムで一時的に、優先順位を上げるスレッドの待機状態から、プロセスが実行されるたびに発生します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-147">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state.</span></span> <span data-ttu-id="6a04d-148">プロセスが待機状態に戻るときに、優先順位がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-148">The priority is reset when the process returns to the wait state.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessThread.BasePriority" />
        <altmember cref="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The ID of this thread.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-149">スレッドの一意な識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-149">Gets the unique identifier of the thread.</span></span></summary>
        <value><span data-ttu-id="6a04d-150">特定のスレッドに関連付けられた一意な識別子。</span><span class="sxs-lookup"><span data-stu-id="6a04d-150">The unique identifier associated with a specific thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-151">オペレーティング システムは、その有効期間中にのみ、スレッドを特定のスレッドの id 番号を再利用します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-151">The operating system reuses thread identification numbers, which identify threads only during their lifetimes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdealProcessor">
      <MemberSignature Language="C#" Value="public int IdealProcessor { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IdealProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Property IdealProcessor As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IdealProcessor {  void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-152">このスレッドを実行する優先プロセッサを設定します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-152">Sets the preferred processor for this thread to run on.</span></span></summary>
        <value><span data-ttu-id="6a04d-153">スレッドの優先プロセッサは、システムがスレッドをスケジュールするときに、スレッドを実行するプロセッサを決定するために使用します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-153">The preferred processor for the thread, used when the system schedules threads, to determine which processor to run the thread on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-154"><xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>値は 0 から始まる。</span><span class="sxs-lookup"><span data-stu-id="6a04d-154">The <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> value is zero-based.</span></span>  <span data-ttu-id="6a04d-155">つまり、最初のプロセッサのスレッドの関係を設定するには、0 に、プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-155">In other words, to set the thread affinity for the first processor, set the property to zero.</span></span>  
  
 <span data-ttu-id="6a04d-156">システムでは、可能な限り、推奨されるプロセッサ上のスレッドをスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="6a04d-156">The system schedules threads on their preferred processors whenever possible.</span></span>  
  
 <span data-ttu-id="6a04d-157">プロセス スレッドでは、プロセッサごとの移行とプロセッサからプロセッサを移行できます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-157">A process thread can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="6a04d-158">スレッドのプロセッサを指定すると、プロセッサのキャッシュが再読み込みされる回数を減らすことによって重い負荷のパフォーマンスが向上できます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-158">Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a04d-159">次の例は、設定する方法を示します、<xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>すると、最初のプロセッサには、メモ帳のインスタンスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-159">The following example demonstrates how to set the <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> property for an instance of Notepad to the first processor.</span></span>  
  
 [!code-csharp[ProcessThreadIdealProcessor#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/CS/program.cs#1)]
 [!code-vb[ProcessThreadIdealProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessThreadIdealProcessor/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-160">指定したプロセッサでスレッドを起動するよう設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-160">The system could not set the thread to start on the specified processor.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-161">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-161">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-162">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-162">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PriorityBoostEnabled">
      <MemberSignature Language="C#" Value="public bool PriorityBoostEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PriorityBoostEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityBoostEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PriorityBoostEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Thread gets a priority boot when interactively used by a user.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-163">スレッドのプロセスのメイン ウィンドウがフォーカスを受け取るたびに、関連付けられたスレッドの優先順位をオペレーティング システムが一時的に上げるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-163">Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main window of the thread's process receives the focus.</span></span></summary>
        <value>
          <span data-ttu-id="6a04d-164">ユーザーがプロセスのインターフェイスと対話しているときにスレッドの優先順位を上げる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6a04d-164"><see langword="true" /> to boost the thread's priority when the user interacts with the process's interface; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6a04d-165">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-165">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-166">ときに<xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A>は`true`システムは、その関連付けられたプロセスが待機状態から実行されるたびに一時的に、スレッドの優先度をブーストします。</span><span class="sxs-lookup"><span data-stu-id="6a04d-166">When <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> is `true`, the system temporarily boosts the thread's priority whenever its associated process is taken out of the wait state.</span></span> <span data-ttu-id="6a04d-167">この操作では、他のプロセスが現在のスレッドの処理を中断できなくなります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-167">This action prevents other processes from interrupting the processing of the current thread.</span></span> <span data-ttu-id="6a04d-168"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A>設定は、既存のすべてのスレッドだけでなく、その後、プロセスによって作成されたすべてのスレッドに影響します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-168">The <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> setting affects all existing threads as well as any threads subsequently created by the process.</span></span> <span data-ttu-id="6a04d-169">通常の動作を復元するには、設定、<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>プロパティを`false`です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-169">To restore normal behavior, set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to `false`.</span></span>  
  
 <span data-ttu-id="6a04d-170"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> スレッドがあるプロセスで実行されている場合にのみ有効な<xref:System.Diagnostics.Process.PriorityClass%2A>動的な優先順位の列挙値のいずれかに設定 (<xref:System.Diagnostics.ProcessPriorityClass.Normal>、 <xref:System.Diagnostics.ProcessPriorityClass.High>、または<xref:System.Diagnostics.ProcessPriorityClass.RealTime>)。</span><span class="sxs-lookup"><span data-stu-id="6a04d-170"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> has an effect only when the thread is running in a process that has a <xref:System.Diagnostics.Process.PriorityClass%2A> set to one of the dynamic priority enumeration values (<xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6a04d-171">優先順位が高すぎると重要なオペレーティング システムやネットワーク機能からのリソースにドレインを実行できます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-171">Boosting the priority too high can drain resources from essential operating system and network functions.</span></span> <span data-ttu-id="6a04d-172">これにより、他のオペレーティング システム タスクと問題が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-172">This could cause problems with other operating system tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-173">優先順位上昇情報を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-173">The priority boost information could not be retrieved.</span></span>  
  
 <span data-ttu-id="6a04d-174">- または -</span><span class="sxs-lookup"><span data-stu-id="6a04d-174">-or-</span></span>  
  
 <span data-ttu-id="6a04d-175">優先順位上昇情報を設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-175">The priority boost information could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-176">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-176">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-177">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-177">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
      </Docs>
    </Member>
    <Member MemberName="PriorityLevel">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadPriorityLevel PriorityLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadPriorityLevel PriorityLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PriorityLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityLevel As ThreadPriorityLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadPriorityLevel PriorityLevel { System::Diagnostics::ThreadPriorityLevel get(); void set(System::Diagnostics::ThreadPriorityLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The priority level of this thread.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadPriorityLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-178">スレッドの優先順位を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-178">Gets or sets the priority level of the thread.</span></span></summary>
        <value><span data-ttu-id="6a04d-179">スレッドの優先順位の範囲を指定する <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="6a04d-179">One of the <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> values, specifying a range that bounds the thread's priority.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-180">優先度レベルはなく、単一の値、値の範囲ではなくなります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-180">The priority level is not a single value, but rather a range of values.</span></span> <span data-ttu-id="6a04d-181">オペレーティング システムが、処理を使用して、スレッドの基本優先度を算出<xref:System.Diagnostics.Process.PriorityClass%2A>で指定された範囲から値を選択する、<xref:System.Diagnostics.ProcessThread.PriorityLevel%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-181">The operating system computes the thread's base priority by using the process's <xref:System.Diagnostics.Process.PriorityClass%2A> to choose a value from the range specified in the <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-182">スレッドの優先順位情報を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-182">The thread priority level information could not be retrieved.</span></span>  
  
 <span data-ttu-id="6a04d-183">- または -</span><span class="sxs-lookup"><span data-stu-id="6a04d-183">-or-</span></span>  
  
 <span data-ttu-id="6a04d-184">スレッドの優先順位を設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-184">The thread priority level could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-185">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-185">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-186">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-186">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ThreadPriorityLevel" />
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.ProcessThread.BasePriority" />
        <altmember cref="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      </Docs>
    </Member>
    <Member MemberName="PrivilegedProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivilegedProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivilegedProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivilegedProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PrivilegedProcessorTime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time used in privileged mode.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-187">スレッドが、オペレーティング システム コアでコードを実行した時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-187">Gets the amount of time that the thread has spent running code inside the operating system core.</span></span></summary>
        <value><span data-ttu-id="6a04d-188">スレッドが、オペレーティング システム コアでコードを実行した時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="6a04d-188">A <see cref="T:System.TimeSpan" /> indicating the amount of time that the thread has spent running code inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-189">Windows では、いくつかの異なる保護機構を使用し、ユーザー モードおよび特権モードの違いは、それらのすべてのルートにします。</span><span class="sxs-lookup"><span data-stu-id="6a04d-189">Windows uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode.</span></span> <span data-ttu-id="6a04d-190"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> オペレーティング システム コア内の特権モードで実行されているアプリケーションが費やした時間に対応します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-190"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> corresponds to the amount of time that the application has spent running in privileged mode, inside the operating system core.</span></span> <span data-ttu-id="6a04d-191"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>プロパティのアプリケーションがシステムのコアの外部のユーザー モードでコードの実行に費やした時間の量を示します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-191">The <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> property indicates the amount of time that the application has spent running code in user mode, outside the system core.</span></span>  
  
 <span data-ttu-id="6a04d-192">ユーザー モードでは、次の 2 つの重要な点で、アプリケーションを制限します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-192">User mode restricts the application in two important ways.</span></span> <span data-ttu-id="6a04d-193">最初に、このアプリケーションは、周辺機器に直接アクセスすることはできませんが、代わりに、取得または周辺機器のデータを設定するオペレーティング システムのコアを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-193">First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data.</span></span> <span data-ttu-id="6a04d-194">オペレーティング システムは、1 つのアプリケーションが別で必要とされている周辺機器のデータを破棄しませんのでようにできます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-194">The operating system can thus ensure that one application does not destroy peripheral data that is needed by another.</span></span> <span data-ttu-id="6a04d-195">第二に、アプリケーションでは、読み取りまたはオペレーティング システム自体を保持するデータを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="6a04d-195">Second, the application cannot read or change data that the operating system itself maintains.</span></span> <span data-ttu-id="6a04d-196">この制限は、偶然または意図的には、コアを破損からアプリケーションを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-196">This restriction prevents applications from either inadvertently or intentionally corrupting the core.</span></span> <span data-ttu-id="6a04d-197">アプリケーションでは、操作を実行するオペレーティング システムを必要とする場合、システムのルーチンのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-197">If the application needs the operating system to perform an operation, it calls one of the system's routines.</span></span> <span data-ttu-id="6a04d-198">特権モードでは、これらの移行の多くは、操作を実行し、ユーザー モードにスムーズに戻ります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-198">Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-199">スレッド時間を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-199">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-200">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-200">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-201">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-201">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="ProcessorAffinity">
      <MemberSignature Language="C#" Value="public IntPtr ProcessorAffinity { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ProcessorAffinity" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.ProcessorAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Property ProcessorAffinity As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ProcessorAffinity {  void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-202">関連付けられたスレッドを実行できるプロセッサを設定します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-202">Sets the processors on which the associated thread can run.</span></span></summary>
        <value><span data-ttu-id="6a04d-203">スレッドを実行できるプロセッサを表すビットのセットを指す <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="6a04d-203">An <see cref="T:System.IntPtr" /> that points to a set of bits, each of which represents a processor that the thread can run on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-204">スレッドのプロセッサのアフィニティは、プロセッサへのリレーションシップのセットです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-204">The processor affinity of a thread is the set of processors it has a relationship to.</span></span> <span data-ttu-id="6a04d-205">つまり、上で実行するスレッドをスケジュールできます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-205">In other words, those it can be scheduled to run on.</span></span>  
  
 <span data-ttu-id="6a04d-206"><xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> ビットで各プロセッサを表します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-206"><xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> represents each processor as a bit.</span></span> <span data-ttu-id="6a04d-207">ビット 0 が 1 つのプロセッサを表し、ビット 1 は、2 つのプロセッサを表します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-207">Bit 0 represents processor one, bit 1 represents processor two, and so on.</span></span> <span data-ttu-id="6a04d-208">次の表に、考えられるのサブセット<xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A>4 プロセッサ システム用です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-208">The following table shows a subset of the possible <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> for a four-processor system.</span></span>  
  
|<span data-ttu-id="6a04d-209">プロパティ値 (16 進数)</span><span class="sxs-lookup"><span data-stu-id="6a04d-209">Property value (in hexadecimal)</span></span>|<span data-ttu-id="6a04d-210">有効なプロセッサ</span><span class="sxs-lookup"><span data-stu-id="6a04d-210">Valid processors</span></span>|  
|---------------------------------------|----------------------|  
|<span data-ttu-id="6a04d-211">0x0001</span><span class="sxs-lookup"><span data-stu-id="6a04d-211">0x0001</span></span>|<span data-ttu-id="6a04d-212">1</span><span class="sxs-lookup"><span data-stu-id="6a04d-212">1</span></span>|  
|<span data-ttu-id="6a04d-213">0x0002</span><span class="sxs-lookup"><span data-stu-id="6a04d-213">0x0002</span></span>|<span data-ttu-id="6a04d-214">2</span><span class="sxs-lookup"><span data-stu-id="6a04d-214">2</span></span>|  
|<span data-ttu-id="6a04d-215">0x0003</span><span class="sxs-lookup"><span data-stu-id="6a04d-215">0x0003</span></span>|<span data-ttu-id="6a04d-216">1 または 2</span><span class="sxs-lookup"><span data-stu-id="6a04d-216">1 or 2</span></span>|  
|<span data-ttu-id="6a04d-217">0x0004</span><span class="sxs-lookup"><span data-stu-id="6a04d-217">0x0004</span></span>|<span data-ttu-id="6a04d-218">3</span><span class="sxs-lookup"><span data-stu-id="6a04d-218">3</span></span>|  
|<span data-ttu-id="6a04d-219">0x0005</span><span class="sxs-lookup"><span data-stu-id="6a04d-219">0x0005</span></span>|<span data-ttu-id="6a04d-220">1 または 3</span><span class="sxs-lookup"><span data-stu-id="6a04d-220">1 or 3</span></span>|  
|<span data-ttu-id="6a04d-221">0x0007</span><span class="sxs-lookup"><span data-stu-id="6a04d-221">0x0007</span></span>|<span data-ttu-id="6a04d-222">1、2、または 3</span><span class="sxs-lookup"><span data-stu-id="6a04d-222">1, 2, or 3</span></span>|  
|<span data-ttu-id="6a04d-223">0x000F</span><span class="sxs-lookup"><span data-stu-id="6a04d-223">0x000F</span></span>|<span data-ttu-id="6a04d-224">1、2、3、または 4</span><span class="sxs-lookup"><span data-stu-id="6a04d-224">1, 2, 3, or 4</span></span>|  
  
 <span data-ttu-id="6a04d-225">設定して、スレッドの優先、1 つのプロセッサを指定することも、<xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-225">You can also specify the single, preferred processor for a thread by setting the <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> property.</span></span> <span data-ttu-id="6a04d-226">プロセス スレッドでは、プロセッサごとの移行とプロセッサからプロセッサを移行できます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-226">A process thread can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="6a04d-227">スレッドのプロセッサを指定すると、プロセッサのキャッシュが再読み込みされる回数を減らすことによって重い負荷のパフォーマンスが向上できます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-227">Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a04d-228">次の例は、設定する方法を示します、<xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A>すると、最初のプロセッサには、メモ帳のインスタンスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-228">The following example shows how to set the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> property for an instance of Notepad to the first processor.</span></span>  
  
 [!code-csharp[ProcessThreadIdealProcessor#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/CS/program.cs#1)]
 [!code-vb[ProcessThreadIdealProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessThreadIdealProcessor/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-229">プロセッサ アフィニティを設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-229">The processor affinity could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-230">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-230">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-231">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-231">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      </Docs>
    </Member>
    <Member MemberName="ResetIdealProcessor">
      <MemberSignature Language="C#" Value="public void ResetIdealProcessor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetIdealProcessor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ProcessThread.ResetIdealProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetIdealProcessor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetIdealProcessor();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6a04d-232">このスレッドに最も適したプロセッサをリセットして、単一の最も適したプロセッサがないことを示します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-232">Resets the ideal processor for this thread to indicate that there is no single ideal processor.</span></span> <span data-ttu-id="6a04d-233">つまり、どのプロセッサも適しています。</span><span class="sxs-lookup"><span data-stu-id="6a04d-233">In other words, so that any processor is ideal.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-234">最適なプロセッサをリセットできませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-234">The ideal processor could not be reset.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-235">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-235">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-236">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-236">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      </Docs>
    </Member>
    <Member MemberName="StartAddress">
      <MemberSignature Language="C#" Value="public IntPtr StartAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int StartAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.StartAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr StartAddress { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The start address in memory of this thread.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-237">このスレッドを起動するときにオペレーティング システムが呼び出した関数のメモリ アドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-237">Gets the memory address of the function that the operating system called that started this thread.</span></span></summary>
        <value><span data-ttu-id="6a04d-238">スレッドを実行するアプリケーション定義の関数を指すスレッドの起動アドレス。</span><span class="sxs-lookup"><span data-stu-id="6a04d-238">The thread's starting address, which points to the application-defined function that the thread executes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-239">各プロセスは、プライマリ スレッドと呼ばれる 1 つのスレッドで起動します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-239">Each process starts with a single thread, which is known as the primary thread.</span></span> <span data-ttu-id="6a04d-240">どのスレッドでも新しいスレッドを作成できます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-240">Any thread can create additional threads.</span></span>  
  
 <span data-ttu-id="6a04d-241">仮想アドレス空間、実行可能コード、データ、オブジェクト ハンドル、環境変数、基本優先度、および最小値と最大ワーキング セット サイズを含むプロセスには。</span><span class="sxs-lookup"><span data-stu-id="6a04d-241">A process has a virtual address space, executable code, data, object handles, environment variables, a base priority, and minimum and maximum working set sizes.</span></span> <span data-ttu-id="6a04d-242">プロセスのすべてのスレッドは、その仮想アドレス空間とシステム リソースを共有します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-242">All the threads of a process share its virtual address space and system resources.</span></span> <span data-ttu-id="6a04d-243">さらに、各スレッドは、例外ハンドラー、スケジューリング優先順位、およびスケジュールする、スレッドが待機している間、システムのスレッド コンテキストを保存する構造のセットを保持します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-243">In addition, each thread maintains exception handlers, a scheduling priority, and a set of structures in which the system saves the thread context while the thread is waiting to be scheduled.</span></span> <span data-ttu-id="6a04d-244">スレッドのコンテキストには、スレッドのプロセスのアドレス空間には中にマシン レジスタ、カーネル スタック、スレッド環境ブロック、およびユーザー スタックのスレッドのセットが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-244">The thread context includes the thread's set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread's process.</span></span>  
  
 <span data-ttu-id="6a04d-245">すべての Windows スレッドは、実際には、システム指定の関数、not、アプリケーションによって提供される関数の実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-245">Every Windows thread actually begins execution in a system-supplied function, not the application-supplied function.</span></span> <span data-ttu-id="6a04d-246">プライマリ スレッドの開始アドレスは、そのため、(と同じシステムによって提供される関数のアドレスを表します)、システム内のすべての Windows プロセスのです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-246">The starting address for the primary thread is, therefore, the same (as it represents the address of the system-supplied function) for every Windows process in the system.</span></span> <span data-ttu-id="6a04d-247">ただし、<xref:System.Diagnostics.ProcessThread.StartAddress%2A>プロパティでは、アプリケーション固有である関数の開始アドレスを取得することができます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-247">However, the <xref:System.Diagnostics.ProcessThread.StartAddress%2A> property allows you to get the starting function address that is specific to your application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-248">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-248">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-249">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-249">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The time this thread was started.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-250">オペレーティング システムによってスレッドを起動した時刻を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-250">Gets the time that the operating system started the thread.</span></span></summary>
        <value><span data-ttu-id="6a04d-251">オペレーティング システムがスレッドを起動したときのシステム上の時刻を表す <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="6a04d-251">A <see cref="T:System.DateTime" /> representing the time that was on the system when the operating system started the thread.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-252">スレッド時間を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-252">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-253">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-253">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-254">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-254">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadState ThreadState { System::Diagnostics::ThreadState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The current state of this thread.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-255">このスレッドの現在の状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-255">Gets the current state of this thread.</span></span></summary>
        <value><span data-ttu-id="6a04d-256">実行中、待機中、終了など、スレッドの実行状態を示す <see cref="T:System.Diagnostics.ThreadState" />。</span><span class="sxs-lookup"><span data-stu-id="6a04d-256">A <see cref="T:System.Diagnostics.ThreadState" /> that indicates the thread's execution, for example, running, waiting, or terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-257"><xref:System.Diagnostics.ProcessThread.WaitReason%2A>プロパティの値が有効な場合にのみ、<xref:System.Diagnostics.ProcessThread.ThreadState%2A>値は<xref:System.Diagnostics.ThreadState.Wait>します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-257">The <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property value is valid only when the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value is <xref:System.Diagnostics.ThreadState.Wait>.</span></span> <span data-ttu-id="6a04d-258">そのため、確認、<xref:System.Diagnostics.ProcessThread.ThreadState%2A>値を取得する前に、<xref:System.Diagnostics.ProcessThread.WaitReason%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-258">Therefore, check the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value before you get the <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-259">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-259">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-260">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-260">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan TotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TotalProcessorTime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The total amount of CPU time used.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-261">このスレッドがプロセッサを使用した時間の合計を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-261">Gets the total amount of time that this thread has spent using the processor.</span></span></summary>
        <value><span data-ttu-id="6a04d-262">スレッドがプロセッサの制御を取得していた時間の合計を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="6a04d-262">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the thread has had control of the processor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-263"><xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A>プロパティは、システム待機状態からスレッドが取得され、すべてのプロセッサ上の優先順位を指定する時間の合計を示します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-263">The <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> property indicates the total amount of time that the system has taken the thread out of the wait state and given it priority on any processor.</span></span> <span data-ttu-id="6a04d-264">複数のプロセッサ システムで、スレッドが 1 つ以上のプロセッサを使用する場合、この値は各プロセッサで費やされた時間を指定するは。</span><span class="sxs-lookup"><span data-stu-id="6a04d-264">On a multiple processor system, this value would include time spent on each processor, if the thread used more than one processor.</span></span>  
  
 <span data-ttu-id="6a04d-265"><xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A>プロパティは、の合計、<xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>と<xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-265">The <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> property is the sum of the <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> and <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-266">スレッド時間を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-266">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-267">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-267">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-268">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-268">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="UserProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan UserProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UserProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan UserProcessorTime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time used in user mode.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-269">関連付けられたスレッドが、アプリケーションでコードを実行した時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-269">Gets the amount of time that the associated thread has spent running code inside the application.</span></span></summary>
        <value><span data-ttu-id="6a04d-270">スレッドによるコード実行がオペレーティング システム コアではなくアプリケーションで行われた時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="6a04d-270">A <see cref="T:System.TimeSpan" /> indicating the amount of time that the thread has spent running code inside the application, as opposed to inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-271">Windows NT は、いくつかの異なる保護機構を使用およびそれらのすべてのルートには、ユーザー モードおよび特権モードの違い。</span><span class="sxs-lookup"><span data-stu-id="6a04d-271">Windows NT uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode.</span></span> <span data-ttu-id="6a04d-272"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> アプリケーションが、オペレーティング システム コアの外部のユーザー モードで実行に費やされた時間数に対応します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-272"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> corresponds to the amount of time that the application has spent running in user mode, outside the operating system core.</span></span> <span data-ttu-id="6a04d-273"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>のアプリケーションが、システム コア内の特権モードでコードの実行に費やした時間に対応しています。</span><span class="sxs-lookup"><span data-stu-id="6a04d-273">The <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> corresponds to the amount of time that the application has spent running code in privileged mode, inside the system core.</span></span>  
  
 <span data-ttu-id="6a04d-274">ユーザー モードでは、次の 2 つの重要な点で、アプリケーションを制限します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-274">User mode restricts the application in two important ways.</span></span> <span data-ttu-id="6a04d-275">最初に、このアプリケーションは、周辺機器に直接アクセスすることはできませんが、代わりに、取得または周辺機器のデータを設定するオペレーティング システムのコアを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-275">First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data.</span></span> <span data-ttu-id="6a04d-276">オペレーティング システムは、1 つのアプリケーションが別で必要とされている周辺機器のデータを破棄しませんのでようにできます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-276">The operating system can thus ensure that one application does not destroy peripheral data that is needed by another.</span></span> <span data-ttu-id="6a04d-277">第二に、アプリケーションでは、読み取りまたはオペレーティング システム自体を保持するデータを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="6a04d-277">Second, the application cannot read or change data that the operating system itself maintains.</span></span> <span data-ttu-id="6a04d-278">この制限は、偶然または意図的には、コアを破損からアプリケーションを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="6a04d-278">This restriction prevents applications from either inadvertently or intentionally corrupting the core.</span></span> <span data-ttu-id="6a04d-279">アプリケーションでは、操作を実行するオペレーティング システムを必要とする場合、システムのルーチンのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-279">If the application needs the operating system to perform an operation, it calls one of the system's routines.</span></span> <span data-ttu-id="6a04d-280">特権モードでは、これらの移行の多くは、操作を実行し、ユーザー モードにスムーズに戻ります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-280">Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="6a04d-281">スレッド時間を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="6a04d-281">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-282">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-282">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-283">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-283">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="WaitReason">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadWaitReason WaitReason { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadWaitReason WaitReason" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.WaitReason" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitReason As ThreadWaitReason" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadWaitReason WaitReason { System::Diagnostics::ThreadWaitReason get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The reason why this thread is waiting.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadWaitReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6a04d-284">スレッドが待機している理由を取得します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-284">Gets the reason that the thread is waiting.</span></span></summary>
        <value><span data-ttu-id="6a04d-285">スレッドが待機状態にある理由を表す <see cref="T:System.Diagnostics.ThreadWaitReason" />。</span><span class="sxs-lookup"><span data-stu-id="6a04d-285">A <see cref="T:System.Diagnostics.ThreadWaitReason" /> representing the reason that the thread is in the wait state.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a04d-286"><xref:System.Diagnostics.ProcessThread.WaitReason%2A>プロパティが有効な場合にのみ、<xref:System.Diagnostics.ProcessThread.ThreadState%2A>は<xref:System.Diagnostics.ThreadState.Wait>します。</span><span class="sxs-lookup"><span data-stu-id="6a04d-286">The <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property is valid only when the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> is <xref:System.Diagnostics.ThreadState.Wait>.</span></span> <span data-ttu-id="6a04d-287">そのため、確認、<xref:System.Diagnostics.ProcessThread.ThreadState%2A>値を取得する前に、<xref:System.Diagnostics.ProcessThread.WaitReason%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6a04d-287">Therefore, check the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value before you get the <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6a04d-288">スレッドが待機状態にありません。</span><span class="sxs-lookup"><span data-stu-id="6a04d-288">The thread is not in the wait state.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="6a04d-289">プラットフォームは、Windows 98 または Windows Millennium Edition です。</span><span class="sxs-lookup"><span data-stu-id="6a04d-289">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6a04d-290">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="6a04d-290">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ThreadWaitReason" />
        <altmember cref="P:System.Diagnostics.ProcessThread.ThreadState" />
      </Docs>
    </Member>
  </Members>
</Type>