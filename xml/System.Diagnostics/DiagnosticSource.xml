<Type Name="DiagnosticSource" FullName="System.Diagnostics.DiagnosticSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8cbc4935d264c7be30193ce6ff6c9af0cdfd4331" /><Meta Name="ms.sourcegitcommit" Value="f55040f35c19a83c85beb55243330558f6e369be" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="06/10/2019" /><Meta Name="ms.locfileid" Value="66817924" /></Metadata><TypeSignature Language="C#" Value="public abstract class DiagnosticSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DiagnosticSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DiagnosticSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticSource abstract" />
  <TypeSignature Language="F#" Value="type DiagnosticSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6aab8-101">コードが、インストルメント化されたプロセスで使用されるために、リッチ データのペイロードの生産時間のログ記録に使用されるのをインストルメント化する抽象クラスです。</span><span class="sxs-lookup"><span data-stu-id="6aab8-101">An abstract class that allows code to be instrumented for production-time logging of rich data payloads for consumption within the process that was instrumented.</span></span></summary>
    <remarks><span data-ttu-id="6aab8-102">詳細については、次を参照してください。 [DiagnosticSource ユーザー ガイド](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md)します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-102">For more information, see [DiagnosticSource User's Guide](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</span></span></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DiagnosticSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DiagnosticSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string -&gt; bool" Usage="diagnosticSource.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6aab8-103">書き込まれるイベントの名前です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-103">The name of the event being written.</span></span></param>
        <summary><span data-ttu-id="6aab8-104">通知イベントが有効になったかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-104">Verifies if the notification event is enabled.</span></span></summary>
        <returns><span data-ttu-id="6aab8-105">通知イベントが有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-105"><see langword="true" /> if the notification event is enabled, <see langword="false" /> otherwise.</span></span></returns>
         <remarks>
           <format type="text/markdown"><![CDATA[

<span data-ttu-id="6aab8-106">高価なセットアップの通知がある場合は、このセットアップを実行する前に IsEnabled を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="6aab8-106">If there is expensive setup for the notification, you can call IsEnabled before performing this setup.</span></span> <span data-ttu-id="6aab8-107">コンシューマーは、IsEnabled が true の通知をのみ取得したことを想定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6aab8-107">Consumers should not assume that they only get notifications for which IsEnabled is true.</span></span> <span data-ttu-id="6aab8-108">ただし、この API を呼び出すプロデューサーでは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-108">However, it is optional for producers to call this API.</span></span> <span data-ttu-id="6aab8-109">渡されると同じ名前には<see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-109">The name should be the same as that passed to <see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />.</span></span>

           ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string * obj * obj -&gt; bool&#xA;override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticSource.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6aab8-110">書き込まれるイベントの名前です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-110">The name of the event being written.</span></span></param>
        <param name="arg1"><span data-ttu-id="6aab8-111">IsEnabled の追加のコンテキストを表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6aab8-111">An object that represents the additional context for IsEnabled.</span></span> <span data-ttu-id="6aab8-112">コンシューマーは <see langword="null" /> を受け取ります。これは、プロデューサーが純粋な IsEnabled(string) を呼び出し、コンシューマーがそのようなイベントの通知をそもそも受け取りたいかを確認したことを示している場合があります。</span><span class="sxs-lookup"><span data-stu-id="6aab8-112">Consumers should expect to receive <see langword="null" /> which may indicate that producer called pure IsEnabled(string) to check if consumer wants to get notifications for such events at all.</span></span> <span data-ttu-id="6aab8-113">これに基づいて、プロデューサーが非 <see langword="null" /> コンテキストを使用して再度 IsEnabled(string, object, object) を呼び出す場合があります。</span><span class="sxs-lookup"><span data-stu-id="6aab8-113">Based on that, producer may call IsEnabled(string, object, object) again with non-<see langword="null" /> context.</span></span></param>
        <param name="arg2"><span data-ttu-id="6aab8-114">任意。</span><span class="sxs-lookup"><span data-stu-id="6aab8-114">Optional.</span></span> <span data-ttu-id="6aab8-115">IsEnabled の追加のコンテキストを表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6aab8-115">An object that represents the additional context for IsEnabled.</span></span> <span data-ttu-id="6aab8-116">既定では <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-116"><see langword="null" /> by default.</span></span> <span data-ttu-id="6aab8-117">コンシューマーは <see langword="null" /> を受け取ります。これは、プロデューサーが純粋な IsEnabled(string) を呼び出したか、プロデューサーが必要なすべてのコンテキストを <paramref name="arg1" /> で渡していることを示している場合があります。</span><span class="sxs-lookup"><span data-stu-id="6aab8-117">Consumers should expect to receive <see langword="null" /> which may indicate that producer called pure IsEnabled(string) or producer passed all necessary context in <paramref name="arg1" />.</span></span></param>
        <summary><span data-ttu-id="6aab8-118">通知イベントが有効になったかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-118">Verifies it the notification event is enabled.</span></span></summary>
        <returns><span data-ttu-id="6aab8-119">通知イベントが有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-119"><see langword="true" /> if the notification event is enabled, <see langword="false" /> otherwise.</span></span></returns>
         <remarks>
           <format type="text/markdown"><![CDATA[
          
<span data-ttu-id="6aab8-120">高価なセットアップの通知がある場合は、このメソッドを呼び出すし、セットアップを実行する前にコンテキストを提供します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-120">If there is expensive setup for the notification, you can call this method and provide context before performing the setup.</span></span>
          
           ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">To be added.</param>
        <param name="payload">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">To be added.</param>
        <param name="payload">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity StartActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity StartActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ StartActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StartActivity : System.Diagnostics.Activity * obj -&gt; System.Diagnostics.Activity" Usage="diagnosticSource.StartActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="6aab8-121">開始する <see cref="T:System.Diagnostics.Activity" /> です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-121">The <see cref="T:System.Diagnostics.Activity" /> to be started.</span></span></param>
        <param name="args"><span data-ttu-id="6aab8-122">イベントのペイロードとして渡される値を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6aab8-122">An object that represent the value being passed as a payload for the event.</span></span></param>
        <summary><span data-ttu-id="6aab8-123"><see cref="T:System.Diagnostics.Activity" /> を開始し、開始イベントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6aab8-123">Starts an <see cref="T:System.Diagnostics.Activity" /> and writes a start event.</span></span></summary>
        <returns><span data-ttu-id="6aab8-124">チェーンで役立つために開始されたアクティビティです。</span><span class="sxs-lookup"><span data-stu-id="6aab8-124">The started activity for convenient chaining.</span></span></returns>
         <remarks>
           <format type="text/markdown"><![CDATA[
           
<span data-ttu-id="6aab8-125"><xref:System.Diagnostics.Activity>論理演算、そのコンテキスト、および親の関係について説明します、現在<xref:System.Diagnostics.Activity>操作の処理を経由して送信します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-125">The <xref:System.Diagnostics.Activity> describes the logical operation, its context, and parent relation; the current <xref:System.Diagnostics.Activity> flows through the operation processing.</span></span>

<span data-ttu-id="6aab8-126">このメソッドは、開始、特定<xref:System.Diagnostics.Activity>、グローバル管理<xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType>と<xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType>アクティビティを指定された<xref:System.Diagnostics.Activity>、コンシューマーに通知し、、新しい<xref:System.Diagnostics.Activity>が開始されました。</span><span class="sxs-lookup"><span data-stu-id="6aab8-126">This method starts the given <xref:System.Diagnostics.Activity>, maintains a global <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> and <xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType> activity for the given <xref:System.Diagnostics.Activity>, and notifies consumers that a new <xref:System.Diagnostics.Activity> was started.</span></span> <span data-ttu-id="6aab8-127">コンシューマーがアクセスできる<xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType>コンテキストを追加またはテレメトリを強化します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-127">Consumers can access <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> to add context and/or augment telemetry.</span></span>

<span data-ttu-id="6aab8-128">プロデューサーは、ペイロードにコンシューマーに追加の詳細情報を渡すことがあります。</span><span class="sxs-lookup"><span data-stu-id="6aab8-128">Producers may pass additional details to the consumer in the payload.</span></span>

           ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActivity">
      <MemberSignature Language="C#" Value="public void StopActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StopActivity : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.StopActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="6aab8-129">停止するアクティビティです。</span><span class="sxs-lookup"><span data-stu-id="6aab8-129">The activity to be stopped.</span></span></param>
        <param name="args"><span data-ttu-id="6aab8-130">イベントのペイロードとして渡される値を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6aab8-130">An object that represents the value passed as a payload for the event.</span></span></param>
        <summary><span data-ttu-id="6aab8-131">指定した <see cref="T:System.Diagnostics.Activity" /> を停止し、グローバルな <see cref="P:System.Diagnostics.Activity.Current" /> アクティビティを維持し、コンシューマーに <see cref="T:System.Diagnostics.Activity" /> が停止されたことを通知します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-131">Stops the given <see cref="T:System.Diagnostics.Activity" />, maintains the global <see cref="P:System.Diagnostics.Activity.Current" /> activity, and notifies consumers that the <see cref="T:System.Diagnostics.Activity" /> was stopped.</span></span></summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="6aab8-132">プロデューサーは、ペイロードにコンシューマーに追加の詳細情報を渡すことがあります。</span><span class="sxs-lookup"><span data-stu-id="6aab8-132">Producers may pass additional details to the consumer in the payload.</span></span>

<span data-ttu-id="6aab8-133">コンシューマーがアクセスできる<xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType>コンテキストを追加またはテレメトリを強化します。</span><span class="sxs-lookup"><span data-stu-id="6aab8-133">Consumers can access <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> to add context and/or augment telemetry.</span></span>


         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit" Usage="diagnosticSource.Write (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6aab8-134">書き込まれるイベントの名前です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-134">The name of the event being written.</span></span></param>
        <param name="value"><span data-ttu-id="6aab8-135">イベントのペイロードとして渡される値を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="6aab8-135">An object that represents the value being passed as a payload for the event.</span></span> <span data-ttu-id="6aab8-136">これは通常、いくつかのサブ値を含む匿名型です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-136">This is often an anonymous type which contains several sub-values.</span></span></param>
        <summary><span data-ttu-id="6aab8-137">複雑なペイロードのログを記録する汎用的な方法です。</span><span class="sxs-lookup"><span data-stu-id="6aab8-137">Provides a generic way of logging complex payloads.</span></span></summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="6aab8-138">各通知には、それだけでなく、通知に渡す任意の情報を提供するオブジェクト (通常、匿名型) を識別する名前が付けられます。</span><span class="sxs-lookup"><span data-stu-id="6aab8-138">Each notification is given a name that identifies it, as well as an object (typically an anonymous type) that provides arbitrary information to pass to the notification.</span></span>  

<span data-ttu-id="6aab8-139">`name` 短い必要があります。</span><span class="sxs-lookup"><span data-stu-id="6aab8-139">`name` should be short.</span></span> <span data-ttu-id="6aab8-140">以降、あいまいさを回避するにがない限り、完全修飾名を使用しない`name`グローバルに一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6aab8-140">Don't use a fully qualified name unless you have to to avoid ambiguity, since `name` must be globally unique.</span></span> <span data-ttu-id="6aab8-141">通常、 *componentName.eventName*ここで、 *componentName*と*eventName*未満の 10 文字を文字列には、適切な妥協が。</span><span class="sxs-lookup"><span data-stu-id="6aab8-141">Typically, *componentName.eventName*, where *componentName* and *eventName* are strings less than 10 characters, are a good compromise.</span></span>

<span data-ttu-id="6aab8-142">通知の名前のない`.`コンポーネント名がドット、およびそれらの両方がドットであいまいさを潜在顧客にします。</span><span class="sxs-lookup"><span data-stu-id="6aab8-142">Notification names should not have `.` in them because component names have dots, and for them both to have dots leads to ambiguity.</span></span> <span data-ttu-id="6aab8-143">使用することをお勧めします。`_`代わりにします。</span><span class="sxs-lookup"><span data-stu-id="6aab8-143">We suggest that you use `_` instead.</span></span>

<span data-ttu-id="6aab8-144">グループをフィルター文字列をプレフィックスとしてリスナーが使用することを想定しています。</span><span class="sxs-lookup"><span data-stu-id="6aab8-144">Assume that listeners will use string prefixing to filter groups.</span></span> <span data-ttu-id="6aab8-145">そのため、コンポーネント名の階層構造のことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6aab8-145">Therefore, having a hierarchy of component names is a good practice.</span></span>

         ]]></format>
         </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
