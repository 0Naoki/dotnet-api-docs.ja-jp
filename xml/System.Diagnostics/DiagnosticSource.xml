<Type Name="DiagnosticSource" FullName="System.Diagnostics.DiagnosticSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d79c7605daf68e0c4169c32fac48c2c1ac277dad" /><Meta Name="ms.sourcegitcommit" Value="cfc0e4215fd0d259582ada2141878befd7c3c8c6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="07/12/2019" /><Meta Name="ms.locfileid" Value="67854879" /></Metadata><TypeSignature Language="C#" Value="public abstract class DiagnosticSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DiagnosticSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DiagnosticSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticSource abstract" />
  <TypeSignature Language="F#" Value="type DiagnosticSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>コードが、インストルメント化されたプロセスで使用されるために、リッチ データのペイロードの生産時間のログ記録に使用されるのをインストルメント化する抽象クラスです。</summary>
    <remarks>詳細については、次を参照してください。 [DiagnosticSource ユーザー ガイド](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md)します。</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DiagnosticSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DiagnosticSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string -&gt; bool" Usage="diagnosticSource.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">書き込まれるイベントの名前です。</param>
        <summary>通知イベントが有効になったかどうかを確認します。</summary>
        <returns>通知イベントが有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

高価なセットアップの通知がある場合は、このセットアップを実行する前に IsEnabled を呼び出すことができます。 コンシューマーは、IsEnabled が true の通知をのみ取得したことを想定しないでください。 ただし、この API を呼び出すプロデューサーでは省略可能です。 渡されると同じ名前には<see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />します。

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string * obj * obj -&gt; bool&#xA;override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticSource.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="name">書き込まれるイベントの名前です。</param>
        <param name="arg1">IsEnabled の追加のコンテキストを表すオブジェクトです。 コンシューマーは <see langword="null" /> を受け取ります。これは、プロデューサーが純粋な IsEnabled(string) を呼び出し、コンシューマーがそのようなイベントの通知をそもそも受け取りたいかを確認したことを示している場合があります。 これに基づいて、プロデューサーが非 <see langword="null" /> コンテキストを使用して再度 IsEnabled(string, object, object) を呼び出す場合があります。</param>
        <param name="arg2">任意。 IsEnabled の追加のコンテキストを表すオブジェクトです。 既定では <see langword="null" /> です。 コンシューマーは <see langword="null" /> を受け取ります。これは、プロデューサーが純粋な IsEnabled(string) を呼び出したか、プロデューサーが必要なすべてのコンテキストを <paramref name="arg1" /> で渡していることを示している場合があります。</param>
        <summary>通知イベントが有効になったかどうかを確認します。</summary>
        <returns>通知イベントが有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
高価なセットアップの通知がある場合は、このメソッドを呼び出すし、セットアップを実行する前にコンテキストを提供します。
          
           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">To be added.</param>
        <param name="payload">To be added.</param>
        <summary>送信される HTTP 要求など、プロセスの外で発生するイベントまたは操作にアクティビティから状態を転送します。</summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Instumentation サイトは、アクティビティが (HTTP 要求の送信) などのプロセスをままの場所には、そのサイトは、アクティビティから送信要求に状態を転送するとします。

可能な限り、する必要がありますこれをインストルメンテーション サイト間のコントラクトがあるため、<xref:System.Diagnostics.Activity>とインストルメンテーションのサイトで ougoing 要求ロジック。   ただし、インストルメンテーション サイトは、ポリシー (たとえば、かどうかアクティビティ情報する必要がありますが無効になっているまたは互換性の理由から、以前の形式で記述された) を処理することはできません。
これは、インストルメンテーション サイトはログ記録システム コールバックし、ポリシーを解決するように指示する必要があります。 目的は、これは、`OnActivityExport`メソッド。

`OnActivityExport`メソッドが指定された、<xref:System.Diagnostics.Activity>と送信要求を表すペイロード オブジェクト。 A<xref:System.Diagnostics.DiagnosticSource>サブスクライバーが送信される前に、送信要求を更新する機能。
 
インストルメンテーションのサイト (プロセスの出力方向の境界上にあるサイトのみ) でこのメソッドが使用されますめったに注意してください。   さらに、通常、インストルメンテーションのサイトが (たとえば、特定の送信規則では、すべてのアクティビティ状態を転送する場合など) が実行する既定のポリシーは正常である可能性があります。 このメソッドは、問題は、ケースに対してのみは。 したがって、このメソッドは非常にまれに使用する必要がありで symetry のほとんどの場合、ここでは`OnActivityImport`将来とします。

なお`payload`として型指定された、<xref:System.Object>が、ここでは、特定インストルメンテーション サイトおよびサブスクライバーする必要がありますペイロードの型を認識し、したがってキャストをデコードし、必要な場合。

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">外部イベントの影響を受けるアクティビティ。</param>
        <param name="payload">受信した要求を表すペイロード。</param>
        <summary>プロセスの外で発生した、受信要求など、イベントまたは操作からアクティビティに状態を転送します。</summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Instumentation サイトをプロセスの外部イベントに応答で新しいアクティビティを作成する場合、着信 HTTP など) を要求、`OnActivityImport`メソッドにより、そのサイトが受信した要求から新しいアクティビティおよび転送の状態を作成する必要が、アクティビティ。 

可能なの範囲の間のコントラクトがあるために、インストルメンテーションのサイトでこれ行う必要が、<xref:System.Diagnostics.Activity>とインストルメンテーションのサイトでの着信要求ロジック。   ただし、インストルメンテーション サイトは、ポリシーを処理することはできません。 (たとえば、サンプリングが行われた場合、正確にどの要求をサンプリングするでしょうか。)このような場合は、インストルメンテーション サイトはログ記録システム コールバックし、(たとえば、アクティビティの「サンプリング」ビットを設定するかどうかを決定する) ポリシーを解決するように指示する必要があります。 目的は、これは、`OnActivityImport`メソッド。 着信要求を表すペイロード オブジェクトと同様に、アクティビティが与えられます。 サブスクライバーを<xref:System.Diagnostics.DiagnosticSource>し、必要に応じて、この活動を更新する機会が提供されています。 

インストルメンテーションのサイト (サイトのみのプロセスの境界上にある)、このメソッドが使用されることはほとんどありませんし、instrumetation サイトがいくつかの既定のポリシーを実装 (内のアクティビティに設定*一部*方法)、する必要はありませんので、十分な場合はその既定のポリシーは、このメソッドをオーバーライドします。 つまり、このメソッドは、非常にまれな (ただし、多くの場合、重要な) 場合にオーバーライドする必要があります。

なお`payload`として型指定された<xref:System.Object>が、ここでは、特定インストルメンテーション サイトとサブスクライバーがペイロードの型を認識し、したがってキャストをデコードし、必要な場合。

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity StartActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity StartActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ StartActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StartActivity : System.Diagnostics.Activity * obj -&gt; System.Diagnostics.Activity" Usage="diagnosticSource.StartActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">開始する <see cref="T:System.Diagnostics.Activity" /> です。</param>
        <param name="args">イベントのペイロードとして渡される値を表すオブジェクトです。</param>
        <summary><see cref="T:System.Diagnostics.Activity" /> を開始し、開始イベントを書き込みます。</summary>
        <returns>チェーンで役立つために開始されたアクティビティです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
           
<xref:System.Diagnostics.Activity>論理演算、そのコンテキスト、および親の関係について説明します、現在<xref:System.Diagnostics.Activity>操作の処理を経由して送信します。

このメソッドは、開始、特定<xref:System.Diagnostics.Activity>、グローバル管理<xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType>と<xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType>アクティビティを指定された<xref:System.Diagnostics.Activity>、コンシューマーに通知し、、新しい<xref:System.Diagnostics.Activity>が開始されました。 コンシューマーがアクセスできる<xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType>コンテキストを追加またはテレメトリを強化します。

プロデューサーは、ペイロードにコンシューマーに追加の詳細情報を渡すことがあります。

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActivity">
      <MemberSignature Language="C#" Value="public void StopActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StopActivity : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.StopActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">停止するアクティビティです。</param>
        <param name="args">イベントのペイロードとして渡される値を表すオブジェクトです。</param>
        <summary>指定した <see cref="T:System.Diagnostics.Activity" /> を停止し、グローバルな <see cref="P:System.Diagnostics.Activity.Current" /> アクティビティを維持し、コンシューマーに <see cref="T:System.Diagnostics.Activity" /> が停止されたことを通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

プロデューサーは、ペイロードにコンシューマーに追加の詳細情報を渡すことがあります。

コンシューマーがアクセスできる<xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType>コンテキストを追加またはテレメトリを強化します。


         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit" Usage="diagnosticSource.Write (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">書き込まれるイベントの名前です。</param>
        <param name="value">イベントのペイロードとして渡される値を表すオブジェクトです。 これは通常、いくつかのサブ値を含む匿名型です。</param>
        <summary>複雑なペイロードのログを記録する汎用的な方法です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

各通知には、それだけでなく、通知に渡す任意の情報を提供するオブジェクト (通常、匿名型) を識別する名前が付けられます。  

`name` 短い必要があります。 以降、あいまいさを回避するにがない限り、完全修飾名を使用しない`name`グローバルに一意である必要があります。 通常、 *componentName.eventName*ここで、 *componentName*と*eventName*未満の 10 文字を文字列には、適切な妥協が。

通知の名前のない`.`コンポーネント名がドット、およびそれらの両方がドットであいまいさを潜在顧客にします。 使用することをお勧めします。`_`代わりにします。

グループをフィルター文字列をプレフィックスとしてリスナーが使用することを想定しています。 そのため、コンポーネント名の階層構造のことをお勧めします。

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
