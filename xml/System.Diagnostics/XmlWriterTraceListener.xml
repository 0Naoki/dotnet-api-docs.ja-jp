<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f5dee81413f1eca24d18db1320164d7c7eca4132" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37767174" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>トレース出力またはデバッグ出力を XML エンコードされたデータとして <see cref="T:System.IO.TextWriter" /> または <see cref="T:System.IO.Stream" /> (<see cref="T:System.IO.FileStream" /> など) に転送します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  インスタンスを作成するコードのアクセス許可を管理する必要がありますが、<xref:System.Diagnostics.XmlWriterTraceListener>クラス。  
  
 <xref:System.Diagnostics.XmlWriterTraceListener>クラスは、トレースとデバッグについては、XML でエンコードされたテキスト ストリームに変換します。 XML 出力の説明は、次の表に示します。 使用することができます、[サービス トレース ビューアー ツール (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129)出力 XML を表示するためにします。  
  
 有効または無効にすることができます、<xref:System.Diagnostics.XmlWriterTraceListener>を通じて、アプリケーション構成ファイルと、使用して、構成された<xref:System.Diagnostics.XmlWriterTraceListener>アプリケーションでします。 また、作成することができます、<xref:System.Diagnostics.XmlWriterTraceListener>コードにします。  
  
 構成する、<xref:System.Diagnostics.XmlWriterTraceListener>アプリケーションの名前に対応する構成ファイルを編集します。 このファイルでを追加またはリスナーの削除、リスナーのプロパティを設定したりのリスナーを削除できます。 構成ファイルは、次の例のように書式設定する必要があります。  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.XmlWriterTraceListener>クラスの継承、<xref:System.Diagnostics.TraceListener.Filter%2A>基底クラスからプロパティ<xref:System.Diagnostics.TraceListener>します。  <xref:System.Diagnostics.TraceListener.Filter%2A>プロパティは、リスナーにフィルター処理のトレース出力の追加レベルを使用します。  存在する場合は、フィルターがある場合、`Trace`トレース リスナーの呼び出しのメソッド、<xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>トレースを出力するかどうかを判断するフィルターのメソッド。  
  
> [!NOTE]
>  使用されているファイルへの書き込みを試行または利用不可、ファイル名が自動的に付いて GUID。  
  
> [!NOTE]
>  リスナーのメソッドのメソッドによって呼び出されるものでは、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>クラス。  リスナーのメソッドは、アプリケーション コードから直接呼び出されるものではありません。 <xref:System.Diagnostics.XmlWriterTraceListener>で使用するためのリスナーを主な対象は、<xref:System.Diagnostics.TraceSource>クラス。 <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A>と<xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A>メソッドの呼び出し、<xref:System.Diagnostics.Trace>と<xref:System.Diagnostics.Debug>クラス、および既定値は XML 要素の提供を<xref:System.Diagnostics.Trace>と<xref:System.Diagnostics.Debug>の値を指定しません。  
  
 次の表では、要素と、XML 出力の属性について説明します。  
  
|要素|属性|出力|メモ|  
|-------------|----------------|------------|-----------|  
|`CallStack`|なし|存在に依存、<xref:System.Diagnostics.TraceOptions.Callstack>フラグ、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティ。|などの特殊文字 > または < はエスケープ シーケンスに置き換えられます。 これに続くエスケープ文字の変換テーブルを参照してください。|  
|`Computer`|なし|常に存在します。|<xref:System.Environment.MachineName%2A> プロパティの値。|  
|`Correlation`|`ActivityID`|常に存在します。|指定しない場合、既定では空の GUID です。|  
||`RelatedActivityID`|存在に依存、`relatedActivityId`トレース メソッド呼び出しのパラメーター。|<xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> メソッドの `relatedActivityId` パラメーター。|  
|`DataItem`|なし|依存、`data`のパラメーター、<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>メソッド。|値がのセットとして書き込まれるために、この要素は要素または 1 つの要素の配列を含めることができます`DataItem`の下のノード、`TraceData`要素。<br /><br /> データの出力は、`ToString`渡されたデータ オブジェクトのメソッド。|  
|`EventID`|なし|常に存在します。|パラメーターの入力 (`id`)。|  
|`Execution`|`ProcessName`|常に存在します。|<xref:System.Diagnostics.TraceEventCache>します。|  
||`ProcessID`|常に存在します。|<xref:System.Diagnostics.TraceEventCache>します。 Windows 98 および Windows オペレーティング システムで Me`ProcessID`が正、負の数の表現であることと、正しいプロセス識別子の取得に変換する必要があります 2,147, 483,647 を超える。|  
||`ThreadID`|常に存在します。|<xref:System.Diagnostics.TraceEventCache>します。|  
|`Level`|なし|常に存在します。|パラメーターの入力 (の数値`eventType`)。 パラメーター値の 255 より大きい値では、255 として出力をされます。|  
|`LogicalOperationStack`|なし|存在に依存、<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>フラグ、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティ。|として値が書き込まれますので、1 つ以上の論理操作にすることができます`LogicalOperation`の下のノード、`LogicalOperationStack`要素。|  
|`Message`|なし|トレースのメソッドの呼び出しでのメッセージの存在に依存します。|この要素は、書式設定の引数が指定されている場合、書式設定されたメッセージです。|  
|`Source`|`Name`|常に存在します。|パラメーターを入力します。|  
|`SubType`|`Name`|常に存在します。|パラメーターを入力します。|  
|`TimeCreated`|`SystemTime`|常に存在します。|内に存在しない場合、 <xref:System.Diagnostics.TraceEventCache>、既定値は、現在の時刻。|  
|`TimeStamp`|なし|存在に依存、<xref:System.Diagnostics.TraceOptions.Timestamp>フラグ、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティ。|<xref:System.Diagnostics.TraceEventCache>します。|  
|`Type`|なし|常に存在します。|常に値 3 です。|  
  
 次の表では、XML 出力でエスケープされている文字を示します。 エスケープのすべての要素で発生して、属性は例外です、`DataItem`要素で、オブジェクトが渡された場合はエスケープされません、`data`のパラメーター、<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>メソッドは、<xref:System.Xml.XPath.XPathNavigator>オブジェクト。 場合、<xref:System.Xml.XPath.XPathNavigator>データ オブジェクトが使用される、<xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A>メソッドが呼び出され、エスケープされていないデータとして全体のルート ノードを追跡します。  
  
|エスケープ文字|[値]|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0 xd|&\#xD;|  
|0 xa|&\#xA;|  
  
   
  
## Examples  
 次のコード例の使用を示しています、<xref:System.Diagnostics.XmlWriterTraceListener>エスケープと非エスケープの両方のデータ ファイルのログを書き込むクラス。  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">トレース リスナーが書き込むストリームを表す <see cref="T:System.IO.Stream" />。</param>
        <summary>指定されたストリームをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A>プロパティは空の文字列に初期化されます ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">トレース リスナーからの出力を受信する <see cref="T:System.IO.TextWriter" />。</param>
        <summary>指定されたライターをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A>プロパティは空の文字列に初期化されます ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">書き込み先のファイルの名前。</param>
        <summary>指定されたファイルをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの新しいインスタンスを初期化する、 <xref:System.IO.StreamWriter> 、指定したパスで指定されたファイルのクラスを使用して<xref:System.Text.Encoding.UTF8%2A>エンコードします。 ファイルが存在する場合に追加されます。 ファイルが存在しない場合は、新しいファイルが作成されます。  
  
> [!NOTE]
>  例外が発生する可能性を減らすためには、出力が無効になる任意の文字が置き換え、"?"文字です。  
  
 <xref:System.Diagnostics.TraceListener.Name%2A>プロパティは空の文字列に初期化されます ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">トレース リスナーが書き込むストリームを表す <see cref="T:System.IO.Stream" />。</param>
        <param name="name">新規インスタンスの名前。</param>
        <summary>指定されたストリームをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを初期化します、<xref:System.Diagnostics.TraceListener.Name%2A>プロパティを`name`パラメーターの値または空の文字列 ("") 場合、`name`パラメーターが`null`します。 名前をインデックスとして使用できます、<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>リスナーのプロパティをプログラムで変更するコレクション。 たとえば、次のコード セット、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>のインスタンスのプロパティを<xref:System.Diagnostics.XmlWriterTraceListener>が<xref:System.Diagnostics.TraceListener.Name%2A>プロパティが"xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">トレース リスナーからの出力を受信する <see cref="T:System.IO.TextWriter" />。</param>
        <param name="name">新規インスタンスの名前。</param>
        <summary>指定されたライターをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを初期化します、<xref:System.Diagnostics.TraceListener.Name%2A>プロパティを`name`パラメーターの値または空の文字列 ("") 場合、`name`パラメーターが`null`します。 名前をインデックスとして使用できます、<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>リスナーのプロパティをプログラムで変更するコレクション。 たとえば、次のコード セット、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>のインスタンスのプロパティを<xref:System.Diagnostics.XmlWriterTraceListener>が<xref:System.Diagnostics.TraceListener.Name%2A>プロパティが"xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">書き込み先のファイルの名前。</param>
        <param name="name">新規インスタンスの名前。</param>
        <summary>指定されたファイルをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの新しいインスタンスを初期化する、 <xref:System.IO.StreamWriter> 、指定したパスで指定されたファイルのクラスを使用して<xref:System.Text.Encoding.UTF8%2A>エンコードします。 ファイルが存在する場合に追加されます。 ファイルが存在しない場合は、新しいファイルが作成されます。  
  
> [!NOTE]
>  例外が発生する可能性を減らすためには、出力が無効になる任意の文字が置き換え、"?"文字です。  
  
 <xref:System.Diagnostics.TraceListener.Name%2A>プロパティに設定されて、`name`パラメーターの値または空の文字列 ("") 場合、`name`パラメーターが`null`します。 名前をインデックスとして使用できます、<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>リスナーのプロパティをプログラムで変更するコレクション。 たとえば、次のコード セット、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>のインスタンスのプロパティを<xref:System.Diagnostics.XmlWriterTraceListener>が<xref:System.Diagnostics.TraceListener.Name%2A>プロパティが"xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このリスナーの <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> を終了して、トレース出力またはデバッグ出力を受信しないようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込むエラー メッセージ。</param>
        <param name="detailMessage">エラー メッセージに追加する詳細なエラー メッセージ。</param>
        <summary>エラー メッセージおよびエラー メッセージの詳細を含むトレース情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の動作がユーザー インターフェイス モードとに、アプリケーションが実行されているときに、メッセージ ボックスに、メッセージと詳細なメッセージを表示するには、<xref:System.Diagnostics.TraceListener>インスタンス、<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>コレクション。 インスタンスがコレクション内に既定では、<xref:System.Diagnostics.DefaultTraceListener>します。 この動作をカスタマイズするには追加または削除によって、<xref:System.Diagnostics.TraceListener>コレクションから。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>トレース データを出力ファイルまたはストリームに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか 1 つ。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">出力するデータ オブジェクト。</param>
        <summary>トレース情報 (データ オブジェクトおよびイベント情報) をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`、 `source`、 `eventType`、および`id`パラメーター ヘッダーとフッターのトレースで使用されます。 `id`パラメーターに変換されます、符号なし整数を書き込む前に、そのため、負の値`id`値が大きい正の整数として書き込まれます。 `data`としてパラメーターが記述された、`DataItem`内のノード、`TraceData`要素。 `ToString`データ オブジェクトのメソッドを使用して、オブジェクトを文字列に変換します。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードによって直接呼び出されるものではありません。  メソッドを呼び出して、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>トレース データを書き込みます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか 1 つ。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">出力するデータ オブジェクトの配列。</param>
        <summary>トレース情報、データ オブジェクト、およびイベント情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`、 `source`、 `eventType`、および`id`パラメーター ヘッダーとフッターのトレースで使用されます。 `id`パラメーターに変換されます、符号なし整数を書き込む前に、そのため、負の値`id`値が大きい正の整数として書き込まれます。 内のオブジェクト、`data`パラメーター配列として書き込まれる`DataItem`内のノード、`TraceData`要素。 `ToString`各データ オブジェクトのメソッドを使用して、オブジェクトを文字列に変換します。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードによって直接呼び出されるものではありません。  メソッドを呼び出して、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>トレース データを書き込みます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>イベント トレース情報を出力ファイルまたはストリームに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか 1 つ。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="message">書き込むメッセージ。</param>
        <summary>トレース情報、メッセージ、およびイベント情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`、 `source`、 `eventType`、および`id`パラメーター ヘッダーとフッターのトレースで使用されます。 `id`パラメーターに変換されます、符号なし整数を書き込む前に、そのため、負の値`id`値が大きい正の整数として書き込まれます。 `message`としてパラメーターが記述された、`Message`要素。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードによって直接呼び出されるものではありません。  メソッドを呼び出して、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>トレース データを書き込みます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか 1 つ。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="format">0 個以上の書式項目を格納している書式指定文字列。<c>args</c> 配列内のオブジェクトに対応します。</param>
        <param name="args">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</param>
        <summary>トレース情報、書式設定されたメッセージ、およびイベント情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`、 `source`、 `eventType`、および`id`パラメーター ヘッダーとフッターのトレースで使用されます。 `id`パラメーターに変換されます、符号なし整数を書き込む前に、そのため、負の値`id`値が大きい正の整数として書き込まれます。 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>に渡して、メソッドが呼び出されます、`format`文字列と`args`を書式設定、パラメーターとして配列、`args`オブジェクトの配列として、`Message`要素。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードによって直接呼び出されるものではありません。  メソッドを呼び出して、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>トレース データを書き込みます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="message">書き込むトレース メッセージ。</param>
        <param name="relatedActivityId">関連するアクティビティを識別する <see cref="T:System.Guid" /> 構造体。</param>
        <summary>関連するアクティビティの ID を含むトレース情報、メッセージ、およびイベント情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>メソッドは、関連するトレースの相関関係を使用します。 `eventCache`、 `source`、 `id`、および`relatedActivityId`パラメーター ヘッダーとフッターのトレースで使用されます。 `id`パラメーターに変換されます、符号なし整数を書き込む前に、そのため、負の値`id`値が大きい正の整数として書き込まれます。 `message`としてパラメーターが記述された、`Message`要素。 <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType>に変換するメソッドが呼び出される、 `relatedActivityId`"b"の値の書式設定文字列で、ヘッダーに表示されます。 `SubTypeName`フッター内の要素としてトレース イベントの種類を識別する、<xref:System.Diagnostics.TraceEventType.Transfer>します。  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>アプリケーション コードによって呼び出されるメソッドはありません。  によって呼び出される対象としていますが、<xref:System.Diagnostics.TraceSource>のトレース情報を生成するオブジェクト、<xref:System.Diagnostics.TraceSource.TraceTransfer%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込むメッセージ。</param>
        <summary>逐語的メッセージを追加のコンテキスト情報なしでファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>にコンテキスト情報をログ出力に含めるメソッド。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込むメッセージ。</param>
        <summary>逐語的メッセージを追加のコンテキスト情報なしでファイルまたはストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>にコンテキスト情報をログ出力に含めるメソッド。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す機能。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
  </Members>
</Type>