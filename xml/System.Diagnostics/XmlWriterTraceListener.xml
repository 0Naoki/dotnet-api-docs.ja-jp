<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1445a59b4b5ffacc035b30dd392f9a19190d4885" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69252441" /></Metadata><TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>トレース出力またはデバッグ出力を XML エンコードされたデータとして <see cref="T:System.IO.TextWriter" /> または <see cref="T:System.IO.Stream" /> (<see cref="T:System.IO.FileStream" /> など) に転送します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  クラスのインスタンスを作成するには、 <xref:System.Diagnostics.XmlWriterTraceListener>アンマネージコードのアクセス許可が必要です。  
  
 クラス<xref:System.Diagnostics.XmlWriterTraceListener>は、トレース情報とデバッグ情報を XML エンコードされたテキストストリームに変換します。 XML 出力の説明を次の表に示します。 [サービストレースビューアーツール (svctraceviewer.exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129)を使用して、XML 出力を表示できます。  
  
 アプリケーション構成ファイルを使用し<xref:System.Diagnostics.XmlWriterTraceListener>てを有効または無効にし、アプリケーション<xref:System.Diagnostics.XmlWriterTraceListener>で構成されたを使用することができます。 または、コード<xref:System.Diagnostics.XmlWriterTraceListener>にを作成することもできます。  
  
 を構成<xref:System.Diagnostics.XmlWriterTraceListener>するには、アプリケーションの名前に対応する構成ファイルを編集します。 このファイルでは、リスナーを追加または削除したり、リスナーのプロパティを設定したり、リスナーを削除したりできます。 構成ファイルは、次の例のように書式設定する必要があります。  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 クラス<xref:System.Diagnostics.XmlWriterTraceListener>は、基本<xref:System.Diagnostics.TraceListener.Filter%2A>クラス<xref:System.Diagnostics.TraceListener>からプロパティを継承します。  プロパティ<xref:System.Diagnostics.TraceListener.Filter%2A>を使用すると、リスナーでトレース出力フィルター処理のレベルをさらに向上させることができます。  フィルターが存在する場合、 `Trace`トレースリスナーのメソッドは、フィルターの<xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>メソッドを呼び出して、トレースを出力するかどうかを決定します。  
  
> [!NOTE]
>  使用中または使用できないファイルへの書き込みが試行された場合、ファイル名の先頭に GUID が自動的に付けられます。  
  
> [!NOTE]
>  リスナーメソッドは<xref:System.Diagnostics.Debug>、、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>の各クラスのメソッドによって呼び出されることを意図しています。  リスナーメソッドは、アプリケーションコードから直接呼び出すためのものではありません。 リスナーは、主に<xref:System.Diagnostics.TraceSource>クラスでの使用を目的としています。 <xref:System.Diagnostics.XmlWriterTraceListener> <xref:System.Diagnostics.Trace> <xref:System.Diagnostics.Trace> <xref:System.Diagnostics.Debug>メソッドとメソッドは、クラスおよび<xref:System.Diagnostics.Debug>クラスによって呼び出すことができます。また、との値を指定しない XML 要素には既定値が用意されています。 <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A>  
  
 次の表では、XML 出力の要素と属性について説明します。  
  
|要素|属性|Output|メモ|  
|-------------|----------------|------------|-----------|  
|`CallStack`|None|プロパティにフラグが<xref:System.Diagnostics.TraceOptions.Callstack>あるかどうかによって異なります。 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>|> や < などの特殊文字は、エスケープシーケンスに置き換えられます。 次に示すエスケープ文字変換テーブルを参照してください。|  
|`Computer`|None|常に存在します。|<xref:System.Environment.MachineName%2A> プロパティの値。|  
|`Correlation`|`ActivityID`|常に存在する|指定しない場合、既定値は空の GUID になります。|  
||`RelatedActivityID`|トレースメソッドの呼び出しで`relatedActivityId`パラメーターが存在するかどうかによって異なります。|<xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> メソッドの `relatedActivityId` パラメーター。|  
|`DataItem`|None|メソッドのパラメーター`data`によって異なります。 <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>|この要素には、要素の配列または1つの要素を含めることができるため、 `DataItem`値は`TraceData`要素の下のノードのセットとして書き込まれます。<br /><br /> データ出力では、 `ToString`渡されたデータオブジェクトのメソッドを使用します。|  
|`EventID`|None|常に存在します。|パラメーターの入力`id`()。|  
|`Execution`|`ProcessName`|常に存在します。|<xref:System.Diagnostics.TraceEventCache>から。|  
||`ProcessID`|常に存在します。|<xref:System.Diagnostics.TraceEventCache>から。 Windows 98 および windows Me オペレーティングシステムでは、 `ProcessID`が2147483647よりも大きい場合は、負の数を表す正の値であり、正しいプロセス識別子を取得するために変換する必要があります。|  
||`ThreadID`|常に存在します。|<xref:System.Diagnostics.TraceEventCache>から。|  
|`Level`|None|常に存在します。|パラメーターの入力 (の`eventType`数値)。 255より大きいパラメーター値は、255として出力されます。|  
|`LogicalOperationStack`|None|プロパティにフラグが<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>あるかどうかによって異なります。 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>|複数の論理演算が存在する可能性があるため、値は要素`LogicalOperation`の`LogicalOperationStack`下にノードとして書き込まれます。|  
|`Message`|None|トレースメソッド呼び出しにメッセージが存在するかどうかによって異なります。|書式設定の引数が指定されている場合、この要素は書式設定されたメッセージになります。|  
|`Source`|`Name`|常に存在します。|パラメーターの入力。|  
|`SubType`|`Name`|常に存在します。|パラメーターの入力。|  
|`TimeCreated`|`SystemTime`|常に存在します。|に存在しない場合<xref:System.Diagnostics.TraceEventCache>、既定値は現在の時刻です。|  
|`TimeStamp`|None|プロパティにフラグが<xref:System.Diagnostics.TraceOptions.Timestamp>あるかどうかによって異なります。 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>|<xref:System.Diagnostics.TraceEventCache>から。|  
|`Type`|None|常に存在します。|値は常に3です。|  
  
 次の表は、XML 出力でエスケープされる文字を示しています。 `DataItem`要素を除き、すべての要素と属性でエスケープが行われます。これは、 <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>メソッド<xref:System.Xml.XPath.XPathNavigator>の`data`パラメーターに渡されたオブジェクトがオブジェクトである場合、エスケープされません。 データオブジェクトにが使用されている場合、メソッドが呼び出され、ルートノード全体がエスケープ解除されたデータとしてトレースされます。<xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> <xref:System.Xml.XPath.XPathNavigator>  
  
|エスケープ文字|[値]|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#XA|  
  
   
  
## Examples  
 <xref:System.Diagnostics.XmlWriterTraceListener>クラスを使用して、エスケープされたデータとエスケープされていないデータの両方をファイルログに書き込む方法を次のコード例に示します。  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">トレース リスナーが書き込むストリームを表す <see cref="T:System.IO.Stream" />。</param>
        <summary>指定されたストリームをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Diagnostics.TraceListener.Name%2A>が空の文字列 ("") に初期化されています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">トレース リスナーからの出力を受信する <see cref="T:System.IO.TextWriter" />。</param>
        <summary>指定されたライターをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Diagnostics.TraceListener.Name%2A>が空の文字列 ("") に初期化されています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">書き込み先のファイルの名前。</param>
        <summary>指定されたファイルをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、エンコーディングを使用<xref:System.IO.StreamWriter>して<xref:System.Text.Encoding.UTF8%2A> 、指定されたパスの指定されたファイルのクラスの新しいインスタンスを初期化します。 ファイルが存在する場合は、に追加されます。 ファイルが存在しない場合は、新しいファイルが作成されます。  
  
> [!NOTE]
>  例外が発生する可能性を減らすために、出力を無効にする可能性のある文字は "?" 文字に置き換えられます。  
  
 プロパティ<xref:System.Diagnostics.TraceListener.Name%2A>が空の文字列 ("") に初期化されています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">トレース リスナーが書き込むストリームを表す <see cref="T:System.IO.Stream" />。</param>
        <param name="name">新規インスタンスの名前。</param>
        <summary>指定されたストリームをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、 <xref:System.Diagnostics.TraceListener.Name%2A>パラメーターが`name` `null`の`name`場合、プロパティをパラメーター値または空の文字列 ("") に初期化します。 名前をコレクションの<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>インデックスとして使用すると、リスナーのプロパティをプログラムで変更できます。 たとえば、次のコードは、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> <xref:System.Diagnostics.TraceListener.Name%2A>プロパティが "xmllistener" <xref:System.Diagnostics.XmlWriterTraceListener>であるのインスタンスのプロパティを設定します。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">トレース リスナーからの出力を受信する <see cref="T:System.IO.TextWriter" />。</param>
        <param name="name">新規インスタンスの名前。</param>
        <summary>指定されたライターをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、 <xref:System.Diagnostics.TraceListener.Name%2A>パラメーターが`name` `null`の`name`場合、プロパティをパラメーター値または空の文字列 ("") に初期化します。 名前をコレクションの<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>インデックスとして使用すると、リスナーのプロパティをプログラムで変更できます。 たとえば、次のコードは、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> <xref:System.Diagnostics.TraceListener.Name%2A>プロパティが "xmllistener" <xref:System.Diagnostics.XmlWriterTraceListener>であるのインスタンスのプロパティを設定します。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">書き込み先のファイルの名前。</param>
        <param name="name">新規インスタンスの名前。</param>
        <summary>指定されたファイルをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.XmlWriterTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、エンコーディングを使用<xref:System.IO.StreamWriter>して<xref:System.Text.Encoding.UTF8%2A> 、指定されたパスの指定されたファイルのクラスの新しいインスタンスを初期化します。 ファイルが存在する場合は、に追加されます。 ファイルが存在しない場合は、新しいファイルが作成されます。  
  
> [!NOTE]
>  例外が発生する可能性を減らすために、出力を無効にする可能性のある文字は "?" 文字に置き換えられます。  
  
 パラメーター <xref:System.Diagnostics.TraceListener.Name%2A>がの場合は、 `name`プロパティがパラメーター値に設定されている`name`か、空の文字列`null`("") に設定されています。 名前をコレクションの<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>インデックスとして使用すると、リスナーのプロパティをプログラムで変更できます。 たとえば、次のコードは、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> <xref:System.Diagnostics.TraceListener.Name%2A>プロパティが "xmllistener" <xref:System.Diagnostics.XmlWriterTraceListener>であるのインスタンスのプロパティを設定します。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> は <see langword="null" />です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このリスナーの <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> を終了して、トレース出力またはデバッグ出力を受信しないようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込むエラー メッセージ。</param>
        <param name="detailMessage">エラー メッセージに追加する詳細なエラー メッセージ。</param>
        <summary>エラー メッセージおよびエラー メッセージの詳細を含むトレース情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の動作では、アプリケーションがユーザーインターフェイスモードで実行されているときにメッセージと詳細メッセージがメッセージボックスに表示さ<xref:System.Diagnostics.TraceListener>れ、 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>コレクション内のインスタンスに表示されます。 既定では、コレクションにはの<xref:System.Diagnostics.DefaultTraceListener>インスタンスが含まれています。 この動作は、コレクションのを<xref:System.Diagnostics.TraceListener>追加または削除することによってカスタマイズできます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>トレース データを出力ファイルまたはストリームに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか 1 つ。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">出力するデータ オブジェクト。</param>
        <summary>トレース情報 (データ オブジェクトおよびイベント情報) をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 、、、および`id`の各パラメーターは、トレースのヘッダーとフッターで使用されます。 `eventType` `source` `eventCache` パラメーターは書き込み前に符号なし整数に変換されるため、 `id`負の値は大きな正の整数として書き込まれます。 `id` パラメーターは、 `TraceData`要素内の`DataItem`ノードとして書き込まれます。 `data` データオブジェクトのメソッドは、オブジェクトを文字列に変換するために使用されます。 `ToString`  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーションコードによって直接呼び出すためのものではありません。  これは<xref:System.Diagnostics.Debug>、、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>クラスのメソッドによって呼び出され、トレースデータを書き込みます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか 1 つ。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">出力するデータ オブジェクトの配列。</param>
        <summary>トレース情報、データ オブジェクト、およびイベント情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 、、、および`id`の各パラメーターは、トレースのヘッダーとフッターで使用されます。 `eventType` `source` `eventCache` パラメーターは書き込み前に符号なし整数に変換されるため、 `id`負の値は大きな正の整数として書き込まれます。 `id` `data`パラメーター配列内のオブジェクトは、 `TraceData`要素内`DataItem`のノードとして書き込まれます。 各データオブジェクトのメソッドは、オブジェクトを文字列に変換するために使用されます。`ToString`  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーションコードによって直接呼び出すためのものではありません。  これは<xref:System.Diagnostics.Debug>、、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>クラスのメソッドによって呼び出され、トレースデータを書き込みます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>イベント トレース情報を出力ファイルまたはストリームに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか 1 つ。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="message">書き込むメッセージ。</param>
        <summary>トレース情報、メッセージ、およびイベント情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 、、、および`id`の各パラメーターは、トレースのヘッダーとフッターで使用されます。 `eventType` `source` `eventCache` パラメーターは書き込み前に符号なし整数に変換されるため、 `id`負の値は大きな正の整数として書き込まれます。 `id` パラメーターは`Message`要素として書き込まれます。 `message`  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーションコードによって直接呼び出すためのものではありません。  これは<xref:System.Diagnostics.Debug>、、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>クラスのメソッドによって呼び出され、トレースデータを書き込みます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="format">0 個以上の書式項目を格納している書式指定文字列。<paramref name="args" /> 配列内のオブジェクトに対応します。</param>
        <param name="args">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</param>
        <summary>トレース情報、書式設定されたメッセージ、およびイベント情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 、、、および`id`の各パラメーターは、トレースのヘッダーとフッターで使用されます。 `eventType` `source` `eventCache` パラメーターは書き込み前に符号なし整数に変換されるため、 `id`負の値は大きな正の整数として書き込まれます。 `id` `args` `args` `Message`メソッドが呼び出され、 `format`文字列と配列をパラメーターとして渡して、オブジェクト配列を要素として書式設定します。 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーションコードによって直接呼び出すためのものではありません。  これは<xref:System.Diagnostics.Debug>、、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>クラスのメソッドによって呼び出され、トレースデータを書き込みます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="message">書き込むトレース メッセージ。</param>
        <param name="relatedActivityId">関連するアクティビティを識別する <see cref="T:System.Guid" /> 構造体。</param>
        <summary>関連するアクティビティの ID を含むトレース情報、メッセージ、およびイベント情報をファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>は、関連するトレースの関連付けに使用されます。 、、、および`relatedActivityId`の各パラメーターは、トレースのヘッダーとフッターで使用されます。 `id` `source` `eventCache` パラメーターは書き込み前に符号なし整数に変換されるため、 `id`負の値は大きな正の整数として書き込まれます。 `id` パラメーターは`Message`要素として書き込まれます。 `message` このメソッドは、ヘッダーに表示`relatedActivityId`される "B" 書式設定された文字列に値を変換するために呼び出されます。 <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> フッター `SubTypeName`の要素は、トレースイベントの種類を<xref:System.Diagnostics.TraceEventType.Transfer>として識別します。  
  
> [!IMPORTANT]
>  メソッド<xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>は、アプリケーションコードから呼び出すためのものではありません。  これは、 <xref:System.Diagnostics.TraceSource.TraceTransfer%2A>メソッドのトレース情報を<xref:System.Diagnostics.TraceSource>出力するために、オブジェクトによって呼び出されることを意図しています。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込むメッセージ。</param>
        <summary>逐語的メッセージを追加のコンテキスト情報なしでファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>メソッドを使用して、ログ出力にコンテキスト情報を含めます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込むメッセージ。</param>
        <summary>逐語的メッセージを追加のコンテキスト情報なしでファイルまたはストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>メソッドを使用して、ログ出力にコンテキスト情報を含めます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すことができる。 <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
  </Members>
</Type>
