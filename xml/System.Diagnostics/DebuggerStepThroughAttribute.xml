<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DebuggerStepThroughAttribute.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5797f42ba66b23193fe7ef0e3f678d87ce9afba00.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">797f42ba66b23193fe7ef0e3f678d87ce9afba00</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>Instructs the debugger to step through the code instead of stepping into the code.</source>
          
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>This class cannot be inherited.</source>
          
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>This attribute is provided for use by source code debuggers; the common language runtime is not affected by it.</source>
          <target state="translated">この属性で使用するを指定ソース コードのデバッガーです。これによって、共通言語ランタイムは影響はありません。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>For example, the Visual Studio debugger does not stop in a method that is marked with this attribute even if a breakpoint is set in the method.</source>
          <target state="translated">たとえば、Visual Studio デバッガーは、メソッドにブレークポイントが設定されている場合でも、この属性でマークされているメソッドでは停止されません。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerStepThroughAttribute&gt;</ph> attribute affects the <bpt id="p1">[</bpt>Just My Code<ept id="p1">](http://msdn.microsoft.com/library/0f0df097-bbaf-46ad-9ad1-ef5f40435079)</ept> (JMC) feature of Visual Studio in the following ways:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.DebuggerStepThroughAttribute&gt;</ph>属性の影響、<bpt id="p1">[</bpt>マイ コードのみ<ept id="p1">](http://msdn.microsoft.com/library/0f0df097-bbaf-46ad-9ad1-ef5f40435079)</ept>次のように Visual Studio の機能を (のみ JMC)。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>If JMC is enabled, the Visual Studio debugger will not stop at a breakpoint in a method marked with the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerStepThroughAttribute&gt;</ph> attribute.</source>
          <target state="translated">JMC を有効にすると、Visual Studio デバッガーは停止されませんとマークされたメソッドのブレークポイントで、<ph id="ph1">&lt;xref:System.Diagnostics.DebuggerStepThroughAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>If JMC is disabled, the debugger stops at the breakpoint even if the method is marked with the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerStepThroughAttribute&gt;</ph>.</source>
          <target state="translated">メソッドが付いている場合でも、デバッガーがブレークポイントで停止 JMC を無効にした場合、<ph id="ph1">&lt;xref:System.Diagnostics.DebuggerStepThroughAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>The following code shows how the Visual Basic compiler uses the attribute.</source>
          <target state="translated">次のコードでは、Visual Basic コンパイラで属性を使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>This attribute avoids having to step into compiler-provided code and only steps into developer-provided code.</source>
          <target state="translated">この属性はなくなりますコンパイラに用意されているコードと開発者のコードにステップ インのみにステップ インします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>For example, if you are stepping through code by using the <bpt id="p1">**</bpt>F11<ept id="p1">**</ept> (Step Into) key, the attribute will cause the step to behave like an <bpt id="p2">**</bpt>F10<ept id="p2">**</ept> (Step Over) key for compiler-provided code.</source>
          <target state="translated">たとえば、次のコードを使用して、ステップ実行、 <bpt id="p1">**</bpt>F11<ept id="p1">**</ept>キー (ステップ イン) は、属性のように動作する手順が発生、 <bpt id="p2">**</bpt>F10<ept id="p2">**</ept> (ステップ オーバー) のキーをコンパイラに用意されているコード。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>The method won’t be stepped into, but it will be executed.</source>
          <target state="translated">メソッドにステップ インではありませんが、アクティビティが実行されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerStepThroughAttribute">
          <source>For more information about using attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](~/docs/standard/attributes/index.md)</ept>.</source>
          <target state="translated">属性の使用方法の詳細については、次を参照してください。<bpt id="p1">[</bpt>属性<ept id="p1">](~/docs/standard/attributes/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DebuggerStepThroughAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.DebuggerStepThroughAttribute" /&gt;</ph> class.</source>
          
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>