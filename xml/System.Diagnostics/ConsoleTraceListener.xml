<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3fb887e69cbce0df3845c3eef1e79b919a3ee40b" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37664964" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>トレース出力またはデバッグ出力を、標準出力と標準エラー出力ストリームのいずれかに転送します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Diagnostics.ConsoleTraceListener>トレースおよびデバッグ コンソールにメッセージを記述するクラス。 初期化するには、<xref:System.Diagnostics.ConsoleTraceListener>にトレース メッセージを記述するオブジェクト、<xref:System.Console.Out%2A?displayProperty=nameWithType>ストリームまたは、<xref:System.Console.Error%2A?displayProperty=nameWithType>ストリーム。  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> インターフェイスです。 型の使用が完了したら、直接的または間接的にそれを破棄する必要があります。 型の直接 dispose を呼び出してその<xref:System.IDisposable.Dispose%2A>メソッド、`try` / `catch`ブロックします。 直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(で C# の場合) または`Using`(Visual Basic) でします。 詳細については、"を使用して、オブジェクトを実装する IDisposable"のセクションを参照してください、<xref:System.IDisposable>インターフェイスに関するトピック。  
  
 トレースし、デバッグ出力を有効にすると、<xref:System.Diagnostics.ConsoleTraceListener>メッセージが書き込まれる、指定した<xref:System.Console?displayProperty=nameWithType>でメッセージが書き込まれる方法に似ていますが、ストリーム、<xref:System.Console.Write%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッド。 コンソール アプリケーションで、<xref:System.Console?displayProperty=nameWithType>出力およびエラー ストリームでは、既存のコンソール ウィンドウにメッセージを書き込む、または書き込むストリームをリダイレクトすることができます、<xref:System.IO.TextWriter?displayProperty=nameWithType>インスタンス。  
  
> [!NOTE]
>  コンソールが存在しない場合、Windows ベースのアプリケーションでは、ように、コンソールに書き込まれたメッセージは表示されません。  
  
 追加、<xref:System.Diagnostics.ConsoleTraceListener>オブジェクトを適切な<xref:System.Diagnostics.Trace.Listeners%2A>によって書き込まれたメッセージの場合、コレクション<xref:System.Diagnostics.Trace>、 <xref:System.Diagnostics.TraceSource>、または<xref:System.Diagnostics.Debug>コンソールに書き込まれます。 さらに、直接にコンソールを使用して、メッセージを書き込むことができます、<xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType>または<xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType>メソッド。  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug>と<xref:System.Diagnostics.Trace>クラスが同じ共有<xref:System.Diagnostics.TraceListenerCollection>コレクションをそれぞれを使用してアクセス`Listeners`プロパティ。 追加する場合、<xref:System.Diagnostics.ConsoleTraceListener>他のクラスが自動的に、同一のリスナーを使用してこれらのクラスのいずれかを使用して、コレクション オブジェクトします。  
  
 ほとんどのコンパイラでは、トレースを有効にして、デバッグ出力を条件付きコンパイル フラグ。 トレース出力またはデバッグ、によって書き込まれたメッセージを無効にした場合、<xref:System.Diagnostics.Debug?displayProperty=nameWithType>と<xref:System.Diagnostics.Trace?displayProperty=nameWithType>クラスが実質的に無視されます。 トレースを有効にして、出力をデバッグするための構文はコンパイラ固有です。c# または Visual Basic 以外のコンパイラを使用する場合は、コンパイラは、ドキュメントを参照してください。  
  
-   C# でのデバッグを有効にするには追加、 **/d:DEBUG**するを追加したり、コードをコンパイルするときに、コンパイラのコマンドラインにフラグ **#define デバッグ**ファイルの先頭にします。 Visual basic では、追加、 **/d:DEBUG = True**フラグをコンパイラ コマンドライン。  
  
-   C# でのトレースを有効にするには追加、 **/d:TRACE**フラグをコードのコンパイルまたは追加するときに、コンパイラのコマンドライン **# のトレースを define**ファイルの先頭にします。 Visual basic では、追加、 **/d:TRACE = True**フラグをコンパイラ コマンドライン。  
  
 追加することができます、<xref:System.Diagnostics.ConsoleTraceListener>オブジェクトを<xref:System.Diagnostics.Trace.Listeners%2A>、コード内のコレクションに追加できる、<xref:System.Diagnostics.ConsoleTraceListener>オブジェクトを<xref:System.Diagnostics.Trace.Listeners%2A>を通じて、アプリケーション構成ファイルのコレクション。 追加、<xref:System.Diagnostics.ConsoleTraceListener>固有のコード セクションまたは実行パスのメッセージを記述するコード内のオブジェクト。 追加、<xref:System.Diagnostics.ConsoleTraceListener>アプリケーションを実行しながら、すべてのトレースとデバッグに出力するため、アプリケーション構成ファイル内のオブジェクトがコンソールにメッセージします。  
  
 でトレースを記述およびコードの特定のセクションは、コンソールにメッセージをデバッグするには初期化、<xref:System.Diagnostics.ConsoleTraceListener>し、オブジェクトに追加、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション。 使用してメッセージを含むコードのセクションをインストルメント化、<xref:System.Diagnostics.Trace>または<xref:System.Diagnostics.Debug>クラス。 コード セクションの末尾には、削除、<xref:System.Diagnostics.ConsoleTraceListener>オブジェクトから、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション、および呼び出し、<xref:System.Diagnostics.TextWriterTraceListener.Close%2A>メソッドを<xref:System.Diagnostics.ConsoleTraceListener>します。  
  
 すべてのトレースを直接デバッグするメッセージをコンソール アプリケーションを実行しながら、追加、<xref:System.Diagnostics.ConsoleTraceListener>オブジェクトがアプリケーション構成ファイルにします。 アプリケーションの名前に対応する構成ファイルまたは app.config ファイルを編集、[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]プロジェクト。 このファイルでの要素を挿入、<xref:System.Diagnostics.ConsoleTraceListener>します。  
  
 次の例では、追加、<xref:System.Diagnostics.ConsoleTraceListener>という名前のオブジェクト`configConsoleListener`を<xref:System.Diagnostics.Trace.Listeners%2A>コレクション。  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 アプリケーション構成ファイルでトレース リスナーを追加する方法について詳しくは、次を参照してください。 [&lt;リスナー&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)します。  
  
   
  
## Examples  
 次のコード例では、2 つのパブリック メソッドをクラスで構成されるコンソール アプリケーションを実装します。  
  
 `Main`メソッドがコマンドライン引数を検査し、トレース出力が標準エラー ストリームまたは標準出力ストリームに送られるかどうかを決定します。 `Main` 作成し、初期化、<xref:System.Diagnostics.ConsoleTraceListener>指定したオブジェクト<xref:System.Console>出力ストリーム、および、このオブジェクトをトレース リスナー コレクションに追加します。 呼び出して、`WriteEnvironmentInfoToTrace`メソッドで、実行中の環境と、トレース出力をトレース リスナーの構成に関する詳細情報を書き込みます。  
  
 環境およびトレースの構成の詳細がで指定されたコンソール出力ストリームに書き込まれるサンプル アプリケーションを実行すると、<xref:System.Diagnostics.ConsoleTraceListener>オブジェクト。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Diagnostics.ConsoleTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>標準出力ストリームへのトレース出力を指定して、<see cref="T:System.Diagnostics.ConsoleTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの初期化、<xref:System.Diagnostics.ConsoleTraceListener>へのメッセージを記述するオブジェクト、<xref:System.Console.Out%2A?displayProperty=nameWithType>ストリーム。 その<xref:System.Diagnostics.TraceListener.Name%2A>プロパティは空の文字列に初期化されます ("")。  
  
   
  
## Examples  
 次のコード例を初期化します、<xref:System.Diagnostics.ConsoleTraceListener>指定したオブジェクト<xref:System.Console>ストリームを出力およびトレース リスナー コレクションに追加します。 このコード例が示されている例の一部、<xref:System.Diagnostics.ConsoleTraceListener>クラス。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">トレース出力およびデバッグ出力を標準エラー ストリームに書き込む場合は <see langword="true" />。標準出力ストリームに書き込む場合は <see langword="false" />。</param>
        <summary>トレース出力を標準出力ストリームまたは標準エラー ストリームに書き込むためのオプションを指定して、<see cref="T:System.Diagnostics.ConsoleTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの初期化、<xref:System.Diagnostics.ConsoleTraceListener>いずれかにメッセージを書き込むオブジェクト、<xref:System.Console.Out%2A?displayProperty=nameWithType>または<xref:System.Console.Error%2A?displayProperty=nameWithType>ストリーム。 その<xref:System.Diagnostics.TraceListener.Name%2A>プロパティは空の文字列に初期化されます ("")。  
  
   
  
## Examples  
 次のコード例を初期化します、<xref:System.Diagnostics.ConsoleTraceListener>指定したオブジェクト<xref:System.Console>ストリームを出力およびトレース リスナー コレクションに追加します。 このコード例が示されている例の一部、<xref:System.Diagnostics.ConsoleTraceListener>クラス。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このトレース リスナーに指定されたストリームへの出力を閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この指定されたストリーム<xref:System.Diagnostics.ConsoleTraceListener>インスタンス (いずれか、<xref:System.Console.Out%2A?displayProperty=nameWithType>ストリームまたは<xref:System.Console.Error%2A?displayProperty=nameWithType>ストリーム) が終了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>