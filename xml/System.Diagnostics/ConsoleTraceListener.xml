<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConsoleTraceListener.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb7226e860522f09c9efe6d62180c32e0bd6eb702da5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26e860522f09c9efe6d62180c32e0bd6eb702da5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Directs tracing or debugging output to either the standard output or the standard error stream.</source>
          <target state="translated">トレース出力またはデバッグ出力を、標準出力と標準エラー出力ストリームのいずれかに転送します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> class to write trace and debugging messages to the console.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>クラスをトレースおよびデバッグのコンソールにメッセージを記述します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>You can initialize a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write trace messages to the <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> stream or to the <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> stream.</source>
          <target state="translated">初期化するには、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>へのトレース メッセージを記述するオブジェクト、<ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph>ストリームまたは、<ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph>ストリーム。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source><ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> インターフェイスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a<ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドで、<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスに関するトピック。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>When trace and debugging output is enabled, the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> messages are written to the specified <ph id="ph2">&lt;xref:System.Console?displayProperty=nameWithType&gt;</ph> stream, which is similar to the way messages are written with the <ph id="ph3">&lt;xref:System.Console.Write%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph4">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">ときにトレースし、デバッグ出力を有効にすると、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>メッセージが書き込まれるを指定した<ph id="ph2">&lt;xref:System.Console?displayProperty=nameWithType&gt;</ph>でメッセージが書き込まれる方法に似ていますが、ストリーム、<ph id="ph3">&lt;xref:System.Console.Write%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph4">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In a console application, the <ph id="ph1">&lt;xref:System.Console?displayProperty=nameWithType&gt;</ph> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <ph id="ph2">&lt;xref:System.IO.TextWriter?displayProperty=nameWithType&gt;</ph> instance.</source>
          <target state="translated">コンソール アプリケーションで、<ph id="ph1">&lt;xref:System.Console?displayProperty=nameWithType&gt;</ph>出力とエラー ストリームは、既存のコンソール ウィンドウにメッセージを書き込むまたはに書き込むストリームをリダイレクトすることができます、<ph id="ph2">&lt;xref:System.IO.TextWriter?displayProperty=nameWithType&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.</source>
          <target state="translated">コンソールが存在しない場合、Windows ベースのアプリケーションと同様に、コンソールに書き込まれたメッセージは表示されません。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Add a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the appropriate <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection if you want messages written through <ph id="ph3">&lt;xref:System.Diagnostics.Trace&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.TraceSource&gt;</ph>, or <ph id="ph5">&lt;xref:System.Diagnostics.Debug&gt;</ph> to be written to the console.</source>
          <target state="translated">追加、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>を適切なオブジェクト<ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>メッセージを記述する場合は、コレクション<ph id="ph3">&lt;xref:System.Diagnostics.Trace&gt;</ph>、 <ph id="ph4">&lt;xref:System.Diagnostics.TraceSource&gt;</ph>、または<ph id="ph5">&lt;xref:System.Diagnostics.Debug&gt;</ph>コンソールに書き込まれます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In addition, you can write messages directly to the console using the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">さらを使用してコンソールに直接メッセージを記述することができます、<ph id="ph1">&lt;xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph> classes share the same <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> collection, accessed through their respective <ph id="ph4">`Listeners`</ph> properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph>と<ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph>クラスが同じ<ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>それぞれを介してアクセスされるコレクション<ph id="ph4">`Listeners`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>If you add a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the collection using one of these classes, the other class automatically uses the same listener.</source>
          <target state="translated">追加する場合、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>コレクションにオブジェクトをこれらのクラスのいずれかを使用して、その他のクラスが自動的に同じリスナーを使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Most compilers enable trace and debug output through conditional compilation flags.</source>
          <target state="translated">ほとんどのコンパイラでは、トレースを有効にし、条件付きコンパイル フラグを通じて出力をデバッグします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>If you do not enable tracing or debugging, the messages written through the <ph id="ph1">&lt;xref:System.Diagnostics.Debug?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Trace?displayProperty=nameWithType&gt;</ph> classes are effectively ignored.</source>
          <target state="translated">トレース出力またはデバッグから書き込まれたメッセージを有効にしていない場合、<ph id="ph1">&lt;xref:System.Diagnostics.Debug?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Diagnostics.Trace?displayProperty=nameWithType&gt;</ph>クラスが実質的に無視されます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</source>
          <target state="translated">トレースを有効にして、デバッグ出力する構文はコンパイラ固有です。以外は、c# または Visual Basic コンパイラを使用する場合は、コンパイラのドキュメントを参照してください。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To enable debugging in C#, add the <bpt id="p1">**</bpt>/d:DEBUG<ept id="p1">**</ept>flag to the compiler command line when you compile your code, or you can add <bpt id="p2">**</bpt>#define DEBUG<ept id="p2">**</ept> to the top of your file.</source>
          <target state="translated">C# でのデバッグを有効にするには追加、 <bpt id="p1">**</bpt>/d:DEBUG<ept id="p1">**</ept>するを追加したり、コードをコンパイルするときに、コンパイラのコマンドラインにフラグ<bpt id="p2">**</bpt>#define デバッグ<ept id="p2">**</ept>ファイルの先頭にします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In Visual Basic, add the <bpt id="p1">**</bpt>/d:DEBUG=True<ept id="p1">**</ept> flag to the compiler command line.</source>
          <target state="translated">Visual basic では、追加、 <bpt id="p1">**</bpt>/d:DEBUG = True<ept id="p1">**</ept>フラグをコンパイラ コマンドライン。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To enable tracing in C#, add the <bpt id="p1">**</bpt>/d:TRACE<ept id="p1">**</ept> flag to the compiler command line when you compile your code, or add <bpt id="p2">**</bpt>#define TRACE<ept id="p2">**</ept> to the top of your file.</source>
          <target state="translated">C# でのトレースを有効にするには追加、 <bpt id="p1">**</bpt>/d:TRACE<ept id="p1">**</ept>フラグを追加したり、コードをコンパイルすると、コンパイラのコマンドライン<bpt id="p2">**</bpt>#define トレース<ept id="p2">**</ept>ファイルの先頭にします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In Visual Basic, add the <bpt id="p1">**</bpt>/d:TRACE=True<ept id="p1">**</ept> flag to the compiler command line.</source>
          <target state="translated">Visual basic では、追加、 <bpt id="p1">**</bpt>/d:TRACE = True<ept id="p1">**</ept>フラグをコンパイラ コマンドライン。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>You can add a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection in your code, or you can add a <ph id="ph3">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the <ph id="ph4">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection through the application configuration file.</source>
          <target state="translated">追加することができます、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>オブジェクトを<ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>、コード内のコレクションに追加できる、<ph id="ph3">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>オブジェクトを<ph id="ph4">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>を通じて、アプリケーション構成ファイルのコレクション。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Add the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object in your code to write messages for a specific code section or execution path.</source>
          <target state="translated">追加、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>特定のコード セクションまたは実行のパスに対してメッセージを書き込むため、コード内のオブジェクト。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Add the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object in your application configuration file to direct all trace and debug messages to the console while the application executes.</source>
          <target state="translated">追加、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>アプリケーションの実行中に、コンソールにメッセージのすべてのトレースとデバッグを送信するため、アプリケーション構成ファイル内のオブジェクト。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To write trace and debug messages to the console for a specific section of code, initialize a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object and add it to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection.</source>
          <target state="translated">トレースを作成およびコードの特定のセクションのコンソールにメッセージをデバッグ、初期化、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>オブジェクトを追加して、<ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>コレクション。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Instrument the section of code that contains messages using the <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph> classes.</source>
          <target state="translated">使用してメッセージを含むコードのセクションをインストルメントし、<ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph>または<ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>At the end of the code section, remove the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object from the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection, and call the <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> method on the <ph id="ph4">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>.</source>
          <target state="translated">コードのセクションの最後に、削除、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>オブジェクトから、<ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>コレクション、および呼び出し、<ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph>メソッドを<ph id="ph4">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To direct all trace and debug messages to the console while the application executes, add a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the application configuration file.</source>
          <target state="translated">すべてのトレースを直接デバッグするメッセージをコンソール アプリケーションを実行しながら、追加、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>オブジェクトをアプリケーション構成ファイルにします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Edit the configuration file that corresponds to the name of your application, or the app.config file in a <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> project.</source>
          <target state="translated">アプリケーションの名前に対応する構成ファイルまたは app.config ファイルを編集、<ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>プロジェクト。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In this file, insert an element for a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>.</source>
          <target state="translated">このファイル内の要素を挿入、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The following example adds a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object named <ph id="ph2">`configConsoleListener`</ph> to the <ph id="ph3">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection.</source>
          <target state="translated">次の例では追加、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>という名前のオブジェクト<ph id="ph2">`configConsoleListener`</ph>を<ph id="ph3">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>コレクション。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>For details about adding trace listeners in the application configuration file, see <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>listeners<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)</ept>.</source>
          <target state="translated">アプリケーション構成ファイルにトレース リスナーを追加する方法の詳細については、「 <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>リスナー<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The following code example implements a console application consisting of a class with two public methods.</source>
          <target state="translated">次のコード例では、次の 2 つのパブリック メソッドをクラスで構成されるコンソール アプリケーションを実装します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The <ph id="ph1">`Main`</ph> method examines the command-line arguments and determines if trace output should be directed to the standard error stream or the standard output stream.</source>
          <target state="translated"><ph id="ph1">`Main`</ph>メソッドは、コマンドライン引数を検査し、トレース出力を標準エラー ストリームまたは標準出力ストリームに送られますを決定します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source><ph id="ph1">`Main`</ph> creates and initializes a <ph id="ph2">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object for the specified <ph id="ph3">&lt;xref:System.Console&gt;</ph> output stream, and adds this object to the trace listener collection.</source>
          <target state="translated"><ph id="ph1">`Main`</ph> 作成して初期化、 <ph id="ph2">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 、指定されたオブジェクト<ph id="ph3">&lt;xref:System.Console&gt;</ph>出力ストリーム、およびトレース リスナー コレクションにこのオブジェクトを追加します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>It then calls the <ph id="ph1">`WriteEnvironmentInfoToTrace`</ph> method, which writes details about the executing environment and the trace listener configuration to the trace output.</source>
          <target state="translated">呼び出して、<ph id="ph1">`WriteEnvironmentInfoToTrace`</ph>メソッドで、実行中の環境と、トレース出力をトレース リスナーの構成に関する詳細情報を書き込みます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>When the example application runs, the environment and trace configuration details are written to the specified console output stream through the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object.</source>
          <target state="translated">環境およびトレースの構成の詳細がで指定されたコンソール出力ストリームに書き込まれますサンプル アプリケーションを実行すると、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> class with trace output written to the standard output stream.</source>
          <target state="translated">標準出力ストリームへのトレース出力を指定して、<ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write messages to the <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> stream.</source>
          <target state="translated">このコンス トラクター、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>にメッセージを書き込むためのオブジェクト、<ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph>ストリーム。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>Its <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property is initialized to an empty string ("").</source>
          <target state="translated">その<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph>プロパティは、空の文字列に初期化 ("") です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>The following code example initializes a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object for the specified <ph id="ph2">&lt;xref:System.Console&gt;</ph> output stream and adds it to the trace listener collection.</source>
          <target state="translated">次のコード例の初期化、 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 、指定されたオブジェクト<ph id="ph2">&lt;xref:System.Console&gt;</ph>ストリームを出力し、トレース リスナー コレクションに追加します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to write tracing and debugging output to the standard error stream; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to write tracing and debugging output to the standard output stream.</source>
          <target state="translated">トレース出力およびデバッグ出力を標準エラー ストリームに書き込む場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。標準出力ストリームに書き込む場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> class with an option to write trace output to the standard output stream or the standard error stream.</source>
          <target state="translated">トレース出力を標準出力ストリームまたは標準エラー ストリームに書き込むためのオプションを指定して、<ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write messages to either the <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> or the <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> stream.</source>
          <target state="translated">このコンス トラクター、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>いずれかにメッセージを書き込むオブジェクト、<ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph>ストリーム。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>Its <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property is initialized to an empty string ("").</source>
          <target state="translated">その<ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph>プロパティは、空の文字列に初期化 ("") です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>The following code example initializes a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object for the specified <ph id="ph2">&lt;xref:System.Console&gt;</ph> output stream and adds it to the trace listener collection.</source>
          <target state="translated">次のコード例の初期化、 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 、指定されたオブジェクト<ph id="ph2">&lt;xref:System.Console&gt;</ph>ストリームを出力し、トレース リスナー コレクションに追加します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ConsoleTraceListener.Close">
          <source>Closes the output to the stream specified for this trace listener.</source>
          <target state="translated">このトレース リスナーに指定されたストリームへの出力を閉じます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.Close">
          <source>The stream specified for this <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> instance (either the <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> stream or the <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> stream) is closed.</source>
          <target state="translated">この指定されたストリーム<ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>インスタンス (どちらか、<ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph>ストリームまたは<ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph>ストリーム) が閉じられます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>