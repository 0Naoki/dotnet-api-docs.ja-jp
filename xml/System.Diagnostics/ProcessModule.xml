<Type Name="ProcessModule" FullName="System.Diagnostics.ProcessModule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09fb1d9f95b356fe12d7c491ac4221757bf7db5a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36342264" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProcessModule : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProcessModule extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ProcessModule" />
  <TypeSignature Language="VB.NET" Value="Public Class ProcessModule&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessModule : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ProcessModule = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e971f-101">特定のプロセスに読み込まれた .dll ファイルまたは実行可能ファイル (.exe) を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e971f-101">Represents a.dll or .exe file that is loaded into a particular process.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e971f-102">モジュールは、実行可能ファイルまたはダイナミック リンク ライブラリ (DLL) です。</span><span class="sxs-lookup"><span data-stu-id="e971f-102">A module is an executable file or a dynamic link library (DLL).</span></span> <span data-ttu-id="e971f-103">各プロセスは、1 つまたは複数のモジュールで構成されます。</span><span class="sxs-lookup"><span data-stu-id="e971f-103">Each process consists of one or more modules.</span></span> <span data-ttu-id="e971f-104">このクラスを使用するには、モジュールに関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="e971f-104">You can use this class to get information about the module.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e971f-105">この型は、<xref:System.IDisposable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="e971f-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="e971f-106">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e971f-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="e971f-107">型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="e971f-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="e971f-108">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="e971f-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="e971f-109">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="e971f-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e971f-110">次のコード サンプルを使用する方法を示します、<xref:System.Diagnostics.ProcessModule>クラスを取得および Notepad.exe アプリケーションによって使用されているすべてのモジュールに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="e971f-110">The following code sample demonstrates how to use the <xref:System.Diagnostics.ProcessModule> class to get and display information about all the modules that are used by the Notepad.exe application.</span></span>  
  
 [!code-cpp[ProcessModule#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule/CPP/processmodule.cpp#1)]
 [!code-csharp[ProcessModule#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule/CS/processmodule.cs#1)]
 [!code-vb[ProcessModule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule/VB/processmodule.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <span data-ttu-id="e971f-111">直前の呼び出し元に対する完全な信頼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e971f-111">for full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="e971f-112">このクラスは、部分的に信頼されたコードでは使用できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e971f-112">This class cannot be used by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="e971f-113">継承時の完全な信頼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e971f-113">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="e971f-114">部分信頼コードでこのクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e971f-114">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
  </Docs>
  <Members>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public IntPtr BaseAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr BaseAddress { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : nativeint" Usage="System.Diagnostics.ProcessModule.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The base memory address of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e971f-115">モジュールが読み込まれたメモリ アドレスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-115">Gets the memory address where the module was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e971f-116">モジュールの読み込みアドレス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-116">The load address of the module.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e971f-117">次のコード例では、Notepad.exe アプリケーションの新しいプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e971f-117">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="e971f-118">反復処理、<xref:System.Diagnostics.ProcessModuleCollection>を取得するクラス、<xref:System.Diagnostics.ProcessModule>コレクション内の各モジュールのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e971f-118">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="e971f-119"><xref:System.Diagnostics.ProcessModule.ModuleName%2A>と<xref:System.Diagnostics.ProcessModule.BaseAddress%2A>各モジュールが読み込まれたモジュール名と、メモリ アドレスの表示に使用されるプロパティです。</span><span class="sxs-lookup"><span data-stu-id="e971f-119">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and  <xref:System.Diagnostics.ProcessModule.BaseAddress%2A> properties are used to display the module name and the memory address where each module was loaded.</span></span>  
  
 [!code-cpp[ProcessModule_BaseAddress#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_BaseAddress/CPP/processmodule_baseaddress.cpp#1)]
 [!code-csharp[ProcessModule_BaseAddress#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_BaseAddress/CS/processmodule_baseaddress.cs#1)]
 [!code-vb[ProcessModule_BaseAddress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_BaseAddress/VB/processmodule_baseaddress.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntryPointAddress">
      <MemberSignature Language="C#" Value="public IntPtr EntryPointAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int EntryPointAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.EntryPointAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntryPointAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr EntryPointAddress { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryPointAddress : nativeint" Usage="System.Diagnostics.ProcessModule.EntryPointAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The base memory address of the entry point of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e971f-120">システムがモジュールを読み込んで実行するときに実行される関数のメモリ アドレスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-120">Gets the memory address for the function that runs when the system loads and runs the module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e971f-121">モジュールのエントリ ポイント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-121">The entry point of the module.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e971f-122">モジュールのエントリ ポイントは、プロセスの起動、スレッドが開始、プロセスのシャット ダウン、およびスレッドのシャット ダウン中に呼び出される関数の場所です。</span><span class="sxs-lookup"><span data-stu-id="e971f-122">The module's entry point is the location of the function that is called during process startup, thread startup, process shutdown, and thread shutdown.</span></span> <span data-ttu-id="e971f-123">エントリ ポイントは、DllMain 関数のアドレスではありませんが、ほとんどの目的で近くになります。</span><span class="sxs-lookup"><span data-stu-id="e971f-123">While the entry point is not the address of the DllMain function, it should be close enough for most purposes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e971f-124">Windows が、アセンブリを読み込む方法の変更のため<xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A>は常に 0 を返す[!INCLUDE[win8](~/includes/win8-md.md)]または[!INCLUDE[win81](~/includes/win81-md.md)]必要がありますに依存しないこれらのプラットフォームとします。</span><span class="sxs-lookup"><span data-stu-id="e971f-124">Due to changes in the way that Windows loads assemblies, <xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A> will always return 0 on [!INCLUDE[win8](~/includes/win8-md.md)] or [!INCLUDE[win81](~/includes/win81-md.md)] and should not be relied on for those platforms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e971f-125">次のコード例では、Notepad.exe アプリケーションの新しいプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e971f-125">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="e971f-126">反復処理、<xref:System.Diagnostics.ProcessModuleCollection>を取得するクラス、<xref:System.Diagnostics.ProcessModule>コレクション内の各モジュールのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e971f-126">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="e971f-127"><xref:System.Diagnostics.ProcessModule.ModuleName%2A>と<xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A>プロパティを使用して、名前と各モジュールのエントリ ポイントのアドレスを表示します。</span><span class="sxs-lookup"><span data-stu-id="e971f-127">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and <xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A> properties are used to display the name and the entry point address for each module.</span></span>  
  
 [!code-cpp[ProcessModule_EntryPoint#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_EntryPoint/CPP/processmodule_entrypoint.cpp#1)]
 [!code-csharp[ProcessModule_EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_EntryPoint/CS/processmodule_entrypoint.cs#1)]
 [!code-vb[ProcessModule_EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_EntryPoint/VB/processmodule_entrypoint.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Diagnostics.ProcessModule.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The file name of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e971f-128">モジュールの完全パスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-128">Gets the full path to the module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e971f-129">モジュールの位置を定義する絶対パス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-129">The fully qualified path that defines the location of the module.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e971f-130">ファイル名が許可される文字の最大数よりも長い場合は、ファイル名は切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e971f-130">If the file name is longer than the maximum number of characters allowed, the file name is truncated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e971f-131">次のコード例では、Notepad.exe アプリケーションの新しいプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e971f-131">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="e971f-132">反復処理、<xref:System.Diagnostics.ProcessModuleCollection>を取得するクラス、<xref:System.Diagnostics.ProcessModule>コレクション内の各モジュールのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e971f-132">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="e971f-133"><xref:System.Diagnostics.ProcessModule.ModuleName%2A>と<xref:System.Diagnostics.ProcessModule.FileName%2A>プロパティを使用して、モジュール名と各モジュールの完全なパス情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="e971f-133">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and <xref:System.Diagnostics.ProcessModule.FileName%2A> properties are used to display the module name and the full path information for each module.</span></span>  
  
 [!code-cpp[ProcessModule_FileName#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_FileName/CPP/processmodule_filename.cpp#1)]
 [!code-csharp[ProcessModule_FileName#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_FileName/CS/processmodule_filename.cs#1)]
 [!code-vb[ProcessModule_FileName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_FileName/VB/processmodule_filename.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileVersionInfo">
      <MemberSignature Language="C#" Value="public System.Diagnostics.FileVersionInfo FileVersionInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.FileVersionInfo FileVersionInfo" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.FileVersionInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileVersionInfo As FileVersionInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::FileVersionInfo ^ FileVersionInfo { System::Diagnostics::FileVersionInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileVersionInfo : System.Diagnostics.FileVersionInfo" Usage="System.Diagnostics.ProcessModule.FileVersionInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.FileVersionInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e971f-134">モジュールのバージョン情報を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-134">Gets version information about the module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e971f-135">モジュールのバージョン情報を保持している <see cref="T:System.Diagnostics.FileVersionInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-135">A <see cref="T:System.Diagnostics.FileVersionInfo" /> that contains the module's version information.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e971f-136">次のコード例では、Notepad.exe アプリケーションの新しいプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e971f-136">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="e971f-137">反復処理、<xref:System.Diagnostics.ProcessModuleCollection>を取得するクラス、<xref:System.Diagnostics.ProcessModule>コレクション内の各モジュールのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e971f-137">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="e971f-138"><xref:System.Diagnostics.ProcessModule.ModuleName%2A>と<xref:System.Diagnostics.ProcessModule.FileVersionInfo%2A>プロパティを使用して、モジュール名と各モジュールのファイル バージョン情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="e971f-138">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and <xref:System.Diagnostics.ProcessModule.FileVersionInfo%2A> properties are used to display the module name and the file version information for each module.</span></span>  
  
 [!code-cpp[ProcessModule_FileVersionInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_FileVersionInfo/CPP/processmodule_fileversioninfo.cpp#1)]
 [!code-csharp[ProcessModule_FileVersionInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_FileVersionInfo/CS/processmodule_fileversioninfo.cs#1)]
 [!code-vb[ProcessModule_FileVersionInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_FileVersionInfo/VB/processmodule_fileversioninfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleMemorySize">
      <MemberSignature Language="C#" Value="public int ModuleMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ModuleMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.ModuleMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ModuleMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ModuleMemorySize : int" Usage="System.Diagnostics.ProcessModule.ModuleMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The memory needed by this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e971f-139">モジュールの読み込みに必要なメモリ容量を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-139">Gets the amount of memory that is required to load the module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e971f-140">モジュールが占有するメモリのサイズ。単位はバイトです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-140">The size, in bytes, of the memory that the module occupies.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e971f-141"><xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> 追加メモリの割り当てが実行されている; が作成するには含まれませんモジュール ファイルには、静的なコードとデータのサイズのみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e971f-141"><xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> does not include any additional memory allocations that the module makes once it is running; it includes only the size of the static code and data in the module file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e971f-142">次のコード例では、Notepad.exe アプリケーションの新しいプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e971f-142">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="e971f-143">反復処理、<xref:System.Diagnostics.ProcessModuleCollection>を取得するクラス、<xref:System.Diagnostics.ProcessModule>コレクション内の各モジュールのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e971f-143">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="e971f-144"><xref:System.Diagnostics.ProcessModule.ModuleName%2A>と<xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A>プロパティを使用して、モジュール名と各モジュールに必要なメモリの量を表示します。</span><span class="sxs-lookup"><span data-stu-id="e971f-144">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and <xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> properties are used to display the module name and the amount of memory needed for each module.</span></span>  
  
 [!code-cpp[ProcessModule_ModuleMemorySize#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/CPP/processmodule_modulememorysize.cpp#1)]
 [!code-csharp[ProcessModule_ModuleMemorySize#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/CS/processmodule_modulememorysize.cs#1)]
 [!code-vb[ProcessModule_ModuleMemorySize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/VB/processmodule_modulememorysize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleName">
      <MemberSignature Language="C#" Value="public string ModuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ModuleName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.ModuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ModuleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ModuleName : string" Usage="System.Diagnostics.ProcessModule.ModuleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e971f-145">プロセス モジュールの名前を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-145">Gets the name of the process module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e971f-146">モジュールの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-146">The name of the module.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e971f-147">名前が許可される文字の最大数よりも長い場合は切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="e971f-147">If the name is longer than the maximum number of characters allowed, it is truncated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e971f-148">次のコード例では、Notepad.exe アプリケーションの新しいプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e971f-148">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="e971f-149">反復処理、<xref:System.Diagnostics.ProcessModuleCollection>を取得するクラス、<xref:System.Diagnostics.ProcessModule>コレクション内の各モジュールのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e971f-149">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="e971f-150"><xref:System.Diagnostics.ProcessModule.ModuleName%2A>プロパティの使用に各モジュールの名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="e971f-150">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> property is used to display the name of each module.</span></span>  
  
 [!code-cpp[ProcessModule_ModuleName#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ModuleName/CPP/processmodule_modulename.cpp#1)]
 [!code-csharp[ProcessModule_ModuleName#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ModuleName/CS/processmodule_modulename.cs#1)]
 [!code-vb[ProcessModule_ModuleName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ModuleName/VB/processmodule_modulename.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ProcessModule.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="processModule.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e971f-151">モジュールの名前を文字列に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-151">Converts the name of the module to a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e971f-152">
            <see cref="P:System.Diagnostics.ProcessModule.ModuleName" /> プロパティの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e971f-152">The value of the <see cref="P:System.Diagnostics.ProcessModule.ModuleName" /> property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e971f-153">次のコード例では、Notepad.exe アプリケーションの新しいプロセスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e971f-153">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="e971f-154">反復処理、<xref:System.Diagnostics.ProcessModuleCollection>を取得するクラス、<xref:System.Diagnostics.ProcessModule>コレクション内の各モジュールのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e971f-154">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="e971f-155"><xref:System.Diagnostics.ProcessModule.ToString%2A>メソッドの使用に各モジュールの名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="e971f-155">The <xref:System.Diagnostics.ProcessModule.ToString%2A> method is used to display the name for each module.</span></span>  
  
 [!code-cpp[ProcessModule_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ToString/CPP/processmodule_tostring.cpp#1)]
 [!code-csharp[ProcessModule_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ToString/CS/processmodule_tostring.cs#1)]
 [!code-vb[ProcessModule_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ToString/VB/processmodule_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>