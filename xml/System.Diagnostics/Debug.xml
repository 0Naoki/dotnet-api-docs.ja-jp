<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="331d1e20f17d7065dd117481b3458a017c3f98b4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Debug" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Debug" />
  <TypeSignature Language="VB.NET" Value="Public Class Debug" />
  <TypeSignature Language="C++ CLI" Value="public ref class Debug abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="78ef7-101">コードのデバッグを支援するメソッドとプロパティのセットを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="78ef7-101">Provides a set of methods and properties that help debug your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-102">内のメソッドを使用する場合、<xref:System.Diagnostics.Debug>デバッグ情報を印刷するクラス、アサーションで、ロジックを確認することができます、コードより堅牢な出荷製品のパフォーマンスとコードのサイズの影響を与えずにします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-102">If you use methods in the <xref:System.Diagnostics.Debug> class to print debugging information and check your logic with assertions, you can make your code more robust without impacting the performance and code size of your shipping product.</span></span>  
  
 <span data-ttu-id="78ef7-103">このクラスを表示するメソッドを提供する、 <xref:System.Diagnostics.Debug.Assert%2A>  ダイアログ ボックスが常に失敗するアサーションを出力するとします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-103">This class provides methods to display an <xref:System.Diagnostics.Debug.Assert%2A> dialog box, and to emit an assertion that will always fail.</span></span> <span data-ttu-id="78ef7-104">このクラスは、次の種類の書き込みメソッドを提供します。 <xref:System.Diagnostics.Debug.Write%2A>、 <xref:System.Diagnostics.Debug.WriteLine%2A>、<xref:System.Diagnostics.Debug.WriteIf%2A>と<xref:System.Diagnostics.Debug.WriteLineIf%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-104">This class provides write methods in the following variations: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> and <xref:System.Diagnostics.Debug.WriteLineIf%2A>.</span></span>  
  
 <span data-ttu-id="78ef7-105"><xref:System.Diagnostics.BooleanSwitch>と<xref:System.Diagnostics.TraceSwitch>クラスがトレース出力を動的に制御する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-105">The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output.</span></span> <span data-ttu-id="78ef7-106">アプリケーションを再コンパイルしなくても、これらのスイッチの値を変更できます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-106">You can modify the values of these switches without recompiling your application.</span></span> <span data-ttu-id="78ef7-107">構成ファイルを使用して、スイッチを設定する方法については、次を参照してください。、<xref:System.Diagnostics.Switch>クラスおよび[トレース スイッチ](~/docs/framework/debug-trace-profile/trace-switches.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-107">For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [Trace Switches](~/docs/framework/debug-trace-profile/trace-switches.md) topic.</span></span>  
  
 <span data-ttu-id="78ef7-108">トレース出力のターゲットを追加してカスタマイズできます<xref:System.Diagnostics.TraceListener>インスタンスをまたはからインスタンスを削除するには、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-108">You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="78ef7-109"><xref:System.Diagnostics.Debug.Listeners%2A>コレクションの両方によって共有は、<xref:System.Diagnostics.Debug>と<xref:System.Diagnostics.Trace>クラスです。 どちらかのクラスをトレース リスナーをリスナーに追加の両方を追加します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-109">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span> <span data-ttu-id="78ef7-110">既定では、<xref:System.Diagnostics.DefaultTraceListener>クラスがトレース出力を出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-110">By default, the <xref:System.Diagnostics.DefaultTraceListener> class emits trace output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78ef7-111">トレース リスナーを追加する、<xref:System.Diagnostics.Debug.Listeners%2A>トレース リスナーによって使用されるリソースが利用できない場合、コレクションは、トレース中にスローされる例外を発生ことができます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-111">Adding a trace listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available.</span></span> <span data-ttu-id="78ef7-112">条件とスローされる例外は、トレース リスナーに依存し、このトピックの内容を列挙できません。</span><span class="sxs-lookup"><span data-stu-id="78ef7-112">The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic.</span></span> <span data-ttu-id="78ef7-113">呼び出しを配置することができます、<xref:System.Diagnostics.Debug>メソッド`try` / `catch`を検出し、トレース リスナーから任意の例外処理ブロック。</span><span class="sxs-lookup"><span data-stu-id="78ef7-113">It may be useful to place calls to the <xref:System.Diagnostics.Debug> methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.</span></span>  
  
 <span data-ttu-id="78ef7-114">インデントを使用するレベルを変更することができます、<xref:System.Diagnostics.Debug.Indent%2A>メソッドまたは<xref:System.Diagnostics.Debug.IndentLevel%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-114">You can modify the level of indentation using the <xref:System.Diagnostics.Debug.Indent%2A> method or the <xref:System.Diagnostics.Debug.IndentLevel%2A> property.</span></span> <span data-ttu-id="78ef7-115">インデント幅を変更するには、使用、<xref:System.Diagnostics.Debug.IndentSize%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-115">To modify the indent spacing, use the <xref:System.Diagnostics.Debug.IndentSize%2A> property.</span></span> <span data-ttu-id="78ef7-116">自動的に設定して各書き込みの後に出力バッファーをフラッシュするかどうかを指定することができます、<xref:System.Diagnostics.Debug.AutoFlush%2A>プロパティを`true`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-116">You can specify whether to automatically flush the output buffer after each write by setting the <xref:System.Diagnostics.Debug.AutoFlush%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="78ef7-117">設定する、<xref:System.Diagnostics.Debug.AutoFlush%2A>と<xref:System.Diagnostics.Debug.IndentSize%2A>の<xref:System.Diagnostics.Debug>アプリケーションの名前に対応する構成ファイルを編集することができます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-117">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="78ef7-118">構成ファイルは、次の例で示すようにフォーマットされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="78ef7-118">The configuration file should be formatted as shown in the following example.</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <span data-ttu-id="78ef7-119"><xref:System.Diagnostics.ConditionalAttribute>のメソッドに属性が適用される<xref:System.Diagnostics.Debug>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-119">The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of <xref:System.Diagnostics.Debug>.</span></span> <span data-ttu-id="78ef7-120">サポートされるコンパイラ<xref:System.Diagnostics.ConditionalAttribute>"DEBUG"は、条件付きコンパイル シンボルとして定義されていない限り、これらのメソッドへの呼び出しを無視します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-120">Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless "DEBUG" is defined as a conditional compilation symbol.</span></span> <span data-ttu-id="78ef7-121">コンパイラのドキュメントを参照してくださいかどうか<xref:System.Diagnostics.ConditionalAttribute>はサポートされていると条件付きコンパイル シンボルを定義するための構文。</span><span class="sxs-lookup"><span data-stu-id="78ef7-121">Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="78ef7-122">Visual Studio c# および Visual Basic プロジェクトで、既定で、デバッグ ビルドの"DEBUG"条件付きコンパイル シンボルが定義されているし、"TRACE"シンボルを定義してリリース ビルドのどちらの場合。</span><span class="sxs-lookup"><span data-stu-id="78ef7-122">In Visual Studio C# and Visual Basic projects, by default, the "DEBUG" conditional compilation symbol is defined for debug builds, and the "TRACE" symbol is defined for both debug and release builds.</span></span> <span data-ttu-id="78ef7-123">この動作を無効にする方法については、Visual Studio のマニュアルを参照してください。</span><span class="sxs-lookup"><span data-stu-id="78ef7-123">For information about how to disable this behavior, see the Visual Studio documentation.</span></span> <span data-ttu-id="78ef7-124">Visual C で条件付きのデバッグについては、次を参照してください。 [Debug クラス (C + + CLI)](/cpp/dotnet/debug-class-cpp-cli)です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-124">For information about conditional debugging in Visual C++, see [Debug Class (C++/CLI)](/cpp/dotnet/debug-class-cpp-cli).</span></span>
  
 <span data-ttu-id="78ef7-125">C# の場合は、"DEBUG"条件付きコンパイル シンボルを定義するには、追加、 `/d:DEBUG` 、コマンドラインを使用してコードをコンパイルするときに、コンパイラのコマンドラインにオプションまたは追加`#define DEBUG`ファイルの先頭にします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-125">To define the "DEBUG" conditional compilation symbol in C#, add the `/d:DEBUG` option to the compiler command line when you compile your code using a command line, or add `#define DEBUG` to the top of your file.</span></span> <span data-ttu-id="78ef7-126">Visual basic では、追加、`/d:DEBUG=True`コンパイラ コマンドラインにオプションまたは追加`#Const DEBUG=True`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-126">In Visual Basic, add the `/d:DEBUG=True` option to the compiler command line or add `#Const DEBUG=True` to the file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-127">次の例では<xref:System.Diagnostics.Debug>開始され、プログラムの実行の終了を示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-127">The following example uses <xref:System.Diagnostics.Debug> to indicate the beginning and end of a program's execution.</span></span> <span data-ttu-id="78ef7-128">また、例では<xref:System.Diagnostics.Debug.Indent%2A>と<xref:System.Diagnostics.Debug.Unindent%2A>トレース出力を区別するためにします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-128">The example also uses <xref:System.Diagnostics.Debug.Indent%2A> and <xref:System.Diagnostics.Debug.Unindent%2A> to distinguish the tracing output.</span></span>  
  
 [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]
 [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="78ef7-129">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="78ef7-129">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-130">条件をチェックします。条件が <see langword="false" /> の場合、メッセージを出力し、コール スタックを示すメッセージ ボックスを表示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-130">Checks for a condition; if the condition is <see langword="false" />, outputs messages and displays a message box that shows the call stack.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-131">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-131">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-132">条件が <see langword="true" /> の場合、エラー メッセージは送信されず、メッセージ ボックスは表示されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-132">If the condition is <see langword="true" />, a failure message is not sent and the message box is not displayed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-133">条件をチェックします。条件が <see langword="false" /> の場合、呼び出し履歴を見せるメッセージ ボックスを表示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-133">Checks for a condition; if the condition is <see langword="false" />, displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-134">既定では、<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法は、デバッグ ビルドでのみ機能します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-134">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="78ef7-135">使用して、<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>リリースでのアサーションを実行する場合、メソッドが作成されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-135">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="78ef7-136">詳細については、次を参照してください。[マネージ コードのアサーション](/visualstudio/debugger/assertions-in-managed-code)です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-136">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="78ef7-137">`Assert`メソッドは使用できません[!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)]アプリ。</span><span class="sxs-lookup"><span data-stu-id="78ef7-137">The `Assert` methods are not available for [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps.</span></span>  
  
 <span data-ttu-id="78ef7-138">通常、<xref:System.Diagnostics.Debug.Assert%28System.Boolean%29>プログラム開発中に論理エラーを識別するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-138">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="78ef7-139"><xref:System.Diagnostics.Debug.Assert%2A> 条件を評価します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-139"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="78ef7-140">結果は場合`false`、エラー メッセージを送信、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-140">If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="78ef7-141">追加することでこの動作をカスタマイズすることができます、<xref:System.Diagnostics.TraceListener>から、1 つを削除するか、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-141">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="78ef7-142">アプリケーションがユーザー インターフェイス モードで実行されているときは、ファイル番号と行番号を含む呼び出し履歴を示すメッセージ ボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-142">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="78ef7-143">メッセージ ボックスには、3 つのボタンが含まれています。:**中止**、**再試行**、と**無視**です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-143">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="78ef7-144">クリックすると、**中止**ボタンがアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-144">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="78ef7-145">クリックすると**再試行**か、アプリケーションが、デバッガーで実行されているされていない場合、デバッガーを開くには、デバッガーでコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-145">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="78ef7-146">クリックすると**無視**コード内の次の命令を続行します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-146">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]<span data-ttu-id="78ef7-147"> アプリではモーダル ダイアログ ボックスをサポートしないため、同じユーザー インターフェイス モードと非ユーザー インターフェイス モードで動作します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-147"> apps do not support modal dialog boxes, so they behave the same in user interface mode and non-user interface mode.</span></span> <span data-ttu-id="78ef7-148">デバッグ モードでは、アクティブなトレース リスナーにメッセージを記述またはリリース モードでメッセージが書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="78ef7-148">The message is written to the active trace listeners in debugging mode, or no message is written in release mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78ef7-149">メッセージ ボックスの表示の存在に依存、<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-149">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="78ef7-150">場合、<xref:System.Diagnostics.DefaultTraceListener>に含まれていない、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション、メッセージ ボックスは表示されません。</span><span class="sxs-lookup"><span data-stu-id="78ef7-150">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="78ef7-151"><xref:System.Diagnostics.DefaultTraceListener>して削除できます、 [&lt;オフ&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;削除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)、または呼び出すことによって、 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> メソッド<xref:System.Diagnostics.Trace.Listeners%2A>プロパティ (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="78ef7-151">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="78ef7-152">動作を変更することができます、<xref:System.Diagnostics.DefaultTraceListener>アプリケーションの名前に対応する構成ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-152">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="78ef7-153">このファイルでを有効にして assert メッセージ ボックスを無効にしたり設定、<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-153">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="78ef7-154">構成ファイルに次のようにフォーマットする必要があります。</span><span class="sxs-lookup"><span data-stu-id="78ef7-154">The configuration file should be formatted as follows:</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-155">次の例は、配列のインデックスを作成は、インデックスの値を設定するいくつかのアクションを実行しを呼び出して<xref:System.Diagnostics.Debug.Assert%2A>インデックス値が有効であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-155">The following example creates an index for an array, performs some action to set the value of the index, and then calls <xref:System.Diagnostics.Debug.Assert%2A> to confirm that the index value is valid.</span></span> <span data-ttu-id="78ef7-156">有効でない場合<xref:System.Diagnostics.Debug.Assert%2A>呼び出し履歴に出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-156">If it is not valid, <xref:System.Diagnostics.Debug.Assert%2A> outputs the call stack.</span></span>  
  
 [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-157">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-157">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-158">条件が <see langword="true" /> の場合、指定したメッセージは送信されず、メッセージ ボックスは表示されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-158">If the condition is <see langword="true" />, the specified message is not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="78ef7-159">
            <see cref="P:System.Diagnostics.Trace.Listeners" /> コレクションに送信するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-159">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-160">条件をチェックします。条件が <see langword="false" /> の場合、指定したメッセージを出力し、コール スタックを示すメッセージ ボックスを表示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-160">Checks for a condition; if the condition is <see langword="false" />, outputs a specified message and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-161">既定では、<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法は、デバッグ ビルドでのみ機能します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-161">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="78ef7-162">使用して、<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>リリースでのアサーションを実行する場合、メソッドが作成されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-162">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="78ef7-163">詳細については、次を参照してください。[マネージ コードのアサーション](/visualstudio/debugger/assertions-in-managed-code)です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-163">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="78ef7-164">通常、<xref:System.Diagnostics.Debug.Assert%2A>プログラム開発中に論理エラーを識別するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-164">Typically, the <xref:System.Diagnostics.Debug.Assert%2A> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="78ef7-165"><xref:System.Diagnostics.Debug.Assert%2A> 条件を評価します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-165"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="78ef7-166">結果は場合`false`、指定された診断メッセージを送信、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-166">If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="78ef7-167">追加することでこの動作をカスタマイズすることができます、<xref:System.Diagnostics.TraceListener>から、1 つを削除するか、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-167">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="78ef7-168">アプリケーションがユーザー インターフェイス モードで実行されているときは、ファイル番号と行番号を含む呼び出し履歴を示すメッセージ ボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-168">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="78ef7-169">メッセージ ボックスには、3 つのボタンが含まれています。:**中止**、**再試行**、と**無視**です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-169">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="78ef7-170">クリックすると、**中止**ボタンがアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-170">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="78ef7-171">クリックすると**再試行**か、アプリケーションが、デバッガーで実行されているされていない場合、デバッガーを開くには、デバッガーでコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-171">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="78ef7-172">クリックすると**無視**コード内の次の命令を続行します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-172">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78ef7-173">メッセージ ボックスの表示の存在に依存、<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-173">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="78ef7-174">場合、<xref:System.Diagnostics.DefaultTraceListener>に含まれていない、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション、メッセージ ボックスは表示されません。</span><span class="sxs-lookup"><span data-stu-id="78ef7-174">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="78ef7-175"><xref:System.Diagnostics.DefaultTraceListener>して削除できます、 [&lt;オフ&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;削除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)、または呼び出すことによって、 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> メソッド<xref:System.Diagnostics.Trace.Listeners%2A>プロパティ (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="78ef7-175">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="78ef7-176">動作を変更することができます、<xref:System.Diagnostics.DefaultTraceListener>アプリケーションの名前に対応する構成ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-176">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="78ef7-177">このファイルでを有効にして assert メッセージ ボックスを無効にしたり設定、<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-177">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="78ef7-178">構成ファイルに次のようにフォーマットする必要があります。</span><span class="sxs-lookup"><span data-stu-id="78ef7-178">The configuration file should be formatted as follows:</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-179">次の例のチェックするかどうか、`type`パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-179">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="78ef7-180">場合`type`は`null`、<xref:System.Diagnostics.Trace.Assert%2A>メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-180">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.</span></span>  
  
 [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-181">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-181">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-182">条件が <see langword="true" /> の場合、指定したメッセージは送信されず、メッセージ ボックスは表示されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-182">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="78ef7-183">
            <see cref="P:System.Diagnostics.Trace.Listeners" /> コレクションに送信するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-183">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <param name="detailMessage">
          <span data-ttu-id="78ef7-184">
            <see cref="P:System.Diagnostics.Trace.Listeners" /> コレクションに送信する詳細なメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-184">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-185">条件をチェックします。条件が <see langword="false" /> の場合、指定した 2 つのメッセージを出力し、コール スタックを示すメッセージ ボックスを表示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-185">Checks for a condition; if the condition is <see langword="false" />, outputs two specified messages and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-186">既定では、<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法は、デバッグ ビルドでのみ機能します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-186">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="78ef7-187">使用して、<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>リリースでのアサーションを実行する場合、メソッドが作成されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-187">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="78ef7-188">詳細については、次を参照してください。[マネージ コードのアサーション](/visualstudio/debugger/assertions-in-managed-code)です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-188">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="78ef7-189">通常、<xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29>プログラム開発中に論理エラーを識別するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-189">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="78ef7-190"><xref:System.Diagnostics.Debug.Assert%2A> 条件を評価します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-190"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="78ef7-191">結果は場合`false`、指定された診断メッセージと詳細なメッセージを送信、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-191">If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="78ef7-192">追加することでこの動作をカスタマイズすることができます、<xref:System.Diagnostics.TraceListener>から、1 つを削除するか、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-192">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="78ef7-193">アプリケーションがユーザー インターフェイス モードで実行されているときは、ファイル番号と行番号を含む呼び出し履歴を示すメッセージ ボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-193">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="78ef7-194">メッセージ ボックスには、3 つのボタンが含まれています。:**中止**、**再試行**、と**無視**です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-194">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="78ef7-195">クリックすると、**中止**ボタンがアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-195">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="78ef7-196">クリックすると**再試行**か、アプリケーションが、デバッガーで実行されているされていない場合、デバッガーを開くには、デバッガーでコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-196">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="78ef7-197">クリックすると**無視**コード内の次の命令を続行します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-197">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78ef7-198">メッセージ ボックスの表示の存在に依存、<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-198">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="78ef7-199">場合、<xref:System.Diagnostics.DefaultTraceListener>に含まれていない、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション、メッセージ ボックスは表示されません。</span><span class="sxs-lookup"><span data-stu-id="78ef7-199">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="78ef7-200"><xref:System.Diagnostics.DefaultTraceListener>して削除できます、 [&lt;オフ&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;削除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)、または呼び出すことによって、 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> メソッド<xref:System.Diagnostics.Trace.Listeners%2A>プロパティ (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="78ef7-200">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="78ef7-201">動作を変更することができます、<xref:System.Diagnostics.DefaultTraceListener>アプリケーションの名前に対応する構成ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-201">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="78ef7-202">このファイルでを有効にして assert メッセージ ボックスを無効にしたり設定、<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-202">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="78ef7-203">構成ファイルに次のようにフォーマットする必要があります。</span><span class="sxs-lookup"><span data-stu-id="78ef7-203">The configuration file should be formatted as follows:</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-204">次の例のチェックするかどうか、`type`パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-204">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="78ef7-205">場合`type`は`null`、 <xref:System.Diagnostics.Trace.Assert%2A> 2 つのメッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-205">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs two messages.</span></span>  
  
 [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessageFormat, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-206">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-206">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-207">条件が <see langword="true" /> の場合、指定したメッセージは送信されず、メッセージ ボックスは表示されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-207">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="78ef7-208">
            <see cref="P:System.Diagnostics.Trace.Listeners" /> コレクションに送信するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-208">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <param name="detailMessageFormat">
          <span data-ttu-id="78ef7-209">
            <see cref="P:System.Diagnostics.Trace.Listeners" /> コレクションに送信する複合書式指定文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-209">The composite format string to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
          <span data-ttu-id="78ef7-210">このメッセージのテキストには、<c>args</c> 配列内のオブジェクトに対応する 0 個以上の書式項目を含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-210">This message contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="78ef7-211">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-211">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-212">条件をチェックし、その条件が <see langword="false" /> の場合は、2 つのメッセージ (単純なメッセージと書式設定されたメッセージ) を出力し、呼び出し履歴を表示するメッセージ ボックスを表示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-212">Checks for a condition; if the condition is <see langword="false" />, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-213">このメソッドを使用して、.NET Framework オブジェクトの値をテキスト形式に変換し、その表現を文字列に埋め込むのです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-213">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="78ef7-214">結果の文字列に送信される、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-214">The resulting string is sent to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="78ef7-215">既定では、<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法は、デバッグ ビルドでのみ機能します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-215">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="78ef7-216">使用して、<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>リリースでのアサーションを実行する場合、メソッドが作成されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-216">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="78ef7-217">詳細については、次を参照してください。[マネージ コードのアサーション](/visualstudio/debugger/assertions-in-managed-code)です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-217">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="78ef7-218">通常、<xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29>プログラム開発中に論理エラーを識別するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-218">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="78ef7-219"><xref:System.Diagnostics.Debug.Assert%2A> 条件を評価します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-219"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="78ef7-220">場合は、結果は`false`、<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドが呼び出されると、`detailMessageFormat`文字列と`args`配列パラメーターとして渡されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-220">If the result is `false`, The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method is called and the `detailMessageFormat` string and `args` array are passed in as parameters.</span></span> <span data-ttu-id="78ef7-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 指定したテキスト メッセージと、書式設定されたテキスト メッセージを送信、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> then sends the specified text message and the formatted text message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="78ef7-222">追加することでこの動作をカスタマイズすることができます、<xref:System.Diagnostics.TraceListener>から、1 つを削除するか、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-222">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="78ef7-223">アプリケーションがユーザー インターフェイス モードで実行されているときは、ファイル番号と行番号を含む呼び出し履歴を示すメッセージ ボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-223">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="78ef7-224">メッセージ ボックスには、3 つのボタンが含まれています。:**中止**、**再試行**、と**無視**です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-224">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="78ef7-225">クリックすると、**中止**ボタンがアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-225">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="78ef7-226">クリックすると**再試行**か、アプリケーションが、デバッガーで実行されているされていない場合、デバッガーを開くには、デバッガーでコードを送信します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-226">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="78ef7-227">クリックすると**無視**コード内の次の命令を続行します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-227">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78ef7-228">メッセージ ボックスの表示がの存在に依存する、<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-228">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="78ef7-229">場合、<xref:System.Diagnostics.DefaultTraceListener>に含まれていない、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション、メッセージ ボックスは表示されません。</span><span class="sxs-lookup"><span data-stu-id="78ef7-229">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="78ef7-230"><xref:System.Diagnostics.DefaultTraceListener>して削除できます、 [&lt;オフ&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;削除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)、または呼び出すことによって、 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> メソッド<xref:System.Diagnostics.Trace.Listeners%2A>プロパティ (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="78ef7-230">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="78ef7-231">動作を変更することができます、<xref:System.Diagnostics.DefaultTraceListener>アプリケーションの名前に対応する構成ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-231">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="78ef7-232">このファイルでを有効にして assert メッセージ ボックスを無効にしたり設定、<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-232">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="78ef7-233">構成ファイルに次のようにフォーマットする必要があります。</span><span class="sxs-lookup"><span data-stu-id="78ef7-233">The configuration file should be formatted as follows:</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-234">書き込むたびに、<see cref="M:System.Diagnostics.Debug.Flush" /> で <see cref="P:System.Diagnostics.Debug.Listeners" /> を呼び出すかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-234">Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78ef7-235">すべての書き込み後に <see cref="P:System.Diagnostics.Debug.Listeners" /> で <see cref="M:System.Diagnostics.Debug.Flush" /> を呼び出す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-235">
              <see langword="true" /> if <see cref="M:System.Diagnostics.Debug.Flush" /> is called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-236">既定値は、`false` です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-236">The default is `false`.</span></span>  
  
 <span data-ttu-id="78ef7-237">明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません<xref:System.Diagnostics.Debug.Flush%2A>または<xref:System.Diagnostics.Debug.Close%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-237">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="78ef7-238">設定<xref:System.Diagnostics.Debug.AutoFlush%2A>に`true`に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-238">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="78ef7-239">これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。</span><span class="sxs-lookup"><span data-stu-id="78ef7-239">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="78ef7-240">このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-240">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="78ef7-241">設定する、<xref:System.Diagnostics.Debug.AutoFlush%2A>と<xref:System.Diagnostics.Debug.IndentSize%2A>の<xref:System.Diagnostics.Debug>アプリケーションの名前に対応する構成ファイルを編集することもできます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-241">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="78ef7-242">構成ファイルは、次の例で示すようにフォーマットされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="78ef7-242">The configuration file should be formatted as shown in the following example.</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="78ef7-243">アンマネージ コードを操作します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-243">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="78ef7-244">要求値<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 列挙型に関連付けられている:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-244">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-245">出力バッファーをフラッシュしてから、各 <see cref="P:System.Diagnostics.Debug.Listeners" /> で <see langword="Close" /> を呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-245">Flushes the output buffer and then calls the <see langword="Close" /> method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-246">このメソッドを使用するときに、出力をファイルなど、<xref:System.Diagnostics.TextWriterTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-246">Use this method when the output goes to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-247">明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません<xref:System.Diagnostics.Debug.Flush%2A>または<xref:System.Diagnostics.Debug.Close%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-247">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="78ef7-248">設定<xref:System.Diagnostics.Debug.AutoFlush%2A>に`true`に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-248">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="78ef7-249">これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。</span><span class="sxs-lookup"><span data-stu-id="78ef7-249">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="78ef7-250">このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-250">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-251">次の例を作成、<xref:System.Diagnostics.TextWriterTraceListener>という`myTextListener`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-251">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="78ef7-252">`myTextListener` 使用して、<xref:System.IO.StreamWriter>と呼ばれる`myOutputWriter`という名前のファイルに書き込む`TestFile.txt`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-252">`myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="78ef7-253">例では、ファイル、ストリーム、およびテキスト ライターを作成、ファイルに 1 行のテキストを書き込みますをフラッシュし、出力を閉じます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-253">The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="78ef7-254">アンマネージ コードを操作します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-254">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="78ef7-255">要求値<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 列挙型に関連付けられている:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-255">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-256">エラー メッセージを出力します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-256">Emits an error message.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="78ef7-257">出力するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-257">A message to emit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-258">指定されたエラー メッセージを出力します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-258">Emits the specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-259">既定の動作は、<xref:System.Diagnostics.DefaultTraceListener>ユーザー インターフェイス モードにされ、アプリケーションが実行されているときに、メッセージをメッセージ ボックスに、出力、<xref:System.Diagnostics.TraceListener>のインスタンスにある、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-259">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78ef7-260">メッセージ ボックスの表示がの存在に依存する、<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-260">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="78ef7-261">場合、<xref:System.Diagnostics.DefaultTraceListener>に含まれていない、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション、メッセージ ボックスは表示されません。</span><span class="sxs-lookup"><span data-stu-id="78ef7-261">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="78ef7-262"><xref:System.Diagnostics.DefaultTraceListener>して削除できます、 [&lt;オフ&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;削除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)、または呼び出すことによって、 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> メソッド<xref:System.Diagnostics.Trace.Listeners%2A>プロパティ (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="78ef7-262">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="78ef7-263">追加することでこの動作をカスタマイズすることができます、<xref:System.Diagnostics.TraceListener>から、1 つを削除するか、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-263">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-264">次の例では、<xref:System.Diagnostics.Debug.Fail%2A>例外処理中にメッセージを印刷する方法です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-264">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  
  
 <span data-ttu-id="78ef7-265">使用することも、 <xref:System.Diagnostics.Debug.Fail%2A> switch ステートメント内のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-265">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="78ef7-266">出力するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-266">A message to emit.</span>
          </span>
        </param>
        <param name="detailMessage">
          <span data-ttu-id="78ef7-267">出力する詳細メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-267">A detailed message to emit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-268">エラー メッセージと詳細エラー メッセージを出力します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-268">Emits an error message and a detailed error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-269">既定の動作は、<xref:System.Diagnostics.DefaultTraceListener>ユーザー インターフェイス モードにされ、アプリケーションが実行されているときに、メッセージをメッセージ ボックスに、出力、<xref:System.Diagnostics.TraceListener>のインスタンスにある、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-269">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78ef7-270">メッセージ ボックスの表示がの存在に依存する、<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-270">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="78ef7-271">場合、<xref:System.Diagnostics.DefaultTraceListener>に含まれていない、<xref:System.Diagnostics.Trace.Listeners%2A>コレクション、メッセージ ボックスは表示されません。</span><span class="sxs-lookup"><span data-stu-id="78ef7-271">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="78ef7-272"><xref:System.Diagnostics.DefaultTraceListener>して削除できます、 [&lt;オフ&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;削除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)、または呼び出すことによって、 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> メソッド<xref:System.Diagnostics.Trace.Listeners%2A>プロパティ (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="78ef7-272">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="78ef7-273">追加することでこの動作をカスタマイズすることができます、<xref:System.Diagnostics.TraceListener>から、1 つを削除するか、<xref:System.Diagnostics.Debug.Listeners%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="78ef7-273">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-274">次の例では、<xref:System.Diagnostics.Debug.Fail%2A>例外処理中にメッセージを印刷する方法です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-274">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="78ef7-275">使用することも、 <xref:System.Diagnostics.Debug.Fail%2A> switch ステートメント内のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-275">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-276">出力バッファーをフラッシュし、バッファー内のデータを <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-276">Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-277">明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません<xref:System.Diagnostics.Debug.Flush%2A>または<xref:System.Diagnostics.Debug.Close%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-277">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="78ef7-278">設定<xref:System.Diagnostics.Debug.AutoFlush%2A>に`true`に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-278">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="78ef7-279">これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。</span><span class="sxs-lookup"><span data-stu-id="78ef7-279">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="78ef7-280">このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-280">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-281">次の例を作成、<xref:System.Diagnostics.TextWriterTraceListener>という`myTextListener`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-281">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="78ef7-282">`myTextListener` 使用して、<xref:System.IO.FileStream>と呼ばれる`myFileStream`という名前のファイルに書き込む`TestFile.txt`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-282">`myTextListener` uses a <xref:System.IO.FileStream> called `myFileStream` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="78ef7-283">例は、ストリームを作成が存在する場合または新規に作成、ファイルに 1 行のテキストを書き込みますとし、フラッシュの出力を閉じますファイルを開きます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-283">The example creates the stream, opens the file if it exists or creates a new one, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-284">現在の <see cref="P:System.Diagnostics.Debug.IndentLevel" /> を 1 だけ大きくします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-284">Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="78ef7-285">次の例では、インデント レベルを設定し、デバッグ メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-285">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="78ef7-286">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-286">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Unindent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-287">インデント レベルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-287">Gets or sets the indent level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78ef7-288">インデント レベル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-288">The indent level.</span>
          </span>
          <span data-ttu-id="78ef7-289">既定値は 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-289">The default is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-290"><xref:System.Diagnostics.Debug.IndentLevel%2A>プロパティを表す回数を超えるサイズのインデント<xref:System.Diagnostics.Debug.IndentSize%2A>を適用します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-290">The <xref:System.Diagnostics.Debug.IndentLevel%2A> property represents the number of times the indent of size <xref:System.Diagnostics.Debug.IndentSize%2A> is applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-291">次の例では、インデント レベルを設定し、デバッグ メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-291">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="78ef7-292">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-292">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-293">1 つのインデントに含まれるスペースの数を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-293">Gets or sets the number of spaces in an indent.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78ef7-294">インデントに含まれるスペースの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-294">The number of spaces in an indent.</span>
          </span>
          <span data-ttu-id="78ef7-295">既定値は 4 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-295">The default is four.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-296">A<xref:System.Diagnostics.TextWriterTraceListener>スペースとしてこの数値を解釈します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-296">A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces.</span></span> <span data-ttu-id="78ef7-297"><xref:System.Diagnostics.EventLogTraceListener>はこの値を無視します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-297">An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.</span></span>  
  
 <span data-ttu-id="78ef7-298">設定する、<xref:System.Diagnostics.Debug.AutoFlush%2A>と<xref:System.Diagnostics.Debug.IndentSize%2A>の<xref:System.Diagnostics.Debug>アプリケーションの名前に対応する構成ファイルを編集することもできます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-298">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="78ef7-299">構成ファイルは、次の例で示すようにフォーマットされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="78ef7-299">The configuration file should be formatted as shown in the following example.</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-300">デバッグ出力を監視するリスナーのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-300">Gets the collection of listeners that is monitoring the debug output.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78ef7-301">デバッグ出力を監視する <see cref="T:System.Diagnostics.TraceListenerCollection" /> 型のコレクションを表す <see cref="T:System.Diagnostics.TraceListener" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-301">A <see cref="T:System.Diagnostics.TraceListenerCollection" /> representing a collection of type <see cref="T:System.Diagnostics.TraceListener" /> that monitors the debug output.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-302">リスナーは、デバッグ出力から、書式付き出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-302">The listeners produce formatted output from the debug output.</span></span> <span data-ttu-id="78ef7-303">既定では、コレクションにはインスタンスが含まれています、<xref:System.Diagnostics.DefaultTraceListener>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-303">By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class.</span></span> <span data-ttu-id="78ef7-304">既定のリスナーを削除するには、呼び出し、<xref:System.Diagnostics.TraceListenerCollection.Remove%2A>メソッドのインスタンスを渡すと、<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-304">To remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="78ef7-305">コンソール ウィンドウに出力をリダイレクトするには、インスタンスを追加、<xref:System.Diagnostics.ConsoleTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-305">To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener>.</span></span> <span data-ttu-id="78ef7-306">インスタンスに追加するファイルまたはストリームに出力をリダイレクトする、<xref:System.Diagnostics.TextWriterTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-306">To redirect output to a file or stream, add an instance of the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78ef7-307"><xref:System.Diagnostics.Debug.Listeners%2A>コレクションの両方によって共有は、<xref:System.Diagnostics.Debug>と<xref:System.Diagnostics.Trace>クラスです。 どちらかのクラスをトレース リスナーをリスナーに追加の両方を追加します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-307">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-308">次の例を作成、<xref:System.Diagnostics.TextWriterTraceListener>コンソール画面に出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-308">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> that outputs to the console screen.</span></span> <span data-ttu-id="78ef7-309">コードは、新しいリスナーを追加、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-309">The code then adds the new listener to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span>  
  
 [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="78ef7-310">アンマネージ コードを操作します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-310">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="78ef7-311">要求値<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 列挙型に関連付けられている:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-311">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Print">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-312">
            <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーにメッセージを書き込み、続けて行終端記号を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-312">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="78ef7-313">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-313">The message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-314">
            <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーにメッセージを書き込み、続けて行終端記号を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-314">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-315">既定の行終端記号は、キャリッジ リターンとライン フィードです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-315">The default line terminator is a carriage return followed by a line feed.</span></span> <span data-ttu-id="78ef7-316">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-316">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="78ef7-317">0 個以上の書式項目が混在したテキストを含む複合書式指定文字列。各書式項目は、<c>args</c> 配列内のオブジェクトに対応します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-317">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="78ef7-318">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-318">An object array containing zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-319">
            <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書式指定された文字列を書き込み、続けて行終端記号を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-319">Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-320">このメソッドを使用して、.NET Framework オブジェクトの値をテキスト形式に変換し、その表現を文字列に埋め込むのです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-320">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="78ef7-321">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-321">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="78ef7-322">
            <paramref name="format" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-322">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="78ef7-323">
            <paramref name="format" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-323">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="78ef7-324">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-324">-or-</span>
          </span>
          <span data-ttu-id="78ef7-325">書式設定する引数を示す数が 0 より小さいか、書式設定する指定されたオブジェクトの数以上です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-325">The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-326">現在の <see cref="P:System.Diagnostics.Debug.IndentLevel" /> を 1 だけ減らします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-326">Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="78ef7-327">次の例では、インデント レベルを設定し、デバッグ メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-327">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="78ef7-328">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-328">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Indent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-329">デバッグについての情報を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-329">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="78ef7-330">名前が <see cref="P:System.Diagnostics.Debug.Listeners" /> に送信されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-330">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-331">オブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-331">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-332">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-332">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-333">このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-333">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-334">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-334">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-335">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-335">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-336">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-336">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-337">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-337">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-338">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-338">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-339">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-339">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="78ef7-340">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-340">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-341">
            <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーにメッセージを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-341">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-342">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-342">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-343">このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-343">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-344">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-344">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-345">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-345">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-346">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-346">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-347">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-347">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-348">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-348">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-349">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-349">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="78ef7-350">名前が <see cref="P:System.Diagnostics.Debug.Listeners" /> に送信されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-350">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="78ef7-351">出力を編成するために使用するカテゴリ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-351">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-352">カテゴリ名とオブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-352">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-353">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-353">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-354">使用して、`category`グループへのパラメーターは、メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-354">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="78ef7-355">このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-355">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-356">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-356">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-357">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-357">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-358">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-358">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-359">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-359">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-360">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-360">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-361">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-361">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="78ef7-362">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-362">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="78ef7-363">出力を編成するために使用するカテゴリ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-363">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-364">カテゴリ名とメッセージを <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-364">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-365">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-365">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-366">使用して、`category`グループへのパラメーターは、メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-366">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="78ef7-367">このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-367">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-368">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-368">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-369">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-369">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-370">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-370">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-371">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-371">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-372">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-372">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-373">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-373">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-374">条件が <see langword="true" /> の場合、デバッグについての情報を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-374">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-375">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-375">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-376">条件が <see langword="true" /> の場合、コレクションのトレース リスナーに値が書き込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-376">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="78ef7-377">名前が <see cref="P:System.Diagnostics.Debug.Listeners" /> に送信されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-377">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-378">条件が <see langword="true" /> の場合、オブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-378">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-379">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-379">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-380">このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-380">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-381">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-381">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-382">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-382">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-383">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`または以降では、value パラメーターの名の出力の例、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-383">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-384">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-384">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-385">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`例では、最初のメッセージと同じ行にメッセージが出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-385">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-386">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-386">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="78ef7-387">使用して、アプリケーションをインストルメント化のパフォーマンスの低下を最小限に抑えることができます<see langword="If...Then" />ステートメントを使用せずに<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />ステートメントです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-387">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="78ef7-388">次の 2 つのコード例では、同じデバッグ メッセージを送信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-388">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="78ef7-389">ただし、最初の例でははるかに高速トレースがオフの場合場合、<c>である</c>に評価される<see langword="false" />、呼び出すことはありません<see cref="M:System.Diagnostics.Debug.Write(System.String)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-389">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span>
            </span>
            <span data-ttu-id="78ef7-390">2 番目の例では、常に呼び出します<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />場合でも、<c>である</c>は<see langword="false" />し、トレース出力は生成されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-390">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="78ef7-391">これにより、任意の複雑なコードの不要な実行。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-391">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="78ef7-392">最初の例:</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-392">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="78ef7-393">2 番目の例:</span><span class="sxs-lookup"><span data-stu-id="78ef7-393">Second example:</span></span>  
  
```  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-394">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-394">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-395">条件が <see langword="true" /> の場合、コレクションのトレース リスナーにメッセージが書き込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-395">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="78ef7-396">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-396">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-397">条件が <see langword="true" /> である場合、メッセージを <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-397">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-398">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-398">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-399">このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-399">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-400">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-400">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-401">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-401">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-402">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-402">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-403">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-403">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-404">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-404">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-405">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-405">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="78ef7-406">使用して、アプリケーションをインストルメント化のパフォーマンスの低下を最小限に抑えることができます<see langword="If...Then" />ステートメントを使用せずに<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />ステートメントです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-406">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="78ef7-407">次の 2 つのコード例では、同じデバッグ メッセージを送信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-407">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="78ef7-408">ただし、最初の例でははるかに高速トレースがオフの場合場合、<c>である</c>に評価される<see langword="false" />、呼び出すことはありません<see cref="M:System.Diagnostics.Debug.Write(System.String)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-408">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span>
            </span>
            <span data-ttu-id="78ef7-409">2 番目の例では、常に呼び出します<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />場合でも、<c>である</c>は<see langword="false" />し、トレース出力は生成されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-409">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="78ef7-410">これにより、任意の複雑なコードの不要な実行。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-410">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="78ef7-411">最初の例:</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-411">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="78ef7-412">2 番目の例:</span><span class="sxs-lookup"><span data-stu-id="78ef7-412">Second example:</span></span>  
  
```  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-413">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-413">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-414">条件が <see langword="true" /> の場合、コレクションのトレース リスナーにカテゴリ名と値が書き込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-414">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="78ef7-415">名前が <see cref="P:System.Diagnostics.Debug.Listeners" /> に送信されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-415">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="78ef7-416">出力を編成するために使用するカテゴリ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-416">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-417">条件が <see langword="true" /> の場合は、カテゴリ名とオブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-417">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-418">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-418">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-419">`category`パラメーターは、出力メッセージをグループ化を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-419">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="78ef7-420">このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-420">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-421">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-421">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-422">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-422">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-423">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Verbose`、例では、出力の名前、`myObject`と`category`を<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-423">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-424">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-424">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-425">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Error`または以降では、最初のメッセージと同じ行に 2 番目のエラー メッセージの出力例では、します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-425">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-426">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-426">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="78ef7-427">使用して、アプリケーションをインストルメント化のパフォーマンスの低下を最小限に抑えることができます<see langword="If...Then" />ステートメントを使用せずに<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />ステートメントです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-427">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="78ef7-428">次の 2 つのコード例では、同じデバッグ メッセージを送信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-428">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="78ef7-429">ただし、最初の例でははるかに高速トレースがオフの場合場合、<c>である</c>に評価される<see langword="false" />、呼び出すことはありません<see cref="M:System.Diagnostics.Debug.Write(System.String)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-429">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span>
            </span>
            <span data-ttu-id="78ef7-430">2 番目の例では、常に呼び出します<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />場合でも、<c>である</c>は<see langword="false" />し、トレース出力は生成されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-430">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="78ef7-431">これにより、任意の複雑なコードの不要な実行。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-431">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="78ef7-432">最初の例:</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-432">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="78ef7-433">2 番目の例:</span><span class="sxs-lookup"><span data-stu-id="78ef7-433">Second example:</span></span>  
  
```  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-434">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-434">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-435">条件が <see langword="true" /> の場合、コレクションのトレース リスナーにカテゴリ名とメッセージが書き込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-435">If the condition is <see langword="true" />, the category name and message are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="78ef7-436">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-436">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="78ef7-437">出力を編成するために使用するカテゴリ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-437">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-438">条件が <see langword="true" /> である場合、カテゴリ名とメッセージを <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-438">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-439">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-439">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-440">`category`パラメーターは、出力メッセージをグループ化を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-440">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="78ef7-441">このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-441">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-442">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-442">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-443">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-443">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-444">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Verbose`、例では、出力には、最初のエラー メッセージ、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-444">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-445">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-445">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-446">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Error`または以降では、最初のメッセージと同じ行に 2 番目のエラー メッセージの出力例では、します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-446">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-447">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-447">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="78ef7-448">使用して、アプリケーションをインストルメント化のパフォーマンスの低下を最小限に抑えることができます<see langword="If...Then" />ステートメントを使用せずに<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />ステートメントです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-448">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="78ef7-449">次の 2 つのコード例では、同じデバッグ メッセージを送信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-449">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="78ef7-450">ただし、最初の例でははるかに高速トレースがオフの場合場合、<c>である</c>に評価される<see langword="false" />、呼び出すことはありません<see cref="M:System.Diagnostics.Debug.Write(System.String)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-450">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span>
            </span>
            <span data-ttu-id="78ef7-451">2 番目の例では、常に呼び出します<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />場合でも、<c>である</c>は<see langword="false" />し、トレース出力は生成されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-451">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="78ef7-452">これにより、任意の複雑なコードの不要な実行。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-452">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="78ef7-453">最初の例:</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-453">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="78ef7-454">2 番目の例:</span><span class="sxs-lookup"><span data-stu-id="78ef7-454">Second example:</span></span>  
  
```  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-455">デバッグについての情報を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-455">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="78ef7-456">名前が <see cref="P:System.Diagnostics.Debug.Listeners" /> に送信されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-456">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-457">オブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-457">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-458">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-458">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-459">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-459">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-460">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-460">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-461">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-461">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-462">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-462">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-463">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-463">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-464">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行にオブジェクトの名前を出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-464">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="78ef7-465">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-465">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="78ef7-466">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-466">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-467">
            <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーにメッセージを書き込み、続けて行終端記号を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-467">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-468">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-468">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-469">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-469">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-470">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-470">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-471">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-471">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-472">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-472">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-473">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-473">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-474">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-474">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-475">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-475">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="78ef7-476">名前が <see cref="P:System.Diagnostics.Debug.Listeners" /> に送信されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-476">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="78ef7-477">出力を編成するために使用するカテゴリ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-477">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-478">カテゴリ名とオブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-478">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-479">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-479">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-480">`category`パラメーターは、出力メッセージをグループ化を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-480">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="78ef7-481">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-481">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-482">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-482">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-483">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-483">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-484">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-484">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-485">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-485">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-486">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-486">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-487">2 番目のメッセージには、行終端記号が続きます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-487">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="78ef7-488">0 個以上の書式項目が混在したテキストを含む複合書式指定文字列。各書式項目は、<c>args</c> 配列内のオブジェクトに対応します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-488">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="78ef7-489">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-489">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-490">
            <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書式指定されたメッセージを書き込み、続けて行終端記号を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-490">Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-491">このメソッドを使用して、.NET Framework オブジェクトの値をテキスト形式に変換し、その表現を文字列に埋め込むのです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-491">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span>  
  
 <span data-ttu-id="78ef7-492">このメソッドの構文のキーワードは、オブジェクトの配列が 1 つの値にできることを意味します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-492">The  keyword in the syntax for this method implies that the object array can be a single value.</span></span> <span data-ttu-id="78ef7-493">この例外は、<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="78ef7-493">The exception to this is the <xref:System.String> object.</span></span> <span data-ttu-id="78ef7-494">明示的なオーバー ロードも優先されますので、`arg`単一の文字列の値は既定値、<xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-494">Explicit overloads take precedence, so an `arg` value of a single string will default to the <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> overload.</span></span>  
  
 <span data-ttu-id="78ef7-495">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-495">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-496">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-496">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="78ef7-497">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-497">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="78ef7-498">出力を編成するために使用するカテゴリ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-498">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-499">カテゴリ名とメッセージを <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-499">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-500">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-500">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-501">`category`パラメーターは、出力メッセージをグループ化を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-501">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="78ef7-502">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-502">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-503">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-503">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-504">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-504">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-505">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-505">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-506">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-506">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-507">場合はその後、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`、例では、2 番目のエラー メッセージを出力して、`category`最初のメッセージと同じ行にします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-507">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="78ef7-508">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-508">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ef7-509">条件が <see langword="true" /> の場合、デバッグについての情報を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-509">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-510">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-510">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-511">条件が <see langword="true" /> の場合、コレクションのトレース リスナーに値が書き込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-511">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="78ef7-512">名前が <see cref="P:System.Diagnostics.Debug.Listeners" /> に送信されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-512">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-513">条件が <see langword="true" /> の場合、オブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-513">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-514">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-514">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-515">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-515">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-516">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-516">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-517">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-517">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-518">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-518">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-519">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-519">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-520">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行にオブジェクトの名前を出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-520">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="78ef7-521">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-521">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="78ef7-522">使用して、アプリケーションをインストルメント化のパフォーマンスの低下を最小限に抑えることができます<see langword="If...Then" />ステートメントを使用せずに<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />ステートメントです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-522">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="78ef7-523">次の 2 つのコード例では、同じデバッグ メッセージを送信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-523">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="78ef7-524">ただし、最初の例でははるかに高速トレースがオフの場合場合、<c>である</c>に評価される<see langword="false" />、呼び出すことはありません<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-524">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span>
            </span>
            <span data-ttu-id="78ef7-525">2 番目の例では、常に呼び出します<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />場合でも、<c>である</c>は<see langword="false" />し、トレース出力は生成されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-525">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="78ef7-526">これにより、任意の複雑なコードの不要な実行。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-526">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="78ef7-527">最初の例:</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-527">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="78ef7-528">2 番目の例:</span><span class="sxs-lookup"><span data-stu-id="78ef7-528">Second example:</span></span>  
  
```  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-529">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-529">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-530">条件が <see langword="true" /> の場合、コレクションのトレース リスナーにメッセージが書き込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-530">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="78ef7-531">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-531">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-532">条件が <see langword="true" /> である場合、メッセージを <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-532">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-533">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-533">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-534">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-534">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-535">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-535">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-536">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-536">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-537">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-537">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-538">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-538">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-539">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-539">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-540">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-540">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="78ef7-541">使用して、アプリケーションをインストルメント化のパフォーマンスの低下を最小限に抑えることができます<see langword="If...Then" />ステートメントを使用せずに<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />ステートメントです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-541">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="78ef7-542">次の 2 つのコード例では、同じデバッグ メッセージを送信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-542">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="78ef7-543">ただし、最初の例でははるかに高速トレースがオフの場合場合、<c>である</c>に評価される<see langword="false" />、呼び出すことはありません<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-543">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span>
            </span>
            <span data-ttu-id="78ef7-544">2 番目の例では、常に呼び出します<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />場合でも、<c>である</c>は<see langword="false" />し、トレース出力は生成されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-544">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="78ef7-545">これにより、任意の複雑なコードの不要な実行。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-545">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="78ef7-546">最初の例:</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-546">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="78ef7-547">2 番目の例:</span><span class="sxs-lookup"><span data-stu-id="78ef7-547">Second example:</span></span>  
  
```  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-548">評価する条件式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-548">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="78ef7-549">条件が <see langword="true" /> の場合、コレクションのトレース リスナーにカテゴリ名と値が書き込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-549">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="78ef7-550">名前が <see cref="P:System.Diagnostics.Debug.Listeners" /> に送信されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-550">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="78ef7-551">出力を編成するために使用するカテゴリ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-551">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-552">条件が <see langword="true" /> の場合は、カテゴリ名とオブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値を <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-552">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-553">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-553">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-554">`category`パラメーターは、出力メッセージをグループ化を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-554">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="78ef7-555">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-555">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-556">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-556">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-557">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-557">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-558">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-558">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-559">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-559">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-560">その後、if、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`の例は、最初のメッセージと同じ行に 2 番目のエラー メッセージを出力します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-560">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="78ef7-561">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-561">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="78ef7-562">使用して、アプリケーションをインストルメント化のパフォーマンスの低下を最小限に抑えることができます<see langword="If...Then" />ステートメントを使用せずに<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />ステートメントです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-562">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="78ef7-563">次の 2 つのコード例では、同じデバッグ メッセージを送信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-563">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="78ef7-564">ただし、最初の例でははるかに高速トレースがオフの場合場合、<c>である</c>に評価される<see langword="false" />、呼び出すことはありません<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-564">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span>
            </span>
            <span data-ttu-id="78ef7-565">2 番目の例では、常に呼び出します<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />場合でも、<c>である</c>は<see langword="false" />し、トレース出力は生成されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-565">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="78ef7-566">これにより、任意の複雑なコードの不要な実行。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-566">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="78ef7-567">最初の例:</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-567">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="78ef7-568">2 番目の例:</span><span class="sxs-lookup"><span data-stu-id="78ef7-568">Second example:</span></span>  
  
```  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="78ef7-569">メッセージが書き込まれるようにするには <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-569">
              <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="78ef7-570">書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-570">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="78ef7-571">出力を編成するために使用するカテゴリ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-571">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ef7-572">条件が <see langword="true" /> である場合、カテゴリ名とメッセージを <see cref="P:System.Diagnostics.Debug.Listeners" /> コレクションのトレース リスナーに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ef7-572">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ef7-573">既定では、出力は、インスタンスに<xref:System.Diagnostics.DefaultTraceListener>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-573">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="78ef7-574">`category`パラメーターは、出力メッセージをグループ化を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="78ef7-574">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="78ef7-575">このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>トレース リスナーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-575">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ef7-576">次の例を作成、<xref:System.Diagnostics.TraceSwitch>という`generalSwitch`です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-576">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="78ef7-577">サンプル コードの外部では、このスイッチを設定します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-577">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="78ef7-578">スイッチが に設定されている場合、 <xref:System.Diagnostics.TraceLevel> `Error`以降では、最初のエラー メッセージの出力例では、または、<xref:System.Diagnostics.Debug.Listeners%2A>です。</span><span class="sxs-lookup"><span data-stu-id="78ef7-578">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="78ef7-579">リスナーを追加する方法について、 <xref:System.Diagnostics.Debug.Listeners%2A> 、コレクションを参照してください、<xref:System.Diagnostics.TraceListenerCollection>クラスです。</span><span class="sxs-lookup"><span data-stu-id="78ef7-579">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="78ef7-580">場合はその後、<xref:System.Diagnostics.TraceLevel>に設定されている`Verbose`、例では、2 番目のエラー メッセージを出力して、`category`最初のメッセージと同じ行にします。</span><span class="sxs-lookup"><span data-stu-id="78ef7-580">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="78ef7-581">行終端記号には、2 番目のメッセージが次に示します。</span><span class="sxs-lookup"><span data-stu-id="78ef7-581">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="78ef7-582">使用して、アプリケーションをインストルメント化のパフォーマンスの低下を最小限に抑えることができます<see langword="If...Then" />ステートメントを使用せずに<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />ステートメントです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-582">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="78ef7-583">次の 2 つのコード例では、同じデバッグ メッセージを送信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-583">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="78ef7-584">ただし、最初の例でははるかに高速トレースがオフの場合場合、<c>である</c>に評価される<see langword="false" />、呼び出すことはありません<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-584">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span>
            </span>
            <span data-ttu-id="78ef7-585">2 番目の例では、常に呼び出します<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />場合でも、<c>である</c>は<see langword="false" />し、トレース出力は生成されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-585">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="78ef7-586">これにより、任意の複雑なコードの不要な実行。</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-586">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="78ef7-587">最初の例:</span>
            <span class="sxs-lookup">
              <span data-stu-id="78ef7-587">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="78ef7-588">2 番目の例:</span><span class="sxs-lookup"><span data-stu-id="78ef7-588">Second example:</span></span>  
  
```  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>