<Type Name="DataReceivedEventArgs" FullName="System.Diagnostics.DataReceivedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="512efbab93320933478311ee04c44018863b11df" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39982414" /></Metadata><TypeSignature Language="C#" Value="public class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataReceivedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DataReceivedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DataReceivedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Diagnostics.Process.OutputDataReceived" /> イベントおよび <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 リダイレクトされたを非同期的に収集する<xref:System.Diagnostics.Process.StandardOutput%2A>または<xref:System.Diagnostics.Process.StandardError%2A>ストリームは、プロセスの出力リダイレクトされたストリームの出力イベントを処理するメソッドを作成する必要があります。 プロセスが、リダイレクトされたストリームに書き込むイベント ハンドラー メソッドが呼び出されます。 イベント デリゲートのインスタンスと、イベント ハンドラーを呼び出す<xref:System.Diagnostics.DataReceivedEventArgs>します。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>プロパティには、プロセスは、リダイレクトされたストリームに書き込んだテキスト行が含まれています。  
  
   
  
## Examples  
 次のコード例は、リダイレクトされたで非同期の読み取り操作を実行する方法を示しています。<xref:System.Diagnostics.Process.StandardOutput%2A>のストリーム、`sort`コマンド。 `sort`コマンドは、コンソール アプリケーションを読み取り、テキスト入力を並べ替えます。  
  
 例でのイベントのデリゲートを作成、`SortOutputHandler`イベント ハンドラーを関連付けます、<xref:System.Diagnostics.Process.OutputDataReceived>イベント。 イベント ハンドラーがリダイレクトされたからテキスト行を受け取る<xref:System.Diagnostics.Process.StandardOutput%2A>ストリーム、テキストを書式設定し、画面にテキストを書き込みます。  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
  <Members>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public string Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Data { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : string" Usage="System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リダイレクトされた <see cref="T:System.Diagnostics.Process" /> 出力ストリームに書き込まれた文字の行を取得します。</summary>
        <value>関連する <see cref="T:System.Diagnostics.Process" /> によって、リダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> または <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームに書き込まれた行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 リダイレクトされると、<xref:System.Diagnostics.Process.StandardOutput%2A>または<xref:System.Diagnostics.Process.StandardError%2A>のストリームを<xref:System.Diagnostics.Process>イベント ハンドラーにイベントが、プロセスは、リダイレクトされたストリームに行を書き込むたびに発生します。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>プロパティは、行を<xref:System.Diagnostics.Process>がリダイレクトされた出力ストリームに書き込みました。 イベント ハンドラーを使用できる、<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>プロセスの出力をフィルター処理または別の場所に出力を記述するプロパティ。 たとえば、指定されたエラー ログ ファイルにすべてのエラー出力の行を格納するイベント ハンドラーを作成する可能性があります。  
  
 行は、改行 ("\n") で指定されている文字のシーケンスや、キャリッジ リターンとライン フィード ("\r\n") として定義されます。 改行文字は、既定のシステム ANSI コード ページを使用してエンコードされます。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>プロパティは、終端のキャリッジ リターンを含めるまたは改行しません。  
  
 リダイレクトされたストリームが閉じられたときに、null の行は、イベント ハンドラーに送信されます。 ように、イベント ハンドラーのチェック、<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>プロパティにアクセスする前に、適切にします。 たとえば、静的メソッドを使用することができます<xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType>を検証する、<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>プロパティ、イベント ハンドラーにします。  
  
   
  
## Examples  
 次のコード例に関連付けられている単純なイベント ハンドラーを示しています、<xref:System.Diagnostics.Process.OutputDataReceived>イベント。 イベント ハンドラーがリダイレクトされたからテキスト行を受け取る<xref:System.Diagnostics.Process.StandardOutput%2A>ストリーム、テキストを書式設定し、画面にテキストを書き込みます。  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>