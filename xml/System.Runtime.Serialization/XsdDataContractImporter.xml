<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15925f4c121fbb43fa4b51b56eb3474eeb7b0954" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37466731" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="18f8d-101">XML スキーマ ファイル (.xsd) のセットを共通言語ランタイム (CLR) 型に変換することを可能にします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="18f8d-101">Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-102">既存の Web サービスを組み込む必要がある Web サービス、または XML スキーマからデータ コントラクト型を作成する場合は、<xref:System.Runtime.Serialization.XsdDataContractImporter> を使用します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-102">Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</span></span> <span data-ttu-id="18f8d-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> は、XML スキーマのセットを変換し、選択したプログラミング言語でデータ コントラクトを表す [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 型を作成します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language.</span></span> <span data-ttu-id="18f8d-104">コードを作成するには、<xref:System.CodeDom> 名前空間を使用します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-104">To create the code, use the classes in the <xref:System.CodeDom> namespace.</span></span>  
  
 <span data-ttu-id="18f8d-105">逆に、CLR 型で表されるデータを組み込む Web サービスを作成する場合、および他の Web サービスが消費できるように各データ型の XML スキーマをエクスポートする必要がある場合は、<xref:System.Runtime.Serialization.XsdDataContractExporter> クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-105">Conversely, use the <xref:System.Runtime.Serialization.XsdDataContractExporter> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</span></span> <span data-ttu-id="18f8d-106">つまり、<xref:System.Runtime.Serialization.XsdDataContractExporter> は、CLR 型のセットを XML スキーマのセットに変換します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-106">That is, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforms a set of CLR types into a set of XML schemas.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18f8d-107">デザイン時に、XML スキーマから CLR 型を生成するには、使用、 [ServiceModel メタデータ ユーティリティ ツール (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-107">To generate CLR types from XML schemas at design time, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span></span> <span data-ttu-id="18f8d-108">XSD ファイルから、コードの生成を使用して、`/dataContractOnly`ツールのスイッチ。</span><span class="sxs-lookup"><span data-stu-id="18f8d-108">To generated code from XSD files, use the `/dataContractOnly` switch of the tool.</span></span> <span data-ttu-id="18f8d-109">この処理をさらに制御する必要がある、またはプログラムによって実行する必要がある場合は、<xref:System.Runtime.Serialization.XsdDataContractImporter> を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="18f8d-109">You can also use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you need more control over the process or need to do it programmatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18f8d-110"><xref:System.Xml.Schema.XmlSchemaSet> を作成し、<xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> メソッドを呼び出して <xref:System.CodeDom.CodeCompileUnit> を作成する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-110">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="18f8d-111">その後、<xref:System.CodeDom.CodeCompileUnit> を使用して Visual C# コード ファイルと Visual Basic コード ファイルの両方を作成します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-111">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="18f8d-112">
            <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-112">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="18f8d-113">
            <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-113">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">
          <span data-ttu-id="18f8d-114">コードを保存するために使用する <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-114">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-115">CLR コードを生成するために使用される <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> を使用して、<see cref="T:System.CodeDom.CodeCompileUnit" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-115">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-116">このコンストラクターを使用して、生成済みの <xref:System.CodeDom.CodeCompileUnit> にコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-116">Use this constructor to add more code into a <xref:System.CodeDom.CodeCompileUnit> that has already been generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18f8d-117"><xref:System.Xml.Schema.XmlSchemaSet> を作成し、<xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> メソッドを呼び出して <xref:System.CodeDom.CodeCompileUnit> を作成する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-117">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="18f8d-118">その後、<xref:System.CodeDom.CodeCompileUnit> を使用して Visual C# コード ファイルと Visual Basic コード ファイルの両方を作成します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-118">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="18f8d-119">スキーマを <see cref="T:System.CodeDom.CodeCompileUnit" /> に変換できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-119">Gets a value that indicates whether the schemas can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-120">インポート可能な種類の詳細については、次を参照してください。[型は、データ コントラクト シリアライザーでサポートされている](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-120">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="18f8d-121">変換するスキーマを格納する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-121">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-122">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に含まれているスキーマを <see cref="T:System.CodeDom.CodeCompileUnit" /> に変換できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-122">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="18f8d-123">スキーマをデータ コントラクト型に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-123">
              <see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18f8d-124"><xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> メソッドを呼び出して <xref:System.CodeDom.CodeCompileUnit> を生成できるかどうかを決定する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-124">The following example calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="18f8d-125">
            <paramref name="schemas" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-125">The <paramref name="schemas" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="18f8d-126">インポートに関連するデータ コントラクトが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-126">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="18f8d-127">変換するスキーマを格納する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-127">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <param name="typeNames">
          <span data-ttu-id="18f8d-128">インポートするスキーマ型のセットを表す <see cref="T:System.Collections.Generic.ICollection`1" />  の <see cref="T:System.Xml.XmlQualifiedName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-128">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-129">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に含まれる指定した型のセットが、<see cref="T:System.CodeDom.CodeCompileUnit" /> 内に生成される CLR 型に変換できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-129">Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="18f8d-130">スキーマを変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-130">
              <see langword="true" /> if the schemas can be transformed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="18f8d-131">
            <paramref name="schemas" /> パラメーターまたは <paramref name="typeNames" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-131">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="18f8d-132">インポートに関連するデータ コントラクトが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-132">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="18f8d-133">インポートする <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-133">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="18f8d-134">スキーマのセットをチェックインする特定の <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-134">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-135">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に含まれる指定したスキーマ要素をインポートできるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-135">Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="18f8d-136">要素をインポートできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-136">
              <see langword="true" /> if the element can be imported; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-137">このメソッドは、型と、その型が参照しているすべてのスキーマ型をチェックします。</span><span class="sxs-lookup"><span data-stu-id="18f8d-137">This method checks the type and all schema types referenced from it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="18f8d-138">
            <paramref name="schemas" /> パラメーターまたは <paramref name="element" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-138">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="18f8d-139">インポートに関連するデータ コントラクトが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-139">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="18f8d-140">スキーマ表現が格納されている <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-140">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeName">
          <span data-ttu-id="18f8d-141">
            <see cref="T:System.Collections.IList" /> からインポートする必要があるスキーマ型の名前を指定する <see cref="T:System.Xml.XmlQualifiedName" /> の <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-141">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-142">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に含まれているスキーマを <see cref="T:System.CodeDom.CodeCompileUnit" /> に変換できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-142">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="18f8d-143">スキーマをデータ コントラクト型に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-143">
              <see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-144">インポート可能な種類の詳細については、次を参照してください。[型は、データ コントラクト シリアライザーでサポートされている](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-144">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="18f8d-145">
            <paramref name="schemas" /> パラメーターまたは <paramref name="typeName" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-145">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="18f8d-146">インポートに関連するデータ コントラクトが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-146">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="18f8d-147">生成された CLR 型を格納するために使用される <see cref="T:System.CodeDom.CodeCompileUnit" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-147">Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="18f8d-148">生成された CLR 型を格納するために使用される <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-148">A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-149"><xref:System.Runtime.Serialization.XsdDataContractImporter> を使用してスキーマをインポートした後、このプロパティを呼び出して、生成されたすべてのコードがその中に格納されている <xref:System.CodeDom.CodeCompileUnit> にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="18f8d-149">Call this property after importing schemas using the <xref:System.Runtime.Serialization.XsdDataContractImporter> to access the <xref:System.CodeDom.CodeCompileUnit> in which all the generated code is stored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18f8d-150"><xref:System.CodeDom.CodeCompileUnit> を作成する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-150">The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="18f8d-151">次に、<xref:System.CodeDom.CodeCompileUnit> を使用して Visual C# コードおよび Visual Basic コードの両方のファイルを作成できます。</span><span class="sxs-lookup"><span data-stu-id="18f8d-151">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="18f8d-152">指定した要素の <see cref="T:System.CodeDom.CodeTypeReference" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-152">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="18f8d-153">検索するスキーマ型を指定する <see cref="T:System.Xml.XmlQualifiedName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-153">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-154">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> を持つスキーマ型に対して生成された CLR 型への <see cref="T:System.Xml.XmlQualifiedName" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-154">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="18f8d-155">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> を持つスキーマ型に対して生成された CLR 型への <paramref name="typeName" /> 参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-155">A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-156"><xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> メソッドを呼び出した後、このメソッドを使用して、生成された CLR 型への参照を検索します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-156">Use this method to look up the reference to a generated CLR type after calling the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span> <span data-ttu-id="18f8d-157"><xref:System.CodeDom.CodeTypeReference> には生成された型の名前が格納され、<xref:System.CodeDom.CodeTypeDeclaration> 内の対応する <xref:System.CodeDom.CodeCompileUnit> を検索するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="18f8d-157">The <xref:System.CodeDom.CodeTypeReference> contains the name of the generated type and can be used to look up the corresponding <xref:System.CodeDom.CodeTypeDeclaration> in the <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="18f8d-158">検索するスキーマ型の XML 修飾名を指定する <see cref="T:System.Xml.XmlQualifiedName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-158">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="18f8d-159">XML スキーマ内の要素を指定する <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-159">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-160">指定した XML 修飾要素とスキーマ要素の <see cref="T:System.CodeDom.CodeTypeReference" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-160">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="18f8d-161">指定したスキーマ型のために生成された型を表す <see cref="T:System.CodeDom.CodeTypeReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-161">A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-162">要素のスコープで指定された型に関するデータに対するスキーマ要素が必要です。</span><span class="sxs-lookup"><span data-stu-id="18f8d-162">The schema element is needed for data about the type that is specified at the element scope.</span></span> <span data-ttu-id="18f8d-163">この代表的な例が XSD 属性である `nillable` です。</span><span class="sxs-lookup"><span data-stu-id="18f8d-163">The main example of this is the XSD attribute `nillable`.</span></span> <span data-ttu-id="18f8d-164">スキーマでは、`nillable` への `true` の設定が、含まれているスキーマ要素に対して指定され、null という概念は CLR 型の <xref:System.Nullable%601> で表現されます。</span><span class="sxs-lookup"><span data-stu-id="18f8d-164">In schema, setting `nillable` to `true` is specified on the containing schema element whereas the concept of null is expressed in the CLR type <xref:System.Nullable%601>.</span></span> <span data-ttu-id="18f8d-165">要素は、このインポーターが要素レベルの情報を検索して正しい型参照を返すことを可能にするために渡されます。</span><span class="sxs-lookup"><span data-stu-id="18f8d-165">The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</span></span>  
  
 <span data-ttu-id="18f8d-166">WSDL をインポートするとき、各パラメーターは別々にインポートされるため、パラメーター要素を別々に渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="18f8d-166">When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="18f8d-167">既知の型を検索するスキーマ型を表す <see cref="T:System.Xml.XmlQualifiedName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-167">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-168">指定したスキーマ型のコードを生成するときに生成される既知の型を表す <see cref="T:System.CodeDom.CodeTypeReference" /> オブジェクトのリストを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-168">Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="18f8d-169">
            <see cref="T:System.Collections.Generic.IList`1" /> 型の <see cref="T:System.CodeDom.CodeTypeReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-169">A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-170">スキーマ型に対応する CLR 型を生成するときに、スキーマ内に存在するすべての派生型に対応する既知の型も同時に生成されます。</span><span class="sxs-lookup"><span data-stu-id="18f8d-170">When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</span></span> <span data-ttu-id="18f8d-171">多くの場合、これらの既知の型は、生成されたコードに適用される属性を使用して追加されます </span><span class="sxs-lookup"><span data-stu-id="18f8d-171">In many cases, these known types are added using attributes to the generated code.</span></span> <span data-ttu-id="18f8d-172">(たとえばを参照してください、<xref:System.Runtime.Serialization.KnownTypeAttribute>クラス。</span><span class="sxs-lookup"><span data-stu-id="18f8d-172">(For example, see the <xref:System.Runtime.Serialization.KnownTypeAttribute> class.</span></span> <span data-ttu-id="18f8d-173">ただし、) トップレベルの型が必要に生成された既知の型のセットを返す方法です。</span><span class="sxs-lookup"><span data-stu-id="18f8d-173">) However, for the top-level type, there needs to be a way to return the set of known types generated.</span></span> <span data-ttu-id="18f8d-174">このメソッドは、指定したスキーマ型に対して生成された既知の型の <xref:System.CodeDom.CodeTypeReference> を返します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-174">This method returns the <xref:System.CodeDom.CodeTypeReference> for known types that were generated for a specific schema type.</span></span>  
  
 <span data-ttu-id="18f8d-175">詳細については、次を参照してください。 [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md)します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-175">For more information, see [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="18f8d-176">XML スキーマのセットを、CLR コードを生成するために使用される <see cref="T:System.CodeDom.CodeCompileUnit" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-176">Transforms a set of XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> used to generate CLR code.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="18f8d-177">CLR 型を生成するためのスキーマ表現が格納される <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-177">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-178">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に含まれる指定した XML スキーマのセットを <see cref="T:System.CodeDom.CodeCompileUnit" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-178">Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18f8d-179"><xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> メソッドを使用して、スキーマのセットをインポートできるかどうかをテストする例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-179">The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported.</span></span> <span data-ttu-id="18f8d-180"><xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> メソッドが `true` を返した場合、コードは <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="18f8d-180">If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="18f8d-181">
            <paramref name="schemas" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-181">The <paramref name="schemas" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="18f8d-182">スキーマ表現が格納されている <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-182">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeNames">
          <span data-ttu-id="18f8d-183">インポートするスキーマ型のセットを表す (<see cref="T:System.Xml.XmlQualifiedName" /> の) <see cref="T:System.Collections.Generic.ICollection`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-183">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-184">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に含まれる指定したスキーマ型のセットを、<see cref="T:System.CodeDom.CodeCompileUnit" /> 内に生成される CLR 型に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-184">Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="18f8d-185">変換するスキーマを格納する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-185">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="18f8d-186">変換する特定のスキーマ要素を表す <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-186">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-187">指定した XML スキーマのセット内の指定したスキーマ要素を <see cref="T:System.CodeDom.CodeCompileUnit" /> に変換し、指定した要素用のデータ コントラクト名を表す <see cref="T:System.Xml.XmlQualifiedName" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-187">Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="18f8d-188">指定した要素を表す <see cref="T:System.Xml.XmlQualifiedName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-188">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="18f8d-189">
            <paramref name="schemas" /> パラメーターまたは <paramref name="element" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-189">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="18f8d-190">スキーマ表現が格納されている <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-190">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeName">
          <span data-ttu-id="18f8d-191">インポートする特定のスキーマ型を表す <see cref="T:System.Xml.XmlQualifiedName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-191">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="18f8d-192">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に含まれる指定した XML スキーマ型を <see cref="T:System.CodeDom.CodeCompileUnit" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-192">Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="18f8d-193">
            <paramref name="schemas" /> パラメーターまたは <paramref name="typeName" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-193">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="18f8d-194">インポート操作で設定可能なオプションを含む <see cref="T:System.Runtime.Serialization.ImportOptions" /> を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-194">Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="18f8d-195">設定可能なオプションを含む <see cref="T:System.Runtime.Serialization.ImportOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="18f8d-195">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18f8d-196"><xref:System.Runtime.Serialization.ImportOptions> クラスを使用して、スキーマのインポート中の CLR 型の生成方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="18f8d-196">Use the <xref:System.Runtime.Serialization.ImportOptions> class to customize how the CLR types are generated during schema import.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>