<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e0e306bc164aade170c8db1bca257782dd697794" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37467004" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="43f30-101">オブジェクトが独自のシリアル化および逆シリアル化を制御できるようにします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="43f30-101">Allows an object to control its own serialization and deserialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43f30-102">シリアル化する可能性がある任意のクラスをマークする必要があります、<xref:System.SerializableAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="43f30-102">Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="43f30-103">実装できますが、シリアル化プロセスを制御するクラスが必要な場合、<xref:System.Runtime.Serialization.ISerializable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="43f30-103">If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface.</span></span> <span data-ttu-id="43f30-104"><xref:System.Runtime.Serialization.Formatter>呼び出し、<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>シリアル化時に指定された設定と<xref:System.Runtime.Serialization.SerializationInfo>でオブジェクトを表すために必要なすべてのデータ。</span><span class="sxs-lookup"><span data-stu-id="43f30-104">The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object.</span></span> <span data-ttu-id="43f30-105"><xref:System.Runtime.Serialization.Formatter>作成、<xref:System.Runtime.Serialization.SerializationInfo>グラフ内のオブジェクトの型を使用します。</span><span class="sxs-lookup"><span data-stu-id="43f30-105">The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph.</span></span> <span data-ttu-id="43f30-106">オブジェクト自体を使用できるは、プロキシを送信する必要がある、<xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>と<xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>メソッド<xref:System.Runtime.Serialization.SerializationInfo>送信される情報を変更します。</span><span class="sxs-lookup"><span data-stu-id="43f30-106">Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.</span></span>  
  
 <span data-ttu-id="43f30-107">クラスの継承の場合を実装する基本クラスから派生したクラスをシリアル化可能な<xref:System.Runtime.Serialization.ISerializable>します。</span><span class="sxs-lookup"><span data-stu-id="43f30-107">In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>.</span></span> <span data-ttu-id="43f30-108">この場合、派生クラスがの基本クラス実装を呼び出す必要があります<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>の実装内で<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>します。</span><span class="sxs-lookup"><span data-stu-id="43f30-108">In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</span></span> <span data-ttu-id="43f30-109">それ以外の場合、基本クラスからのデータはシリアル化されません。</span><span class="sxs-lookup"><span data-stu-id="43f30-109">Otherwise, the data from the base class will not be serialized.</span></span>  
  
 <span data-ttu-id="43f30-110"><xref:System.Runtime.Serialization.ISerializable>インターフェイスにコンス トラクター シグネチャのコンス トラクターを持つ (<xref:System.Runtime.Serialization.SerializationInfo>については、<xref:System.Runtime.Serialization.StreamingContext>コンテキスト)。</span><span class="sxs-lookup"><span data-stu-id="43f30-110">The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context).</span></span> <span data-ttu-id="43f30-111">内のデータの後にのみ逆シリアル化時に、現在のコンス トラクターが呼び出されます、<xref:System.Runtime.Serialization.SerializationInfo>フォーマッタで逆シリアル化されています。</span><span class="sxs-lookup"><span data-stu-id="43f30-111">At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter.</span></span> <span data-ttu-id="43f30-112">一般に、クラスがシールされていない場合は、このコンス トラクターを保護する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43f30-112">In general, this constructor should be protected if the class is not sealed.</span></span>  
  
 <span data-ttu-id="43f30-113">オブジェクトが逆シリアル化順序を保証することはできません。</span><span class="sxs-lookup"><span data-stu-id="43f30-113">The order in which objects are deserialized cannot be guaranteed.</span></span> <span data-ttu-id="43f30-114">たとえば、1 つの型がない逆シリアル化されたまだする型を参照する場合、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="43f30-114">For example, if one type references a type that has not been deserialized yet, an exception will occur.</span></span> <span data-ttu-id="43f30-115">実装することで、問題を回避することがこのような依存関係のある型を作成する場合、`IDeserializationCallback`インターフェイスと`OnDeserialization`メソッド。</span><span class="sxs-lookup"><span data-stu-id="43f30-115">If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method.</span></span>  
  
 <span data-ttu-id="43f30-116">シリアル化アーキテクチャを拡張するオブジェクトの型を処理する<xref:System.MarshalByRefObject>を拡張する型と同じ<xref:System.Object>します。</span><span class="sxs-lookup"><span data-stu-id="43f30-116">The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>.</span></span> <span data-ttu-id="43f30-117">これらの型をマークすることができます、<xref:System.SerializableAttribute>を実装し、<xref:System.Runtime.Serialization.ISerializable>インターフェイスとして他のオブジェクトの種類。</span><span class="sxs-lookup"><span data-stu-id="43f30-117">These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type.</span></span> <span data-ttu-id="43f30-118">そのオブジェクトの状態はキャプチャされ、ストリームに永続化します。</span><span class="sxs-lookup"><span data-stu-id="43f30-118">Their object state will be captured and persisted onto the stream.</span></span>  
  
 <span data-ttu-id="43f30-119">これらの型がで使用されているときに<xref:System.Runtime.Remoting>、リモート処理インフラストラクチャは、一般的なシリアル化に横取りされを代わりにプロキシをシリアル化サロゲートを提供します。、 <xref:System.MarshalByRefObject>。</span><span class="sxs-lookup"><span data-stu-id="43f30-119">When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="43f30-120">サロゲートとは、特定の種類のオブジェクトを逆シリアル化およびシリアル化する方法を認識するヘルパーです。</span><span class="sxs-lookup"><span data-stu-id="43f30-120">A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</span></span> <span data-ttu-id="43f30-121">型のプロキシは、ほとんどの場合、ユーザーに非表示になります<xref:System.Runtime.Remoting.ObjRef>します。</span><span class="sxs-lookup"><span data-stu-id="43f30-121">The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.</span></span>  
  
 <span data-ttu-id="43f30-122">一般的なデザイン パターンでは、としてできなくなるクラスがシリアル化可能な属性でマークする両方および拡張を通常<xref:System.MarshalByRefObject>します。</span><span class="sxs-lookup"><span data-stu-id="43f30-122">As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="43f30-123">開発者は、これら 2 つの特性を結合するときにも、可能なシリアル化とリモート処理シナリオについて慎重に検討する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43f30-123">Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</span></span> <span data-ttu-id="43f30-124">例が場合がありますが、<xref:System.IO.MemoryStream>します。</span><span class="sxs-lookup"><span data-stu-id="43f30-124">One example where this might be applicable is with a <xref:System.IO.MemoryStream>.</span></span> <span data-ttu-id="43f30-125">基本クラスの中に<xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) から拡張<xref:System.MarshalByRefObject>の状態をキャプチャすることは、<xref:System.IO.MemoryStream>はで復元することとします。</span><span class="sxs-lookup"><span data-stu-id="43f30-125">While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will.</span></span> <span data-ttu-id="43f30-126">したがって、あるデータベースにこのストリームの状態をシリアル化して、時間の後で復元することを意味のある場合があります。</span><span class="sxs-lookup"><span data-stu-id="43f30-126">It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</span></span> <span data-ttu-id="43f30-127">ただし、使用すると、リモート処理によるこの型のオブジェクトはプロキシのようになります。</span><span class="sxs-lookup"><span data-stu-id="43f30-127">However, when used through remoting, an object of this type would be proxied.</span></span>  
  
 <span data-ttu-id="43f30-128">拡張するクラスのシリアル化の詳細については<xref:System.MarshalByRefObject>を参照してください<xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>します。</span><span class="sxs-lookup"><span data-stu-id="43f30-128">For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</span></span> <span data-ttu-id="43f30-129">実装の詳細については<xref:System.Runtime.Serialization.ISerializable>を参照してください[カスタム シリアル化](~/docs/standard/serialization/custom-serialization.md)します。</span><span class="sxs-lookup"><span data-stu-id="43f30-129">For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](~/docs/standard/serialization/custom-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43f30-130">次のコード例は、の使用を示します、<xref:System.Runtime.Serialization.ISerializable>インターフェイス クラスのカスタムのシリアル化動作を定義します。</span><span class="sxs-lookup"><span data-stu-id="43f30-130">The following code example demonstrates the use of the <xref:System.Runtime.Serialization.ISerializable> interface to define custom serialization behavior for a class.</span></span>  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="43f30-131">
        <para>独自のシリアル化と逆シリアル化に参加するためにオブジェクトを許可するには、このインターフェイスを実装します。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="43f30-131">
          <para>Implement this interface to allow an object to take part in its own serialization and deserialization.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="43f30-132">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43f30-132">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="43f30-133">このシリアル化のシリアル化先 (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43f30-133">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43f30-134">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、対象のオブジェクトをシリアル化するために必要なデータを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43f30-134">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43f30-135">含まれているすべてのオブジェクト、<xref:System.Runtime.Serialization.SerializationInfo>自動的に追跡され、フォーマッタがシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="43f30-135">Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.</span></span>  
  
 <span data-ttu-id="43f30-136">呼び出すコード<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>が必要です、<xref:System.Security.Permissions.SecurityPermission>シリアル化サービスを提供します。</span><span class="sxs-lookup"><span data-stu-id="43f30-136">Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services.</span></span> <span data-ttu-id="43f30-137"><xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="43f30-137">Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43f30-138">このメソッドが呼び出されること 1 回だけオブジェクトのインスタンスごとのシリアル化中に限りません。</span><span class="sxs-lookup"><span data-stu-id="43f30-138">It is not guaranteed that this method will be called only once per object instance during serialization.</span></span> <span data-ttu-id="43f30-139">したがって、その動作はするが呼び出された回数に関係なく同じように、メソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43f30-139">Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43f30-140">次の例では、<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>シリアル化されたオブジェクトの代替値を設定します。</span><span class="sxs-lookup"><span data-stu-id="43f30-140">The following example uses the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> method to set alternate values for a serialized object.</span></span> <span data-ttu-id="43f30-141">コードを使用して、<xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A>のメソッド、<xref:System.Runtime.Serialization.SerializationInfo>オブジェクトがシリアル化する場合は、代替の値を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="43f30-141">The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized.</span></span> <span data-ttu-id="43f30-142">逆のコンス トラクター、`Person`クラスが逆シリアル化中に呼び出されると、alternatve 値は、使用して取得、<xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A>メソッドとオブジェクトのフィールドを再割り当ています。</span><span class="sxs-lookup"><span data-stu-id="43f30-142">Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.</span></span>  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="43f30-143">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43f30-143">The caller does not have the required permission.</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
  </Members>
</Type>