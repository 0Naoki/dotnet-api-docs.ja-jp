<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISerializable.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e472d101330ad3fe07ac415fe5b90af0a16de62b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e472d101330ad3fe07ac415fe5b90af0a16de62b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Allows an object to control its own serialization and deserialization.</source>
          <target state="translated">オブジェクトが独自のシリアル化および逆シリアル化を制御できるようにします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Any class that might be serialized must be marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>.</source>
          <target state="translated">シリアル化する可能性がある任意のクラスをマークする必要があります、<ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>If a class needs to control its serialization process, it can implement the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</source>
          <target state="translated">クラスをシリアル化プロセスを制御する場合を実装できます、<ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> at serialization time and populates the supplied <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with all the data required to represent the object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph>呼び出し、<ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>シリアル化時に指定された設定と<ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>オブジェクトを表すために必要なすべてのデータ。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with the type of the object in the graph.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph>を作成、<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>グラフ内のオブジェクトの型を使用します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Objects that need to send proxies for themselves can use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt;</ph> methods on <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> to change the transmitted information.</source>
          <target state="translated">オブジェクト自体を使用できるは、プロキシを送信する必要がある、<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt;</ph>メソッドを<ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>送信される情報を変更します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>.</source>
          <target state="translated">クラスの継承の場合を実装する基本クラスから派生するクラスをシリアル化<ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In this case, the derived class should call the base class implementation of <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> inside its implementation of <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>.</source>
          <target state="translated">この場合、派生クラスがの基本クラス実装を呼び出す必要があります<ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>その実装の内部<ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Otherwise, the data from the base class will not be serialized.</source>
          <target state="translated">それ以外の場合、基本クラスからのデータはシリアル化されません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface implies a constructor with the signature constructor (<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> information, <ph id="ph3">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> context).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>インターフェイスにコンス トラクター シグネチャのコンス トラクターを持つ (<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>については、<ph id="ph3">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph>コンテキスト)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>At deserialization time, the current constructor is called only after the data in the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> has been deserialized by the formatter.</source>
          <target state="translated">内のデータの後に逆シリアル化時に、現在のコンス トラクターが呼び出されます、<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>がされたフォーマッタによって逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In general, this constructor should be protected if the class is not sealed.</source>
          <target state="translated">一般に、クラスが封印されていない場合は、このコンス トラクターを保護する必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The order in which objects are deserialized cannot be guaranteed.</source>
          <target state="translated">オブジェクトが逆シリアル化の順序は保証できません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For example, if one type references a type that has not been deserialized yet, an exception will occur.</source>
          <target state="translated">たとえば、1 つの型がないされてまだ逆シリアル化する型を参照する場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>If you are creating types that have such dependencies, you can work around the problem by implementing the <ph id="ph1">`IDeserializationCallback`</ph> interface and the <ph id="ph2">`OnDeserialization`</ph> method.</source>
          <target state="translated">実装することによって、問題を回避することができます、このような依存関係のある型を作成する場合、<ph id="ph1">`IDeserializationCallback`</ph>インターフェイスおよび<ph id="ph2">`OnDeserialization`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The serialization architecture handles object types that extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> the same as types that extend <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">シリアル化のアーキテクチャを拡張するオブジェクトの種類を処理する<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>を拡張する型と同じ<ph id="ph2">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>These types can be marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> and implement the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface as any other object type.</source>
          <target state="translated">これらの型をマークすることができます、<ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>を実装し、<ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>他のオブジェクトの種類のインターフェイスです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Their object state will be captured and persisted onto the stream.</source>
          <target state="translated">そのオブジェクトの状態はキャプチャされ、ストリームに永続化します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>When these types are being used through <ph id="ph1">&lt;xref:System.Runtime.Remoting&gt;</ph>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">これらの型を使用されているときに<ph id="ph1">&lt;xref:System.Runtime.Remoting&gt;</ph>、リモート処理インフラストラクチャよりも一般的なシリアル化し、代わりにプロキシをシリアル化のためのサロゲートの提供、<ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</source>
          <target state="translated">サロゲートは、および特定の種類のオブジェクトを逆シリアル化する方法を知っているヘルパーです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The proxy, invisible to the user in most cases, will be of type <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph>.</source>
          <target state="translated">型プロキシは、ほとんどの場合、ユーザーに非表示である<ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">一般的なデザイン パターンとしてではない通常のシリアル化可能な属性でマークする両方および拡張するクラスの<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</source>
          <target state="translated">開発者は、これら 2 つの特性を結合するときにシリアル化とリモート処理シナリオについて慎重に検討する必要があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>One example where this might be applicable is with a <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">1 つの例が、これを適用できますが、<ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>While the base class of <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> (<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>) extends from <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph>, it is possible to capture the state of a <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> and restore it at will.</source>
          <target state="translated">基本クラスの中に<ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>(<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>) から拡張<ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph>の状態をキャプチャすることは、<ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph>およびに復元します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</source>
          <target state="translated">そのため、あります意味のあるデータベースにこのストリームの状態をシリアル化の後で復元します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>However, when used through remoting, an object of this type would be proxied.</source>
          <target state="translated">ただし、使用すると、リモート処理、この型のオブジェクトはプロキシのようになります。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For more information about serialization of classes that extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, see <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;</ph>.</source>
          <target state="translated">拡張するクラスのシリアル化の詳細については<ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>を参照してください<ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For more information about implementing <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>, see <bpt id="p1">[</bpt>Custom Serialization<ept id="p1">](~/docs/standard/serialization/custom-serialization.md)</ept>.</source>
          <target state="translated">実装の詳細については<ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>を参照してください<bpt id="p1">[</bpt>カスタム シリアル化<ept id="p1">](~/docs/standard/serialization/custom-serialization.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface to define custom serialization behavior for a class.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>クラスに対してカスタムのシリアル化の動作を定義するインターフェイスです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Implement this interface to allow an object to take part in its own serialization and deserialization.</source>
          <target state="translated">シリアル化および逆シリアル化を行うにオブジェクトを許可するには、このインターフェイスを実装します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> to populate with data.</source>
          <target state="translated">データの読み込み先となる <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination (see <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) for this serialization.</source>
          <target state="translated">このシリアル化のシリアル化先 (<ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> を参照)。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> with the data needed to serialize the target object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> に、対象のオブジェクトをシリアル化するために必要なデータを設定します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Any objects that are included in the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> are automatically tracked and serialized by the formatter.</source>
          <target state="translated">含まれているすべてのオブジェクト、<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>自動的に追跡され、フォーマッタによってシリアル化します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Code that calls <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> requires the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> for providing serialization services.</source>
          <target state="translated">呼び出すコード<ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>が必要です、<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>をシリアル化サービスを提供します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration: <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>It is not guaranteed that this method will be called only once per object instance during serialization.</source>
          <target state="translated">このメソッドは呼び出すこと 1 回だけオブジェクトのインスタンスごとのシリアル化中に限りません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</source>
          <target state="translated">そのため、その動作がなる呼び出された回数に関係なく同じように、メソッドを実装する必要があります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> method to set alternate values for a serialized object.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>シリアル化されたオブジェクトの代替値を設定します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> class to store the alternate values when the object is serialized.</source>
          <target state="translated">コードを使用して、<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>オブジェクトがシリアル化されるときに、代替値を格納するクラス。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Conversely, when the constructor of the <ph id="ph1">`Person`</ph> class is called during deserialization, the alternatve values are retrieved using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A&gt;</ph> method and reassigned to the object's fields.</source>
          <target state="translated">逆のコンス トラクター、<ph id="ph1">`Person`</ph>クラスが逆シリアル化中に呼び出されると、使用して、alternatve 値を取得、<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A&gt;</ph>メソッド、オブジェクトのフィールドに再割り当てされるとします。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>