<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3d03571457cd704c114939358e83035b77f58fcd" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39978609" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="07dc3-101">カスタム式のデザイン時エディター シートを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07dc3-101">Represents a design-time editor sheet for a custom expression.</span>
      </span>
      <span data-ttu-id="07dc3-102">このクラスは継承する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07dc3-102">This class must be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07dc3-103">カスタム式エディター シートでは、開発者がデザイン時にカスタム式のプロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="07dc3-103">A custom expression editor sheet lets a developer set properties on a custom expression at design-time.</span></span> <span data-ttu-id="07dc3-104">式文字列を使用して、コントロール プロパティの値を設定することができます。式の文字列は、式エディターで式ビルダーによって実行時に、デザイン時に評価されます。</span><span class="sxs-lookup"><span data-stu-id="07dc3-104">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.</span></span>  
  
 <span data-ttu-id="07dc3-105">参照すると、<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>デザイン時のプロパティ グリッド内のコントロールのプロパティは、ビジュアル デザイナー、コントロール プロパティの値を提供する式を設定する ダイアログ ボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="07dc3-105">When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property.</span></span> <span data-ttu-id="07dc3-106">式のプリフィックスのリストに基づく式の型を選択することができます。</span><span class="sxs-lookup"><span data-stu-id="07dc3-106">You can select the expression type based on a list of expression prefixes.</span></span> <span data-ttu-id="07dc3-107">ビジュアル デザイナーを使用して、関連付けられている、一覧から式プレフィックスを選択すると<xref:System.Web.UI.Design.ExpressionEditor>と<xref:System.Web.UI.Design.ExpressionEditorSheet>その式の構文に基づいてオブジェクトを評価し、式の文字列を変換します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-107">When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression.</span></span> <span data-ttu-id="07dc3-108">ビジュアル デザイナーでは、式エディター シートのプロパティを使用して、カスタム式の文字列に結合する 1 つまたは複数の文字列の入力を求めます。</span><span class="sxs-lookup"><span data-stu-id="07dc3-108">The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.</span></span>  
  
 <span data-ttu-id="07dc3-109">通常をデザイン時に新しい式の型を指定する式の一意のプレフィックスを定義し、ユーザー設定を提供<xref:System.Web.Compilation.ExpressionBuilder>と<xref:System.Web.UI.Design.ExpressionEditor>実装します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-109">Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations.</span></span> <span data-ttu-id="07dc3-110">必要に応じて、カスタムを行うことができます<xref:System.Web.UI.Design.ExpressionEditorSheet>条件式に使用されるプロパティを定義する実装。</span><span class="sxs-lookup"><span data-stu-id="07dc3-110">Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression.</span></span> <span data-ttu-id="07dc3-111">式ビルダーと式エディターに式プレフィックスを関連付けるには、適用、<xref:System.Web.Compilation.ExpressionEditorAttribute>属性および<xref:System.Web.Compilation.ExpressionPrefixAttribute>をカスタム属性<xref:System.Web.Configuration.ExpressionBuilder>クラスし、式ビルダーでの式のプレフィックスを構成`expressionBuilders` Web 構成ファイル内の要素。</span><span class="sxs-lookup"><span data-stu-id="07dc3-111">To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.</span></span>  
  
 <span data-ttu-id="07dc3-112">既定の実装、<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>メソッドは、式に 1 つの入力文字列を使用する基本的なエディター シートを返します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-112">The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression.</span></span> <span data-ttu-id="07dc3-113">派生したカスタム式エディター、<xref:System.Web.UI.Design.ExpressionEditor>をオーバーライドできます、<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>をカスタム エディター シートの実装を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="07dc3-113">Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span> <span data-ttu-id="07dc3-114">通常、カスタム エディター シートには、式の文字列の構築に使用される複数のプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="07dc3-114">Typically, a custom editor sheet contains multiple properties that are used to build the expression string.</span></span> <span data-ttu-id="07dc3-115"><xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>メソッドは現在の式のプロパティに基づいて結果として得られる式の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-115">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.</span></span>  
  
 <span data-ttu-id="07dc3-116">たとえば、<xref:System.Web.UI.Design.ResourceExpressionEditor>クラスから派生、<xref:System.Web.UI.Design.ExpressionEditor>クラスし、評価し、デザイン時にコントロール プロパティを持つリソース文字列の参照を関連付けることの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-116">For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time.</span></span> <span data-ttu-id="07dc3-117"><xref:System.Web.Compilation.ResourceExpressionBuilder>クラスは、式のプレフィックスに関連付けられて`Resources`、<xref:System.Web.UI.Design.ResourceExpressionEditor>実装します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-117">The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation.</span></span> <span data-ttu-id="07dc3-118"><xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A>メソッドを返します。 を<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>、リソースの参照式を形成する個々 のプロパティを定義します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-118">The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.</span></span>  
  
 <span data-ttu-id="07dc3-119">継承する場合、<xref:System.Web.UI.Design.ExpressionEditorSheet>クラスでは、次のメンバーをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="07dc3-119">When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:</span></span>  
  
-   <span data-ttu-id="07dc3-120"><xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>をカスタム エディター シートの実装を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="07dc3-120">The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span>  
  
-   <span data-ttu-id="07dc3-121"><xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>式エディター シートの実装のカスタムの初期化アクションを実装するコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="07dc3-121">The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="07dc3-122">
        <para>カスタム式エディター シートからの派生、<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />クラス、コントロール プロパティの値の新しい式の型を定義して、式の文字列をビルドする場合は、複数の expression プロパティの値に基づいています。派生クラスの実装は、次を含める必要があります:-のパブリック プロパティをデザイン時に設定できる式の文字列の個々 の値。 -の実装、<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />カスタム式エディター シートのプロパティの値から文字列を形成するメソッド。 -必要に応じて、コンス トラクター実装シートのプロパティ エディターの初期値を設定します。関連付けられているカスタム式エディターのクラスの派生のエディター シートのインスタンスを作成する、<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />メソッド、現在の式文字列がコントロールのプロパティの設定をそのインスタンスを初期化し、ビジュアル デザイナーにインスタンスを返します。ビジュアル デザイナーは、式のシートのプロパティを設定することができ、呼び出して、<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />入力式のシートのプロパティ値から式の文字列を形成するメソッド。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="07dc3-122">
          <para>Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values. A derived class implementation should contain the following:  -   A public property for each distinct value in the expression string that can be set at design time.  -   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.  -   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.  The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and returns the instance to the visual designer. The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">
          <span data-ttu-id="07dc3-123">デザイナー ホストによって提供されるサービス プロバイダーの実装。追加のデザイン時サービスを取得するときに使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-123">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07dc3-124">
            <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-124">Initializes a new instance of the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07dc3-125"><xref:System.Web.UI.Design.ExpressionEditorSheet>クラスが抽象クラスのインスタンスを作成することはできません、<xref:System.Web.UI.Design.ExpressionEditorSheet>を使用して直接、<xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="07dc3-125">Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="07dc3-126">
            <para>派生する場合、<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />クラスでオーバーライド、<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />式エディター シートの実装のカスタムの初期化アクションを実装するコンス トラクター。その他の式のプロパティを実装するカスタム式エディター シートのクラスが式のプロパティの既定値を定義するなど、<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />コンス トラクター。カスタム式エディター シート クラスには、式のプロパティの初期値を設定する入力パラメーターの値を使用する追加のパブリック コンス トラクターのオーバー ロードを定義できます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-126">
              <para>When deriving from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, override the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor to implement custom initialization actions for your expression editor sheet implementation.  For example, a custom expression editor sheet class that implements additional expression properties can define the default values for the expression properties in the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor. A custom expression editor sheet class can define additional public constructor overloads that use input parameter values to set the initial values for the expression properties.</para>
            </span>
          </span>
        </block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07dc3-127">派生クラスでオーバーライドされると、式エディター シートのプロパティ値によって作成される式文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-127">When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07dc3-128">現在のプロパティ値のカスタム式文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-128">The custom expression string for the current property values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07dc3-129">カスタム式エディター シートには、式の文字列が組み合わされた複数の式プロパティのデザイン時の設定が含まれています。</span><span class="sxs-lookup"><span data-stu-id="07dc3-129">A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string.</span></span> <span data-ttu-id="07dc3-130">式文字列を使用して、コントロール プロパティの値を設定することができます。式の文字列は、式ビルダーによって、実行時に評価されます。</span><span class="sxs-lookup"><span data-stu-id="07dc3-130">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.</span></span>  
  
 <span data-ttu-id="07dc3-131"><xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>メソッドは、現在の式のプロパティから組み込まれている式の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-131">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties.</span></span> <span data-ttu-id="07dc3-132">ビジュアル デザイナーは、式のシートのプロパティを設定することができ、呼び出して、<xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>メソッドを式の文字列を取得およびコントロールのプロパティ値を設定します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-132">The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="07dc3-133">
            <para>カスタム式エディター シートからの派生、<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />クラス、コントロール プロパティの値の新しい式の型を定義して、式の文字列をビルドする場合は、複数の expression プロパティの値に基づいています。派生クラスの実装は、次を含める必要があります:-のパブリック プロパティをデザイン時に設定できる式の文字列の個々 の値。 -の実装、<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />カスタム式エディター シートのプロパティの値から文字列を形成するメソッド。 -必要に応じて、コンス トラクター実装シートのプロパティ エディターの初期値を設定します。関連付けられているカスタム式エディターのクラスの派生のエディター シートのインスタンスを作成する、<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />メソッド、現在の式文字列がコントロールのプロパティの設定をそのインスタンスを初期化しますおよびビジュアルに、インスタンスを返しますデザイナー。ビジュアル デザイナーは、式のシートのプロパティを設定することができ、呼び出して、<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />入力式のシートのプロパティ値から式の文字列を形成するメソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-133">
              <para>Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values. A derived class implementation should contain the following:  -   A public property for each distinct value in the expression string that can be set at design time.  -   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.  -   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.  The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and then returns the instance to the visual designer. The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07dc3-134">式文字列が有効かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-134">Gets a value that indicates whether the expression string is valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07dc3-135">式文字列が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-135">
              <see langword="true" />, if the expression string is valid; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07dc3-136">この基本実装は常に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-136">This base implementation always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07dc3-137">式エディター シートによって使用されるサービス プロバイダー実装を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-137">Gets the service provider implementation that is used by the expression editor sheet.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07dc3-138">
            <see cref="T:System.IServiceProvider" />。通常はデザイン ホストから提供され、追加のデザイン時サービスを取得するために使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07dc3-138">An <see cref="T:System.IServiceProvider" />, typically provided by the design host, that can be used to obtain additional design-time services.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07dc3-139">使用して、<xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>を設定するコンス トラクター、<xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>カスタム式エディター シートを実装します。</span><span class="sxs-lookup"><span data-stu-id="07dc3-139">Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet.</span></span>  
  
 <span data-ttu-id="07dc3-140"><xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>デザイナー ホストによって提供されるサービスにアクセスするプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="07dc3-140">The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host.</span></span> <span data-ttu-id="07dc3-141">たとえば、呼び出し、<xref:System.IServiceProvider.GetService%2A>メソッドを<xref:System.Web.UI.Design.IWebApplication>プロジェクト項目にアクセスする、ドキュメント、またはビジュアル デザイナーによって提供される構成ファイルの詳細情報へのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="07dc3-141">For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>