<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="997f9e8e7cd826820dd4eee3904701d0e7714eaf" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69044546" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="efa89-101">カスタム式のデザイン時エディター シートを表します。</span><span class="sxs-lookup"><span data-stu-id="efa89-101">Represents a design-time editor sheet for a custom expression.</span></span> <span data-ttu-id="efa89-102">このクラスは継承する必要があります。</span><span class="sxs-lookup"><span data-stu-id="efa89-102">This class must be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa89-103">カスタム式エディターシートを使用すると、開発者はデザイン時にカスタム式のプロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-103">A custom expression editor sheet lets a developer set properties on a custom expression at design-time.</span></span> <span data-ttu-id="efa89-104">コントロールプロパティの値は、式文字列を使用して設定できます。式の文字列は、実行時に式ビルダーによって、デザイン時に式エディターによって評価されます。</span><span class="sxs-lookup"><span data-stu-id="efa89-104">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.</span></span>  
  
 <span data-ttu-id="efa89-105">[デザイン時の<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>プロパティ] グリッドでコントロールのプロパティを参照すると、ビジュアルデザイナーにダイアログボックスが表示され、コントロールプロパティの値を指定する式を設定できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-105">When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property.</span></span> <span data-ttu-id="efa89-106">式のプレフィックスの一覧に基づいて、式の種類を選択できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-106">You can select the expression type based on a list of expression prefixes.</span></span> <span data-ttu-id="efa89-107">一覧から式のプレフィックスを選択すると、ビジュアルデザイナーは、関連付け<xref:System.Web.UI.Design.ExpressionEditor>ら<xref:System.Web.UI.Design.ExpressionEditorSheet>れたオブジェクトとオブジェクトを使用して、式の型の構文に基づいて式文字列を評価し、変換します。</span><span class="sxs-lookup"><span data-stu-id="efa89-107">When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression.</span></span> <span data-ttu-id="efa89-108">ビジュアルデザイナーでは、式エディターシートのプロパティを使用して、カスタム式文字列に結合される1つ以上の文字列を入力するように要求します。</span><span class="sxs-lookup"><span data-stu-id="efa89-108">The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.</span></span>  
  
 <span data-ttu-id="efa89-109">通常、デザイン時に新しい式の型を指定するには、一意の式プレフィックスを定義<xref:System.Web.Compilation.ExpressionBuilder>し<xref:System.Web.UI.Design.ExpressionEditor> 、カスタムおよび実装を指定します。</span><span class="sxs-lookup"><span data-stu-id="efa89-109">Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations.</span></span> <span data-ttu-id="efa89-110">必要に応じて、式の<xref:System.Web.UI.Design.ExpressionEditorSheet>作成に使用されるプロパティを定義するカスタム実装を提供できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-110">Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression.</span></span> <span data-ttu-id="efa89-111">式のプレフィックスを式ビルダーと式エディターに関連付けるには、 <xref:System.Web.Compilation.ExpressionEditorAttribute>属性<xref:System.Web.Compilation.ExpressionPrefixAttribute>と属性をカスタム<xref:System.Web.Configuration.ExpressionBuilder>クラスに適用し、で式ビルダーの式のプレフィックスを構成します。Web 構成ファイル内の要素。`expressionBuilders`</span><span class="sxs-lookup"><span data-stu-id="efa89-111">To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.</span></span>  
  
 <span data-ttu-id="efa89-112"><xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>メソッドの既定の実装は、1つの入力文字列を使用して式を形成する基本的なエディターシートを返します。</span><span class="sxs-lookup"><span data-stu-id="efa89-112">The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression.</span></span> <span data-ttu-id="efa89-113">から<xref:System.Web.UI.Design.ExpressionEditor>派生したカスタム式エディターでは、メソッド<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>をオーバーライドして、カスタムエディターシートの実装を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="efa89-113">Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span> <span data-ttu-id="efa89-114">通常、カスタムエディターシートには、式文字列の作成に使用される複数のプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="efa89-114">Typically, a custom editor sheet contains multiple properties that are used to build the expression string.</span></span> <span data-ttu-id="efa89-115">メソッド<xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>は、現在の式のプロパティに基づいて、結果として得られる式の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="efa89-115">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.</span></span>  
  
 <span data-ttu-id="efa89-116">たとえば、クラスは<xref:System.Web.UI.Design.ResourceExpressionEditor> <xref:System.Web.UI.Design.ExpressionEditor>クラスから派生し、リソース文字列参照を評価し、デザイン時にコントロールプロパティと関連付けるための実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="efa89-116">For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time.</span></span> <span data-ttu-id="efa89-117">クラスは、式のプレフィックス`Resources`と<xref:System.Web.UI.Design.ResourceExpressionEditor>実装に関連付けられています。 <xref:System.Web.Compilation.ResourceExpressionBuilder></span><span class="sxs-lookup"><span data-stu-id="efa89-117">The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation.</span></span> <span data-ttu-id="efa89-118">メソッド<xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A>は、リソース<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>参照式を形成する個々のプロパティを定義するを返します。</span><span class="sxs-lookup"><span data-stu-id="efa89-118">The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.</span></span>  
  
 <span data-ttu-id="efa89-119"><xref:System.Web.UI.Design.ExpressionEditorSheet>クラスから継承する場合は、次のメンバーをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="efa89-119">When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:</span></span>  
  
-   <span data-ttu-id="efa89-120">カスタムエディターシートの実装を返すメソッド。<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A></span><span class="sxs-lookup"><span data-stu-id="efa89-120">The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span>  
  
-   <span data-ttu-id="efa89-121">式エディターシートの実装のためのカスタム初期化アクションを実装するコンストラクター。<xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A></span><span class="sxs-lookup"><span data-stu-id="efa89-121">The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="efa89-122">コントロールプロパティ値に新しい式の型<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />を定義していて、複数の式のプロパティ値に基づいて式文字列を作成する場合は、クラスからカスタム式エディターシートを派生させます。</span><span class="sxs-lookup"><span data-stu-id="efa89-122">Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values.</span></span> <span data-ttu-id="efa89-123">派生クラスの実装には、次のものが含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="efa89-123">A derived class implementation should contain the following:</span></span> 
<span data-ttu-id="efa89-124">-デザイン時に設定できる式文字列内の個別の値ごとのパブリックプロパティ。</span><span class="sxs-lookup"><span data-stu-id="efa89-124">-   A public property for each distinct value in the expression string that can be set at design time.</span></span>  
  
<span data-ttu-id="efa89-125">-エディターシートのプロパティ<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />値からカスタム式文字列を形成するメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="efa89-125">-   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.</span></span>  
  
<span data-ttu-id="efa89-126">-必要に応じて、エディターシートのプロパティの初期値を設定するコンストラクターの実装。</span><span class="sxs-lookup"><span data-stu-id="efa89-126">-   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.</span></span>  
  
<span data-ttu-id="efa89-127">関連するカスタム式エディタークラスは、 <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />メソッドに派生したエディターシートのインスタンスを作成し、そのインスタンスをコントロールプロパティに設定されている現在の式文字列を使用して初期化し、そのインスタンスをビジュアルデザイナーに返します。</span><span class="sxs-lookup"><span data-stu-id="efa89-127">The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and returns the instance to the visual designer.</span></span> <span data-ttu-id="efa89-128">ビジュアルデザイナーでは、式シートのプロパティを設定し、 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />メソッドを呼び出して、入力式シートのプロパティ値から式文字列を作成できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-128">The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</span></span></para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider"><span data-ttu-id="efa89-129">デザイナー ホストによって提供されるサービス プロバイダーの実装。追加のデザイン時サービスを取得するときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="efa89-129">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</span></span></param>
        <summary><span data-ttu-id="efa89-130"><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="efa89-130">Initializes a new instance of the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa89-131">クラスは抽象クラスであるため、 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>コンストラクターを使用して<xref:System.Web.UI.Design.ExpressionEditorSheet>のインスタンスを直接作成することはできません。 <xref:System.Web.UI.Design.ExpressionEditorSheet></span><span class="sxs-lookup"><span data-stu-id="efa89-131">Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="efa89-132"><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />クラスから派生する場合は、 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />コンストラクターをオーバーライドして、式エディターシートの実装に対するカスタム初期化アクションを実装します。</span><span class="sxs-lookup"><span data-stu-id="efa89-132">When deriving from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, override the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor to implement custom initialization actions for your expression editor sheet implementation.</span></span>  
  
<span data-ttu-id="efa89-133">たとえば、追加の式プロパティを実装するカスタム式エディターシートクラスでは、 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />コンストラクターの式プロパティの既定値を定義できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-133">For example, a custom expression editor sheet class that implements additional expression properties can define the default values for the expression properties in the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor.</span></span> <span data-ttu-id="efa89-134">カスタム式エディターシートクラスでは、入力パラメーター値を使用して式のプロパティの初期値を設定する追加のパブリックコンストラクターオーバーロードを定義できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-134">A custom expression editor sheet class can define additional public constructor overloads that use input parameter values to set the initial values for the expression properties.</span></span></para></block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="efa89-135">派生クラスでオーバーライドされると、式エディター シートのプロパティ値によって作成される式文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="efa89-135">When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.</span></span></summary>
        <returns><span data-ttu-id="efa89-136">現在のプロパティ値のカスタム式文字列。</span><span class="sxs-lookup"><span data-stu-id="efa89-136">The custom expression string for the current property values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa89-137">カスタム式エディターシートには、式の文字列を形成するために結合される、複数の式のプロパティのデザイン時設定が含まれています。</span><span class="sxs-lookup"><span data-stu-id="efa89-137">A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string.</span></span> <span data-ttu-id="efa89-138">コントロールプロパティの値は、式文字列を使用して設定できます。式の文字列は、実行時に式ビルダーによって評価されます。</span><span class="sxs-lookup"><span data-stu-id="efa89-138">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.</span></span>  
  
 <span data-ttu-id="efa89-139">メソッド<xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>は、現在の式のプロパティから構築された式文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="efa89-139">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties.</span></span> <span data-ttu-id="efa89-140">ビジュアルデザイナーでは、式シートのプロパティを設定し、 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>メソッドを呼び出して式文字列を取得し、コントロールプロパティ値を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="efa89-140">The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="efa89-141">コントロールプロパティ値に新しい式の型<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />を定義していて、複数の式のプロパティ値に基づいて式文字列を作成する場合は、クラスからカスタム式エディターシートを派生させます。</span><span class="sxs-lookup"><span data-stu-id="efa89-141">Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values.</span></span> <span data-ttu-id="efa89-142">派生クラスの実装には、次のものが含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="efa89-142">A derived class implementation should contain the following:</span></span> 
<span data-ttu-id="efa89-143">-デザイン時に設定できる式文字列内の個別の値ごとのパブリックプロパティ。</span><span class="sxs-lookup"><span data-stu-id="efa89-143">-   A public property for each distinct value in the expression string that can be set at design time.</span></span>  
  
<span data-ttu-id="efa89-144">-エディターシートのプロパティ<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />値からカスタム式文字列を形成するメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="efa89-144">-   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.</span></span>  
  
<span data-ttu-id="efa89-145">-必要に応じて、エディターシートのプロパティの初期値を設定するコンストラクターの実装。</span><span class="sxs-lookup"><span data-stu-id="efa89-145">-   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.</span></span>  
  
<span data-ttu-id="efa89-146">関連するカスタム式エディタークラスは、 <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />メソッド内に派生したエディターシートのインスタンスを作成し、そのインスタンスをコントロールプロパティに設定されている現在の式文字列で初期化してから、そのインスタンスをビジュアルに返します。デザイナ.</span><span class="sxs-lookup"><span data-stu-id="efa89-146">The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and then returns the instance to the visual designer.</span></span> <span data-ttu-id="efa89-147">ビジュアルデザイナーでは、式シートのプロパティを設定し、 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />メソッドを呼び出して、入力式シートのプロパティ値から式文字列を作成できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-147">The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</span></span></para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="efa89-148">式文字列が有効かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="efa89-148">Gets a value that indicates whether the expression string is valid.</span></span></summary>
        <value><span data-ttu-id="efa89-149">式文字列が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="efa89-149"><see langword="true" />, if the expression string is valid; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa89-150">この基本実装は常に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="efa89-150">This base implementation always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="efa89-151">式エディター シートによって使用されるサービス プロバイダー実装を取得します。</span><span class="sxs-lookup"><span data-stu-id="efa89-151">Gets the service provider implementation that is used by the expression editor sheet.</span></span></summary>
        <value><span data-ttu-id="efa89-152"><see cref="T:System.IServiceProvider" />。通常はデザイン ホストから提供され、追加のデザイン時サービスを取得するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="efa89-152">An <see cref="T:System.IServiceProvider" />, typically provided by the design host, that can be used to obtain additional design-time services.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa89-153">コンストラクターを使用して、 <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>カスタム式エディターシートの実装を設定します。 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A></span><span class="sxs-lookup"><span data-stu-id="efa89-153">Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet.</span></span>  
  
 <span data-ttu-id="efa89-154">プロパティ<xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>は、デザイナーホストによって提供されるサービスにアクセスするために使用できます。</span><span class="sxs-lookup"><span data-stu-id="efa89-154">The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host.</span></span> <span data-ttu-id="efa89-155">たとえば、ビジュアルデザイナーで<xref:System.IServiceProvider.GetService%2A>提供され<xref:System.Web.UI.Design.IWebApplication>ているプロジェクト項目、ドキュメント、または構成ファイルの詳細にアクセスするには、インターフェイスを使用してメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="efa89-155">For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>
