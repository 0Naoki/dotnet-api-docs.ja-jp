<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="997f9e8e7cd826820dd4eee3904701d0e7714eaf" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70690554" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>カスタム式のデザイン時エディター シートを表します。 このクラスは継承する必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム式エディターシートを使用すると、開発者はデザイン時にカスタム式のプロパティを設定できます。 コントロールプロパティの値は、式文字列を使用して設定できます。式の文字列は、実行時に式ビルダーによって、デザイン時に式エディターによって評価されます。  
  
 [デザイン時の<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>プロパティ] グリッドでコントロールのプロパティを参照すると、ビジュアルデザイナーにダイアログボックスが表示され、コントロールプロパティの値を指定する式を設定できます。 式のプレフィックスの一覧に基づいて、式の種類を選択できます。 一覧から式のプレフィックスを選択すると、ビジュアルデザイナーは、関連付け<xref:System.Web.UI.Design.ExpressionEditor>ら<xref:System.Web.UI.Design.ExpressionEditorSheet>れたオブジェクトとオブジェクトを使用して、式の型の構文に基づいて式文字列を評価し、変換します。 ビジュアルデザイナーでは、式エディターシートのプロパティを使用して、カスタム式文字列に結合される1つ以上の文字列を入力するように要求します。  
  
 通常、デザイン時に新しい式の型を指定するには、一意の式プレフィックスを定義<xref:System.Web.Compilation.ExpressionBuilder>し<xref:System.Web.UI.Design.ExpressionEditor> 、カスタムおよび実装を指定します。 必要に応じて、式の<xref:System.Web.UI.Design.ExpressionEditorSheet>作成に使用されるプロパティを定義するカスタム実装を提供できます。 式のプレフィックスを式ビルダーと式エディターに関連付けるには、 <xref:System.Web.Compilation.ExpressionEditorAttribute>属性<xref:System.Web.Compilation.ExpressionPrefixAttribute>と属性をカスタム<xref:System.Web.Configuration.ExpressionBuilder>クラスに適用し、で式ビルダーの式のプレフィックスを構成します。Web 構成ファイル内の要素。 `expressionBuilders`  
  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>メソッドの既定の実装は、1つの入力文字列を使用して式を形成する基本的なエディターシートを返します。 から<xref:System.Web.UI.Design.ExpressionEditor>派生したカスタム式エディターでは、メソッド<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>をオーバーライドして、カスタムエディターシートの実装を返すことができます。 通常、カスタムエディターシートには、式文字列の作成に使用される複数のプロパティが含まれています。 メソッド<xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>は、現在の式のプロパティに基づいて、結果として得られる式の文字列を返します。  
  
 たとえば、クラスは<xref:System.Web.UI.Design.ResourceExpressionEditor> <xref:System.Web.UI.Design.ExpressionEditor>クラスから派生し、リソース文字列参照を評価し、デザイン時にコントロールプロパティと関連付けるための実装を提供します。 クラスは、式のプレフィックス`Resources`と<xref:System.Web.UI.Design.ResourceExpressionEditor>実装に関連付けられています。 <xref:System.Web.Compilation.ResourceExpressionBuilder> メソッド<xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A>は、リソース<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>参照式を形成する個々のプロパティを定義するを返します。  
  
 <xref:System.Web.UI.Design.ExpressionEditorSheet>クラスから継承する場合は、次のメンバーをオーバーライドする必要があります。  
  
-   カスタムエディターシートの実装を返すメソッド。 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>  
  
-   式エディターシートの実装のためのカスタム初期化アクションを実装するコンストラクター。 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>コントロールプロパティ値に新しい式の型<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />を定義していて、複数の式のプロパティ値に基づいて式文字列を作成する場合は、クラスからカスタム式エディターシートを派生させます。 派生クラスの実装には、次のものが含まれている必要があります。 
-デザイン時に設定できる式文字列内の個別の値ごとのパブリックプロパティ。  
  
-エディターシートのプロパティ<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />値からカスタム式文字列を形成するメソッドの実装。  
  
-必要に応じて、エディターシートのプロパティの初期値を設定するコンストラクターの実装。  
  
関連するカスタム式エディタークラスは、 <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />メソッドに派生したエディターシートのインスタンスを作成し、そのインスタンスをコントロールプロパティに設定されている現在の式文字列を使用して初期化し、そのインスタンスをビジュアルデザイナーに返します。 ビジュアルデザイナーでは、式シートのプロパティを設定し、 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />メソッドを呼び出して、入力式シートのプロパティ値から式文字列を作成できます。</para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">デザイナー ホストによって提供されるサービス プロバイダーの実装。追加のデザイン時サービスを取得するときに使用されます。</param>
        <summary><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスは抽象クラスであるため、 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>コンストラクターを使用して<xref:System.Web.UI.Design.ExpressionEditorSheet>のインスタンスを直接作成することはできません。 <xref:System.Web.UI.Design.ExpressionEditorSheet>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />クラスから派生する場合は、 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />コンストラクターをオーバーライドして、式エディターシートの実装に対するカスタム初期化アクションを実装します。  
  
たとえば、追加の式プロパティを実装するカスタム式エディターシートクラスでは、 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />コンストラクターの式プロパティの既定値を定義できます。 カスタム式エディターシートクラスでは、入力パラメーター値を使用して式のプロパティの初期値を設定する追加のパブリックコンストラクターオーバーロードを定義できます。</para></block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、式エディター シートのプロパティ値によって作成される式文字列を返します。</summary>
        <returns>現在のプロパティ値のカスタム式文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム式エディターシートには、式の文字列を形成するために結合される、複数の式のプロパティのデザイン時設定が含まれています。 コントロールプロパティの値は、式文字列を使用して設定できます。式の文字列は、実行時に式ビルダーによって評価されます。  
  
 メソッド<xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>は、現在の式のプロパティから構築された式文字列を返します。 ビジュアルデザイナーでは、式シートのプロパティを設定し、 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>メソッドを呼び出して式文字列を取得し、コントロールプロパティ値を設定することができます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>コントロールプロパティ値に新しい式の型<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />を定義していて、複数の式のプロパティ値に基づいて式文字列を作成する場合は、クラスからカスタム式エディターシートを派生させます。 派生クラスの実装には、次のものが含まれている必要があります。 
-デザイン時に設定できる式文字列内の個別の値ごとのパブリックプロパティ。  
  
-エディターシートのプロパティ<see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />値からカスタム式文字列を形成するメソッドの実装。  
  
-必要に応じて、エディターシートのプロパティの初期値を設定するコンストラクターの実装。  
  
関連するカスタム式エディタークラスは、 <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />メソッド内に派生したエディターシートのインスタンスを作成し、そのインスタンスをコントロールプロパティに設定されている現在の式文字列で初期化してから、そのインスタンスをビジュアルに返します。デザイナ. ビジュアルデザイナーでは、式シートのプロパティを設定し、 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />メソッドを呼び出して、入力式シートのプロパティ値から式文字列を作成できます。</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>式文字列が有効かどうかを示す値を取得します。</summary>
        <value>式文字列が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この基本実装は常に `true` を返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>式エディター シートによって使用されるサービス プロバイダー実装を取得します。</summary>
        <value><see cref="T:System.IServiceProvider" />。通常はデザイン ホストから提供され、追加のデザイン時サービスを取得するために使用されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンストラクターを使用して、 <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>カスタム式エディターシートの実装を設定します。 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A>  
  
 プロパティ<xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>は、デザイナーホストによって提供されるサービスにアクセスするために使用できます。 たとえば、ビジュアルデザイナーで<xref:System.IServiceProvider.GetService%2A>提供され<xref:System.Web.UI.Design.IWebApplication>ているプロジェクト項目、ドキュメント、または構成ファイルの詳細にアクセスするには、インターフェイスを使用してメソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>
