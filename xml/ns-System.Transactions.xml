<Namespace Name="System.Transactions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6888244b3701c273a4a914f4aedd622d8ea29c67" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51888839" /></Metadata><Docs>
    <summary><see cref="N:System.Transactions" /> 名前空間には、トランザクション アプリケーションやリソース マネージャーを独自に作成するためのクラスが含まれます。 具体的には、1 つまたは複数の参加要素を含むローカル トランザクションまたは分散トランザクションを作成し、参加できます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  のみ、Windows 2000、Windows XP および Windows 2003 のプラットフォームでは、この名前空間を使用してアプリケーションを作成できます。 Windows 98 および Windows ME プラットフォーム スローでトランザクションを作成、<xref:System.PlatformNotSupportedException>します。  
  
 <xref:System.Transactions>インフラストラクチャにより、トランザクション プログラミング シンプルで、プラットフォーム全体で効率的な SQL Server、ADO.NET、MSMQ、および Microsoft 分散トランザクション コーディネーター (MSDTC) で開始されたトランザクションをサポートすることで。 明示的なプログラミング モデルに基づくを提供します、<xref:System.Transactions.Transaction>クラスだけでなく、暗黙的なプログラミング モデルを使用して、<xref:System.Transactions.TransactionScope>トランザクションを自動的にインフラストラクチャによって管理するクラス。 開発を容易に暗黙的なモデルを使用することを強くお勧めします。 最初に、次を参照してください。、[実装 An Implicit Transaction Using Transaction Scope](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85))トピック。 トランザクション アプリケーションの作成の詳細については、次を参照してください。 [Writing A Transactional Application](~/docs/framework/data/transactions/writing-a-transactional-application.md)します。
  
 <xref:System.Transactions> また、リソース マネージャーを実装するための型を提供します。 ネイティブのトランザクション マネージャー、<xref:System.Transactions>インフラストラクチャが揮発性リソースまたはコミットまたはロールバック効率的にする 1 つの持続性のあるリソースの参加を許可します。 リソース マネージャーの実装の詳細については、次を参照してください。 [Implementing A Resource Manager](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)します。  
  
 トランザクション マネージャーは、透過的にも、その他の永続的リソース マネージャーがそれ自体をトランザクションに参加させたときに、DTC などのディスク ベースのトランザクション マネージャーによって調整することでローカル トランザクションを分散トランザクションをエスカレートします。 <xref:System.Transactions> インフラストラクチャでは、主に 2 つの方法でパフォーマンスを向上させています。  
  
-   ダイナミック エスカレーション、つまり、<xref:System.Transactions>インフラストラクチャが msdtc のみトランザクションを実際に必要な場合。 この領域で詳しく解説については、 [Transaction Management Escalation](https://msdn.microsoft.com/library/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)トピック。  
  
-   昇格可能参加リスト。これにより、データベースなどのリソースが、トランザクションに参加している唯一のエンティティである場合に、トランザクションの所有権を取得できます。 後で、必要な場合は、<xref:System.Transactions>インフラストラクチャは、管理のために msdtc トランザクションをエスカレートできます。 これにより、MSDTC の使用頻度をさらに減らすことができます。 この領域で詳しく解説については、 [Optimization を使用して 1 つのフェーズの Commit and Promotable Single Phase Notification](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms229980(v=vs.85))トピック。  
  
 <xref:System.Transactions> これは、公開するリソースの種類のアクセスを制限する信頼の 3 つのレベルを定義します。 具体的には、<xref:System.Transactions>付いていると、部分的に信頼されたコードによってアセンブリを呼び出すことが、`AllowPartiallyTrustedCallers`属性 (APTCA)。 この属性は基本的に、<xref:System.Security.Permissions.SecurityAction.LinkDemand> アクセス許可セットの暗黙的な `FullTrust` を削除します。削除しない場合、これは各種類のパブリックにアクセスできるメソッドに自動的に配置されます。 ただし、種類やメンバーによっては、さらに強力なアクセス許可が必要となります。  
  
 型の一覧を次に、次の宣言セキュリティ属性で装飾されているため、信頼されたコードの一部によって呼び出し可能なメンバー。  
  
 `PermissionSetAttribute(SecurityAction.LinkDemand, Name := "FullTrust")`  
  
 System.Transactions.Transaction.EnlistDurable  
  
 System.Transactions.Transaction.EnlistPromotableSinglePhase  
  
 System.Transactions.TransactionInterop  
  
 System.Transactions.TransactionManager.DistributedTransactionStarted  
  
 System.Transactions.TransactionManager.HostCurrentTransactionCallback  
  
 System.Transactions.TransactionManager.Reenlist  
  
 System.Transactions.TransactionManager.RecoveryComplete  
  
 System.Transactions.TransactionScope.TransactionScope (System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)  
  
 M:System.Transactions.TransactionScope.TransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)  
  
 詳細については、さまざまな信頼レベルを参照してください[リソースへのアクセスのセキュリティ信頼レベル](https://msdn.microsoft.com/library/8e45acbc-0d81-4f64-9da7-8f766aebff51)します。  
  
 コア開発 Technologies\Data Access\Transaction Processing\  
  
 使用方法の詳細については、<xref:System.Transactions>名前空間には、概念説明のドキュメントを参照してください[トランザクション処理](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/w97s6fw4(v=vs.85))の"Core 開発 Technologies\Data Access\Transaction 処理下にあります。\\"、ドキュメントのセクション。 具体的には、次のトピックで詳細についてを見つけることができます。  
  
 [System.Transactions により提供される機能](https://msdn.microsoft.com/library/99cc5ce0-b7fd-4d78-a553-a3dd3f17ed45)  
  
 [リソース マネージャーの実装](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>