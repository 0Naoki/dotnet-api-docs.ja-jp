<Type Name="InertiaProcessor2D" FullName="System.Windows.Input.Manipulations.InertiaProcessor2D">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd0b9296dacb1cfd41cabd11bc52d511d9a5b6ab" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55404909" /></Metadata><TypeSignature Language="C#" Value="public class InertiaProcessor2D" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InertiaProcessor2D extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />
  <TypeSignature Language="VB.NET" Value="Public Class InertiaProcessor2D" />
  <TypeSignature Language="C++ CLI" Value="public ref class InertiaProcessor2D" />
  <TypeSignature Language="F#" Value="type InertiaProcessor2D = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1e487-101">操作の位置、方向、および平均半径の外挿を実装します。</span><span class="sxs-lookup"><span data-stu-id="1e487-101">Implements the extrapolation of a manipulation's position, orientation, and average radius.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e487-102"><xref:System.Windows.Input.Manipulations.InertiaProcessor2D>オブジェクトは、実際の動作をシミュレートすることで、要素の位置、向き、およびその他のプロパティを推定するアプリケーションを使用できます。</span><span class="sxs-lookup"><span data-stu-id="1e487-102">An <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> object enables your application to extrapolate an element's location, orientation, and other properties by simulating real-world behavior.</span></span>  
  
 <span data-ttu-id="1e487-103">たとえば、ユーザーは、要素を移動し、それを解放し、要素できます移動、減速の遷移などと、緩やかに変化停止します。</span><span class="sxs-lookup"><span data-stu-id="1e487-103">For instance, when a user moves an element and then releases it, the element can continue moving, decelerate, and then slowly stop.</span></span> <span data-ttu-id="1e487-104">慣性プロセッサは、アフィン 2-d 値 (配信元、スケール、変換、および回転) を指定した減速率で指定した時間の経過と共に変化することで、この動作を実装します。</span><span class="sxs-lookup"><span data-stu-id="1e487-104">An inertia processor implements this behavior by causing the affine 2-D values (origin, scale, translation, and rotation) to change over a specified time at a specified deceleration rate.</span></span>  
  
 <span data-ttu-id="1e487-105">単独で慣性プロセッサには、移動および減速する要素は発生しません。</span><span class="sxs-lookup"><span data-stu-id="1e487-105">An inertia processor by itself does not cause an element to move and decelerate.</span></span> <span data-ttu-id="1e487-106">アプリケーションでは、慣性プロセッサから情報を受信し、アプリケーション固有の要素に必要な値を適用します。</span><span class="sxs-lookup"><span data-stu-id="1e487-106">Your application receives information from an inertia processor and applies the values as needed to an application-specific element.</span></span> <span data-ttu-id="1e487-107">通常、アプリケーションは、場所、サイズ、または要素の方向を変更するのに、慣性プロセッサから受信した情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="1e487-107">Typically, an application uses the information received from an inertia processor to change the location, size or orientation of an element.</span></span>  
  
 <span data-ttu-id="1e487-108">慣性の処理は通常、操作の処理と組み合わせて使用されます。</span><span class="sxs-lookup"><span data-stu-id="1e487-108">Inertia processing is typically used in conjunction with manipulation processing.</span></span> <span data-ttu-id="1e487-109">詳細については、<xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1e487-109">For more information, see the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> class.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InertiaProcessor2D ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InertiaProcessor2D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1e487-110"><see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1e487-110">Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete (timestamp As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete(long timestamp);" />
      <MemberSignature Language="F#" Value="member this.Complete : int64 -&gt; unit" Usage="inertiaProcessor2D.Complete timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp"><span data-ttu-id="1e487-111">100 ナノ秒タイマー刻み単位での推定を完了するためのタイムスタンプ。</span><span class="sxs-lookup"><span data-stu-id="1e487-111">The timestamp to complete extrapolation, in 100-nanosecond ticks.</span></span></param>
        <summary><span data-ttu-id="1e487-112">指定したタイムスタンプを使用して最終的な推定を完了し、<see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="1e487-112">Completes final extrapolation by using the specified timestamp and raises the <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e487-113">タイムスタンプは 100 ナノ秒単位です。</span><span class="sxs-lookup"><span data-stu-id="1e487-113">Timestamps are in 100-nanosecond units.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e487-114">次の例では、イベント ハンドラーを<xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType>慣性の処理が実行されている場合とそうである場合に表示するイベントのチェックが呼び出すことによって停止、<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1e487-114">In the following example, an event handler for the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> event checks to see if inertia processing is running and if so, stops it by calling the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> method.</span></span>  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1e487-115">タイムスタンプ パラメーターは最初または前のタイムスタンプより小さいです。</span><span class="sxs-lookup"><span data-stu-id="1e487-115">The timestamp parameter is less than the initial or previous timestamp.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />
      <MemberSignature Language="VB.NET" Value="Public Event Completed As EventHandler(Of Manipulation2DCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DCompletedEventArgs ^&gt; ^ Completed;" />
      <MemberSignature Language="F#" Value="member this.Completed : EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; " Usage="member this.Completed : System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e487-116">外挿の完了時に発生します。</span><span class="sxs-lookup"><span data-stu-id="1e487-116">Occurs when extrapolation has completed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta" />
      <MemberSignature Language="VB.NET" Value="Public Event Delta As EventHandler(Of Manipulation2DDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DDeltaEventArgs ^&gt; ^ Delta;" />
      <MemberSignature Language="F#" Value="member this.Delta : EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; " Usage="member this.Delta : System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e487-117">外挿の起点が変更された場合や、変換、拡大と縮小、または回転が行われた場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="1e487-117">Occurs when the extrapolation origin has changed or when translation, scaling, or rotation have occurred.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e487-118"><xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=nameWithType>イベントと<xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=nameWithType>イベントは、同じ型。</span><span class="sxs-lookup"><span data-stu-id="1e487-118">The <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=nameWithType> event and the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=nameWithType> event are the same type.</span></span> <span data-ttu-id="1e487-119">通常、両方のイベントの同じイベント ハンドラーを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="1e487-119">Typically, you can use the same event handler for both events.</span></span>  
  
   
  
## Examples  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationOrInertiaDelta](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationorinertiadelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpansionBehavior As InertiaExpansionBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ ExpansionBehavior { System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExpansionBehavior : System.Windows.Input.Manipulations.InertiaExpansionBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaExpansionBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e487-120">慣性プロセッサの展開動作を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1e487-120">Gets or sets the expansion behavior of the inertia processor.</span></span></summary>
        <value><span data-ttu-id="1e487-121">慣性プロセッサの展開動作。</span><span class="sxs-lookup"><span data-stu-id="1e487-121">The expansion behavior of the inertia processor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginX">
      <MemberSignature Language="C#" Value="public float InitialOriginX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginX { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.InitialOriginX : single with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e487-122">最初の起点の x 座標を座標単位で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1e487-122">Gets or sets the x-coordinate for the initial origin, in coordinate units.</span></span></summary>
        <value><span data-ttu-id="1e487-123">最初の起点の x 座標 (座標単位)。</span><span class="sxs-lookup"><span data-stu-id="1e487-123">The x-coordinate for the initial origin, in coordinate units.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e487-124">によって表される元のポイント、<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A>と<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A>プロパティは、要素に関連付けられたすべてのマニピュレーターの平均位置。</span><span class="sxs-lookup"><span data-stu-id="1e487-124">The origin point represented by the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> and <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> properties is the average position of all manipulators associated with an element.</span></span>  
  
 <span data-ttu-id="1e487-125">有効な値を<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A>有限の数値します。</span><span class="sxs-lookup"><span data-stu-id="1e487-125">A valid value for <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> is any finite number.</span></span> <span data-ttu-id="1e487-126">既定値は 0.0 です。</span><span class="sxs-lookup"><span data-stu-id="1e487-126">The default value is 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginY">
      <MemberSignature Language="C#" Value="public float InitialOriginY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginY { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.InitialOriginY : single with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e487-127">最初の起点の y 座標を座標単位で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1e487-127">Gets or sets the y-coordinate for the initial origin, in coordinate units.</span></span></summary>
        <value><span data-ttu-id="1e487-128">最初の起点の y 座標 (座標単位)。</span><span class="sxs-lookup"><span data-stu-id="1e487-128">The y-coordinate for the initial origin, in coordinate units.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e487-129">によって表される元のポイント、<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A>と<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A>プロパティは、要素に関連付けられたすべてのマニピュレーターの平均位置。</span><span class="sxs-lookup"><span data-stu-id="1e487-129">The origin point represented by the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> and <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> properties is the average position of all manipulators associated with an element.</span></span>  
  
 <span data-ttu-id="1e487-130">有効な値を<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A>有限の数値します。</span><span class="sxs-lookup"><span data-stu-id="1e487-130">A valid value for <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> is any finite number.</span></span> <span data-ttu-id="1e487-131">既定値は 0.0 です。</span><span class="sxs-lookup"><span data-stu-id="1e487-131">The default value is 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e487-132">慣性が現在処理中かどうかを取得します。</span><span class="sxs-lookup"><span data-stu-id="1e487-132">Gets whether inertia is currently in progress.</span></span></summary>
        <value><span data-ttu-id="1e487-133">慣性が現在処理中かどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="1e487-133">A Boolean value indicating whether inertia is currently in progress.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1e487-134">次の例では、イベント ハンドラーを<xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType>イベントを確認かどうか慣性の処理が実行されているし、そうである場合は停止を呼び出して、<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1e487-134">In the following example, an event handler for the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> event checks to see if inertia processing is running and, if so, stops it by calling the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> method.</span></span>  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public bool Process (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Process(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Process (timestamp As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Process(long timestamp);" />
      <MemberSignature Language="F#" Value="member this.Process : int64 -&gt; bool" Usage="inertiaProcessor2D.Process timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp"><span data-ttu-id="1e487-135">100 ナノ秒タイマー刻み単位での推定を行うためのタイムスタンプ。</span><span class="sxs-lookup"><span data-stu-id="1e487-135">The timestamp to perform extrapolation, in 100-nanosecond ticks.</span></span></param>
        <summary><span data-ttu-id="1e487-136">指定された時間に、操作の位置、向き、および平均半径を推定します。</span><span class="sxs-lookup"><span data-stu-id="1e487-136">Extrapolates the manipulation's position, orientation, and average radius at the specified time.</span></span></summary>
        <returns><span data-ttu-id="1e487-137">指定された時間に操作の位置、方向、および平均半径。</span><span class="sxs-lookup"><span data-stu-id="1e487-137">The manipulation's position, orientation, and average radius at the specified time.</span></span> <span data-ttu-id="1e487-138">外挿が処理中の場合は <see langword="true" />。それ以外の場合、外挿が完了している場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1e487-138"><see langword="true" /> if extrapolation is in progress; otherwise, <see langword="false" /> if extrapolation has completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e487-139">タイムスタンプは 100 ナノ秒単位です。</span><span class="sxs-lookup"><span data-stu-id="1e487-139">Timestamps are in 100-nanosecond units.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1e487-140">タイムスタンプ パラメーターは最初または前のタイムスタンプより小さいです。</span><span class="sxs-lookup"><span data-stu-id="1e487-140">The timestamp parameter is less than the initial or previous timestamp.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationBehavior As InertiaRotationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ RotationBehavior { System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RotationBehavior : System.Windows.Input.Manipulations.InertiaRotationBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaRotationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e487-141">慣性プロセッサの回転動作を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1e487-141">Gets or sets the rotation behavior of the inertia processor.</span></span></summary>
        <value><span data-ttu-id="1e487-142">慣性プロセッサの回転動作。</span><span class="sxs-lookup"><span data-stu-id="1e487-142">The rotation behavior of the inertia processor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1e487-143">次の例では、<xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A>開始の方向からのオブジェクト 3---1.5 倍を回転する慣性の処理を有効にするプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="1e487-143">In the following example, the <xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A> property is set to enable inertia processing to rotate an object three-and-one-half times from its starting orientation.</span></span>  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_SetDesiredRotation](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_setdesiredrotation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (System.Windows.Input.Manipulations.InertiaParameters2D parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Windows.Input.Manipulations.InertiaParameters2D parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameters (parameters As InertiaParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParameters(System::Windows::Input::Manipulations::InertiaParameters2D ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SetParameters : System.Windows.Input.Manipulations.InertiaParameters2D -&gt; unit" Usage="inertiaProcessor2D.SetParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="1e487-144">設定するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="1e487-144">Parameters to set.</span></span></param>
        <summary><span data-ttu-id="1e487-145">慣性プロセッサのパラメーターを設定します。</span><span class="sxs-lookup"><span data-stu-id="1e487-145">Sets parameters on the inertia processor.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property TranslationBehavior As InertiaTranslationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ TranslationBehavior { System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TranslationBehavior : System.Windows.Input.Manipulations.InertiaTranslationBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaTranslationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e487-146">慣性プロセッサの変換動作を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1e487-146">Gets or sets the translation behavior of the inertia processor.</span></span></summary>
        <value><span data-ttu-id="1e487-147">慣性プロセッサの変換動作。</span><span class="sxs-lookup"><span data-stu-id="1e487-147">The translation behavior of the inertia processor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>