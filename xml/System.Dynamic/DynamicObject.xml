<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba4618ed283635784b6afb23ea13d5f3d0bb7852" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52372278" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>実行時の動的な動作を指定する基底クラスを提供します。 このクラスは継承される必要があります。直接インスタンス化することはできません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DynamicObject`クラスでは、動的オブジェクトで実行できる操作とそれらの操作を実行する方法を定義することができます。 たとえば、取得、オブジェクトのプロパティを設定またはメソッドの呼び出し、または加算や乗算などの標準的な算術演算を実行しようとするときの動作を定義できます。  
  
 このクラスより便利なライブラリのプロトコルを作成する場合に役立ちます。 たとえば、次のような構文を使用するライブラリのユーザーが必要`Scriptobj.SetProperty("Count", 1)`、このような程度簡単な構文を使用する機能を提供できます`scriptobj.Count = 1`します。  
  
 インスタンスを直接作成することはできません、`DynamicObject`クラス。 動的な動作を実装するためにから継承したい場合があります、`DynamicObject`クラスし、必要なメソッドをオーバーライドします。 たとえば、設定とプロパティを取得する唯一の操作を必要がある場合上書きできますだけ、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>メソッド。  
  
 C# から派生したクラスのインスタンスの動的な動作を有効にする、`DynamicObject`クラスを使用する必要がある、`dynamic`キーワード。 詳細については、「[dynamic 型の使用](~/docs/csharp/programming-guide/types/using-type-dynamic.md)」を参照してください。  
  
 Visual basic での動的操作は、遅延バインディングでサポートされます。 詳細については、次を参照してください。[事前バインディングと遅延バインディング](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)します。  
  
 派生したクラスのインスタンスを作成する方法を次のコード例に示します、`DynamicObject`クラス。  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 派生したクラスを独自のメンバーを追加することも、`DynamicObject`クラス。 クラスのプロパティを定義およびもオーバーライドする場合、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッドでは、動的言語ランタイム (DLR) 最初を使用して、言語バインダー、クラスのプロパティの静的な定義を探します。 このようなプロパティがない場合、DLR を呼び出す、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッド。  
  
 `DynamicObject` DLR インターフェイスを実装するクラス<xref:System.Dynamic.IDynamicMetaObjectProvider>のインスタンスを共有することができる`DynamicObject`DLR の相互運用性モデルをサポートする言語のクラス。 インスタンスを作成するなど、`DynamicObject`クラス (C#) と IronPython 関数に渡します。 詳細については、次を参照してください。[動的言語ランタイムの概要](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)します。  
  
> [!NOTE]
>  オブジェクトを特定の操作を定義しはない静的メンバーを持つ、使用する必要はありませんが、追加し実行時にメンバーを削除することができますのみすることが必要となる単純なシナリオがある場合、<xref:System.Dynamic.ExpandoObject>クラス。  
>   
>  動的オブジェクトの相互運用性のプロトコルに参加または DLR 高速な動的ディスパッチのキャッシュを管理する必要がある方法を定義する必要があるより高度なシナリオがあれば、独自の実装を作成、<xref:System.Dynamic.IDynamicMetaObjectProvider>インターフェイス。  
  
   
  
## Examples  
 書き込みの代わりに、dictionary 内の値にアクセスするための代替構文を提供することを前提としています`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"` Visual Basic で)、書き込める`sampleDictionary.Text = "Sample text"`します。 また、大文字と小文字にするには、この構文をするように`sampleDictionary.Text`と等価`sampleDictionary.text`します。  
  
 次のコード例に示します、`DynamicDictionary`クラスから派生した、`DynamicObject`クラス。 `DynamicDictionary`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアと上書きを格納する、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>新しい構文をサポートするメソッド。 用意されています、`Count`数の動的プロパティのディクショナリを示しています、プロパティが含まれています。  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 例については、次を参照してください。 [DynamicObject でラッパーを作成する](https://go.microsoft.com/fwlink/?LinkId=169008)c# よく寄せられる質問のブログ。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>派生型で <see cref="T:System.Dynamic.DynamicObject" /> 型の新しいインスタンスを初期化できるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンスを直接作成することはできません、<xref:System.Dynamic.DynamicObject>クラス。 動的な動作を実装するから継承する必要がある、<xref:System.Dynamic.DynamicObject>クラスし、必要なメソッドをオーバーライドします。  
  
 C# から派生したクラスのインスタンスの動的な動作を有効にする、<xref:System.Dynamic.DynamicObject>クラスを使用する必要がある、`dynamic`キーワード。 詳細については、「[dynamic 型の使用](~/docs/csharp/programming-guide/types/using-type-dynamic.md)」を参照してください。  
  
 Visual basic での動的操作は、遅延バインディングでサポートされます。 詳細については、次を参照してください。[事前バインディングと遅延バインディング](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)します。  
  
   
  
## Examples  
 派生したクラスのインスタンスを作成する方法を次のコード例に示します、<xref:System.Dynamic.DynamicObject>クラス。  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべての動的メンバー名の列挙値を返します。</summary>
        <returns>動的メンバー名を含むシーケンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、デバッグ目的でのみ存在します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter">動的仮想メソッドにディスパッチされる <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
        <summary>動的仮想メソッドにディスパッチされる <see cref="T:System.Dynamic.DynamicMetaObject" /> を提供します。 このオブジェクトを別の <see cref="T:System.Dynamic.DynamicMetaObject" /> の内部にカプセル化することにより、個々のアクションのカスタム動作を指定することができます。 このメソッドは言語実装者向けの DLR (動的言語ランタイム) インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
        <returns>
          <see cref="T:System.Dynamic.DynamicMetaObject" /> 型のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">二項演算に関する情報を提供します。 <c>binder.Operation</c> プロパティは <see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクトを返します。 たとえば、<c>sum = first + second</c> ステートメントの場合 (<c>first</c> と <c>second</c> は <see langword="DynamicObject" /> クラスから派生)、<c>binder.Operation</c> クラスは <c>ExpressionType.Add</c> を返します。</param>
        <param name="arg">二項演算の右オペランド。 たとえば、<c>sum = first + second</c> ステートメントの場合 (<c>first</c> と <c>second</c> は <see langword="DynamicObject" /> クラスから派生)、<paramref name="arg" /> は <c>second</c> と等しくなります。</param>
        <param name="result">二項演算の結果。</param>
        <summary>二項演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、加算や乗算などの演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトの二項演算を実行する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 加算や乗算などの二項演算がある場合は、このメソッドが呼び出されます。 たとえば場合、<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>メソッドがオーバーライドされたなどのステートメントに対して自動的に呼び出される`sum = first + second`または`multiply = first*second`ここで、`first`から派生、`DynamicObject`クラス。  
  
 使用して二項演算の種類に関する情報を取得することができます、`Operation`のプロパティ、`binder`パラメーター。  
  
 C# および Visual Basic の場合にのみ、動的オブジェクトが使用されている場合、`binder.Operation`プロパティから次の値のいずれかを指定できます、<xref:System.Linq.Expressions.ExpressionType>列挙体。 ただし、IronPython や IronRuby などの他の言語で他の値があることができます。
  
|[値]|説明|C#|Visual Basic|  
|-----------|-----------------|---------|------------------|  
|`Add`|オーバーフロー チェックを行わない、数値オペランドに対する加算演算。|`a + b`|`a + b`|  
|`AddAssign`|オーバーフロー チェックを行わない、数値オペランドに対する加算の複合代入演算。|`a += b`|サポートされていません。|  
|`And`|ビットごと`AND`操作。|`a & b`|`a And b`|  
|`AndAssign`|ビットごと`AND`の複合代入演算。|`a &= b`|サポートされていません。|  
|`Divide`|算術除算演算の場合。|`a / b`|`a / b`|  
|`DivideAssign`|除算の複合代入演算。|`a /= b`|サポートされていません。|  
|`ExclusiveOr`|ビットごと`XOR`操作。|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|ビットごと`XOR`の複合代入演算。|`a ^= b`|サポートされていません。|  
|`GreaterThan`|「より大きい」比較します。|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|「より大きいまたは等しい」比較します。|`a >= b`|サポートされていません。|  
|`LeftShift`|ビットごとの左シフト演算。|`a << b`|`a << b`|  
|`LeftShiftAssign`|ビットごとの左シフトの複合代入演算。|`a <<= b`|サポートされていません。|  
|`LessThan`|「より小さい」比較します。|`a < b`|`a < b`|  
|`LessThanOrEqual`|「以下に」を比較します。|`a <= b`|サポートされていません。|  
|`Modulo`|算術剰余演算。|`a % b`|`a Mod b`|  
|`ModuloAssign`|算術剰余の複合代入演算。|`a %= b`|サポートされていません。|  
|`Multiply`|オーバーフロー チェックを行わない、数値オペランドに対する乗算演算。|`a * b`|`a * b`|  
|`MultiplyAssign`|オーバーフロー チェックを行わない、数値オペランドに対する乗算の複合代入演算。|`a *= b`|サポートされていません。|  
|`NotEqual`|非等価比較。|`a != b`|`a <> b`|  
|`Or`|論理またはビットごと`OR`操作。|`a &#124; b`|`a Or b`|  
|`OrAssign`|論理またはビットごと`OR`複合代入。|`a &#124;= b`|サポートされていません。|  
|`Power`|数値の累乗の数学的演算。|サポートされていません。|`a ^ b`|  
|`RightShift`|ビットごとの右シフト演算。|`a >> b`|`a >> b`|  
|`RightShiftAssign`|ビットごとの右シフトの複合代入演算。|`a >>= b`|サポートされていません。|  
|`Subtract`|オーバーフロー チェックを行わない、数値オペランドに対する減算演算。|`a - b`|`a - b`|  
|`SubtractAssign`|オーバーフロー チェックを行わない、数値オペランドに対する減算の複合代入演算。|`a -= b`|サポートされていません。|  
  
> [!NOTE]
>  実装する`OrElse`(`a || b`) と`AndAlso`(`a && b`) (C#) の動的オブジェクトの操作で、両方を実装することがあります、<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>メソッドと<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>メソッド。  
>   
>  `OrElse`操作では、単項`IsTrue`操作と、バイナリ`Or`操作。 `Or`場合にのみ操作が実行の結果、`IsTrue`操作が`false`します。  
>   
>  `AndAlso`操作では、単項`IsFalse`操作と、バイナリ`And`操作。 `And`場合にのみ操作が実行の結果、`IsFalse`操作が`false`します。  
  
   
  
## Examples  
 このようなデータの加算や減算などの基本的な算術演算を定義する番号のテキストや数値の表現を格納するデータ構造を作成する必要がありますを想定しています。  
  
 次のコード例に示します、`DynamicNumber`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `DynamicNumber` 上書き、<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>数学的な操作を有効にするメソッド。 オーバーライド、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>要素へのアクセスを有効にするメソッド。  
  
 この例では、加算と減算の操作のみがサポートされます。 次のステートメントを記述しようとする場合`resultNumber = firstNumber*secondNumber`実行時例外がスローされます。  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">変換演算に関する情報を提供します。 <c>binder.Type</c> プロパティは、オブジェクトの変換後の型を提供します。 たとえば、C# のステートメント <c>(String)sampleObject</c> (Visual Basic では <c>CType(sampleObject, Type)</c>) の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Type</c> は <see cref="T:System.String" /> 型を返します。 <c>binder.Explicit</c> プロパティは、行われる変換の種類に関する情報を提供します。 このプロパティは、明示的な変換の場合は <see langword="true" />、暗黙の変換の場合は <see langword="false" /> を返します。</param>
        <param name="result">型変換演算の結果。</param>
        <summary>型変換演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトの型を別の型に変換する演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトの型変換を実行する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 C# の場合、このメソッドがオーバーライドされると、自動的に呼び出されます、明示的または暗黙的な変換がある場合に次のコード例で示すよう。  
  
 Visual basic では、明示的な変換のみがサポートされています。 使用して呼び出す場合、このメソッドをオーバーライドして、<xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A>または<xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A>関数。  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 文字列と整数にこのデータ構造体の変換を定義する番号のテキストや数値の表現を格納するデータ構造を作成する必要がありますを想定しています。  
  
 次のコード例に示します、`DynamicNumber`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `DynamicNumber` 上書き、<xref:System.Dynamic.DynamicObject.TryConvert%2A>型変換を有効にするメソッド。 オーバーライド、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>データ要素へのアクセスを有効にするメソッド。  
  
 この例では、文字列と整数への変換のみがサポートされています。 オブジェクトを他の任意の型に変換しようとすると、実行時例外がスローされます。  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">初期化演算に関する情報を提供します。</param>
        <param name="args">初期化中にオブジェクトに渡される引数。 たとえば、<c>new SampleType(100)</c> 演算の場合 (<c>SampleType</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生型)、<c>args[0]</c> は 100 に等しくなります。</param>
        <param name="result">初期化の結果。</param>
        <summary>動的オブジェクトの新しいインスタンスを初期化する演算の実装を提供します。 このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトの新しいインスタンスを初期化する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 C# および Visual Basic コンパイラは、ファースト クラスの型をサポートしていないために、このメソッドを使用するコードを生成しません。 このメソッドは、のような構文を使用して動的オブジェクトの初期化をサポートする言語`dynamic new`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder">削除に関する情報を提供します。</param>
        <param name="indexes">削除するインデックス。</param>
        <summary>インデックスを使用してオブジェクトを削除する演算の実装を提供します。 このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、指定したインデックスを持つ値の削除方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 C# および Visual Basic コンパイラは、このような操作をサポートしていないために、このメソッドを使用するコードを生成しません。 このメソッドはなど、インデックスを使用してオブジェクトを削除するための構文をサポートする言語に関して、 `del sampleObject[1,2]` Python でします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder">削除に関する情報を提供します。</param>
        <summary>オブジェクト メンバーを削除する演算の実装を提供します。 このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、オブジェクトのメンバーを削除する方法を指定するには、このメソッドをオーバーライドできます。 このメソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 C# および Visual Basic コンパイラは、このような操作をサポートしていないために、このメソッドを使用するコードを生成しません。 このメソッドはなど、メンバーを削除するための構文をサポートする言語に関して、 `del sampleObject.SampleMember` Python でします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">演算に関する情報を提供します。</param>
        <param name="indexes">演算に使用されるインデックス。 たとえば、C# の <c>sampleObject[3]</c> (Visual Basic では <c>sampleObject(3)</c>) 演算の場合 (<c>sampleObject</c> は <see langword="DynamicObject" /> クラスから派生)、<c>indexes[0]</c> は 3 に等しくなります。</param>
        <param name="result">インデックス演算の結果。</param>
        <summary>インデックスを使用して値を取得する演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、インデックス演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、値を取得するインデックスを使用して実行する方法の動的オブジェクトを指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、実行時例外がスローされます)。  
  
 などの操作がある場合に自動的に呼び出される場合、このメソッドがオーバーライドされると、 `sampleObject[3]` (C#) または`sampleObject(3)`Visual Basic で`sampleObject`から派生したが、<xref:System.Dynamic.DynamicObject>クラス。  
  
   
  
## Examples  
 前提としています名前でいずれかなど、アクセスのプロパティができるオブジェクトを作成する`Property0`、 `Property1`、またはインデックスでように、たとえば、`sampleObject.Property0`と等価`sampleObject[0]`(C#) または`sampleObject(0)`Visual Basic で。  
  
 次のコード例に示します、`SampleDynamicObject`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `SampleDynamicObject`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアを格納します。 `SampleDynamicObject` 上書き、<xref:System.Dynamic.DynamicObject.TrySetIndex%2A>と<xref:System.Dynamic.DynamicObject.TryGetIndex%2A>インデックスによってアクセスを有効にするメソッド。 これは、上書き、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>プロパティ名によるアクセスを有効にするメソッド。  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">動的演算を呼び出したオブジェクトに関する情報を提供します。 <c>binder.Name</c> プロパティは、動的演算の対象であるメンバーの名前を提供します。 たとえば、<c>Console.WriteLine(sampleObject.SampleProperty)</c> ステートメントの場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleProperty" を返します。 メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</param>
        <param name="result">取得操作の結果。 たとえば、このメソッドがプロパティに対して呼び出された場合、プロパティ値を <paramref name="result" /> に割り当てることができます。</param>
        <summary>メンバー値を取得する演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の取得などの演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのメンバーの値を取得する操作を実行する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、実行時例外がスローされます)。  
  
 などのステートメントがある場合、このメソッドが呼び出されます`Console.WriteLine(sampleObject.SampleProperty)`ここで、`sampleObject`から派生したクラスのインスタンスである、<xref:System.Dynamic.DynamicObject>クラス。  
  
 派生したクラスを独自のメンバーを追加することも、`DynamicObject`クラス。 クラスのプロパティを定義およびもオーバーライドする場合、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッドでは、動的言語ランタイム (DLR) 最初を使用して、言語バインダー、クラスのプロパティの静的な定義を探します。 このようなプロパティがない場合、DLR を呼び出す、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッド。  
  
   
  
## Examples  
 書き込みの代わりに、dictionary 内の値にアクセスするための代替構文を提供することを前提としています`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"` Visual Basic で)、書き込める`sampleDictionary.Text = "Sample text"`します。 また、この構文が区別されずにある必要がありますように`sampleDictionary.Text`と等価`sampleDictionary.text`します。  
  
 次のコード例に示します、`DynamicDictionary`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `DynamicDictionary`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアと上書きを格納する、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>新しい構文をサポートするメソッド。 用意されています、`Count`数の動的プロパティのディクショナリを示しています、プロパティが含まれています。  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">呼び出し演算に関する情報を提供します。</param>
        <param name="args">呼び出し演算でオブジェクトに渡される引数。 たとえば、<c>sampleObject(100)</c> 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>args[0]</c> は 100 に等しくなります。</param>
        <param name="result">オブジェクト呼び出しの結果。</param>
        <summary>オブジェクトを呼び出す演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトやデリゲートの呼び出しなどの演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのオブジェクトを呼び出す操作を実行する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、実行時例外がスローされます)。  
  
 などの操作がある場合に自動的に呼び出される場合、このメソッドがオーバーライドされると、`sampleObject(100)`ここで、`sampleObject`から派生したが、<xref:System.Dynamic.DynamicObject>クラス。  
  
 オブジェクトを呼び出すため操作には、Visual Basic ではなく c# ではサポートされています。 Visual Basic コンパイラはことはありません、このメソッドを使用するコードを生成し、Visual Basic 言語はのような構文をサポートしていません`sampleObject(100)`します。  
  
   
  
## Examples  
 番号のテキストや数値の表現を格納するデータ構造を必要とします。 各プロパティの値を個別に指定し、1 つのステートメントのすべてのプロパティを初期化するためにできるようにできるします。  
  
 次のコード例に示します、`DynamicNumber`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `DynamicNumber` 上書き、<xref:System.Dynamic.DynamicObject.TryInvoke%2A>一度にすべてのプロパティの初期化を有効にするメソッド。 オーバーライド、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>個々 のオブジェクトのプロパティへのアクセスを有効にするメソッド。  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">動的な演算に関する情報を提供します。 <c>binder.Name</c> プロパティは、動的演算の対象であるメンバーの名前を提供します。 たとえば、ステートメント <c>sampleObject.SampleMethod(100)</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleMethod" を返します。 メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</param>
        <param name="args">呼び出し演算でオブジェクト メンバーに渡される引数。 たとえば、ステートメント <c>sampleObject.SampleMethod(100)</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>args[0]</c> は 100 に等しくなります。</param>
        <param name="result">メンバー呼び出しの結果。</param>
        <summary>メンバーを呼び出す演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、メソッドの呼び出しなどの演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのオブジェクトのメンバーを呼び出す操作を実行する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 ような操作を実行するときに自動的に呼び出される場合、このメソッドがオーバーライドされると、`sampleObject.SampleMethod(100)`ここで、`sampleObject`から派生したが、`DynamicObject`クラス。  
  
 派生したクラスに、独自のメソッドを追加することも、<xref:System.Dynamic.DynamicObject>クラス。 オーバーライドする場合など、<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>メソッドでは、動的ディスパッチ システムは最初、クラスで指定されたメソッドが存在するかどうかを判断するしようとします。 メソッドが見つからない場合は、使用、<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>実装します。  
  
 このメソッドがサポートしていません`ref`と`out`パラメーター。 すべてのパラメーター、`args`配列が値によって渡されます。  
  
   
  
## Examples  
 書き込みの代わりに、dictionary 内の値にアクセスするための代替構文を提供することを前提としています`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"` Visual Basic で)、書き込める`sampleDictionary.Text = "Sample text"`します。 また、このディクショナリのすべての標準的な辞書メソッドを呼び出すことができるします。  
  
 次のコード例に示します、`DynamicDictionary`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `DynamicDictionary`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアを格納します。 も優先、<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>メソッドのメソッドをサポートするために、<xref:System.Collections.Generic.Dictionary%602>クラスおよびオーバーライド、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>新しい構文をサポートするメソッド。 用意されています、`Print`メソッドで、すべてのディクショナリのキーと値を出力します。  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">演算に関する情報を提供します。</param>
        <param name="indexes">演算に使用されるインデックス。 たとえば、C# の <c>sampleObject[3] = 10</c> (Visual Basic では <c>sampleObject(3) = 10</c>) 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>indexes[0]</c> は 3 に等しくなります。</param>
        <param name="value">指定したインデックスのオブジェクトに設定する値。 たとえば、C# の <c>sampleObject[3] = 10</c> (Visual Basic では <c>sampleObject(3) = 10</c>) 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<paramref name="value" /> は 10 に等しくなります。</param>
        <summary>インデックスを使用して値を設定する演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、指定したインデックスを使用してオブジェクトにアクセスする演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのインデックスを使用してオブジェクトにアクセスする操作を実行する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 などの操作がある場合に自動的に呼び出される場合、このメソッドがオーバーライドされると、 `sampleObject[3] = 10` (C#) または`sampleObject(3) = 10`Visual Basic で`sampleObject`から派生したが、<xref:System.Dynamic.DynamicObject>クラス。  
  
   
  
## Examples  
 前提としています名前でいずれかなど、アクセスのプロパティができるオブジェクトを作成する`Property0`、 `Property1`、またはインデックスでように、たとえば、`sampleObject.Property0`と等価`sampleObject[0]`(C#) または`sampleObject(0)`Visual Basic で。  
  
 次のコード例に示します、`SampleDynamicObject`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `SampleDynamicObject`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアを格納します。 `SampleDynamicObject` 上書き、<xref:System.Dynamic.DynamicObject.TrySetIndex%2A>と<xref:System.Dynamic.DynamicObject.TryGetIndex%2A>インデックスによってアクセスを有効にするメソッド。 これは、上書き、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>プロパティ名によるアクセスを有効にするメソッド。  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">動的演算を呼び出したオブジェクトに関する情報を提供します。 <c>binder.Name</c> プロパティは、値の割り当て先のメンバーの名前を提供します。 たとえば、ステートメント <c>sampleObject.SampleProperty = "Test"</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleProperty" を返します。 メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</param>
        <param name="value">メンバーに設定する値。 たとえば、<c>sampleObject.SampleProperty = "Test"</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<paramref name="value" /> は "Test" となります。</param>
        <summary>メンバー値を設定する演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の設定などの演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのメンバーに値を設定する操作を実行する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 などのステートメントがある場合、このメソッドが呼び出されます`sampleObject.SampleProperty = "Test"`ここで、`sampleObject`から派生したクラスのインスタンスには、<xref:System.Dynamic.DynamicObject>クラス。  
  
 派生したクラスを独自のメンバーを追加することも、`DynamicObject`クラス。 クラスのプロパティを定義およびもオーバーライドする場合、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッドでは、動的言語ランタイム (DLR) 最初を使用して、言語バインダー、クラスのプロパティの静的な定義を探します。 このようなプロパティがない場合、DLR を呼び出す、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッド。  
  
   
  
## Examples  
 書き込みの代わりに、dictionary 内の値にアクセスするための代替構文を提供することを前提としています`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"` Visual Basic で)、書き込める`sampleDictionary.Text = "Sample text"`します。 また、この構文が区別されずにある必要がありますように`sampleDictionary.Text`と等価`sampleDictionary.text`します。  
  
 次のコード例に示します、`DynamicDictionary`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `DynamicDictionary`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアと上書きを格納する、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>新しい構文をサポートするメソッド。 用意されています、`Count`数の動的プロパティのディクショナリを示しています、プロパティが含まれています。  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">単項演算に関する情報を提供します。 <c>binder.Operation</c> プロパティは <see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクトを返します。 たとえば、<c>negativeNumber = -number</c> ステートメントの場合 (<c>number</c> は <see langword="DynamicObject" /> クラスから派生)、<c>binder.Operation</c> は "Negate" を返します。</param>
        <param name="result">単項演算の結果。</param>
        <summary>単項演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、否定、インクリメント、デクリメントなどの演算の動的な動作を指定できます。</summary>
        <returns>操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります  (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトの単項演算を実行する方法を指定するには、このメソッドをオーバーライドできます。 メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。 (ほとんどの場合、言語固有の実行時例外がスローされます)。  
  
 このメソッドは、否定、インクリメントなどの単項演算または減少したときに呼び出されます。 たとえば場合、<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>メソッドがオーバーライドされたなどのステートメントに対して、このメソッドが自動的に呼び出される`negativeNumber = -number`ここで、`number`から派生、<xref:System.Dynamic.DynamicObject>クラス。  
  
 単項演算の種類に関する情報を取得するにを使用して、`Operation`のプロパティ、`binder`パラメーター。  
  
 C# および Visual Basic の場合にのみ、動的オブジェクトが使用されている場合、`binder.Operation`プロパティから次の値のいずれかを指定できます、<xref:System.Linq.Expressions.ExpressionType>列挙体。 ただし、IronPython や IronRuby などの他の言語で他の値があることができます。
  
|[値]|説明|C#|Visual Basic|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|単項デクリメント演算です。|`a--`|サポートされていません。|  
|`Increment`|単項インクリメント演算です。|`a++`|サポートされていません。|  
|`Negate`|算術否定。|`-a`|`-a`|  
|`Not`|論理否定。|`!a`|`Not a`|  
|`OnesComplement`|1 の補数。|`~a`|サポートされていません。|  
|`IsFalse`|False の条件の値。|`a && b`|サポートされていません。|  
|`IsTrue`|条件が満たされた値。|`a &#124;&#124; b`|サポートされていません。|  
|`UnaryPlus`|単項プラスします。|`+a`|`+a`|  
  
> [!NOTE]
>  実装する`OrElse`(`a || b`) と`AndAlso`(`a && b`) (C#) の動的オブジェクトの操作で、両方を実装することがあります、<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>メソッドと<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>メソッド。  
>   
>  `OrElse`操作では、単項`IsTrue`操作と、バイナリ`Or`操作。 `Or`場合にのみ操作が実行の結果、`IsTrue`操作が`false`します。  
>   
>  `AndAlso`操作では、単項`IsFalse`操作と、バイナリ`And`操作。 `And`場合にのみ操作が実行の結果、`IsFalse`操作が`false`します。  
  
   
  
## Examples  
 このようなデータ、算術否定演算を定義する番号のテキストや数値の表現を格納するデータ構造を作成する必要がありますを想定しています。  
  
 次のコード例に示します、`DynamicNumber`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。 `DynamicNumber` 上書き、<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>算術否定演算を有効にするメソッド。 オーバーライドではまた、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>要素へのアクセスを有効にするメソッド。  
  
 この例では、算術否定演算のみがサポートされています。 次のステートメントを記述しようとする場合`negativeNumber = +number`実行時例外が発生します。  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>