<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba4618ed283635784b6afb23ea13d5f3d0bb7852" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52372278" /></Metadata><TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="22421-101">実行時の動的な動作を指定する基底クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-101">Provides a base class for specifying dynamic behavior at run time.</span></span> <span data-ttu-id="22421-102">このクラスは継承される必要があります。直接インスタンス化することはできません。</span><span class="sxs-lookup"><span data-stu-id="22421-102">This class must be inherited from; you cannot instantiate it directly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-103">`DynamicObject`クラスでは、動的オブジェクトで実行できる操作とそれらの操作を実行する方法を定義することができます。</span><span class="sxs-lookup"><span data-stu-id="22421-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="22421-104">たとえば、取得、オブジェクトのプロパティを設定またはメソッドの呼び出し、または加算や乗算などの標準的な算術演算を実行しようとするときの動作を定義できます。</span><span class="sxs-lookup"><span data-stu-id="22421-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="22421-105">このクラスより便利なライブラリのプロトコルを作成する場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="22421-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="22421-106">たとえば、次のような構文を使用するライブラリのユーザーが必要`Scriptobj.SetProperty("Count", 1)`、このような程度簡単な構文を使用する機能を提供できます`scriptobj.Count = 1`します。</span><span class="sxs-lookup"><span data-stu-id="22421-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="22421-107">インスタンスを直接作成することはできません、`DynamicObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="22421-108">動的な動作を実装するためにから継承したい場合があります、`DynamicObject`クラスし、必要なメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="22421-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="22421-109">たとえば、設定とプロパティを取得する唯一の操作を必要がある場合上書きできますだけ、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="22421-110">C# から派生したクラスのインスタンスの動的な動作を有効にする、`DynamicObject`クラスを使用する必要がある、`dynamic`キーワード。</span><span class="sxs-lookup"><span data-stu-id="22421-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="22421-111">詳細については、「[dynamic 型の使用](~/docs/csharp/programming-guide/types/using-type-dynamic.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="22421-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="22421-112">Visual basic での動的操作は、遅延バインディングでサポートされます。</span><span class="sxs-lookup"><span data-stu-id="22421-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="22421-113">詳細については、次を参照してください。[事前バインディングと遅延バインディング](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)します。</span><span class="sxs-lookup"><span data-stu-id="22421-113">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="22421-114">派生したクラスのインスタンスを作成する方法を次のコード例に示します、`DynamicObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="22421-115">派生したクラスを独自のメンバーを追加することも、`DynamicObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="22421-116">クラスのプロパティを定義およびもオーバーライドする場合、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッドでは、動的言語ランタイム (DLR) 最初を使用して、言語バインダー、クラスのプロパティの静的な定義を探します。</span><span class="sxs-lookup"><span data-stu-id="22421-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="22421-117">このようなプロパティがない場合、DLR を呼び出す、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="22421-118">`DynamicObject` DLR インターフェイスを実装するクラス<xref:System.Dynamic.IDynamicMetaObjectProvider>のインスタンスを共有することができる`DynamicObject`DLR の相互運用性モデルをサポートする言語のクラス。</span><span class="sxs-lookup"><span data-stu-id="22421-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="22421-119">インスタンスを作成するなど、`DynamicObject`クラス (C#) と IronPython 関数に渡します。</span><span class="sxs-lookup"><span data-stu-id="22421-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="22421-120">詳細については、次を参照してください。[動的言語ランタイムの概要](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="22421-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="22421-121">オブジェクトを特定の操作を定義しはない静的メンバーを持つ、使用する必要はありませんが、追加し実行時にメンバーを削除することができますのみすることが必要となる単純なシナリオがある場合、<xref:System.Dynamic.ExpandoObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="22421-122">動的オブジェクトの相互運用性のプロトコルに参加または DLR 高速な動的ディスパッチのキャッシュを管理する必要がある方法を定義する必要があるより高度なシナリオがあれば、独自の実装を作成、<xref:System.Dynamic.IDynamicMetaObjectProvider>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="22421-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-123">書き込みの代わりに、dictionary 内の値にアクセスするための代替構文を提供することを前提としています`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"` Visual Basic で)、書き込める`sampleDictionary.Text = "Sample text"`します。</span><span class="sxs-lookup"><span data-stu-id="22421-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="22421-124">また、大文字と小文字にするには、この構文をするように`sampleDictionary.Text`と等価`sampleDictionary.text`します。</span><span class="sxs-lookup"><span data-stu-id="22421-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="22421-125">次のコード例に示します、`DynamicDictionary`クラスから派生した、`DynamicObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="22421-126">`DynamicDictionary`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアと上書きを格納する、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>新しい構文をサポートするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="22421-127">用意されています、`Count`数の動的プロパティのディクショナリを示しています、プロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="22421-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="22421-128">例については、次を参照してください。 [DynamicObject でラッパーを作成する](https://go.microsoft.com/fwlink/?LinkId=169008)c# よく寄せられる質問のブログ。</span><span class="sxs-lookup"><span data-stu-id="22421-128">For more examples, see [Creating Wrappers with DynamicObject](https://go.microsoft.com/fwlink/?LinkId=169008) on the C# Frequently Asked Questions blog.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="22421-129">派生型で <see cref="T:System.Dynamic.DynamicObject" /> 型の新しいインスタンスを初期化できるようにします。</span><span class="sxs-lookup"><span data-stu-id="22421-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-130">インスタンスを直接作成することはできません、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-131">動的な動作を実装するから継承する必要がある、<xref:System.Dynamic.DynamicObject>クラスし、必要なメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="22421-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="22421-132">C# から派生したクラスのインスタンスの動的な動作を有効にする、<xref:System.Dynamic.DynamicObject>クラスを使用する必要がある、`dynamic`キーワード。</span><span class="sxs-lookup"><span data-stu-id="22421-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="22421-133">詳細については、「[dynamic 型の使用](~/docs/csharp/programming-guide/types/using-type-dynamic.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="22421-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="22421-134">Visual basic での動的操作は、遅延バインディングでサポートされます。</span><span class="sxs-lookup"><span data-stu-id="22421-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="22421-135">詳細については、次を参照してください。[事前バインディングと遅延バインディング](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)します。</span><span class="sxs-lookup"><span data-stu-id="22421-135">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-136">派生したクラスのインスタンスを作成する方法を次のコード例に示します、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="22421-137">すべての動的メンバー名の列挙値を返します。</span><span class="sxs-lookup"><span data-stu-id="22421-137">Returns the enumeration of all dynamic member names.</span></span></summary>
        <returns><span data-ttu-id="22421-138">動的メンバー名を含むシーケンス。</span><span class="sxs-lookup"><span data-stu-id="22421-138">A sequence that contains dynamic member names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-139">このメソッドは、デバッグ目的でのみ存在します。</span><span class="sxs-lookup"><span data-stu-id="22421-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="22421-140">動的仮想メソッドにディスパッチされる <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</span><span class="sxs-lookup"><span data-stu-id="22421-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span></span></param>
        <summary><span data-ttu-id="22421-141">動的仮想メソッドにディスパッチされる <see cref="T:System.Dynamic.DynamicMetaObject" /> を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span></span> <span data-ttu-id="22421-142">このオブジェクトを別の <see cref="T:System.Dynamic.DynamicMetaObject" /> の内部にカプセル化することにより、個々のアクションのカスタム動作を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="22421-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span></span> <span data-ttu-id="22421-143">このメソッドは言語実装者向けの DLR (動的言語ランタイム) インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="22421-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span></span></summary>
        <returns><span data-ttu-id="22421-144"><see cref="T:System.Dynamic.DynamicMetaObject" /> 型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="22421-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-145">二項演算に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-145">Provides information about the binary operation.</span></span> <span data-ttu-id="22421-146"><c>binder.Operation</c> プロパティは <see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="22421-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="22421-147">たとえば、<c>sum = first + second</c> ステートメントの場合 (<c>first</c> と <c>second</c> は <see langword="DynamicObject" /> クラスから派生)、<c>binder.Operation</c> クラスは <c>ExpressionType.Add</c> を返します。</span><span class="sxs-lookup"><span data-stu-id="22421-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span></span></param>
        <param name="arg"><span data-ttu-id="22421-148">二項演算の右オペランド。</span><span class="sxs-lookup"><span data-stu-id="22421-148">The right operand for the binary operation.</span></span> <span data-ttu-id="22421-149">たとえば、<c>sum = first + second</c> ステートメントの場合 (<c>first</c> と <c>second</c> は <see langword="DynamicObject" /> クラスから派生)、<paramref name="arg" /> は <c>second</c> と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="22421-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <paramref name="arg" /> is equal to <c>second</c>.</span></span></param>
        <param name="result"><span data-ttu-id="22421-150">二項演算の結果。</span><span class="sxs-lookup"><span data-stu-id="22421-150">The result of the binary operation.</span></span></param>
        <summary><span data-ttu-id="22421-151">二項演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-151">Provides implementation for binary operations.</span></span> <span data-ttu-id="22421-152"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、加算や乗算などの演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span></span></summary>
        <returns><span data-ttu-id="22421-153">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-153"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-154">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-155">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-155">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-156">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトの二項演算を実行する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-157">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-158">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-159">加算や乗算などの二項演算がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="22421-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="22421-160">たとえば場合、<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>メソッドがオーバーライドされたなどのステートメントに対して自動的に呼び出される`sum = first + second`または`multiply = first*second`ここで、`first`から派生、`DynamicObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="22421-161">使用して二項演算の種類に関する情報を取得することができます、`Operation`のプロパティ、`binder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="22421-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="22421-162">C# および Visual Basic の場合にのみ、動的オブジェクトが使用されている場合、`binder.Operation`プロパティから次の値のいずれかを指定できます、<xref:System.Linq.Expressions.ExpressionType>列挙体。</span><span class="sxs-lookup"><span data-stu-id="22421-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="22421-163">ただし、IronPython や IronRuby などの他の言語で他の値があることができます。</span><span class="sxs-lookup"><span data-stu-id="22421-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="22421-164">[値]</span><span class="sxs-lookup"><span data-stu-id="22421-164">Value</span></span>|<span data-ttu-id="22421-165">説明</span><span class="sxs-lookup"><span data-stu-id="22421-165">Description</span></span>|<span data-ttu-id="22421-166">C#</span><span class="sxs-lookup"><span data-stu-id="22421-166">C#</span></span>|<span data-ttu-id="22421-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="22421-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="22421-168">オーバーフロー チェックを行わない、数値オペランドに対する加算演算。</span><span class="sxs-lookup"><span data-stu-id="22421-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="22421-169">オーバーフロー チェックを行わない、数値オペランドに対する加算の複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="22421-170">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="22421-171">ビットごと`AND`操作。</span><span class="sxs-lookup"><span data-stu-id="22421-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="22421-172">ビットごと`AND`の複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="22421-173">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="22421-174">算術除算演算の場合。</span><span class="sxs-lookup"><span data-stu-id="22421-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="22421-175">除算の複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="22421-176">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="22421-177">ビットごと`XOR`操作。</span><span class="sxs-lookup"><span data-stu-id="22421-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="22421-178">ビットごと`XOR`の複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="22421-179">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="22421-180">「より大きい」比較します。</span><span class="sxs-lookup"><span data-stu-id="22421-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="22421-181">「より大きいまたは等しい」比較します。</span><span class="sxs-lookup"><span data-stu-id="22421-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="22421-182">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="22421-183">ビットごとの左シフト演算。</span><span class="sxs-lookup"><span data-stu-id="22421-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="22421-184">ビットごとの左シフトの複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="22421-185">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="22421-186">「より小さい」比較します。</span><span class="sxs-lookup"><span data-stu-id="22421-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="22421-187">「以下に」を比較します。</span><span class="sxs-lookup"><span data-stu-id="22421-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="22421-188">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="22421-189">算術剰余演算。</span><span class="sxs-lookup"><span data-stu-id="22421-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="22421-190">算術剰余の複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="22421-191">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="22421-192">オーバーフロー チェックを行わない、数値オペランドに対する乗算演算。</span><span class="sxs-lookup"><span data-stu-id="22421-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="22421-193">オーバーフロー チェックを行わない、数値オペランドに対する乗算の複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="22421-194">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="22421-195">非等価比較。</span><span class="sxs-lookup"><span data-stu-id="22421-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="22421-196">論理またはビットごと`OR`操作。</span><span class="sxs-lookup"><span data-stu-id="22421-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="22421-197">論理またはビットごと`OR`複合代入。</span><span class="sxs-lookup"><span data-stu-id="22421-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="22421-198">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="22421-199">数値の累乗の数学的演算。</span><span class="sxs-lookup"><span data-stu-id="22421-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="22421-200">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="22421-201">ビットごとの右シフト演算。</span><span class="sxs-lookup"><span data-stu-id="22421-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="22421-202">ビットごとの右シフトの複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="22421-203">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="22421-204">オーバーフロー チェックを行わない、数値オペランドに対する減算演算。</span><span class="sxs-lookup"><span data-stu-id="22421-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="22421-205">オーバーフロー チェックを行わない、数値オペランドに対する減算の複合代入演算。</span><span class="sxs-lookup"><span data-stu-id="22421-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="22421-206">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="22421-207">実装する`OrElse`(`a || b`) と`AndAlso`(`a && b`) (C#) の動的オブジェクトの操作で、両方を実装することがあります、<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>メソッドと<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="22421-208">`OrElse`操作では、単項`IsTrue`操作と、バイナリ`Or`操作。</span><span class="sxs-lookup"><span data-stu-id="22421-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="22421-209">`Or`場合にのみ操作が実行の結果、`IsTrue`操作が`false`します。</span><span class="sxs-lookup"><span data-stu-id="22421-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="22421-210">`AndAlso`操作では、単項`IsFalse`操作と、バイナリ`And`操作。</span><span class="sxs-lookup"><span data-stu-id="22421-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="22421-211">`And`場合にのみ操作が実行の結果、`IsFalse`操作が`false`します。</span><span class="sxs-lookup"><span data-stu-id="22421-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-212">このようなデータの加算や減算などの基本的な算術演算を定義する番号のテキストや数値の表現を格納するデータ構造を作成する必要がありますを想定しています。</span><span class="sxs-lookup"><span data-stu-id="22421-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="22421-213">次のコード例に示します、`DynamicNumber`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-214">`DynamicNumber` 上書き、<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>数学的な操作を有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="22421-215">オーバーライド、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>要素へのアクセスを有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="22421-216">この例では、加算と減算の操作のみがサポートされます。</span><span class="sxs-lookup"><span data-stu-id="22421-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="22421-217">次のステートメントを記述しようとする場合`resultNumber = firstNumber*secondNumber`実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="22421-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-218">変換演算に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-218">Provides information about the conversion operation.</span></span> <span data-ttu-id="22421-219"><c>binder.Type</c> プロパティは、オブジェクトの変換後の型を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span></span> <span data-ttu-id="22421-220">たとえば、C# のステートメント <c>(String)sampleObject</c> (Visual Basic では <c>CType(sampleObject, Type)</c>) の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Type</c> は <see cref="T:System.String" /> 型を返します。</span><span class="sxs-lookup"><span data-stu-id="22421-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span></span> <span data-ttu-id="22421-221"><c>binder.Explicit</c> プロパティは、行われる変換の種類に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span></span> <span data-ttu-id="22421-222">このプロパティは、明示的な変換の場合は <see langword="true" />、暗黙の変換の場合は <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="22421-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span></span></param>
        <param name="result"><span data-ttu-id="22421-223">型変換演算の結果。</span><span class="sxs-lookup"><span data-stu-id="22421-223">The result of the type conversion operation.</span></span></param>
        <summary><span data-ttu-id="22421-224">型変換演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-224">Provides implementation for type conversion operations.</span></span> <span data-ttu-id="22421-225"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトの型を別の型に変換する演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span></span></summary>
        <returns><span data-ttu-id="22421-226">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-226"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-227">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-228">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-228">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-229">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトの型変換を実行する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-230">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-231">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-232">C# の場合、このメソッドがオーバーライドされると、自動的に呼び出されます、明示的または暗黙的な変換がある場合に次のコード例で示すよう。</span><span class="sxs-lookup"><span data-stu-id="22421-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="22421-233">Visual basic では、明示的な変換のみがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="22421-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="22421-234">使用して呼び出す場合、このメソッドをオーバーライドして、<xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A>または<xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A>関数。</span><span class="sxs-lookup"><span data-stu-id="22421-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="22421-235">文字列と整数にこのデータ構造体の変換を定義する番号のテキストや数値の表現を格納するデータ構造を作成する必要がありますを想定しています。</span><span class="sxs-lookup"><span data-stu-id="22421-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="22421-236">次のコード例に示します、`DynamicNumber`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-237">`DynamicNumber` 上書き、<xref:System.Dynamic.DynamicObject.TryConvert%2A>型変換を有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="22421-238">オーバーライド、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>データ要素へのアクセスを有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="22421-239">この例では、文字列と整数への変換のみがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="22421-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="22421-240">オブジェクトを他の任意の型に変換しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="22421-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-241">初期化演算に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-241">Provides information about the initialization operation.</span></span></param>
        <param name="args"><span data-ttu-id="22421-242">初期化中にオブジェクトに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="22421-242">The arguments that are passed to the object during initialization.</span></span> <span data-ttu-id="22421-243">たとえば、<c>new SampleType(100)</c> 演算の場合 (<c>SampleType</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生型)、<c>args[0]</c> は 100 に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="22421-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="22421-244">初期化の結果。</span><span class="sxs-lookup"><span data-stu-id="22421-244">The result of the initialization.</span></span></param>
        <summary><span data-ttu-id="22421-245">動的オブジェクトの新しいインスタンスを初期化する演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span></span> <span data-ttu-id="22421-246">このメソッドは、C# または Visual Basic で使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="22421-246">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="22421-247">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-247"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-248">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-249">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-249">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-250">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトの新しいインスタンスを初期化する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="22421-251">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-252">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-253">C# および Visual Basic コンパイラは、ファースト クラスの型をサポートしていないために、このメソッドを使用するコードを生成しません。</span><span class="sxs-lookup"><span data-stu-id="22421-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="22421-254">このメソッドは、のような構文を使用して動的オブジェクトの初期化をサポートする言語`dynamic new`します。</span><span class="sxs-lookup"><span data-stu-id="22421-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-255">削除に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-255">Provides information about the deletion.</span></span></param>
        <param name="indexes"><span data-ttu-id="22421-256">削除するインデックス。</span><span class="sxs-lookup"><span data-stu-id="22421-256">The indexes to be deleted.</span></span></param>
        <summary><span data-ttu-id="22421-257">インデックスを使用してオブジェクトを削除する演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-257">Provides the implementation for operations that delete an object by index.</span></span> <span data-ttu-id="22421-258">このメソッドは、C# または Visual Basic で使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="22421-258">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="22421-259">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-259"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-260">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-261">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-261">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-262">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、指定したインデックスを持つ値の削除方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="22421-263">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-264">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-265">C# および Visual Basic コンパイラは、このような操作をサポートしていないために、このメソッドを使用するコードを生成しません。</span><span class="sxs-lookup"><span data-stu-id="22421-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="22421-266">このメソッドはなど、インデックスを使用してオブジェクトを削除するための構文をサポートする言語に関して、 `del sampleObject[1,2]` Python でします。</span><span class="sxs-lookup"><span data-stu-id="22421-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-267">削除に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-267">Provides information about the deletion.</span></span></param>
        <summary><span data-ttu-id="22421-268">オブジェクト メンバーを削除する演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-268">Provides the implementation for operations that delete an object member.</span></span> <span data-ttu-id="22421-269">このメソッドは、C# または Visual Basic で使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="22421-269">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="22421-270">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-270"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-271">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-272">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-272">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-273">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、オブジェクトのメンバーを削除する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="22421-274">このメソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-275">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-276">C# および Visual Basic コンパイラは、このような操作をサポートしていないために、このメソッドを使用するコードを生成しません。</span><span class="sxs-lookup"><span data-stu-id="22421-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="22421-277">このメソッドはなど、メンバーを削除するための構文をサポートする言語に関して、 `del sampleObject.SampleMember` Python でします。</span><span class="sxs-lookup"><span data-stu-id="22421-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-278">演算に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-278">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="22421-279">演算に使用されるインデックス。</span><span class="sxs-lookup"><span data-stu-id="22421-279">The indexes that are used in the operation.</span></span> <span data-ttu-id="22421-280">たとえば、C# の <c>sampleObject[3]</c> (Visual Basic では <c>sampleObject(3)</c>) 演算の場合 (<c>sampleObject</c> は <see langword="DynamicObject" /> クラスから派生)、<c>indexes[0]</c> は 3 に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="22421-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="result"><span data-ttu-id="22421-281">インデックス演算の結果。</span><span class="sxs-lookup"><span data-stu-id="22421-281">The result of the index operation.</span></span></param>
        <summary><span data-ttu-id="22421-282">インデックスを使用して値を取得する演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-282">Provides the implementation for operations that get a value by index.</span></span> <span data-ttu-id="22421-283"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、インデックス演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span></span></summary>
        <returns><span data-ttu-id="22421-284">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-284"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-285">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-286">(ほとんどの場合、実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-286">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-287">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、値を取得するインデックスを使用して実行する方法の動的オブジェクトを指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-288">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-289">(ほとんどの場合、実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-290">などの操作がある場合に自動的に呼び出される場合、このメソッドがオーバーライドされると、 `sampleObject[3]` (C#) または`sampleObject(3)`Visual Basic で`sampleObject`から派生したが、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-291">前提としています名前でいずれかなど、アクセスのプロパティができるオブジェクトを作成する`Property0`、 `Property1`、またはインデックスでように、たとえば、`sampleObject.Property0`と等価`sampleObject[0]`(C#) または`sampleObject(0)`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="22421-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="22421-292">次のコード例に示します、`SampleDynamicObject`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-293">`SampleDynamicObject`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアを格納します。</span><span class="sxs-lookup"><span data-stu-id="22421-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="22421-294">`SampleDynamicObject` 上書き、<xref:System.Dynamic.DynamicObject.TrySetIndex%2A>と<xref:System.Dynamic.DynamicObject.TryGetIndex%2A>インデックスによってアクセスを有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="22421-295">これは、上書き、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>プロパティ名によるアクセスを有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-296">動的演算を呼び出したオブジェクトに関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-296">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="22421-297"><c>binder.Name</c> プロパティは、動的演算の対象であるメンバーの名前を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="22421-298">たとえば、<c>Console.WriteLine(sampleObject.SampleProperty)</c> ステートメントの場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleProperty" を返します。</span><span class="sxs-lookup"><span data-stu-id="22421-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="22421-299">メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</span><span class="sxs-lookup"><span data-stu-id="22421-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="result"><span data-ttu-id="22421-300">取得操作の結果。</span><span class="sxs-lookup"><span data-stu-id="22421-300">The result of the get operation.</span></span> <span data-ttu-id="22421-301">たとえば、このメソッドがプロパティに対して呼び出された場合、プロパティ値を <paramref name="result" /> に割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="22421-301">For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</span></span></param>
        <summary><span data-ttu-id="22421-302">メンバー値を取得する演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-302">Provides the implementation for operations that get member values.</span></span> <span data-ttu-id="22421-303"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の取得などの演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="22421-304">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-304"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-305">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-306">(ほとんどの場合、実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-306">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-307">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのメンバーの値を取得する操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-308">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-309">(ほとんどの場合、実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-310">などのステートメントがある場合、このメソッドが呼び出されます`Console.WriteLine(sampleObject.SampleProperty)`ここで、`sampleObject`から派生したクラスのインスタンスである、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="22421-311">派生したクラスを独自のメンバーを追加することも、`DynamicObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="22421-312">クラスのプロパティを定義およびもオーバーライドする場合、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッドでは、動的言語ランタイム (DLR) 最初を使用して、言語バインダー、クラスのプロパティの静的な定義を探します。</span><span class="sxs-lookup"><span data-stu-id="22421-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="22421-313">このようなプロパティがない場合、DLR を呼び出す、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-314">書き込みの代わりに、dictionary 内の値にアクセスするための代替構文を提供することを前提としています`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"` Visual Basic で)、書き込める`sampleDictionary.Text = "Sample text"`します。</span><span class="sxs-lookup"><span data-stu-id="22421-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="22421-315">また、この構文が区別されずにある必要がありますように`sampleDictionary.Text`と等価`sampleDictionary.text`します。</span><span class="sxs-lookup"><span data-stu-id="22421-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="22421-316">次のコード例に示します、`DynamicDictionary`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-317">`DynamicDictionary`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアと上書きを格納する、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>新しい構文をサポートするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="22421-318">用意されています、`Count`数の動的プロパティのディクショナリを示しています、プロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="22421-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-319">呼び出し演算に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-319">Provides information about the invoke operation.</span></span></param>
        <param name="args"><span data-ttu-id="22421-320">呼び出し演算でオブジェクトに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="22421-320">The arguments that are passed to the object during the invoke operation.</span></span> <span data-ttu-id="22421-321">たとえば、<c>sampleObject(100)</c> 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>args[0]</c> は 100 に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="22421-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="22421-322">オブジェクト呼び出しの結果。</span><span class="sxs-lookup"><span data-stu-id="22421-322">The result of the object invocation.</span></span></param>
        <summary><span data-ttu-id="22421-323">オブジェクトを呼び出す演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-323">Provides the implementation for operations that invoke an object.</span></span> <span data-ttu-id="22421-324"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトやデリゲートの呼び出しなどの演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span></span></summary>
        <returns><span data-ttu-id="22421-325">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-325"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-326">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-327">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-327">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-328">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのオブジェクトを呼び出す操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-329">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-330">(ほとんどの場合、実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-331">などの操作がある場合に自動的に呼び出される場合、このメソッドがオーバーライドされると、`sampleObject(100)`ここで、`sampleObject`から派生したが、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="22421-332">オブジェクトを呼び出すため操作には、Visual Basic ではなく c# ではサポートされています。</span><span class="sxs-lookup"><span data-stu-id="22421-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="22421-333">Visual Basic コンパイラはことはありません、このメソッドを使用するコードを生成し、Visual Basic 言語はのような構文をサポートしていません`sampleObject(100)`します。</span><span class="sxs-lookup"><span data-stu-id="22421-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-334">番号のテキストや数値の表現を格納するデータ構造を必要とします。</span><span class="sxs-lookup"><span data-stu-id="22421-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="22421-335">各プロパティの値を個別に指定し、1 つのステートメントのすべてのプロパティを初期化するためにできるようにできるします。</span><span class="sxs-lookup"><span data-stu-id="22421-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="22421-336">次のコード例に示します、`DynamicNumber`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-337">`DynamicNumber` 上書き、<xref:System.Dynamic.DynamicObject.TryInvoke%2A>一度にすべてのプロパティの初期化を有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="22421-338">オーバーライド、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>個々 のオブジェクトのプロパティへのアクセスを有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-339">動的な演算に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-339">Provides information about the dynamic operation.</span></span> <span data-ttu-id="22421-340"><c>binder.Name</c> プロパティは、動的演算の対象であるメンバーの名前を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="22421-341">たとえば、ステートメント <c>sampleObject.SampleMethod(100)</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleMethod" を返します。</span><span class="sxs-lookup"><span data-stu-id="22421-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span></span> <span data-ttu-id="22421-342">メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</span><span class="sxs-lookup"><span data-stu-id="22421-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="args"><span data-ttu-id="22421-343">呼び出し演算でオブジェクト メンバーに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="22421-343">The arguments that are passed to the object member during the invoke operation.</span></span> <span data-ttu-id="22421-344">たとえば、ステートメント <c>sampleObject.SampleMethod(100)</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>args[0]</c> は 100 に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="22421-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="22421-345">メンバー呼び出しの結果。</span><span class="sxs-lookup"><span data-stu-id="22421-345">The result of the member invocation.</span></span></param>
        <summary><span data-ttu-id="22421-346">メンバーを呼び出す演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-346">Provides the implementation for operations that invoke a member.</span></span> <span data-ttu-id="22421-347"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、メソッドの呼び出しなどの演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span></span></summary>
        <returns><span data-ttu-id="22421-348">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-348"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-349">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-350">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-350">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-351">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのオブジェクトのメンバーを呼び出す操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-352">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-353">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-354">ような操作を実行するときに自動的に呼び出される場合、このメソッドがオーバーライドされると、`sampleObject.SampleMethod(100)`ここで、`sampleObject`から派生したが、`DynamicObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="22421-355">派生したクラスに、独自のメソッドを追加することも、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-356">オーバーライドする場合など、<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>メソッドでは、動的ディスパッチ システムは最初、クラスで指定されたメソッドが存在するかどうかを判断するしようとします。</span><span class="sxs-lookup"><span data-stu-id="22421-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="22421-357">メソッドが見つからない場合は、使用、<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>実装します。</span><span class="sxs-lookup"><span data-stu-id="22421-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="22421-358">このメソッドがサポートしていません`ref`と`out`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="22421-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="22421-359">すべてのパラメーター、`args`配列が値によって渡されます。</span><span class="sxs-lookup"><span data-stu-id="22421-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-360">書き込みの代わりに、dictionary 内の値にアクセスするための代替構文を提供することを前提としています`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"` Visual Basic で)、書き込める`sampleDictionary.Text = "Sample text"`します。</span><span class="sxs-lookup"><span data-stu-id="22421-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="22421-361">また、このディクショナリのすべての標準的な辞書メソッドを呼び出すことができるします。</span><span class="sxs-lookup"><span data-stu-id="22421-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="22421-362">次のコード例に示します、`DynamicDictionary`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-363">`DynamicDictionary`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアを格納します。</span><span class="sxs-lookup"><span data-stu-id="22421-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="22421-364">も優先、<xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>メソッドのメソッドをサポートするために、<xref:System.Collections.Generic.Dictionary%602>クラスおよびオーバーライド、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>新しい構文をサポートするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="22421-365">用意されています、`Print`メソッドで、すべてのディクショナリのキーと値を出力します。</span><span class="sxs-lookup"><span data-stu-id="22421-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-366">演算に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-366">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="22421-367">演算に使用されるインデックス。</span><span class="sxs-lookup"><span data-stu-id="22421-367">The indexes that are used in the operation.</span></span> <span data-ttu-id="22421-368">たとえば、C# の <c>sampleObject[3] = 10</c> (Visual Basic では <c>sampleObject(3) = 10</c>) 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>indexes[0]</c> は 3 に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="22421-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="value"><span data-ttu-id="22421-369">指定したインデックスのオブジェクトに設定する値。</span><span class="sxs-lookup"><span data-stu-id="22421-369">The value to set to the object that has the specified index.</span></span> <span data-ttu-id="22421-370">たとえば、C# の <c>sampleObject[3] = 10</c> (Visual Basic では <c>sampleObject(3) = 10</c>) 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<paramref name="value" /> は 10 に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="22421-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</span></span></param>
        <summary><span data-ttu-id="22421-371">インデックスを使用して値を設定する演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-371">Provides the implementation for operations that set a value by index.</span></span> <span data-ttu-id="22421-372"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、指定したインデックスを使用してオブジェクトにアクセスする演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span></span></summary>
        <returns><span data-ttu-id="22421-373">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-373"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-374">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-375">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-375">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-376">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのインデックスを使用してオブジェクトにアクセスする操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-377">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-378">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-379">などの操作がある場合に自動的に呼び出される場合、このメソッドがオーバーライドされると、 `sampleObject[3] = 10` (C#) または`sampleObject(3) = 10`Visual Basic で`sampleObject`から派生したが、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-380">前提としています名前でいずれかなど、アクセスのプロパティができるオブジェクトを作成する`Property0`、 `Property1`、またはインデックスでように、たとえば、`sampleObject.Property0`と等価`sampleObject[0]`(C#) または`sampleObject(0)`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="22421-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="22421-381">次のコード例に示します、`SampleDynamicObject`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-382">`SampleDynamicObject`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアを格納します。</span><span class="sxs-lookup"><span data-stu-id="22421-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="22421-383">`SampleDynamicObject` 上書き、<xref:System.Dynamic.DynamicObject.TrySetIndex%2A>と<xref:System.Dynamic.DynamicObject.TryGetIndex%2A>インデックスによってアクセスを有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="22421-384">これは、上書き、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>プロパティ名によるアクセスを有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-385">動的演算を呼び出したオブジェクトに関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-385">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="22421-386"><c>binder.Name</c> プロパティは、値の割り当て先のメンバーの名前を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span></span> <span data-ttu-id="22421-387">たとえば、ステートメント <c>sampleObject.SampleProperty = "Test"</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleProperty" を返します。</span><span class="sxs-lookup"><span data-stu-id="22421-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="22421-388">メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</span><span class="sxs-lookup"><span data-stu-id="22421-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="value"><span data-ttu-id="22421-389">メンバーに設定する値。</span><span class="sxs-lookup"><span data-stu-id="22421-389">The value to set to the member.</span></span> <span data-ttu-id="22421-390">たとえば、<c>sampleObject.SampleProperty = "Test"</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<paramref name="value" /> は "Test" となります。</span><span class="sxs-lookup"><span data-stu-id="22421-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</span></span></param>
        <summary><span data-ttu-id="22421-391">メンバー値を設定する演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-391">Provides the implementation for operations that set member values.</span></span> <span data-ttu-id="22421-392"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の設定などの演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="22421-393">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-393"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-394">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-395">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-395">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-396">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトのメンバーに値を設定する操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-397">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-398">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-399">などのステートメントがある場合、このメソッドが呼び出されます`sampleObject.SampleProperty = "Test"`ここで、`sampleObject`から派生したクラスのインスタンスには、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="22421-400">派生したクラスを独自のメンバーを追加することも、`DynamicObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="22421-401">クラスのプロパティを定義およびもオーバーライドする場合、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッドでは、動的言語ランタイム (DLR) 最初を使用して、言語バインダー、クラスのプロパティの静的な定義を探します。</span><span class="sxs-lookup"><span data-stu-id="22421-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="22421-402">このようなプロパティがない場合、DLR を呼び出す、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-403">書き込みの代わりに、dictionary 内の値にアクセスするための代替構文を提供することを前提としています`sampleDictionary["Text"] = "Sample text"`(`sampleDictionary("Text") = "Sample text"` Visual Basic で)、書き込める`sampleDictionary.Text = "Sample text"`します。</span><span class="sxs-lookup"><span data-stu-id="22421-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="22421-404">また、この構文が区別されずにある必要がありますように`sampleDictionary.Text`と等価`sampleDictionary.text`します。</span><span class="sxs-lookup"><span data-stu-id="22421-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="22421-405">次のコード例に示します、`DynamicDictionary`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-406">`DynamicDictionary`クラスにはオブジェクトが含まれています、`Dictionary<string, object>`型 (`Dictionary(Of String, Object)` Visual Basic で) キーと値のペアと上書きを格納する、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>新しい構文をサポートするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="22421-407">用意されています、`Count`数の動的プロパティのディクショナリを示しています、プロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="22421-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="22421-408">単項演算に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-408">Provides information about the unary operation.</span></span> <span data-ttu-id="22421-409"><c>binder.Operation</c> プロパティは <see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="22421-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="22421-410">たとえば、<c>negativeNumber = -number</c> ステートメントの場合 (<c>number</c> は <see langword="DynamicObject" /> クラスから派生)、<c>binder.Operation</c> は "Negate" を返します。</span><span class="sxs-lookup"><span data-stu-id="22421-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span></span></param>
        <param name="result"><span data-ttu-id="22421-411">単項演算の結果。</span><span class="sxs-lookup"><span data-stu-id="22421-411">The result of the unary operation.</span></span></param>
        <summary><span data-ttu-id="22421-412">単項演算の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="22421-412">Provides implementation for unary operations.</span></span> <span data-ttu-id="22421-413"><see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、否定、インクリメント、デクリメントなどの演算の動的な動作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="22421-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span></span></summary>
        <returns><span data-ttu-id="22421-414">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22421-414"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="22421-415">このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります </span><span class="sxs-lookup"><span data-stu-id="22421-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-416">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-416">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22421-417">派生したクラス、<xref:System.Dynamic.DynamicObject>クラスは、動的オブジェクトの単項演算を実行する方法を指定するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="22421-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="22421-418">メソッドがオーバーライドされていない言語のランタイム バインダーによって動作が決まります。</span><span class="sxs-lookup"><span data-stu-id="22421-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="22421-419">(ほとんどの場合、言語固有の実行時例外がスローされます)。</span><span class="sxs-lookup"><span data-stu-id="22421-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="22421-420">このメソッドは、否定、インクリメントなどの単項演算または減少したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="22421-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="22421-421">たとえば場合、<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>メソッドがオーバーライドされたなどのステートメントに対して、このメソッドが自動的に呼び出される`negativeNumber = -number`ここで、`number`から派生、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="22421-422">単項演算の種類に関する情報を取得するにを使用して、`Operation`のプロパティ、`binder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="22421-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="22421-423">C# および Visual Basic の場合にのみ、動的オブジェクトが使用されている場合、`binder.Operation`プロパティから次の値のいずれかを指定できます、<xref:System.Linq.Expressions.ExpressionType>列挙体。</span><span class="sxs-lookup"><span data-stu-id="22421-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="22421-424">ただし、IronPython や IronRuby などの他の言語で他の値があることができます。</span><span class="sxs-lookup"><span data-stu-id="22421-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="22421-425">[値]</span><span class="sxs-lookup"><span data-stu-id="22421-425">Value</span></span>|<span data-ttu-id="22421-426">説明</span><span class="sxs-lookup"><span data-stu-id="22421-426">Description</span></span>|<span data-ttu-id="22421-427">C#</span><span class="sxs-lookup"><span data-stu-id="22421-427">C#</span></span>|<span data-ttu-id="22421-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="22421-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="22421-429">単項デクリメント演算です。</span><span class="sxs-lookup"><span data-stu-id="22421-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="22421-430">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="22421-431">単項インクリメント演算です。</span><span class="sxs-lookup"><span data-stu-id="22421-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="22421-432">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="22421-433">算術否定。</span><span class="sxs-lookup"><span data-stu-id="22421-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="22421-434">論理否定。</span><span class="sxs-lookup"><span data-stu-id="22421-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="22421-435">1 の補数。</span><span class="sxs-lookup"><span data-stu-id="22421-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="22421-436">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="22421-437">False の条件の値。</span><span class="sxs-lookup"><span data-stu-id="22421-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="22421-438">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="22421-439">条件が満たされた値。</span><span class="sxs-lookup"><span data-stu-id="22421-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="22421-440">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="22421-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="22421-441">単項プラスします。</span><span class="sxs-lookup"><span data-stu-id="22421-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="22421-442">実装する`OrElse`(`a || b`) と`AndAlso`(`a && b`) (C#) の動的オブジェクトの操作で、両方を実装することがあります、<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>メソッドと<xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="22421-443">`OrElse`操作では、単項`IsTrue`操作と、バイナリ`Or`操作。</span><span class="sxs-lookup"><span data-stu-id="22421-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="22421-444">`Or`場合にのみ操作が実行の結果、`IsTrue`操作が`false`します。</span><span class="sxs-lookup"><span data-stu-id="22421-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="22421-445">`AndAlso`操作では、単項`IsFalse`操作と、バイナリ`And`操作。</span><span class="sxs-lookup"><span data-stu-id="22421-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="22421-446">`And`場合にのみ操作が実行の結果、`IsFalse`操作が`false`します。</span><span class="sxs-lookup"><span data-stu-id="22421-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22421-447">このようなデータ、算術否定演算を定義する番号のテキストや数値の表現を格納するデータ構造を作成する必要がありますを想定しています。</span><span class="sxs-lookup"><span data-stu-id="22421-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="22421-448">次のコード例に示します、`DynamicNumber`クラスから派生した、<xref:System.Dynamic.DynamicObject>クラス。</span><span class="sxs-lookup"><span data-stu-id="22421-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="22421-449">`DynamicNumber` 上書き、<xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>算術否定演算を有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="22421-450">オーバーライドではまた、<xref:System.Dynamic.DynamicObject.TrySetMember%2A>と<xref:System.Dynamic.DynamicObject.TryGetMember%2A>要素へのアクセスを有効にするメソッド。</span><span class="sxs-lookup"><span data-stu-id="22421-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="22421-451">この例では、算術否定演算のみがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="22421-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="22421-452">次のステートメントを記述しようとする場合`negativeNumber = +number`実行時例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="22421-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>