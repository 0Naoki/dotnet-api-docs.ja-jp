<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DynamicObject.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5048b7221c8f650af7e40e1fc748386ee05216b4b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">048b7221c8f650af7e40e1fc748386ee05216b4b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Dynamic.DynamicObject">
          <source>Provides a base class for specifying dynamic behavior at run time.</source>
          <target state="translated">実行時の動的な動作を指定する基底クラスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Dynamic.DynamicObject">
          <source>This class must be inherited from; you cannot instantiate it directly.</source>
          <target state="translated">このクラスは継承される必要があります。直接インスタンス化することはできません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The <ph id="ph1">`DynamicObject`</ph> class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</source>
          <target state="translated"><ph id="ph1">`DynamicObject`</ph>クラスでは、動的オブジェクトでどのような操作を実行でき、これらの操作を実行する方法を定義することができます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</source>
          <target state="translated">たとえば、取得、オブジェクトのプロパティを設定またはメソッドを呼び出す、または加算および乗算などの標準的な数学的演算を実行しようとしたときの動作を定義できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>This class can be useful if you want to create a more convenient protocol for a library.</source>
          <target state="translated">このクラスは、ライブラリの方が便利なプロトコルを作成する場合に役立ちます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For example, if users of your library have to use syntax like <ph id="ph1">`Scriptobj.SetProperty("Count", 1)`</ph>, you can provide the ability to use much simpler syntax, like <ph id="ph2">`scriptobj.Count = 1`</ph>.</source>
          <target state="translated">たとえば、次のような構文を使用する必要は、ライブラリのユーザー <ph id="ph1">`Scriptobj.SetProperty("Count", 1)`</ph>、like 程度簡単な構文を使用する機能を提供できます<ph id="ph2">`scriptobj.Count = 1`</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>You cannot directly create an instance of the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">インスタンスを直接作成することはできません、<ph id="ph1">`DynamicObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>To implement the dynamic behavior, you may want to inherit from the <ph id="ph1">`DynamicObject`</ph> class and override necessary methods.</source>
          <target state="translated">動的な動作を実装するのから継承する必要な可能性があります、<ph id="ph1">`DynamicObject`</ph>クラスし、必要なメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For example, if you need only operations for setting and getting properties, you can override just the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods.</source>
          <target state="translated">たとえばの設定とプロパティの取得の操作を実行する場合に、オーバーライドできますだけ、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>In C#, to enable dynamic behavior for instances of classes derived from the <ph id="ph1">`DynamicObject`</ph> class, you must use the <ph id="ph2">`dynamic`</ph> keyword.</source>
          <target state="translated">C# の場合から派生したクラスのインスタンスの動的な動作を有効にする、<ph id="ph1">`DynamicObject`</ph>クラスを使用する必要がある、<ph id="ph2">`dynamic`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>dynamic 型の使用<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>In Visual Basic, dynamic operations are supported by late binding.</source>
          <target state="translated">Visual basic では、動的な処理は遅延バインディングによってサポートされます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Early and 遅延バインディング<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The following code example demonstrates how to create an instance of a class that is derived from the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">次のコード例から派生したクラスのインスタンスを作成する方法を示します、<ph id="ph1">`DynamicObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>You can also add your own members to classes derived from the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">派生したクラスに、独自のメンバーを追加することも、<ph id="ph1">`DynamicObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>If your class defines properties and also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</source>
          <target state="translated">クラスのプロパティを定義およびもオーバーライド場合、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>メソッド、動的言語ランタイム (DLR) 最初を使用して、言語バインダー クラス内のプロパティの静的な定義を検索します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>If there is no such property, the DLR calls the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.</source>
          <target state="translated">このようなプロパティが存在しない場合は、DLR を呼び出します、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The <ph id="ph1">`DynamicObject`</ph> class implements the DLR interface <ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, which enables you to share instances of the <ph id="ph3">`DynamicObject`</ph> class between languages that support the DLR interoperability model.</source>
          <target state="translated"><ph id="ph1">`DynamicObject`</ph>クラスは、DLR<ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>のインスタンスを共有できます、 <ph id="ph3">`DynamicObject`</ph> DLR 相互運用性モデルをサポートする言語のクラスです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For example, you can create an instance of the <ph id="ph1">`DynamicObject`</ph> class in C# and then pass it to an IronPython function.</source>
          <target state="translated">インスタンスを作成するなど、 <ph id="ph1">`DynamicObject`</ph> c# のクラスし、IronPython 関数に渡すことです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For more information, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>動的言語ランタイムの概要<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <ph id="ph1">&lt;xref:System.Dynamic.ExpandoObject&gt;</ph> class.</source>
          <target state="translated">オブジェクトを特定の操作を定義およびにされませんが静的メンバーを使用する必要はありませんが、追加して、実行時にメンバーを削除することができますのみを必要する単純なシナリオがある場合、<ph id="ph1">&lt;xref:System.Dynamic.ExpandoObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interface.</source>
          <target state="translated">動的オブジェクトの相互運用性プロトコルに参加または DLR 高速な動的ディスパッチ キャッシュを管理する必要がありますの方法を定義する必要があるより高度なシナリオがあれば、独自の実装を作成、<ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph> (<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> in Visual Basic), you can write <ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>.</source>
          <target state="translated">書き込みの代わりに、ディクショナリ内の値にアクセスするための代替構文を提供することを前提としています<ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph>(<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> Visual Basic で)、書き込めること<ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>Also, you want this syntax to be case-insensitive, so that <ph id="ph1">`sampleDictionary.Text`</ph> is equivalent to <ph id="ph2">`sampleDictionary.text`</ph>.</source>
          <target state="translated">また、この構文を区別しない、ようにするように<ph id="ph1">`sampleDictionary.Text`</ph>は等価<ph id="ph2">`sampleDictionary.text`</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicDictionary`</ph> class, which is derived from the <ph id="ph2">`DynamicObject`</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`DynamicDictionary`</ph>から派生するクラス、<ph id="ph2">`DynamicObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The <ph id="ph1">`DynamicDictionary`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs, and overrides the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to support the new syntax.</source>
          <target state="translated"><ph id="ph1">`DynamicDictionary`</ph>クラスのオブジェクトに含まれる、<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph> Visual Basic で) キーと値のペアと上書きを格納する、<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>新しい構文をサポートするメソッド。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>It also provides a <ph id="ph1">`Count`</ph> property, which shows how many dynamic properties the dictionary contains.</source>
          <target state="translated">用意されています、<ph id="ph1">`Count`</ph>ディクショナリ数の動的なプロパティを表示するプロパティが含まれます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For more examples, see <bpt id="p1">[</bpt>Creating Wrappers with DynamicObject<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=169008)</ept> on the C# Frequently Asked Questions blog.</source>
          <target state="translated">例については、次を参照してください。 <bpt id="p1">[</bpt>DynamicObject でラッパーを作成する<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=169008)</ept>c# よく寄せられる質問ブログ。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>Enables derived types to initialize a new instance of the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> type.</source>
          <target state="translated">派生型で <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 型の新しいインスタンスを初期化できるようにします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>You cannot directly create an instance of the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">インスタンスを直接作成することはできません、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>To implement dynamic behavior, you have to inherit from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class and override necessary methods.</source>
          <target state="translated">動的な動作を実装するのから継承する必要がある、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスし、必要なメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>In C#, to enable dynamic behavior for instances of the classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class, you must use the <ph id="ph2">`dynamic`</ph> keyword.</source>
          <target state="translated">C# の場合から派生したクラスのインスタンスの動的な動作を有効にする、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスを使用する必要がある、<ph id="ph2">`dynamic`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>dynamic 型の使用<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>In Visual Basic, dynamic operations are supported by late binding.</source>
          <target state="translated">Visual basic では、動的な処理は遅延バインディングによってサポートされます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Early and 遅延バインディング<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>The following code example demonstrates how to create an instance of classes that are derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例から派生したクラスのインスタンスを作成する方法を示します、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
          <source>Returns the enumeration of all dynamic member names.</source>
          <target state="translated">すべての動的メンバー名の列挙値を返します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
          <source>A sequence that contains dynamic member names.</source>
          <target state="translated">動的メンバー名を含むシーケンス。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
          <source>This method exists for debugging purposes only.</source>
          <target state="translated">このメソッドは、デバッグにのみ存在します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The expression that represents <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> to dispatch to the dynamic virtual methods.</source>
          <target state="translated">動的仮想メソッドにディスパッチされる <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> を表す式。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> that dispatches to the dynamic virtual methods.</source>
          <target state="translated">動的仮想メソッドにディスパッチされる <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> を提供します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object can be encapsulated inside another <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> to provide custom behavior for individual actions.</source>
          <target state="translated">このオブジェクトを別の <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> の内部にカプセル化することにより、個々のアクションのカスタム動作を指定することができます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</source>
          <target state="translated">このメソッドは言語実装者向けの DLR (動的言語ランタイム) インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>An object of the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> 型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Provides information about the binary operation.</source>
          <target state="translated">二項演算に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Operation<ept id="p1">&lt;/c&gt;</ept> property returns an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> object.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Operation<ept id="p1">&lt;/c&gt;</ept> プロパティは <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sum = first + second<ept id="p1">&lt;/c&gt;</ept> statement, where <bpt id="p2">&lt;c&gt;</bpt>first<ept id="p2">&lt;/c&gt;</ept> and <bpt id="p3">&lt;c&gt;</bpt>second<ept id="p3">&lt;/c&gt;</ept> are derived from the <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>binder.Operation<ept id="p4">&lt;/c&gt;</ept> returns <bpt id="p5">&lt;c&gt;</bpt>ExpressionType.Add<ept id="p5">&lt;/c&gt;</ept>.</source>
          <target state="translated">たとえば、<bpt id="p1">&lt;c&gt;</bpt>sum = first + second<ept id="p1">&lt;/c&gt;</ept> ステートメントの場合 (<bpt id="p2">&lt;c&gt;</bpt>first<ept id="p2">&lt;/c&gt;</ept> と <bpt id="p3">&lt;c&gt;</bpt>second<ept id="p3">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> クラスから派生)、<bpt id="p4">&lt;c&gt;</bpt>binder.Operation<ept id="p4">&lt;/c&gt;</ept> クラスは <bpt id="p5">&lt;c&gt;</bpt>ExpressionType.Add<ept id="p5">&lt;/c&gt;</ept> を返します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The right operand for the binary operation.</source>
          <target state="translated">二項演算の右オペランド。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sum = first + second<ept id="p1">&lt;/c&gt;</ept> statement, where <bpt id="p2">&lt;c&gt;</bpt>first<ept id="p2">&lt;/c&gt;</ept> and <bpt id="p3">&lt;c&gt;</bpt>second<ept id="p3">&lt;/c&gt;</ept> are derived from the <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>arg<ept id="p4">&lt;/c&gt;</ept> is equal to <bpt id="p5">&lt;c&gt;</bpt>second<ept id="p5">&lt;/c&gt;</ept>.</source>
          <target state="translated">たとえば、<bpt id="p1">&lt;c&gt;</bpt>sum = first + second<ept id="p1">&lt;/c&gt;</ept> ステートメントの場合 (<bpt id="p2">&lt;c&gt;</bpt>first<ept id="p2">&lt;/c&gt;</ept> と <bpt id="p3">&lt;c&gt;</bpt>second<ept id="p3">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> クラスから派生)、<bpt id="p4">&lt;c&gt;</bpt>arg<ept id="p4">&lt;/c&gt;</ept> は <bpt id="p5">&lt;c&gt;</bpt>second<ept id="p5">&lt;/c&gt;</ept> と等しくなります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The result of the binary operation.</source>
          <target state="translated">二項演算の結果。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Provides implementation for binary operations.</source>
          <target state="translated">二項演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、加算や乗算などの演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how binary operations should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトの二項演算を実行する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>This method is called when you have binary operations such as addition or multiplication.</source>
          <target state="translated">加算や乗算などの二項演算がある場合は、このメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method is overridden, it is automatically invoked for statements like <ph id="ph2">`sum = first + second`</ph> or <ph id="ph3">`multiply = first*second`</ph>, where <ph id="ph4">`first`</ph> is derived from the <ph id="ph5">`DynamicObject`</ph> class.</source>
          <target state="translated">たとえば場合、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph>メソッドがオーバーライドされた場合などのステートメントに対して自動的に呼び出されます<ph id="ph2">`sum = first + second`</ph>または<ph id="ph3">`multiply = first*second`</ph>ここで、<ph id="ph4">`first`</ph>から派生した、<ph id="ph5">`DynamicObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>You can get information about the type of the binary operation by using the <ph id="ph1">`Operation`</ph> property of the <ph id="ph2">`binder`</ph> parameter.</source>
          <target state="translated">使用して二項演算の種類に関する情報を取得することができます、<ph id="ph1">`Operation`</ph>のプロパティ、<ph id="ph2">`binder`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>If your dynamic object is used only in C# and Visual Basic, the <ph id="ph1">`binder.Operation`</ph> property can have one of the following values from the <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph> enumeration.</source>
          <target state="translated">C# および Visual Basic の場合にのみ、動的なオブジェクトを使用する場合、<ph id="ph1">`binder.Operation`</ph>プロパティから次の値のいずれかを持つことができます、<ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>However, in other languages such as IronPython or IronRuby, you can have other values.</source>
          <target state="translated">ただし、IronPython、IronRuby など他の言語では、その他の値を持つことができます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An addition operation without overflow checking, for numeric operands.</source>
          <target state="translated">オペランドの数値オーバーフロー チェックを行わない加算演算です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An addition compound assignment operation without overflow checking, for numeric operands.</source>
          <target state="translated">オペランドの数値オーバーフロー チェックを行わない加算複合代入演算です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise <ph id="ph1">`AND`</ph> operation.</source>
          <target state="translated">ビット単位<ph id="ph1">`AND`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise <ph id="ph1">`AND`</ph> compound assignment operation.</source>
          <target state="translated">ビット単位<ph id="ph1">`AND`</ph>複合代入演算です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An arithmetic division operation.</source>
          <target state="translated">算術除算演算です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An arithmetic division compound assignment operation.</source>
          <target state="translated">算術除算複合代入演算です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise <ph id="ph1">`XOR`</ph> operation.</source>
          <target state="translated">ビット単位<ph id="ph1">`XOR`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise <ph id="ph1">`XOR`</ph> compound assignment operation.</source>
          <target state="translated">ビット単位<ph id="ph1">`XOR`</ph>複合代入演算です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A "greater than" comparison.</source>
          <target state="translated">「大なり」を比較します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A "greater than or equal to" comparison.</source>
          <target state="translated">「より大きいまたは等しい」比較します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise left-shift operation.</source>
          <target state="translated">ビットごとの左シフト演算です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise left-shift compound assignment operation.</source>
          <target state="translated">ビットごとの左シフト複合代入操作です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A "less than" comparison.</source>
          <target state="translated">「より小さい」比較します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A "less than or equal to" comparison.</source>
          <target state="translated">「以下に」を比較します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An arithmetic remainder operation.</source>
          <target state="translated">算術剰余演算です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An arithmetic remainder compound assignment operation.</source>
          <target state="translated">算術剰余複合代入演算です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A multiplication operation without overflow checking, for numeric operands.</source>
          <target state="translated">オペランドの数値オーバーフロー チェックを行わない乗算します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A multiplication compound assignment operation without overflow checking, for numeric operands.</source>
          <target state="translated">オペランドの数値オーバーフロー チェックを行わない乗算複合代入演算です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An inequality comparison.</source>
          <target state="translated">非等価比較します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise or logical <ph id="ph1">`OR`</ph> operation.</source>
          <target state="translated">ビットごとの or 論理を<ph id="ph1">`OR`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise or logical <ph id="ph1">`OR`</ph> compound assignment.</source>
          <target state="translated">ビットごとの or 論理を<ph id="ph1">`OR`</ph>複合代入。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A mathematical operation of raising a number to a power.</source>
          <target state="translated">数値の累乗の数学的演算です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise right-shift operation.</source>
          <target state="translated">ビットごとの右シフト演算です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise right-shift compound assignment operation.</source>
          <target state="translated">ビットごとの右シフト複合代入操作です。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A subtraction operation without overflow checking, for numeric operands.</source>
          <target state="translated">オペランドの数値オーバーフロー チェックを行わない減算します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A subtraction compound assignment operation without overflow checking, for numeric operands.</source>
          <target state="translated">オペランドの数値オーバーフロー チェックを行わない減算複合代入演算です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>To implement <ph id="ph1">`OrElse`</ph> (<ph id="ph2">`a || b`</ph>) and <ph id="ph3">`AndAlso`</ph> (<ph id="ph4">`a &amp;&amp; b`</ph>) operations for dynamic objects in C#, you may want to implement both the <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method and the <ph id="ph6">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method.</source>
          <target state="translated">実装する<ph id="ph1">`OrElse`</ph>(<ph id="ph2">`a || b`</ph>) および<ph id="ph3">`AndAlso`</ph>(<ph id="ph4">`a &amp;&amp; b`</ph>) を両方を実装することがあります (C#) 動的オブジェクトの操作で、<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph>メソッドおよび<ph id="ph6">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <ph id="ph1">`OrElse`</ph> operation consists of the unary <ph id="ph2">`IsTrue`</ph> operation and the binary <ph id="ph3">`Or`</ph> operation.</source>
          <target state="translated"><ph id="ph1">`OrElse`</ph>操作では、単項<ph id="ph2">`IsTrue`</ph>操作と、バイナリ<ph id="ph3">`Or`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <ph id="ph1">`Or`</ph> operation is performed only if the result of the <ph id="ph2">`IsTrue`</ph> operation is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Or`</ph>場合にのみ操作が実行の結果、<ph id="ph2">`IsTrue`</ph>操作が<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <ph id="ph1">`AndAlso`</ph> operation consists of the unary <ph id="ph2">`IsFalse`</ph> operation and the binary <ph id="ph3">`And`</ph> operation.</source>
          <target state="translated"><ph id="ph1">`AndAlso`</ph>操作では、単項<ph id="ph2">`IsFalse`</ph>操作と、バイナリ<ph id="ph3">`And`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <ph id="ph1">`And`</ph> operation is performed only if the result of the <ph id="ph2">`IsFalse`</ph> operation is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`And`</ph>場合にのみ操作が実行の結果、<ph id="ph2">`IsFalse`</ph>操作が<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</source>
          <target state="translated">数値、テキストと数値表現を格納するデータ構造を作成する必要があり、このようなデータの加算や減算などの基本的な算術演算を定義することを想定しています。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicNumber`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`DynamicNumber`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source><ph id="ph1">`DynamicNumber`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method to enable mathematical operations.</source>
          <target state="translated"><ph id="ph1">`DynamicNumber`</ph> 上書き、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph>数学的な操作を有効にするメソッド。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>It also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access to the elements.</source>
          <target state="translated">オーバーライド、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>要素へのアクセスを可能にする方法です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>In this example, only addition and subtraction operations are supported.</source>
          <target state="translated">この例では、加算と減算操作のみがサポートされます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>If you try to write a statement like <ph id="ph1">`resultNumber = firstNumber*secondNumber`</ph>, a run-time exception is thrown.</source>
          <target state="translated">次のステートメントを記述しようとする場合<ph id="ph1">`resultNumber = firstNumber*secondNumber`</ph>実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Provides information about the conversion operation.</source>
          <target state="translated">変換演算に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Type<ept id="p1">&lt;/c&gt;</ept> property provides the type to which the object must be converted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Type<ept id="p1">&lt;/c&gt;</ept> プロパティは、オブジェクトの変換後の型を提供します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>For example, for the statement <bpt id="p1">&lt;c&gt;</bpt>(String)sampleObject<ept id="p1">&lt;/c&gt;</ept> in C# (<bpt id="p2">&lt;c&gt;</bpt>CType(sampleObject, Type)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic), where <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>binder.Type<ept id="p4">&lt;/c&gt;</ept> returns the <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> type.</source>
          <target state="translated">たとえば、C# のステートメント <bpt id="p1">&lt;c&gt;</bpt>(String)sampleObject<ept id="p1">&lt;/c&gt;</ept> (Visual Basic では <bpt id="p2">&lt;c&gt;</bpt>CType(sampleObject, Type)<ept id="p2">&lt;/c&gt;</ept>) の場合 (<bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスのインスタンス)、<bpt id="p4">&lt;c&gt;</bpt>binder.Type<ept id="p4">&lt;/c&gt;</ept> は <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 型を返します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Explicit<ept id="p1">&lt;/c&gt;</ept> property provides information about the kind of conversion that occurs.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Explicit<ept id="p1">&lt;/c&gt;</ept> プロパティは、行われる変換の種類に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>It returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> for explicit conversion and <ph id="ph2">&lt;see langword="false" /&gt;</ph> for implicit conversion.</source>
          <target state="translated">このプロパティは、明示的な変換の場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、暗黙の変換の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>The result of the type conversion operation.</source>
          <target state="translated">型変換演算の結果。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Provides implementation for type conversion operations.</source>
          <target state="translated">型変換演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトの型を別の型に変換する演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a type conversion should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトの型変換を実行する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</source>
          <target state="translated">C# の場合は、このメソッドがオーバーライドされた場合は、自動的に呼び出されます、明示的または暗黙的な変換がある場合の次のコード例に示すように。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>In Visual Basic, only explicit conversion is supported.</source>
          <target state="translated">Visual basic で明示的な変換のみがサポートされています。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>If you override this method, you call it by using the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph> or <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph> functions.</source>
          <target state="translated">使用して呼び出すこのメソッドをオーバーライドする場合、<ph id="ph1">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph>または<ph id="ph2">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph>関数。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</source>
          <target state="translated">数値、テキストと数値表現を格納するデータ構造を作成する必要があり、文字列と整数にこのデータ構造体の変換を定義することを想定しています。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicNumber`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`DynamicNumber`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source><ph id="ph1">`DynamicNumber`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryConvert%2A&gt;</ph> method to enable type conversion.</source>
          <target state="translated"><ph id="ph1">`DynamicNumber`</ph> 上書き、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryConvert%2A&gt;</ph>型変換を有効にするメソッド。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>It also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access to the data elements.</source>
          <target state="translated">オーバーライド、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>データ要素へのアクセスを可能にする方法です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>In this example, only conversion to strings and integers is supported.</source>
          <target state="translated">この例では文字列と整数への変換のみがサポートされています。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>If you try to convert an object to any other type, a run-time exception is thrown.</source>
          <target state="translated">オブジェクトを他の型に変換しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>Provides information about the initialization operation.</source>
          <target state="translated">初期化演算に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>The arguments that are passed to the object during initialization.</source>
          <target state="translated">初期化中にオブジェクトに渡される引数。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>new SampleType(100)<ept id="p1">&lt;/c&gt;</ept> operation, where <bpt id="p2">&lt;c&gt;</bpt>SampleType<ept id="p2">&lt;/c&gt;</ept> is the type derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> is equal to 100.</source>
          <target state="translated">たとえば、<bpt id="p1">&lt;c&gt;</bpt>new SampleType(100)<ept id="p1">&lt;/c&gt;</ept> 演算の場合 (<bpt id="p2">&lt;c&gt;</bpt>SampleType<ept id="p2">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生型)、<bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> は 100 に等しくなります。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>The result of the initialization.</source>
          <target state="translated">初期化の結果。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>Provides the implementation for operations that initialize a new instance of a dynamic object.</source>
          <target state="translated">動的オブジェクトの新しいインスタンスを初期化する演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>This method is not intended for use in C# or Visual Basic.</source>
          <target state="translated">このメソッドは、C# または Visual Basic で使用するためのものではありません。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a new instance of the dynamic object should be initialized.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトの新しいインスタンスを初期化する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</source>
          <target state="translated">C# および Visual Basic コンパイラは、ファースト クラスの型をサポートしていないため、このメソッドを使用してコードを生成しません。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>This method is intended for languages that support the initialization of dynamic objects by using syntax like <ph id="ph1">`dynamic new`</ph>.</source>
          <target state="translated">このメソッドはのような構文を使用して動的オブジェクトの初期化をサポートする言語用、<ph id="ph1">`dynamic new`</ph>です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>Provides information about the deletion.</source>
          <target state="translated">削除に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>The indexes to be deleted.</source>
          <target state="translated">削除するインデックス。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>Provides the implementation for operations that delete an object by index.</source>
          <target state="translated">インデックスを使用してオブジェクトを削除する演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>This method is not intended for use in C# or Visual Basic.</source>
          <target state="translated">このメソッドは、C# または Visual Basic で使用するためのものではありません。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a value that has a specified index should be deleted.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、指定したインデックスを持つ値を削除する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</source>
          <target state="translated">C# および Visual Basic コンパイラは、このような操作をサポートしていないため、このメソッドを使用してコードを生成しません。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>This method is intended for languages that support syntax for deleting objects by index, such as <ph id="ph1">`del sampleObject[1,2]`</ph> in Python.</source>
          <target state="translated">このメソッドは、インデックスを使用してオブジェクトを削除するなどの構文をサポートする言語用、 <ph id="ph1">`del sampleObject[1,2]`</ph> Python でします。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>Provides information about the deletion.</source>
          <target state="translated">削除に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>Provides the implementation for operations that delete an object member.</source>
          <target state="translated">オブジェクト メンバーを削除する演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>This method is not intended for use in C# or Visual Basic.</source>
          <target state="translated">このメソッドは、C# または Visual Basic で使用するためのものではありません。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how an object member should be deleted.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラス オブジェクト メンバーを削除する方法を指定するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>When this method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</source>
          <target state="translated">C# および Visual Basic コンパイラは、このような操作をサポートしていないため、このメソッドを使用してコードを生成しません。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>This method is intended for languages that support syntax for deleting members, such as <ph id="ph1">`del sampleObject.SampleMember`</ph> in Python.</source>
          <target state="translated">このメソッドは、のように、メンバーを削除するための構文をサポートする言語<ph id="ph1">`del sampleObject.SampleMember`</ph>Python でします。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Provides information about the operation.</source>
          <target state="translated">演算に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>The indexes that are used in the operation.</source>
          <target state="translated">演算に使用されるインデックス。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3]<ept id="p1">&lt;/c&gt;</ept> operation in C# (<bpt id="p2">&lt;c&gt;</bpt>sampleObject(3)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic), where <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>indexes[0]<ept id="p4">&lt;/c&gt;</ept> is equal to 3.</source>
          <target state="translated">たとえば、C# の <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3]<ept id="p1">&lt;/c&gt;</ept> (Visual Basic では <bpt id="p2">&lt;c&gt;</bpt>sampleObject(3)<ept id="p2">&lt;/c&gt;</ept>) 演算の場合 (<bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> クラスから派生)、<bpt id="p4">&lt;c&gt;</bpt>indexes[0]<ept id="p4">&lt;/c&gt;</ept> は 3 に等しくなります。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>The result of the index operation.</source>
          <target state="translated">インデックス演算の結果。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Provides the implementation for operations that get a value by index.</source>
          <target state="translated">インデックスを使用して値を取得する演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for indexing operations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、インデックス演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how getting a value by index should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、インデックスを使用して値を取得する必要があります実行する方法の動的なオブジェクトを指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>If this method is overridden, it is automatically invoked when you have an operation like <ph id="ph1">`sampleObject[3]`</ph> in C# or <ph id="ph2">`sampleObject(3)`</ph> in Visual Basic, where <ph id="ph3">`sampleObject`</ph> is derived from the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">このメソッドがオーバーライドされた場合は、それが自動的に起動などの演算がある場合<ph id="ph1">`sampleObject[3]`</ph>(C#) または<ph id="ph2">`sampleObject(3)`</ph>Visual Basic、where<ph id="ph3">`sampleObject`</ph>から派生した、<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Assume that you want to create an object in which properties can be accessed either by names such as <ph id="ph1">`Property0`</ph>, <ph id="ph2">`Property1`</ph>, and so on, or by index, so that, for example, <ph id="ph3">`sampleObject.Property0`</ph> is equivalent to <ph id="ph4">`sampleObject[0]`</ph> in C# or <ph id="ph5">`sampleObject(0)`</ph> in Visual Basic.</source>
          <target state="translated">前提としています名前でいずれかのようにアクセス プロパティができるオブジェクトを作成する<ph id="ph1">`Property0`</ph>、<ph id="ph2">`Property1`</ph>など、またはインデックスでようになど、<ph id="ph3">`sampleObject.Property0`</ph>と等価<ph id="ph4">`sampleObject[0]`</ph>(C#) または<ph id="ph5">`sampleObject(0)`</ph>Visual Basic でします。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`SampleDynamicObject`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`SampleDynamicObject`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>The <ph id="ph1">`SampleDynamicObject`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs.</source>
          <target state="translated"><ph id="ph1">`SampleDynamicObject`</ph>クラスにはオブジェクトが含まれています、<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph> Visual Basic で) をキーと値のペアを格納します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">`SampleDynamicObject`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TrySetIndex%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TryGetIndex%2A&gt;</ph> methods to enable access by index.</source>
          <target state="translated"><ph id="ph1">`SampleDynamicObject`</ph> 上書き、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TrySetIndex%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TryGetIndex%2A&gt;</ph>インデックスによってアクセスを可能にする方法です。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>It overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access by property name.</source>
          <target state="translated">も優先、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>プロパティ名によるアクセスを可能にする方法です。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Provides information about the object that called the dynamic operation.</source>
          <target state="translated">動的演算を呼び出したオブジェクトに関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> property provides the name of the member on which the dynamic operation is performed.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> プロパティは、動的演算の対象であるメンバーの名前を提供します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>Console.WriteLine(sampleObject.SampleProperty)<ept id="p1">&lt;/c&gt;</ept> statement, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> returns "SampleProperty".</source>
          <target state="translated">たとえば、<bpt id="p1">&lt;c&gt;</bpt>Console.WriteLine(sampleObject.SampleProperty)<ept id="p1">&lt;/c&gt;</ept> ステートメントの場合 (<bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスのインスタンス)、<bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> は "SampleProperty" を返します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> property specifies whether the member name is case-sensitive.</source>
          <target state="translated">メンバー名で大文字と小文字を区別するかどうかを <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> プロパティで指定します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The result of the get operation.</source>
          <target state="translated">取得操作の結果。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>For example, if the method is called for a property, you can assign the property value to <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">たとえば、メソッドがプロパティに対して呼び出された場合、プロパティ値を <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> に割り当てることができます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Provides the implementation for operations that get member values.</source>
          <target state="translated">メンバー値を取得する演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の取得などの演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that get member values should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトのメンバーの値を取得する操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>This method is called when you have statements like <ph id="ph1">`Console.WriteLine(sampleObject.SampleProperty)`</ph>, where <ph id="ph2">`sampleObject`</ph> is an instance of the class derived from the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">ようなステートメントがある場合、このメソッドが呼び出されます<ph id="ph1">`Console.WriteLine(sampleObject.SampleProperty)`</ph>ここで、<ph id="ph2">`sampleObject`</ph>から派生したクラスのインスタンス、<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>You can also add your own members to classes derived from the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">派生したクラスに、独自のメンバーを追加することも、<ph id="ph1">`DynamicObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>If your class defines properties and also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</source>
          <target state="translated">クラスのプロパティを定義およびもオーバーライド場合、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>メソッド、動的言語ランタイム (DLR) 最初を使用して、言語バインダー クラス内のプロパティの静的な定義を検索します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>If there is no such property, the DLR calls the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.</source>
          <target state="translated">このようなプロパティが存在しない場合は、DLR を呼び出します、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph> (<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> in Visual Basic), you can write <ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>.</source>
          <target state="translated">書き込みの代わりに、ディクショナリ内の値にアクセスするための代替構文を提供することを前提としています<ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph>(<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> Visual Basic で)、書き込めること<ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Also, this syntax must be case-insensitive, so that <ph id="ph1">`sampleDictionary.Text`</ph> is equivalent to <ph id="ph2">`sampleDictionary.text`</ph>.</source>
          <target state="translated">また、この構文が、大文字と小文字にする必要がありますように<ph id="ph1">`sampleDictionary.Text`</ph>は等価<ph id="ph2">`sampleDictionary.text`</ph>です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicDictionary`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`DynamicDictionary`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The <ph id="ph1">`DynamicDictionary`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs, and overrides the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to support the new syntax.</source>
          <target state="translated"><ph id="ph1">`DynamicDictionary`</ph>クラスのオブジェクトに含まれる、<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph> Visual Basic で) キーと値のペアと上書きを格納する、<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>新しい構文をサポートするメソッド。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>It also provides a <ph id="ph1">`Count`</ph> property, which shows how many dynamic properties the dictionary contains.</source>
          <target state="translated">用意されています、<ph id="ph1">`Count`</ph>ディクショナリ数の動的なプロパティを表示するプロパティが含まれます。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Provides information about the invoke operation.</source>
          <target state="translated">呼び出し演算に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The arguments that are passed to the object during the invoke operation.</source>
          <target state="translated">呼び出し演算でオブジェクトに渡される引数。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sampleObject(100)<ept id="p1">&lt;/c&gt;</ept> operation, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> is equal to 100.</source>
          <target state="translated">たとえば、<bpt id="p1">&lt;c&gt;</bpt>sampleObject(100)<ept id="p1">&lt;/c&gt;</ept> 演算の場合 (<bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスから派生)、<bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> は 100 に等しくなります。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The result of the object invocation.</source>
          <target state="translated">オブジェクト呼び出しの結果。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Provides the implementation for operations that invoke an object.</source>
          <target state="translated">オブジェクトを呼び出す演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトやデリゲートの呼び出しなどの演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトのオブジェクトを呼び出す操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>If this method is overridden, it is automatically invoked when you have an operation like <ph id="ph1">`sampleObject(100)`</ph>, where <ph id="ph2">`sampleObject`</ph> is derived from the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">このメソッドがオーバーライドされた場合は、それが自動的に起動などの演算がある場合<ph id="ph1">`sampleObject(100)`</ph>ここで、<ph id="ph2">`sampleObject`</ph>から派生した、<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The operation for invoking an object is supported in C# but not in Visual Basic.</source>
          <target state="translated">オブジェクトを呼び出すため操作には、Visual Basic ではありませんが、c# ではサポートされています。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like <ph id="ph1">`sampleObject(100)`</ph>.</source>
          <target state="translated">Visual Basic コンパイラはこのメソッドを使用してコードを出力することはありませんし、Visual Basic 言語はのような構文をサポートしていない<ph id="ph1">`sampleObject(100)`</ph>です。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Assume that you need a data structure to store textual and numeric representations of numbers.</source>
          <target state="translated">テキストと数値で表された数値を格納するデータ構造をする必要があると仮定します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</source>
          <target state="translated">各プロパティの値を個別に指定し、1 つのステートメントのすべてのプロパティを初期化できることができるします。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicNumber`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`DynamicNumber`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">`DynamicNumber`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryInvoke%2A&gt;</ph> method to enable initialization of all properties at one time.</source>
          <target state="translated"><ph id="ph1">`DynamicNumber`</ph> 上書き、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryInvoke%2A&gt;</ph>を同時にすべてのプロパティの初期化を有効にするメソッド。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>It also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access to individual object properties.</source>
          <target state="translated">オーバーライド、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>個々 のオブジェクトのプロパティへのアクセスを可能にする方法です。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Provides information about the dynamic operation.</source>
          <target state="translated">動的な演算に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> property provides the name of the member on which the dynamic operation is performed.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> プロパティは、動的演算の対象であるメンバーの名前を提供します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>For example, for the statement <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleMethod(100)<ept id="p1">&lt;/c&gt;</ept>, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> returns "SampleMethod".</source>
          <target state="translated">たとえば、ステートメント <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleMethod(100)<ept id="p1">&lt;/c&gt;</ept> の場合 (<bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスのインスタンス)、<bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> は "SampleMethod" を返します。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> property specifies whether the member name is case-sensitive.</source>
          <target state="translated">メンバー名で大文字と小文字を区別するかどうかを <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> プロパティで指定します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The arguments that are passed to the object member during the invoke operation.</source>
          <target state="translated">呼び出し演算でオブジェクト メンバーに渡される引数。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>For example, for the statement <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleMethod(100)<ept id="p1">&lt;/c&gt;</ept>, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> is equal to 100.</source>
          <target state="translated">たとえば、ステートメント <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleMethod(100)<ept id="p1">&lt;/c&gt;</ept> の場合 (<bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスから派生)、<bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> は 100 に等しくなります。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The result of the member invocation.</source>
          <target state="translated">メンバー呼び出しの結果。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Provides the implementation for operations that invoke a member.</source>
          <target state="translated">メンバーを呼び出す演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as calling a method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、メソッドの呼び出しなどの演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトのオブジェクトのメンバーを呼び出す操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>If this method is overridden, it is automatically invoked when you perform an operation like <ph id="ph1">`sampleObject.SampleMethod(100)`</ph>, where <ph id="ph2">`sampleObject`</ph> is derived from the <ph id="ph3">`DynamicObject`</ph> class.</source>
          <target state="translated">このメソッドがオーバーライドされた場合は、それが自動的に起動などの演算を実行するときに<ph id="ph1">`sampleObject.SampleMethod(100)`</ph>ここで、<ph id="ph2">`sampleObject`</ph>から派生した、<ph id="ph3">`DynamicObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>You can also add your own methods to classes that are derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">派生したクラスに、独自のメソッドを追加することも、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>For example, if you override the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</source>
          <target state="translated">たとえば、オーバーライドする場合、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph>メソッド、動的ディスパッチ システムまずしようと、クラスで、指定したメソッドが存在するかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>If it does not find the method, it uses the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> implementation.</source>
          <target state="translated">メソッドが見つからない場合は、使用、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>This method does not support <ph id="ph1">`ref`</ph> and <ph id="ph2">`out`</ph> parameters.</source>
          <target state="translated">このメソッドがサポートしていません<ph id="ph1">`ref`</ph>と<ph id="ph2">`out`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>All parameters in the <ph id="ph1">`args`</ph> array are passed by value.</source>
          <target state="translated">すべてのパラメーター、<ph id="ph1">`args`</ph>配列が値によって渡されます。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph> (<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> in Visual Basic), you can write <ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>.</source>
          <target state="translated">書き込みの代わりに、ディクショナリ内の値にアクセスするための代替構文を提供することを前提としています<ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph>(<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> Visual Basic で)、書き込めること<ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Also, you want to be able to call all the standard dictionary methods on this dictionary.</source>
          <target state="translated">また、このディクショナリのすべての標準の辞書メソッドを呼び出すことができるします。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicDictionary`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`DynamicDictionary`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The <ph id="ph1">`DynamicDictionary`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs.</source>
          <target state="translated"><ph id="ph1">`DynamicDictionary`</ph>クラスにはオブジェクトが含まれています、<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph> Visual Basic で) をキーと値のペアを格納します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>It overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> method to support methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class and overrides the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to support the new syntax.</source>
          <target state="translated">も優先、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph>メソッドのメソッドをサポートするために、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラスおよびオーバーライド、<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>新しい構文をサポートするメソッド。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>It also provides a <ph id="ph1">`Print`</ph> method, which prints out all dictionary keys and values.</source>
          <target state="translated">用意されています、<ph id="ph1">`Print`</ph>メソッドで、すべてのディクショナリのキーと値を出力します。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Provides information about the operation.</source>
          <target state="translated">演算に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>The indexes that are used in the operation.</source>
          <target state="translated">演算に使用されるインデックス。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3] = 10<ept id="p1">&lt;/c&gt;</ept> operation in C# (<bpt id="p2">&lt;c&gt;</bpt>sampleObject(3) = 10<ept id="p2">&lt;/c&gt;</ept> in Visual Basic), where <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>indexes[0]<ept id="p4">&lt;/c&gt;</ept> is equal to 3.</source>
          <target state="translated">たとえば、C# の <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3] = 10<ept id="p1">&lt;/c&gt;</ept> (Visual Basic では <bpt id="p2">&lt;c&gt;</bpt>sampleObject(3) = 10<ept id="p2">&lt;/c&gt;</ept>) 演算の場合 (<bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスから派生)、<bpt id="p4">&lt;c&gt;</bpt>indexes[0]<ept id="p4">&lt;/c&gt;</ept> は 3 に等しくなります。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>The value to set to the object that has the specified index.</source>
          <target state="translated">指定したインデックスのオブジェクトに設定する値。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3] = 10<ept id="p1">&lt;/c&gt;</ept> operation in C# (<bpt id="p2">&lt;c&gt;</bpt>sampleObject(3) = 10<ept id="p2">&lt;/c&gt;</ept> in Visual Basic), where <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>value<ept id="p4">&lt;/c&gt;</ept> is equal to 10.</source>
          <target state="translated">たとえば、C# の <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3] = 10<ept id="p1">&lt;/c&gt;</ept> (Visual Basic では <bpt id="p2">&lt;c&gt;</bpt>sampleObject(3) = 10<ept id="p2">&lt;/c&gt;</ept>) 演算の場合 (<bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスから派生)、<bpt id="p4">&lt;c&gt;</bpt>value<ept id="p4">&lt;/c&gt;</ept> は 10 に等しくなります。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Provides the implementation for operations that set a value by index.</source>
          <target state="translated">インデックスを使用して値を設定する演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、指定したインデックスを使用してオブジェクトにアクセスする演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>(In most cases, a language-specific run-time exception is thrown.</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトのインデックスを使用してオブジェクトにアクセスする操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>If this method is overridden, it is automatically invoked when you have an operation like <ph id="ph1">`sampleObject[3] = 10`</ph> in C# or <ph id="ph2">`sampleObject(3) = 10`</ph> in Visual Basic, where <ph id="ph3">`sampleObject`</ph> is derived from the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">このメソッドがオーバーライドされた場合は、それが自動的に起動などの演算がある場合<ph id="ph1">`sampleObject[3] = 10`</ph>(C#) または<ph id="ph2">`sampleObject(3) = 10`</ph>Visual Basic、where<ph id="ph3">`sampleObject`</ph>から派生した、<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Assume that you want to create an object in which properties can be accessed either by names such as <ph id="ph1">`Property0`</ph>, <ph id="ph2">`Property1`</ph>, and so on, or by index, so that, for example, <ph id="ph3">`sampleObject.Property0`</ph> is equivalent to <ph id="ph4">`sampleObject[0]`</ph> in C# or <ph id="ph5">`sampleObject(0)`</ph> in Visual Basic.</source>
          <target state="translated">前提としています名前でいずれかのようにアクセス プロパティができるオブジェクトを作成する<ph id="ph1">`Property0`</ph>、<ph id="ph2">`Property1`</ph>など、またはインデックスでようになど、<ph id="ph3">`sampleObject.Property0`</ph>と等価<ph id="ph4">`sampleObject[0]`</ph>(C#) または<ph id="ph5">`sampleObject(0)`</ph>Visual Basic でします。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>The following code example demonstrates the <ph id="ph1">`SampleDynamicObject`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`SampleDynamicObject`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>The <ph id="ph1">`SampleDynamicObject`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs.</source>
          <target state="translated"><ph id="ph1">`SampleDynamicObject`</ph>クラスにはオブジェクトが含まれています、<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph> Visual Basic で) をキーと値のペアを格納します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source><ph id="ph1">`SampleDynamicObject`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TrySetIndex%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TryGetIndex%2A&gt;</ph> methods to enable access by index.</source>
          <target state="translated"><ph id="ph1">`SampleDynamicObject`</ph> 上書き、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TrySetIndex%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TryGetIndex%2A&gt;</ph>インデックスによってアクセスを可能にする方法です。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>It overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access by property name.</source>
          <target state="translated">も優先、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>プロパティ名によるアクセスを可能にする方法です。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Provides information about the object that called the dynamic operation.</source>
          <target state="translated">動的演算を呼び出したオブジェクトに関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> property provides the name of the member to which the value is being assigned.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> プロパティは、値の割り当て先のメンバーの名前を提供します。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>For example, for the statement <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleProperty = "Test"<ept id="p1">&lt;/c&gt;</ept>, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> returns "SampleProperty".</source>
          <target state="translated">たとえば、ステートメント <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleProperty = "Test"<ept id="p1">&lt;/c&gt;</ept> の場合 (<bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスのインスタンス)、<bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> は "SampleProperty" を返します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> property specifies whether the member name is case-sensitive.</source>
          <target state="translated">メンバー名で大文字と小文字を区別するかどうかを <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> プロパティで指定します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The value to set to the member.</source>
          <target state="translated">メンバーに設定する値。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>For example, for <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleProperty = "Test"<ept id="p1">&lt;/c&gt;</ept>, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, the <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> is "Test".</source>
          <target state="translated">たとえば、<bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleProperty = "Test"<ept id="p1">&lt;/c&gt;</ept> の場合 (<bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスのインスタンス)、<bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> は "Test" となります。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Provides the implementation for operations that set member values.</source>
          <target state="translated">メンバー値を設定する演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の設定などの演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトのメンバーに値を設定する操作を実行する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>This method is called when you have statements like <ph id="ph1">`sampleObject.SampleProperty = "Test"`</ph>, where <ph id="ph2">`sampleObject`</ph> is an instance of the class that is derived from the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">ようなステートメントがある場合、このメソッドが呼び出されます<ph id="ph1">`sampleObject.SampleProperty = "Test"`</ph>ここで、<ph id="ph2">`sampleObject`</ph>から派生したクラスのインスタンスには、<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>You can also add your own members to classes derived from the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">派生したクラスに、独自のメンバーを追加することも、<ph id="ph1">`DynamicObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>If your class defines properties and also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</source>
          <target state="translated">クラスのプロパティを定義およびもオーバーライド場合、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>メソッド、動的言語ランタイム (DLR) 最初を使用して、言語バインダー クラス内のプロパティの静的な定義を検索します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>If there is no such property, the DLR calls the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.</source>
          <target state="translated">このようなプロパティが存在しない場合は、DLR を呼び出します、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph> (<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> in Visual Basic), you can write <ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>.</source>
          <target state="translated">書き込みの代わりに、ディクショナリ内の値にアクセスするための代替構文を提供することを前提としています<ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph>(<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> Visual Basic で)、書き込めること<ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>です。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Also, this syntax must be case-insensitive, so that <ph id="ph1">`sampleDictionary.Text`</ph> is equivalent to <ph id="ph2">`sampleDictionary.text`</ph>.</source>
          <target state="translated">また、この構文が、大文字と小文字にする必要がありますように<ph id="ph1">`sampleDictionary.Text`</ph>は等価<ph id="ph2">`sampleDictionary.text`</ph>です。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicDictionary`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`DynamicDictionary`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The <ph id="ph1">`DynamicDictionary`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs, and overrides the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to support the new syntax.</source>
          <target state="translated"><ph id="ph1">`DynamicDictionary`</ph>クラスのオブジェクトに含まれる、<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph> Visual Basic で) キーと値のペアと上書きを格納する、<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>新しい構文をサポートするメソッド。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>It also provides a <ph id="ph1">`Count`</ph> property, which shows how many dynamic properties the dictionary contains.</source>
          <target state="translated">用意されています、<ph id="ph1">`Count`</ph>ディクショナリ数の動的なプロパティを表示するプロパティが含まれます。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Provides information about the unary operation.</source>
          <target state="translated">単項演算に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Operation<ept id="p1">&lt;/c&gt;</ept> property returns an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> object.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Operation<ept id="p1">&lt;/c&gt;</ept> プロパティは <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>negativeNumber = -number<ept id="p1">&lt;/c&gt;</ept> statement, where <bpt id="p2">&lt;c&gt;</bpt>number<ept id="p2">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>binder.Operation<ept id="p3">&lt;/c&gt;</ept> returns "Negate".</source>
          <target state="translated">たとえば、<bpt id="p1">&lt;c&gt;</bpt>negativeNumber = -number<ept id="p1">&lt;/c&gt;</ept> ステートメントの場合 (<bpt id="p2">&lt;c&gt;</bpt>number<ept id="p2">&lt;/c&gt;</ept> は <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> クラスから派生)、<bpt id="p3">&lt;c&gt;</bpt>binder.Operation<ept id="p3">&lt;/c&gt;</ept> は "Negate" を返します。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The result of the unary operation.</source>
          <target state="translated">単項演算の結果。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Provides implementation for unary operations.</source>
          <target state="translated">単項演算の実装を提供します。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> クラスの派生クラスでこのメソッドをオーバーライドして、否定、インクリメント、デクリメントなどの演算の動的な動作を指定できます。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">操作が正常に終了した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返す場合、言語のランタイム バインダーによって動作が決まります </target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how unary operations should be performed for a dynamic object.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスは、動的なオブジェクトを単項演算を実行する方法を指定するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">メソッドがオーバーライドされていない場合、言語の実行時バインダーは、動作を決定します。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">(ほとんどの場合、言語固有の実行時例外がスローされます)。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>This method is called when you have unary operations such as negation, increment, or decrement.</source>
          <target state="translated">このメソッドは、否定、インクリメントなどの単項演算子またはデクリメントしたときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method is overridden, this method is automatically invoked for statements like <ph id="ph2">`negativeNumber = -number`</ph>, where <ph id="ph3">`number`</ph> is derived from the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">たとえば場合、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph>メソッドがオーバーライドされてなどのステートメントの場合、このメソッドが自動的に呼び出される<ph id="ph2">`negativeNumber = -number`</ph>ここで、<ph id="ph3">`number`</ph>から派生した、<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>You can get information about the type of the unary operation by using the <ph id="ph1">`Operation`</ph> property of the <ph id="ph2">`binder`</ph> parameter.</source>
          <target state="translated">使用して、単項演算の種類に関する情報を取得することができます、<ph id="ph1">`Operation`</ph>のプロパティ、<ph id="ph2">`binder`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>If your dynamic object is used only in C# and Visual Basic, the <ph id="ph1">`binder.Operation`</ph> property can have one of the following values from the <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph> enumeration.</source>
          <target state="translated">C# および Visual Basic の場合にのみ、動的なオブジェクトを使用する場合、<ph id="ph1">`binder.Operation`</ph>プロパティから次の値のいずれかを持つことができます、<ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>However, in other languages such as IronPython or IronRuby, you can have other values.</source>
          <target state="translated">ただし、IronPython、IronRuby など他の言語では、その他の値を持つことができます。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A unary decrement operation.</source>
          <target state="translated">単項デクリメント演算です。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A unary increment operation.</source>
          <target state="translated">単項インクリメント演算です。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>An arithmetic negation.</source>
          <target state="translated">算術否定。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A logical negation.</source>
          <target state="translated">論理否定。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A ones complement.</source>
          <target state="translated">1 の補数です。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A false condition value.</source>
          <target state="translated">False の条件値です。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A true condition value.</source>
          <target state="translated">条件が真の値です。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">サポートされていません。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A unary plus.</source>
          <target state="translated">単項プラスです。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>To implement <ph id="ph1">`OrElse`</ph> (<ph id="ph2">`a || b`</ph>) and <ph id="ph3">`AndAlso`</ph> (<ph id="ph4">`a &amp;&amp; b`</ph>) operations for dynamic objects in C#, you may want to implement both the <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method and the <ph id="ph6">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method.</source>
          <target state="translated">実装する<ph id="ph1">`OrElse`</ph>(<ph id="ph2">`a || b`</ph>) および<ph id="ph3">`AndAlso`</ph>(<ph id="ph4">`a &amp;&amp; b`</ph>) を両方を実装することがあります (C#) 動的オブジェクトの操作で、<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph>メソッドおよび<ph id="ph6">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <ph id="ph1">`OrElse`</ph> operation consists of the unary <ph id="ph2">`IsTrue`</ph> operation and the binary <ph id="ph3">`Or`</ph> operation.</source>
          <target state="translated"><ph id="ph1">`OrElse`</ph>操作では、単項<ph id="ph2">`IsTrue`</ph>操作と、バイナリ<ph id="ph3">`Or`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <ph id="ph1">`Or`</ph> operation is performed only if the result of the <ph id="ph2">`IsTrue`</ph> operation is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Or`</ph>場合にのみ操作が実行の結果、<ph id="ph2">`IsTrue`</ph>操作が<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <ph id="ph1">`AndAlso`</ph> operation consists of the unary <ph id="ph2">`IsFalse`</ph> operation and the binary <ph id="ph3">`And`</ph> operation.</source>
          <target state="translated"><ph id="ph1">`AndAlso`</ph>操作では、単項<ph id="ph2">`IsFalse`</ph>操作と、バイナリ<ph id="ph3">`And`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <ph id="ph1">`And`</ph> operation is performed only if the result of the <ph id="ph2">`IsFalse`</ph> operation is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`And`</ph>場合にのみ操作が実行の結果、<ph id="ph2">`IsFalse`</ph>操作が<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</source>
          <target state="translated">数値、テキストと数値の表現を格納するデータ構造を作成する必要があり、このようなデータに対して算術否定演算を定義することを想定しています。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicNumber`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">次のコード例を示しています、<ph id="ph1">`DynamicNumber`</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source><ph id="ph1">`DynamicNumber`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method to enable the mathematical negation operation.</source>
          <target state="translated"><ph id="ph1">`DynamicNumber`</ph> 上書き、<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph>算術否定演算を有効にするメソッド。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Is also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access to the elements.</source>
          <target state="translated">オーバーライドではまた、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>要素へのアクセスを可能にする方法です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>In this example, only the mathematical negation operation is supported.</source>
          <target state="translated">この例では算術否定演算のみがサポートされています。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>If you try to write a statement like <ph id="ph1">`negativeNumber = +number`</ph>, a run-time exception occurs.</source>
          <target state="translated">ようなステートメントを記述しようとする場合<ph id="ph1">`negativeNumber = +number`</ph>実行時例外が発生します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>