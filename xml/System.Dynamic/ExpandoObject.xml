<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExpandoObject.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5819b018355c643d951c9252212c100d95e7d4b18.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">819b018355c643d951c9252212c100d95e7d4b18</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Dynamic.ExpandoObject">
          <source>Represents an object whose members can be dynamically added and removed at run time.</source>
          <target state="translated">実行時にメンバーを動的に追加および削除できるオブジェクトを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class enables you to add and delete members of its instances at run time and also to set and get values of these members.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph>クラスすることができますを追加して、実行時にそのインスタンスのメンバーを削除しても設定し、これらのメンバーの値を取得します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This class supports dynamic binding, which enables you to use standard syntax like <ph id="ph1">`sampleObject.sampleMember`</ph> instead of more complex syntax like <ph id="ph2">`sampleObject.GetAttribute("sampleMember")`</ph>.</source>
          <target state="translated">このクラスのような標準の構文を使用することにより、動的バインドをサポートしている<ph id="ph1">`sampleObject.sampleMember`</ph>などのより複雑な構文ではなく<ph id="ph2">`sampleObject.GetAttribute("sampleMember")`</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the standard Dynamic Language Runtime (DLR) interface <ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, which enables you to share instances of the <ph id="ph3">`ExpandoObject`</ph> class between languages that support the DLR interoperability model.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph>クラスは、標準の動的言語ランタイム (DLR) インターフェイスを実装<ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>のインスタンスを共有できます、 <ph id="ph3">`ExpandoObject`</ph> DLR 相互運用性モデルをサポートする言語のクラスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For example, you can create an instance of the <ph id="ph1">`ExpandoObject`</ph> class in C# and then pass it to an IronPython function.</source>
          <target state="translated">インスタンスを作成するなど、 <ph id="ph1">`ExpandoObject`</ph> c# のクラスし、IronPython 関数に渡すことです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept> and <bpt id="p2">[</bpt>Introducing the ExpandoObject<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169157)</ept> on the C# Frequently Asked Questions Web site.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>動的言語ランタイムの概要<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>と<bpt id="p2">[</bpt>ExpandoObject を導入<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169157)</ept>c# よく寄せられる質問 Web サイトにします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class is an implementation of the dynamic object concept that enables getting, setting, and invoking members.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph>クラスは、取得、設定、および呼び出し元のメンバーをできるようにする動的オブジェクトの概念の実装です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you want to define types that have their own dynamic dispatch semantics, use the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">ディスパッチ セマンティクスを使用して、独自のダイナミックの種類を定義する場合、<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you want to define how dynamic objects participate in the interoperability protocol and manage DLR fast dynamic dispatch caching, create your own implementation of the <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interface.</source>
          <target state="translated">定義する場合は動的オブジェクトは、相互運用性プロトコルに参加し、DLR 高速な動的ディスパッチ キャッシュを管理、方法は、独自の実装を作成、<ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Creating an Instance</source>
          <target state="translated">インスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In C#, to enable late binding for an instance of the <ph id="ph1">`ExpandoObject`</ph> class, you must use the <ph id="ph2">`dynamic`</ph> keyword.</source>
          <target state="translated">C# の場合、遅延バインディングのインスタンスを有効にする、<ph id="ph1">`ExpandoObject`</ph>クラスを使用する必要がある、<ph id="ph2">`dynamic`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>dynamic 型の使用<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In Visual Basic, dynamic operations are supported by late binding.</source>
          <target state="translated">Visual basic では、動的な処理は遅延バインディングによってサポートされます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Early and 遅延バインディング<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to create an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">次のコード例は、のインスタンスを作成する方法を示します、<ph id="ph1">`ExpandoObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Adding New Members</source>
          <target state="translated">新しいメンバーを追加します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>You can add properties, methods, and events to instances of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">インスタンスに、プロパティ、メソッド、およびイベントを追加することができます、<ph id="ph1">`ExpandoObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add a new property to an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">次のコード例は、のインスタンスに新しいプロパティを追加する方法を示します、<ph id="ph1">`ExpandoObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The methods represent lambda expressions that are stored as delegates, which can be invoked when they are needed.</source>
          <target state="translated">メソッドは、必要なときに呼び出されることができます、デリゲートとして格納されているラムダ式を表します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add a method that increments a value of the dynamic property.</source>
          <target state="translated">次のコード例では、動的プロパティの値をインクリメントするメソッドを追加する方法を示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add an event to an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">次のコード例は、のインスタンスにイベントを追加する方法を示します、<ph id="ph1">`ExpandoObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Passing As a Parameter</source>
          <target state="translated">パラメーターとして渡します</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>You can pass instances of the <ph id="ph1">`ExpandoObject`</ph> class as parameters.</source>
          <target state="translated">インスタンスを渡すことができます、<ph id="ph1">`ExpandoObject`</ph>パラメーターとしてクラスです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Note that these instances are treated as dynamic objects in C# and late-bound objects in Visual Basic.</source>
          <target state="translated">これらのインスタンスが動的オブジェクトで c# および Visual Basic で遅延バインディング オブジェクトとして扱われることに注意してください。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This means that you do not have IntelliSense for object members and you do not receive compiler errors when you call non-existent members.</source>
          <target state="translated">つまり、オブジェクトのメンバー、IntelliSense はありません、および、存在しないメンバーを呼び出すとコンパイラ エラーは表示されません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you call a member that does not exist, an exception occurs.</source>
          <target state="translated">存在しないメンバーを呼び出すと、例外が発生します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how you can create and use a method to print the names and values of properties.</source>
          <target state="translated">次のコード例は、作成および名前とプロパティの値を印刷する方法を使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Enumerating and Deleting Members</source>
          <target state="translated">列挙およびメンバーの削除</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interface.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> クラスは、<ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> インターフェイスを実装します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This enables enumeration of members added to the instance of the <ph id="ph1">`ExpandoObject`</ph> class at run time.</source>
          <target state="translated">これによりのインスタンスに追加されたメンバーの列挙体、<ph id="ph1">`ExpandoObject`</ph>実行時にクラスです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This can be useful if you do not know at compile time what members an instance might have.</source>
          <target state="translated">わからない場合コンパイル時にどのようなメンバーのインスタンスがある場合に役立ちます。 これができます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example shows how you can cast an instance of the <ph id="ph1">`ExpandoObject`</ph> class to the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface and enumerate the instance's members.</source>
          <target state="translated">次のコード例は、のインスタンスをキャストする方法を示します、<ph id="ph1">`ExpandoObject`</ph>クラスを<ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>インターフェイスし、インスタンスのメンバーを列挙します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In languages that do not have syntax for deleting members (such as C# and Visual Basic), you can delete a member by implicitly casting an instance of the <ph id="ph1">`ExpandoObject`</ph> to the <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interface and then deleting the member as a key/value pair.</source>
          <target state="translated">インスタンスを暗黙的にキャストするメンバーを削除する (c# および Visual Basic) などのメンバーを削除するための構文がない言語で、<ph id="ph1">`ExpandoObject`</ph>を<ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph>インターフェイスと、キー/値ペアとしてメンバーを削除します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This is shown in the following example.</source>
          <target state="translated">これを次の例に示します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Receiving Notifications of Property Changes</source>
          <target state="translated">プロパティの変更の通知を受け取る</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface and can raise a <ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph> event when a member is added, deleted, or modified.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph>クラスが実装する、<ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>インターフェイスし、発生する、<ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph>メンバーの追加、削除、または変更したときにイベント。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This enables <ph id="ph1">`ExpandoObject`</ph> class integration with Windows Presentation Foundation (WPF) data binding and other environments that require notification about changes in the object content.</source>
          <target state="translated">これにより、<ph id="ph1">`ExpandoObject`</ph>クラスのデータ バインディングの Windows Presentation Foundation (WPF) およびオブジェクトのコンテンツの変更に関する通知を必要とするその他の環境との統合。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to create an event handler for the <ph id="ph1">`PropertyChanged`</ph> event.</source>
          <target state="translated">次のコード例は、イベント ハンドラーを作成する方法を示します、<ph id="ph1">`PropertyChanged`</ph>イベント。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.#ctor">
          <source>Initializes a new <ph id="ph1">&lt;see langword="ExpandoObject" /&gt;</ph> that does not have members.</source>
          <target state="translated">メンバーを持たない新しい <ph id="ph1">&lt;see langword="ExpandoObject" /&gt;</ph> を初期化します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">コレクションを反復処理するために使用できる <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.</source>
          <target state="translated">動的仮想メソッドにディスパッチされる MetaObject を表す式。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The provided MetaObject will dispatch to the dynamic virtual methods.</source>
          <target state="translated">指定された MetaObject は動的仮想メソッドにディスパッチされます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.</source>
          <target state="translated">このオブジェクトを別の MetaObject の内部にカプセル化することにより、個々のアクションのカスタム動作を指定することができます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object of the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> 型のオブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>